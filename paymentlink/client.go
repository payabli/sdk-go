// Code generated by Fern. DO NOT EDIT.

package paymentlink

import (
	context "context"
	sdkgo "github.com/payabli/sdk-go"
	core "github.com/payabli/sdk-go/core"
	internal "github.com/payabli/sdk-go/internal"
	option "github.com/payabli/sdk-go/option"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Generates a payment link for an invoice from the invoice ID.
func (c *Client) AddPayLinkFromInvoice(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	request *sdkgo.PayLinkDataInvoice,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponsePaymentLinks, error) {
	response, err := c.WithRawResponse.AddPayLinkFromInvoice(
		ctx,
		idInvoice,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Generates a payment link for a bill from the bill ID.
func (c *Client) AddPayLinkFromBill(
	ctx context.Context,
	// The Payabli ID for the bill.
	billId int,
	request *sdkgo.PayLinkDataBill,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponsePaymentLinks, error) {
	response, err := c.WithRawResponse.AddPayLinkFromBill(
		ctx,
		billId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes a payment link by ID.
func (c *Client) DeletePayLinkFromId(
	ctx context.Context,
	// ID for the payment link.
	payLinkId string,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponsePaymentLinks, error) {
	response, err := c.WithRawResponse.DeletePayLinkFromId(
		ctx,
		payLinkId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a payment link by ID.
func (c *Client) GetPayLinkFromId(
	ctx context.Context,
	// ID for payment link
	paylinkId string,
	opts ...option.RequestOption,
) (*sdkgo.GetPayLinkFromIdResponse, error) {
	response, err := c.WithRawResponse.GetPayLinkFromId(
		ctx,
		paylinkId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Send a payment link to the specified email addresses or phone numbers.
func (c *Client) PushPayLinkFromId(
	ctx context.Context,
	// ID for the payment link.
	payLinkId string,
	request *sdkgo.PushPayLinkRequest,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponsePaymentLinks, error) {
	response, err := c.WithRawResponse.PushPayLinkFromId(
		ctx,
		payLinkId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Refresh a payment link's content after an update.
func (c *Client) RefreshPayLinkFromId(
	ctx context.Context,
	// ID for the payment link.
	payLinkId string,
	request *sdkgo.RefreshPayLinkFromIdRequest,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponsePaymentLinks, error) {
	response, err := c.WithRawResponse.RefreshPayLinkFromId(
		ctx,
		payLinkId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Sends a payment link to the specified email addresses.
func (c *Client) SendPayLinkFromId(
	ctx context.Context,
	// ID for the payment link.
	payLinkId string,
	request *sdkgo.SendPayLinkFromIdRequest,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponsePaymentLinks, error) {
	response, err := c.WithRawResponse.SendPayLinkFromId(
		ctx,
		payLinkId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates a payment link's details.
func (c *Client) UpdatePayLinkFromId(
	ctx context.Context,
	// ID for the payment link.
	payLinkId string,
	request *sdkgo.PayLinkUpdateData,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponsePaymentLinks, error) {
	response, err := c.WithRawResponse.UpdatePayLinkFromId(
		ctx,
		payLinkId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Generates a vendor payment link for a specific bill lot number. This allows you to pay all bills with the same lot number for a vendor with a single payment link.
func (c *Client) AddPayLinkFromBillLotNumber(
	ctx context.Context,
	// Lot number of the bills to pay. All bills with this lot number will be included.
	lotNumber string,
	request *sdkgo.PayLinkDataOut,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponsePaymentLinks, error) {
	response, err := c.WithRawResponse.AddPayLinkFromBillLotNumber(
		ctx,
		lotNumber,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
