// Code generated by Fern. DO NOT EDIT.

package notification

import (
	context "context"
	sdkgo "github.com/payabli/sdk-go"
	core "github.com/payabli/sdk-go/core"
	internal "github.com/payabli/sdk-go/internal"
	option "github.com/payabli/sdk-go/option"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Create a new notification or autogenerated report.
func (c *Client) AddNotification(
	ctx context.Context,
	request *sdkgo.AddNotificationRequest,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponseNotifications, error) {
	response, err := c.WithRawResponse.AddNotification(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes a single notification or autogenerated report.
func (c *Client) DeleteNotification(
	ctx context.Context,
	// Notification ID.
	nId string,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponseNotifications, error) {
	response, err := c.WithRawResponse.DeleteNotification(
		ctx,
		nId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a single notification or autogenerated report's details.
func (c *Client) GetNotification(
	ctx context.Context,
	// Notification ID.
	nId string,
	opts ...option.RequestOption,
) (*sdkgo.NotificationQueryRecord, error) {
	response, err := c.WithRawResponse.GetNotification(
		ctx,
		nId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Update a notification or autogenerated report.
func (c *Client) UpdateNotification(
	ctx context.Context,
	// Notification ID.
	nId string,
	request *sdkgo.UpdateNotificationRequest,
	opts ...option.RequestOption,
) (*sdkgo.PayabliApiResponseNotifications, error) {
	response, err := c.WithRawResponse.UpdateNotification(
		ctx,
		nId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Gets a copy of a generated report by ID.
func (c *Client) GetReportFile(
	ctx context.Context,
	// Report ID
	id int64,
	opts ...option.RequestOption,
) (sdkgo.File, error) {
	response, err := c.WithRawResponse.GetReportFile(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
