// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	time "time"
)

type BatchDetailResponseRecord struct {
	Id                       int                        `json:"Id" url:"Id"`
	Method                   string                     `json:"Method" url:"Method"`
	WalletType               *string                    `json:"WalletType,omitempty" url:"WalletType,omitempty"`
	SettledAmount            float64                    `json:"SettledAmount" url:"SettledAmount"`
	Type                     string                     `json:"Type" url:"Type"`
	BatchNumber              BatchNumber                `json:"BatchNumber" url:"BatchNumber"`
	BatchAmount              float64                    `json:"BatchAmount" url:"BatchAmount"`
	PaymentTransId           string                     `json:"PaymentTransId" url:"PaymentTransId"`
	PaymentTransStatus       int                        `json:"PaymentTransStatus" url:"PaymentTransStatus"`
	ScheduleReference        int                        `json:"ScheduleReference" url:"ScheduleReference"`
	GatewayTransId           string                     `json:"GatewayTransId" url:"GatewayTransId"`
	OrderId                  OrderId                    `json:"OrderId" url:"OrderId"`
	TransMethod              string                     `json:"TransMethod" url:"TransMethod"`
	PaymentData              *QueryPaymentData          `json:"PaymentData,omitempty" url:"PaymentData,omitempty"`
	NetAmount                Netamountnullable          `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	Operation                Operation                  `json:"Operation" url:"Operation"`
	Category                 Category                   `json:"Category" url:"Category"`
	Source                   *Source                    `json:"Source,omitempty" url:"Source,omitempty"`
	Status                   int                        `json:"Status" url:"Status"`
	TransactionTime          TransactionTime            `json:"TransactionTime" url:"TransactionTime"`
	Customer                 *QueryTransactionPayorData `json:"Customer,omitempty" url:"Customer,omitempty"`
	SettlementDate           time.Time                  `json:"SettlementDate" url:"SettlementDate"`
	PaymentSettlementStatus  int                        `json:"PaymentSettlementStatus" url:"PaymentSettlementStatus"`
	BatchStatus              int                        `json:"BatchStatus" url:"BatchStatus"`
	DepositDate              DepositDate                `json:"DepositDate" url:"DepositDate"`
	ExpectedDepositDate      ExpectedDepositDate        `json:"ExpectedDepositDate" url:"ExpectedDepositDate"`
	MaskedAccount            Maskedaccount              `json:"MaskedAccount" url:"MaskedAccount"`
	CreatedAt                CreatedAt                  `json:"CreatedAt" url:"CreatedAt"`
	PaypointLegalname        Legalname                  `json:"PaypointLegalname" url:"PaypointLegalname"`
	ResponseData             *QueryResponseData         `json:"ResponseData,omitempty" url:"ResponseData,omitempty"`
	PaypointDbaname          Dbaname                    `json:"PaypointDbaname" url:"PaypointDbaname"`
	ParentOrgName            OrgParentName              `json:"ParentOrgName" url:"ParentOrgName"`
	ParentOrgId              int                        `json:"ParentOrgId" url:"ParentOrgId"`
	PaypointEntryname        Entrypointfield            `json:"PaypointEntryname" url:"PaypointEntryname"`
	DeviceId                 *Device                    `json:"DeviceId,omitempty" url:"DeviceId,omitempty"`
	RetrievalId              RetrievalId                `json:"RetrievalId" url:"RetrievalId"`
	ChargebackId             ChargebackId               `json:"ChargebackId" url:"ChargebackId"`
	AchHolderType            AchHolderType              `json:"AchHolderType" url:"AchHolderType"`
	AchSecCode               AchSecCode                 `json:"AchSecCode" url:"AchSecCode"`
	ConnectorName            string                     `json:"ConnectorName" url:"ConnectorName"`
	EntrypageId              EntrypageId                `json:"EntrypageId" url:"EntrypageId"`
	FeeAmount                FeeAmount                  `json:"FeeAmount" url:"FeeAmount"`
	OrgId                    Orgid                      `json:"OrgId" url:"OrgId"`
	PayorId                  PayorId                    `json:"PayorId" url:"PayorId"`
	PaypointId               PaypointId                 `json:"PaypointId" url:"PaypointId"`
	PendingFeeAmount         PendingFeeAmount           `json:"PendingFeeAmount,omitempty" url:"PendingFeeAmount,omitempty"`
	RefundId                 RefundId                   `json:"RefundId" url:"RefundId"`
	ReturnedId               ReturnedId                 `json:"ReturnedId" url:"ReturnedId"`
	SplitFundingInstructions SplitFunding               `json:"splitFundingInstructions,omitempty" url:"splitFundingInstructions,omitempty"`
	TotalAmount              float64                    `json:"TotalAmount" url:"TotalAmount"`
	CfeeTransactions         []*QueryCFeeTransaction    `json:"CfeeTransactions" url:"CfeeTransactions"`
	InvoiceData              *BillData                  `json:"invoiceData,omitempty" url:"invoiceData,omitempty"`
	TransactionEvents        []*QueryTransactionEvents  `json:"TransactionEvents" url:"TransactionEvents"`
	ExternalPaypointId       ExternalPaypointId         `json:"externalPaypointID" url:"externalPaypointID"`
	IsHold                   int                        `json:"isHold" url:"isHold"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchDetailResponseRecord) GetId() int {
	if b == nil {
		return 0
	}
	return b.Id
}

func (b *BatchDetailResponseRecord) GetMethod() string {
	if b == nil {
		return ""
	}
	return b.Method
}

func (b *BatchDetailResponseRecord) GetWalletType() *string {
	if b == nil {
		return nil
	}
	return b.WalletType
}

func (b *BatchDetailResponseRecord) GetSettledAmount() float64 {
	if b == nil {
		return 0
	}
	return b.SettledAmount
}

func (b *BatchDetailResponseRecord) GetType() string {
	if b == nil {
		return ""
	}
	return b.Type
}

func (b *BatchDetailResponseRecord) GetBatchNumber() BatchNumber {
	if b == nil {
		return ""
	}
	return b.BatchNumber
}

func (b *BatchDetailResponseRecord) GetBatchAmount() float64 {
	if b == nil {
		return 0
	}
	return b.BatchAmount
}

func (b *BatchDetailResponseRecord) GetPaymentTransId() string {
	if b == nil {
		return ""
	}
	return b.PaymentTransId
}

func (b *BatchDetailResponseRecord) GetPaymentTransStatus() int {
	if b == nil {
		return 0
	}
	return b.PaymentTransStatus
}

func (b *BatchDetailResponseRecord) GetScheduleReference() int {
	if b == nil {
		return 0
	}
	return b.ScheduleReference
}

func (b *BatchDetailResponseRecord) GetGatewayTransId() string {
	if b == nil {
		return ""
	}
	return b.GatewayTransId
}

func (b *BatchDetailResponseRecord) GetOrderId() OrderId {
	if b == nil {
		return ""
	}
	return b.OrderId
}

func (b *BatchDetailResponseRecord) GetTransMethod() string {
	if b == nil {
		return ""
	}
	return b.TransMethod
}

func (b *BatchDetailResponseRecord) GetPaymentData() *QueryPaymentData {
	if b == nil {
		return nil
	}
	return b.PaymentData
}

func (b *BatchDetailResponseRecord) GetNetAmount() Netamountnullable {
	if b == nil {
		return nil
	}
	return b.NetAmount
}

func (b *BatchDetailResponseRecord) GetOperation() Operation {
	if b == nil {
		return ""
	}
	return b.Operation
}

func (b *BatchDetailResponseRecord) GetCategory() Category {
	if b == nil {
		return ""
	}
	return b.Category
}

func (b *BatchDetailResponseRecord) GetSource() *Source {
	if b == nil {
		return nil
	}
	return b.Source
}

func (b *BatchDetailResponseRecord) GetStatus() int {
	if b == nil {
		return 0
	}
	return b.Status
}

func (b *BatchDetailResponseRecord) GetTransactionTime() TransactionTime {
	if b == nil {
		return time.Time{}
	}
	return b.TransactionTime
}

func (b *BatchDetailResponseRecord) GetCustomer() *QueryTransactionPayorData {
	if b == nil {
		return nil
	}
	return b.Customer
}

func (b *BatchDetailResponseRecord) GetSettlementDate() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.SettlementDate
}

func (b *BatchDetailResponseRecord) GetPaymentSettlementStatus() int {
	if b == nil {
		return 0
	}
	return b.PaymentSettlementStatus
}

func (b *BatchDetailResponseRecord) GetBatchStatus() int {
	if b == nil {
		return 0
	}
	return b.BatchStatus
}

func (b *BatchDetailResponseRecord) GetDepositDate() DepositDate {
	if b == nil {
		return time.Time{}
	}
	return b.DepositDate
}

func (b *BatchDetailResponseRecord) GetExpectedDepositDate() ExpectedDepositDate {
	if b == nil {
		return time.Time{}
	}
	return b.ExpectedDepositDate
}

func (b *BatchDetailResponseRecord) GetMaskedAccount() Maskedaccount {
	if b == nil {
		return ""
	}
	return b.MaskedAccount
}

func (b *BatchDetailResponseRecord) GetCreatedAt() CreatedAt {
	if b == nil {
		return time.Time{}
	}
	return b.CreatedAt
}

func (b *BatchDetailResponseRecord) GetPaypointLegalname() Legalname {
	if b == nil {
		return ""
	}
	return b.PaypointLegalname
}

func (b *BatchDetailResponseRecord) GetResponseData() *QueryResponseData {
	if b == nil {
		return nil
	}
	return b.ResponseData
}

func (b *BatchDetailResponseRecord) GetPaypointDbaname() Dbaname {
	if b == nil {
		return ""
	}
	return b.PaypointDbaname
}

func (b *BatchDetailResponseRecord) GetParentOrgName() OrgParentName {
	if b == nil {
		return ""
	}
	return b.ParentOrgName
}

func (b *BatchDetailResponseRecord) GetParentOrgId() int {
	if b == nil {
		return 0
	}
	return b.ParentOrgId
}

func (b *BatchDetailResponseRecord) GetPaypointEntryname() Entrypointfield {
	if b == nil {
		return ""
	}
	return b.PaypointEntryname
}

func (b *BatchDetailResponseRecord) GetDeviceId() *Device {
	if b == nil {
		return nil
	}
	return b.DeviceId
}

func (b *BatchDetailResponseRecord) GetRetrievalId() RetrievalId {
	if b == nil {
		return 0
	}
	return b.RetrievalId
}

func (b *BatchDetailResponseRecord) GetChargebackId() ChargebackId {
	if b == nil {
		return 0
	}
	return b.ChargebackId
}

func (b *BatchDetailResponseRecord) GetAchHolderType() AchHolderType {
	if b == nil {
		return ""
	}
	return b.AchHolderType
}

func (b *BatchDetailResponseRecord) GetAchSecCode() AchSecCode {
	if b == nil {
		return ""
	}
	return b.AchSecCode
}

func (b *BatchDetailResponseRecord) GetConnectorName() string {
	if b == nil {
		return ""
	}
	return b.ConnectorName
}

func (b *BatchDetailResponseRecord) GetEntrypageId() EntrypageId {
	if b == nil {
		return 0
	}
	return b.EntrypageId
}

func (b *BatchDetailResponseRecord) GetFeeAmount() FeeAmount {
	if b == nil {
		return 0
	}
	return b.FeeAmount
}

func (b *BatchDetailResponseRecord) GetOrgId() Orgid {
	if b == nil {
		return 0
	}
	return b.OrgId
}

func (b *BatchDetailResponseRecord) GetPayorId() PayorId {
	if b == nil {
		return 0
	}
	return b.PayorId
}

func (b *BatchDetailResponseRecord) GetPaypointId() PaypointId {
	if b == nil {
		return 0
	}
	return b.PaypointId
}

func (b *BatchDetailResponseRecord) GetPendingFeeAmount() PendingFeeAmount {
	if b == nil {
		return nil
	}
	return b.PendingFeeAmount
}

func (b *BatchDetailResponseRecord) GetRefundId() RefundId {
	if b == nil {
		return 0
	}
	return b.RefundId
}

func (b *BatchDetailResponseRecord) GetReturnedId() ReturnedId {
	if b == nil {
		return 0
	}
	return b.ReturnedId
}

func (b *BatchDetailResponseRecord) GetSplitFundingInstructions() SplitFunding {
	if b == nil {
		return nil
	}
	return b.SplitFundingInstructions
}

func (b *BatchDetailResponseRecord) GetTotalAmount() float64 {
	if b == nil {
		return 0
	}
	return b.TotalAmount
}

func (b *BatchDetailResponseRecord) GetCfeeTransactions() []*QueryCFeeTransaction {
	if b == nil {
		return nil
	}
	return b.CfeeTransactions
}

func (b *BatchDetailResponseRecord) GetInvoiceData() *BillData {
	if b == nil {
		return nil
	}
	return b.InvoiceData
}

func (b *BatchDetailResponseRecord) GetTransactionEvents() []*QueryTransactionEvents {
	if b == nil {
		return nil
	}
	return b.TransactionEvents
}

func (b *BatchDetailResponseRecord) GetExternalPaypointId() ExternalPaypointId {
	if b == nil {
		return ""
	}
	return b.ExternalPaypointId
}

func (b *BatchDetailResponseRecord) GetIsHold() int {
	if b == nil {
		return 0
	}
	return b.IsHold
}

func (b *BatchDetailResponseRecord) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchDetailResponseRecord) UnmarshalJSON(data []byte) error {
	type embed BatchDetailResponseRecord
	var unmarshaler = struct {
		embed
		SettlementDate *internal.DateTime `json:"SettlementDate"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BatchDetailResponseRecord(unmarshaler.embed)
	b.SettlementDate = unmarshaler.SettlementDate.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchDetailResponseRecord) MarshalJSON() ([]byte, error) {
	type embed BatchDetailResponseRecord
	var marshaler = struct {
		embed
		SettlementDate *internal.DateTime `json:"SettlementDate"`
	}{
		embed:          embed(*b),
		SettlementDate: internal.NewDateTime(b.SettlementDate),
	}
	return json.Marshal(marshaler)
}

func (b *BatchDetailResponseRecord) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchDetailResponseSummary struct {
	ServiceFees    float64         `json:"serviceFees" url:"serviceFees"`
	TransferAmount float64         `json:"transferAmount" url:"transferAmount"`
	Refunds        float64         `json:"refunds" url:"refunds"`
	HeldAmount     float64         `json:"heldAmount" url:"heldAmount"`
	TotalRecords   Totalrecords    `json:"totalRecords" url:"totalRecords"`
	TotalAmount    float64         `json:"totalAmount" url:"totalAmount"`
	TotalNetAmount float64         `json:"totalNetAmount" url:"totalNetAmount"`
	TotalPages     Totalpages      `json:"totalPages" url:"totalPages"`
	PageSize       Pagesize        `json:"pageSize" url:"pageSize"`
	Pageidentifier *PageIdentifier `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchDetailResponseSummary) GetServiceFees() float64 {
	if b == nil {
		return 0
	}
	return b.ServiceFees
}

func (b *BatchDetailResponseSummary) GetTransferAmount() float64 {
	if b == nil {
		return 0
	}
	return b.TransferAmount
}

func (b *BatchDetailResponseSummary) GetRefunds() float64 {
	if b == nil {
		return 0
	}
	return b.Refunds
}

func (b *BatchDetailResponseSummary) GetHeldAmount() float64 {
	if b == nil {
		return 0
	}
	return b.HeldAmount
}

func (b *BatchDetailResponseSummary) GetTotalRecords() Totalrecords {
	if b == nil {
		return 0
	}
	return b.TotalRecords
}

func (b *BatchDetailResponseSummary) GetTotalAmount() float64 {
	if b == nil {
		return 0
	}
	return b.TotalAmount
}

func (b *BatchDetailResponseSummary) GetTotalNetAmount() float64 {
	if b == nil {
		return 0
	}
	return b.TotalNetAmount
}

func (b *BatchDetailResponseSummary) GetTotalPages() Totalpages {
	if b == nil {
		return 0
	}
	return b.TotalPages
}

func (b *BatchDetailResponseSummary) GetPageSize() Pagesize {
	if b == nil {
		return 0
	}
	return b.PageSize
}

func (b *BatchDetailResponseSummary) GetPageidentifier() *PageIdentifier {
	if b == nil {
		return nil
	}
	return b.Pageidentifier
}

func (b *BatchDetailResponseSummary) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchDetailResponseSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchDetailResponseSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchDetailResponseSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchDetailResponseSummary) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type ListOrganizationsResponse struct {
	Records []*OrganizationQueryRecord `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary              `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListOrganizationsResponse) GetRecords() []*OrganizationQueryRecord {
	if l == nil {
		return nil
	}
	return l.Records
}

func (l *ListOrganizationsResponse) GetSummary() *QuerySummary {
	if l == nil {
		return nil
	}
	return l.Summary
}

func (l *ListOrganizationsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListOrganizationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListOrganizationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListOrganizationsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOrganizationsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Response body for queries about batch details.
type QueryBatchesDetailResponse struct {
	Records []*BatchDetailResponseRecord `json:"Records" url:"Records"`
	Summary *BatchDetailResponseSummary  `json:"Summary" url:"Summary"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBatchesDetailResponse) GetRecords() []*BatchDetailResponseRecord {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryBatchesDetailResponse) GetSummary() *BatchDetailResponseSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryBatchesDetailResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBatchesDetailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryBatchesDetailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryBatchesDetailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBatchesDetailResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Response body for queries about batches.
type QueryBatchesResponse struct {
	Records []*QueryBatchesResponseRecordsItem `json:"Records" url:"Records"`
	Summary *BatchSummary                      `json:"Summary" url:"Summary"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBatchesResponse) GetRecords() []*QueryBatchesResponseRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryBatchesResponse) GetSummary() *BatchSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryBatchesResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBatchesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryBatchesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryBatchesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBatchesResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryBatchesResponseRecordsItem struct {
	// The batch ID.
	IdBatch            *int                `json:"IdBatch,omitempty" url:"IdBatch,omitempty"`
	BatchNumber        *BatchNumber        `json:"BatchNumber,omitempty" url:"BatchNumber,omitempty"`
	TransferIdentifier *TransferIdentifier `json:"TransferIdentifier,omitempty" url:"TransferIdentifier,omitempty"`
	// Events associated with the batch.
	EventsData    []*GeneralEvents `json:"EventsData,omitempty" url:"EventsData,omitempty"`
	ConnectorName *string          `json:"ConnectorName,omitempty" url:"ConnectorName,omitempty"`
	// The batch date.
	BatchDate *time.Time `json:"BatchDate,omitempty" url:"BatchDate,omitempty"`
	// The amount of the batch.
	BatchAmount *float64 `json:"BatchAmount,omitempty" url:"BatchAmount,omitempty"`
	// The total of fees in the batch.
	BatchFeesAmount *float64 `json:"BatchFeesAmount,omitempty" url:"BatchFeesAmount,omitempty"`
	BatchAuthAmount *float64 `json:"BatchAuthAmount,omitempty" url:"BatchAuthAmount,omitempty"`
	// Previously held funds that have been released after a risk review.
	BatchReleasedAmount *float64 `json:"BatchReleasedAmount,omitempty" url:"BatchReleasedAmount,omitempty"`
	// The total amount of the batch that's being held for fraud or risk concerns.
	BatchHoldAmount *float64 `json:"BatchHoldAmount,omitempty" url:"BatchHoldAmount,omitempty"`
	// Total amount of ACH returns deducted from batch.
	BatchReturnedAmount *float64 `json:"BatchReturnedAmount,omitempty" url:"BatchReturnedAmount,omitempty"`
	// The total amount of refunds deducted from batch.
	BatchRefundAmount *float64 `json:"BatchRefundAmount,omitempty" url:"BatchRefundAmount,omitempty"`
	// Total of split transactions that included split funding instructions at the time of authorization.
	BatchSplitAmount *float64 `json:"BatchSplitAmount,omitempty" url:"BatchSplitAmount,omitempty"`
	// The batch status. See [Batch Status](/developers/references/money-in-statuses#batch-status) for more.
	BatchStatus int `json:"BatchStatus" url:"BatchStatus"`
	// The number of records in the batch.
	BatchRecords int           `json:"BatchRecords" url:"BatchRecords"`
	PaypointId   *PaypointId   `json:"PaypointId,omitempty" url:"PaypointId,omitempty"`
	PaypointName *PaypointName `json:"PaypointName,omitempty" url:"PaypointName,omitempty"`
	PaypointDba  *Dbaname      `json:"PaypointDba,omitempty" url:"PaypointDba,omitempty"`
	// The entrypoint's parent org.
	ParentOrgName OrgParentName `json:"ParentOrgName" url:"ParentOrgName"`
	// The parent organization ID.
	ParentOrgId        int                 `json:"ParentOrgId" url:"ParentOrgId"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	EntryName          Entrypointfield     `json:"EntryName" url:"EntryName"`
	// The bank name.
	BankName *string `json:"BankName,omitempty" url:"BankName,omitempty"`
	// The batch type.
	BatchType *int `json:"BatchType,omitempty" url:"BatchType,omitempty"`
	// The payment method used.
	Method              *string              `json:"Method,omitempty" url:"Method,omitempty"`
	ExpectedDepositDate *ExpectedDepositDate `json:"ExpectedDepositDate,omitempty" url:"ExpectedDepositDate,omitempty"`
	DepositDate         *DepositDate         `json:"DepositDate,omitempty" url:"DepositDate,omitempty"`
	// The batch transfer date.
	TransferDate *time.Time `json:"TransferDate,omitempty" url:"TransferDate,omitempty"`
	// Transfer details for the batch.
	Transfer *QueryBatchesTransfer `json:"Transfer,omitempty" url:"Transfer,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBatchesResponseRecordsItem) GetIdBatch() *int {
	if q == nil {
		return nil
	}
	return q.IdBatch
}

func (q *QueryBatchesResponseRecordsItem) GetBatchNumber() *BatchNumber {
	if q == nil {
		return nil
	}
	return q.BatchNumber
}

func (q *QueryBatchesResponseRecordsItem) GetTransferIdentifier() *TransferIdentifier {
	if q == nil {
		return nil
	}
	return q.TransferIdentifier
}

func (q *QueryBatchesResponseRecordsItem) GetEventsData() []*GeneralEvents {
	if q == nil {
		return nil
	}
	return q.EventsData
}

func (q *QueryBatchesResponseRecordsItem) GetConnectorName() *string {
	if q == nil {
		return nil
	}
	return q.ConnectorName
}

func (q *QueryBatchesResponseRecordsItem) GetBatchDate() *time.Time {
	if q == nil {
		return nil
	}
	return q.BatchDate
}

func (q *QueryBatchesResponseRecordsItem) GetBatchAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchFeesAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchFeesAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchAuthAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchAuthAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchReleasedAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchReleasedAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchHoldAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchHoldAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchReturnedAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchReturnedAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchRefundAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchRefundAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchSplitAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchSplitAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchStatus() int {
	if q == nil {
		return 0
	}
	return q.BatchStatus
}

func (q *QueryBatchesResponseRecordsItem) GetBatchRecords() int {
	if q == nil {
		return 0
	}
	return q.BatchRecords
}

func (q *QueryBatchesResponseRecordsItem) GetPaypointId() *PaypointId {
	if q == nil {
		return nil
	}
	return q.PaypointId
}

func (q *QueryBatchesResponseRecordsItem) GetPaypointName() *PaypointName {
	if q == nil {
		return nil
	}
	return q.PaypointName
}

func (q *QueryBatchesResponseRecordsItem) GetPaypointDba() *Dbaname {
	if q == nil {
		return nil
	}
	return q.PaypointDba
}

func (q *QueryBatchesResponseRecordsItem) GetParentOrgName() OrgParentName {
	if q == nil {
		return ""
	}
	return q.ParentOrgName
}

func (q *QueryBatchesResponseRecordsItem) GetParentOrgId() int {
	if q == nil {
		return 0
	}
	return q.ParentOrgId
}

func (q *QueryBatchesResponseRecordsItem) GetExternalPaypointId() *ExternalPaypointId {
	if q == nil {
		return nil
	}
	return q.ExternalPaypointId
}

func (q *QueryBatchesResponseRecordsItem) GetEntryName() Entrypointfield {
	if q == nil {
		return ""
	}
	return q.EntryName
}

func (q *QueryBatchesResponseRecordsItem) GetBankName() *string {
	if q == nil {
		return nil
	}
	return q.BankName
}

func (q *QueryBatchesResponseRecordsItem) GetBatchType() *int {
	if q == nil {
		return nil
	}
	return q.BatchType
}

func (q *QueryBatchesResponseRecordsItem) GetMethod() *string {
	if q == nil {
		return nil
	}
	return q.Method
}

func (q *QueryBatchesResponseRecordsItem) GetExpectedDepositDate() *ExpectedDepositDate {
	if q == nil {
		return nil
	}
	return q.ExpectedDepositDate
}

func (q *QueryBatchesResponseRecordsItem) GetDepositDate() *DepositDate {
	if q == nil {
		return nil
	}
	return q.DepositDate
}

func (q *QueryBatchesResponseRecordsItem) GetTransferDate() *time.Time {
	if q == nil {
		return nil
	}
	return q.TransferDate
}

func (q *QueryBatchesResponseRecordsItem) GetTransfer() *QueryBatchesTransfer {
	if q == nil {
		return nil
	}
	return q.Transfer
}

func (q *QueryBatchesResponseRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBatchesResponseRecordsItem) UnmarshalJSON(data []byte) error {
	type embed QueryBatchesResponseRecordsItem
	var unmarshaler = struct {
		embed
		BatchDate    *internal.DateTime `json:"BatchDate,omitempty"`
		TransferDate *internal.DateTime `json:"TransferDate,omitempty"`
	}{
		embed: embed(*q),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*q = QueryBatchesResponseRecordsItem(unmarshaler.embed)
	q.BatchDate = unmarshaler.BatchDate.TimePtr()
	q.TransferDate = unmarshaler.TransferDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBatchesResponseRecordsItem) MarshalJSON() ([]byte, error) {
	type embed QueryBatchesResponseRecordsItem
	var marshaler = struct {
		embed
		BatchDate    *internal.DateTime `json:"BatchDate,omitempty"`
		TransferDate *internal.DateTime `json:"TransferDate,omitempty"`
	}{
		embed:        embed(*q),
		BatchDate:    internal.NewOptionalDateTime(q.BatchDate),
		TransferDate: internal.NewOptionalDateTime(q.TransferDate),
	}
	return json.Marshal(marshaler)
}

func (q *QueryBatchesResponseRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Transfer details within a batch response.
type QueryBatchesTransfer struct {
	// The transfer ID.
	TransferId *int `json:"TransferId,omitempty" url:"TransferId,omitempty"`
	// The transfer date.
	TransferDate *time.Time `json:"TransferDate,omitempty" url:"TransferDate,omitempty"`
	// The processor used for the transfer.
	Processor *string `json:"Processor,omitempty" url:"Processor,omitempty"`
	// The transfer status.
	TransferStatus *int `json:"TransferStatus,omitempty" url:"TransferStatus,omitempty"`
	// The gross amount of the transfer.
	GrossAmount *float64 `json:"GrossAmount,omitempty" url:"GrossAmount,omitempty"`
	// The chargeback amount.
	ChargeBackAmount *float64 `json:"ChargeBackAmount,omitempty" url:"ChargeBackAmount,omitempty"`
	// The returned amount.
	ReturnedAmount *float64 `json:"ReturnedAmount,omitempty" url:"ReturnedAmount,omitempty"`
	// The refund amount.
	RefundAmount *float64 `json:"RefundAmount,omitempty" url:"RefundAmount,omitempty"`
	// The amount being held.
	HoldAmount *float64 `json:"HoldAmount,omitempty" url:"HoldAmount,omitempty"`
	// The amount that has been released.
	ReleasedAmount *float64 `json:"ReleasedAmount,omitempty" url:"ReleasedAmount,omitempty"`
	// The billing fees amount.
	BillingFeesAmount *float64 `json:"BillingFeesAmount,omitempty" url:"BillingFeesAmount,omitempty"`
	// The third party paid amount.
	ThirdPartyPaidAmount *float64 `json:"ThirdPartyPaidAmount,omitempty" url:"ThirdPartyPaidAmount,omitempty"`
	// The adjustments amount.
	AdjustmentsAmount *float64 `json:"AdjustmentsAmount,omitempty" url:"AdjustmentsAmount,omitempty"`
	// The net funded amount.
	NetFundedAmount *float64 `json:"NetFundedAmount,omitempty" url:"NetFundedAmount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBatchesTransfer) GetTransferId() *int {
	if q == nil {
		return nil
	}
	return q.TransferId
}

func (q *QueryBatchesTransfer) GetTransferDate() *time.Time {
	if q == nil {
		return nil
	}
	return q.TransferDate
}

func (q *QueryBatchesTransfer) GetProcessor() *string {
	if q == nil {
		return nil
	}
	return q.Processor
}

func (q *QueryBatchesTransfer) GetTransferStatus() *int {
	if q == nil {
		return nil
	}
	return q.TransferStatus
}

func (q *QueryBatchesTransfer) GetGrossAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.GrossAmount
}

func (q *QueryBatchesTransfer) GetChargeBackAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.ChargeBackAmount
}

func (q *QueryBatchesTransfer) GetReturnedAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.ReturnedAmount
}

func (q *QueryBatchesTransfer) GetRefundAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.RefundAmount
}

func (q *QueryBatchesTransfer) GetHoldAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.HoldAmount
}

func (q *QueryBatchesTransfer) GetReleasedAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.ReleasedAmount
}

func (q *QueryBatchesTransfer) GetBillingFeesAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BillingFeesAmount
}

func (q *QueryBatchesTransfer) GetThirdPartyPaidAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.ThirdPartyPaidAmount
}

func (q *QueryBatchesTransfer) GetAdjustmentsAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.AdjustmentsAmount
}

func (q *QueryBatchesTransfer) GetNetFundedAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.NetFundedAmount
}

func (q *QueryBatchesTransfer) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBatchesTransfer) UnmarshalJSON(data []byte) error {
	type embed QueryBatchesTransfer
	var unmarshaler = struct {
		embed
		TransferDate *internal.DateTime `json:"TransferDate,omitempty"`
	}{
		embed: embed(*q),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*q = QueryBatchesTransfer(unmarshaler.embed)
	q.TransferDate = unmarshaler.TransferDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBatchesTransfer) MarshalJSON() ([]byte, error) {
	type embed QueryBatchesTransfer
	var marshaler = struct {
		embed
		TransferDate *internal.DateTime `json:"TransferDate,omitempty"`
	}{
		embed:        embed(*q),
		TransferDate: internal.NewOptionalDateTime(q.TransferDate),
	}
	return json.Marshal(marshaler)
}

func (q *QueryBatchesTransfer) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryTransferDetailResponse struct {
	// List of transfer detail records
	Records []*TransferDetailRecord `json:"Records,omitempty" url:"Records,omitempty"`
	// Summary of the transfer details query
	Summary *QueryTransferSummary `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryTransferDetailResponse) GetRecords() []*TransferDetailRecord {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryTransferDetailResponse) GetSummary() *QueryTransferSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryTransferDetailResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryTransferDetailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryTransferDetailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryTransferDetailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryTransferDetailResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryTransferResponse struct {
	// Summary information about the transfers.
	Summary *QueryTransferSummary `json:"Summary,omitempty" url:"Summary,omitempty"`
	// List of transfer transaction records.
	Records []*TransactionQueryRecords `json:"Records,omitempty" url:"Records,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryTransferResponse) GetSummary() *QueryTransferSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryTransferResponse) GetRecords() []*TransactionQueryRecords {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryTransferResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryTransferResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryTransferResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryTransferResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryTransferResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryTransferSummary struct {
	// ACH returns deducted from the batch.
	AchReturns *float64 `json:"achReturns,omitempty" url:"achReturns,omitempty"`
	// Corrections applied to Billing & Fees charges.
	Adjustments *float64 `json:"adjustments,omitempty" url:"adjustments,omitempty"`
	// Charges applied for transactions and services.
	BillingFees *float64 `json:"billingFees,omitempty" url:"billingFees,omitempty"`
	// Chargebacks deducted from batch.
	Chargebacks *float64 `json:"chargebacks,omitempty" url:"chargebacks,omitempty"`
	// The gross batch amount before deductions.
	GrossTransferAmount *float64 `json:"grossTransferAmount,omitempty" url:"grossTransferAmount,omitempty"`
	// Previously held funds that have been released after a risk review.
	ReleaseAmount *float64 `json:"releaseAmount,omitempty" url:"releaseAmount,omitempty"`
	// Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.
	ThirdPartyPaid *float64 `json:"thirdPartyPaid,omitempty" url:"thirdPartyPaid,omitempty"`
	// The gross batch amount minus service fees.
	TotalNetAmountTransfer *float64 `json:"totalNetAmountTransfer,omitempty" url:"totalNetAmountTransfer,omitempty"`
	// Service fees are any pass-through fees charged to the customer at the time of payment.  These aren't transferred to the merchant when the batch is transferred and funded.
	ServiceFees *float64 `json:"serviceFees,omitempty" url:"serviceFees,omitempty"`
	// The transfer amount is the net batch amount plus or minus any returns, refunds,  billing and fees items, chargebacks, adjustments, and third party payments.  This is the amount from the batch that is transferred to the merchant bank account.
	TransferAmount *float64 `json:"transferAmount,omitempty" url:"transferAmount,omitempty"`
	// Refunds deducted from batch.
	Refunds *float64 `json:"refunds,omitempty" url:"refunds,omitempty"`
	// Funds being held for fraud or risk concerns.
	HeldAmount *float64 `json:"heldAmount,omitempty" url:"heldAmount,omitempty"`
	// Number of records in the response.
	TotalRecords *Totalrecords `json:"totalRecords,omitempty" url:"totalRecords,omitempty"`
	// The total sum of the transfers in the response.
	TotalAmount *float64 `json:"totalAmount,omitempty" url:"totalAmount,omitempty"`
	// The total sum of the transfers in the response.
	TotalNetAmount *float64 `json:"totalNetAmount,omitempty" url:"totalNetAmount,omitempty"`
	// Number of pages in the response.
	TotalPages *Totalpages `json:"totalPages,omitempty" url:"totalPages,omitempty"`
	// Number of records per page.
	PageSize *Pagesize `json:"pageSize,omitempty" url:"pageSize,omitempty"`
	// Auxiliary validation used internally by payment pages and components.
	Pageidentifier *PageIdentifier `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryTransferSummary) GetAchReturns() *float64 {
	if q == nil {
		return nil
	}
	return q.AchReturns
}

func (q *QueryTransferSummary) GetAdjustments() *float64 {
	if q == nil {
		return nil
	}
	return q.Adjustments
}

func (q *QueryTransferSummary) GetBillingFees() *float64 {
	if q == nil {
		return nil
	}
	return q.BillingFees
}

func (q *QueryTransferSummary) GetChargebacks() *float64 {
	if q == nil {
		return nil
	}
	return q.Chargebacks
}

func (q *QueryTransferSummary) GetGrossTransferAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.GrossTransferAmount
}

func (q *QueryTransferSummary) GetReleaseAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.ReleaseAmount
}

func (q *QueryTransferSummary) GetThirdPartyPaid() *float64 {
	if q == nil {
		return nil
	}
	return q.ThirdPartyPaid
}

func (q *QueryTransferSummary) GetTotalNetAmountTransfer() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalNetAmountTransfer
}

func (q *QueryTransferSummary) GetServiceFees() *float64 {
	if q == nil {
		return nil
	}
	return q.ServiceFees
}

func (q *QueryTransferSummary) GetTransferAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TransferAmount
}

func (q *QueryTransferSummary) GetRefunds() *float64 {
	if q == nil {
		return nil
	}
	return q.Refunds
}

func (q *QueryTransferSummary) GetHeldAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.HeldAmount
}

func (q *QueryTransferSummary) GetTotalRecords() *Totalrecords {
	if q == nil {
		return nil
	}
	return q.TotalRecords
}

func (q *QueryTransferSummary) GetTotalAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalAmount
}

func (q *QueryTransferSummary) GetTotalNetAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalNetAmount
}

func (q *QueryTransferSummary) GetTotalPages() *Totalpages {
	if q == nil {
		return nil
	}
	return q.TotalPages
}

func (q *QueryTransferSummary) GetPageSize() *Pagesize {
	if q == nil {
		return nil
	}
	return q.PageSize
}

func (q *QueryTransferSummary) GetPageidentifier() *PageIdentifier {
	if q == nil {
		return nil
	}
	return q.Pageidentifier
}

func (q *QueryTransferSummary) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryTransferSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryTransferSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryTransferSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryTransferSummary) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type TransferDetailRecord struct {
	// Unique identifier for the transfer detail record
	TransferDetailId *int `json:"transferDetailId,omitempty" url:"transferDetailId,omitempty"`
	// The ID of the transfer this detail belongs to
	TransferId *int `json:"transferId,omitempty" url:"transferId,omitempty"`
	// The transaction ID in Payabli's system
	TransactionId *string `json:"transactionId,omitempty" url:"transactionId,omitempty"`
	// External transaction reference number
	TransactionNumber *string `json:"transactionNumber,omitempty" url:"transactionNumber,omitempty"`
	// The transaction type (credit or debit)
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split
	Category *string `json:"category,omitempty" url:"category,omitempty"`
	// The gross amount of the transaction
	GrossAmount *float64 `json:"grossAmount,omitempty" url:"grossAmount,omitempty"`
	// Chargeback amount deducted from transaction
	ChargeBackAmount *float64 `json:"chargeBackAmount,omitempty" url:"chargeBackAmount,omitempty"`
	// ACH return amount deducted from transaction
	ReturnedAmount *float64 `json:"returnedAmount,omitempty" url:"returnedAmount,omitempty"`
	// Refund amount deducted from transaction
	RefundAmount *float64 `json:"refundAmount,omitempty" url:"refundAmount,omitempty"`
	// Amount being held for fraud or risk concerns
	HoldAmount *float64 `json:"holdAmount,omitempty" url:"holdAmount,omitempty"`
	// Previously held funds that have been released after a risk review
	ReleasedAmount *float64 `json:"releasedAmount,omitempty" url:"releasedAmount,omitempty"`
	// Charges applied for transactions and services
	BillingFeesAmount *float64 `json:"billingFeesAmount,omitempty" url:"billingFeesAmount,omitempty"`
	// Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.
	ThirdPartyPaidAmount *float64 `json:"thirdPartyPaidAmount,omitempty" url:"thirdPartyPaidAmount,omitempty"`
	// Corrections applied to Billing & Fees charges
	AdjustmentsAmount *float64 `json:"adjustmentsAmount,omitempty" url:"adjustmentsAmount,omitempty"`
	// The net amount after all deductions
	NetTransferAmount *float64 `json:"netTransferAmount,omitempty" url:"netTransferAmount,omitempty"`
	// Total amount directed to split funding destinations
	SplitFundingAmount *float64            `json:"splitFundingAmount,omitempty" url:"splitFundingAmount,omitempty"`
	BillingFeesDetails []*BillingFeeDetail `json:"billingFeesDetails,omitempty" url:"billingFeesDetails,omitempty"`
	ParentOrgName      *OrgParentName      `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	PaypointDbaname    *Dbaname            `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	PaypointLegalname  *Legalname          `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// The paypoint's entryname
	PaypointEntryname *string `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	// The transaction ID for the payment
	PaymentTransId *string `json:"PaymentTransId,omitempty" url:"PaymentTransId,omitempty"`
	// The payment connector used to process the transaction
	ConnectorName                *string                       `json:"ConnectorName,omitempty" url:"ConnectorName,omitempty"`
	ExternalProcessorInformation *ExternalProcessorInformation `json:"ExternalProcessorInformation,omitempty" url:"ExternalProcessorInformation,omitempty"`
	// Internal identifier used for processing
	GatewayTransId *string  `json:"GatewayTransId,omitempty" url:"GatewayTransId,omitempty"`
	OrderId        *OrderId `json:"OrderId,omitempty" url:"OrderId,omitempty"`
	// Payment method used: card, ach, or wallet
	Method      *string      `json:"Method,omitempty" url:"Method,omitempty"`
	BatchNumber *BatchNumber `json:"BatchNumber,omitempty" url:"BatchNumber,omitempty"`
	// The amount of the batch
	BatchAmount *float64 `json:"BatchAmount,omitempty" url:"BatchAmount,omitempty"`
	// Unique ID for customer linked to the transaction
	PayorId     *PayorId          `json:"PayorId,omitempty" url:"PayorId,omitempty"`
	PaymentData *QueryPaymentData `json:"PaymentData,omitempty" url:"PaymentData,omitempty"`
	// Status of transaction. See [the
	// docs](/developers/references/money-in-statuses#money-in-transaction-status) for a
	// full reference.
	TransStatus *int        `json:"TransStatus,omitempty" url:"TransStatus,omitempty"`
	PaypointId  *PaypointId `json:"PaypointId,omitempty" url:"PaypointId,omitempty"`
	// Transaction total amount (including service fee or sub-charge)
	TotalAmount *float64 `json:"TotalAmount,omitempty" url:"TotalAmount,omitempty"`
	// Net amount paid
	NetAmount *Netamountnullable `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	FeeAmount *FeeAmount         `json:"FeeAmount,omitempty" url:"FeeAmount,omitempty"`
	// Settlement status for transaction. See [the docs](/developers/references/money-in-statuses#payment-funding-status) for a full reference.
	SettlementStatus *int               `json:"SettlementStatus,omitempty" url:"SettlementStatus,omitempty"`
	Operation        *Operation         `json:"Operation,omitempty" url:"Operation,omitempty"`
	ResponseData     *QueryResponseData `json:"ResponseData,omitempty" url:"ResponseData,omitempty"`
	Source           *Source            `json:"Source,omitempty" url:"Source,omitempty"`
	// Reference to the subscription or schedule that originated the transaction
	ScheduleReference *int          `json:"ScheduleReference,omitempty" url:"ScheduleReference,omitempty"`
	OrgId             *Orgid        `json:"OrgId,omitempty" url:"OrgId,omitempty"`
	RefundId          *RefundId     `json:"RefundId,omitempty" url:"RefundId,omitempty"`
	ReturnedId        *ReturnedId   `json:"ReturnedId,omitempty" url:"ReturnedId,omitempty"`
	ChargebackId      *ChargebackId `json:"ChargebackId,omitempty" url:"ChargebackId,omitempty"`
	RetrievalId       *RetrievalId  `json:"RetrievalId,omitempty" url:"RetrievalId,omitempty"`
	// Additional transaction data
	TransAdditionalData interface{} `json:"TransAdditionalData,omitempty" url:"TransAdditionalData,omitempty"`
	// Associated invoice data
	InvoiceData        *BillData           `json:"invoiceData,omitempty" url:"invoiceData,omitempty"`
	EntrypageId        *EntrypageId        `json:"EntrypageId,omitempty" url:"EntrypageId,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// Indicates whether the ACH account has been validated
	IsValidatedAch *bool `json:"IsValidatedACH,omitempty" url:"IsValidatedACH,omitempty"`
	// Transaction date and time, in UTC
	TransactionTime          *DatetimeNullable          `json:"TransactionTime,omitempty" url:"TransactionTime,omitempty"`
	Customer                 *QueryTransactionPayorData `json:"Customer,omitempty" url:"Customer,omitempty"`
	SplitFundingInstructions *SplitFunding              `json:"splitFundingInstructions,omitempty" url:"splitFundingInstructions,omitempty"`
	CfeeTransactions         []*QueryCFeeTransaction    `json:"CfeeTransactions,omitempty" url:"CfeeTransactions,omitempty"`
	TransactionEvents        []*QueryTransactionEvents  `json:"TransactionEvents,omitempty" url:"TransactionEvents,omitempty"`
	PendingFeeAmount         *PendingFeeAmount          `json:"PendingFeeAmount,omitempty" url:"PendingFeeAmount,omitempty"`
	RiskFlagged              *RiskFlagged               `json:"RiskFlagged,omitempty" url:"RiskFlagged,omitempty"`
	RiskFlaggedOn            *RiskFlaggedOn             `json:"RiskFlaggedOn,omitempty" url:"RiskFlaggedOn,omitempty"`
	RiskStatus               *RiskStatus                `json:"RiskStatus,omitempty" url:"RiskStatus,omitempty"`
	RiskReason               *RiskReason                `json:"RiskReason,omitempty" url:"RiskReason,omitempty"`
	RiskAction               *RiskAction                `json:"RiskAction,omitempty" url:"RiskAction,omitempty"`
	RiskActionCode           *RiskActionCode            `json:"RiskActionCode,omitempty" url:"RiskActionCode,omitempty"`
	DeviceId                 *DeviceId                  `json:"DeviceId,omitempty" url:"DeviceId,omitempty"`
	AchSecCode               *AchSecCode                `json:"AchSecCode,omitempty" url:"AchSecCode,omitempty"`
	AchHolderType            *AchHolderType             `json:"AchHolderType,omitempty" url:"AchHolderType,omitempty"`
	IpAddress                *IpAddress                 `json:"IpAddress,omitempty" url:"IpAddress,omitempty"`
	// Indicates if this was a same-day ACH transaction.
	IsSameDayAch *bool `json:"IsSameDayACH,omitempty" url:"IsSameDayACH,omitempty"`
	// Type of wallet used for the transaction (if applicable)
	WalletType *string `json:"WalletType,omitempty" url:"WalletType,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferDetailRecord) GetTransferDetailId() *int {
	if t == nil {
		return nil
	}
	return t.TransferDetailId
}

func (t *TransferDetailRecord) GetTransferId() *int {
	if t == nil {
		return nil
	}
	return t.TransferId
}

func (t *TransferDetailRecord) GetTransactionId() *string {
	if t == nil {
		return nil
	}
	return t.TransactionId
}

func (t *TransferDetailRecord) GetTransactionNumber() *string {
	if t == nil {
		return nil
	}
	return t.TransactionNumber
}

func (t *TransferDetailRecord) GetType() *string {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *TransferDetailRecord) GetCategory() *string {
	if t == nil {
		return nil
	}
	return t.Category
}

func (t *TransferDetailRecord) GetGrossAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.GrossAmount
}

func (t *TransferDetailRecord) GetChargeBackAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.ChargeBackAmount
}

func (t *TransferDetailRecord) GetReturnedAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.ReturnedAmount
}

func (t *TransferDetailRecord) GetRefundAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.RefundAmount
}

func (t *TransferDetailRecord) GetHoldAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.HoldAmount
}

func (t *TransferDetailRecord) GetReleasedAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.ReleasedAmount
}

func (t *TransferDetailRecord) GetBillingFeesAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.BillingFeesAmount
}

func (t *TransferDetailRecord) GetThirdPartyPaidAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.ThirdPartyPaidAmount
}

func (t *TransferDetailRecord) GetAdjustmentsAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.AdjustmentsAmount
}

func (t *TransferDetailRecord) GetNetTransferAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.NetTransferAmount
}

func (t *TransferDetailRecord) GetSplitFundingAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.SplitFundingAmount
}

func (t *TransferDetailRecord) GetBillingFeesDetails() []*BillingFeeDetail {
	if t == nil {
		return nil
	}
	return t.BillingFeesDetails
}

func (t *TransferDetailRecord) GetParentOrgName() *OrgParentName {
	if t == nil {
		return nil
	}
	return t.ParentOrgName
}

func (t *TransferDetailRecord) GetPaypointDbaname() *Dbaname {
	if t == nil {
		return nil
	}
	return t.PaypointDbaname
}

func (t *TransferDetailRecord) GetPaypointLegalname() *Legalname {
	if t == nil {
		return nil
	}
	return t.PaypointLegalname
}

func (t *TransferDetailRecord) GetPaypointEntryname() *string {
	if t == nil {
		return nil
	}
	return t.PaypointEntryname
}

func (t *TransferDetailRecord) GetPaymentTransId() *string {
	if t == nil {
		return nil
	}
	return t.PaymentTransId
}

func (t *TransferDetailRecord) GetConnectorName() *string {
	if t == nil {
		return nil
	}
	return t.ConnectorName
}

func (t *TransferDetailRecord) GetExternalProcessorInformation() *ExternalProcessorInformation {
	if t == nil {
		return nil
	}
	return t.ExternalProcessorInformation
}

func (t *TransferDetailRecord) GetGatewayTransId() *string {
	if t == nil {
		return nil
	}
	return t.GatewayTransId
}

func (t *TransferDetailRecord) GetOrderId() *OrderId {
	if t == nil {
		return nil
	}
	return t.OrderId
}

func (t *TransferDetailRecord) GetMethod() *string {
	if t == nil {
		return nil
	}
	return t.Method
}

func (t *TransferDetailRecord) GetBatchNumber() *BatchNumber {
	if t == nil {
		return nil
	}
	return t.BatchNumber
}

func (t *TransferDetailRecord) GetBatchAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.BatchAmount
}

func (t *TransferDetailRecord) GetPayorId() *PayorId {
	if t == nil {
		return nil
	}
	return t.PayorId
}

func (t *TransferDetailRecord) GetPaymentData() *QueryPaymentData {
	if t == nil {
		return nil
	}
	return t.PaymentData
}

func (t *TransferDetailRecord) GetTransStatus() *int {
	if t == nil {
		return nil
	}
	return t.TransStatus
}

func (t *TransferDetailRecord) GetPaypointId() *PaypointId {
	if t == nil {
		return nil
	}
	return t.PaypointId
}

func (t *TransferDetailRecord) GetTotalAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.TotalAmount
}

func (t *TransferDetailRecord) GetNetAmount() *Netamountnullable {
	if t == nil {
		return nil
	}
	return t.NetAmount
}

func (t *TransferDetailRecord) GetFeeAmount() *FeeAmount {
	if t == nil {
		return nil
	}
	return t.FeeAmount
}

func (t *TransferDetailRecord) GetSettlementStatus() *int {
	if t == nil {
		return nil
	}
	return t.SettlementStatus
}

func (t *TransferDetailRecord) GetOperation() *Operation {
	if t == nil {
		return nil
	}
	return t.Operation
}

func (t *TransferDetailRecord) GetResponseData() *QueryResponseData {
	if t == nil {
		return nil
	}
	return t.ResponseData
}

func (t *TransferDetailRecord) GetSource() *Source {
	if t == nil {
		return nil
	}
	return t.Source
}

func (t *TransferDetailRecord) GetScheduleReference() *int {
	if t == nil {
		return nil
	}
	return t.ScheduleReference
}

func (t *TransferDetailRecord) GetOrgId() *Orgid {
	if t == nil {
		return nil
	}
	return t.OrgId
}

func (t *TransferDetailRecord) GetRefundId() *RefundId {
	if t == nil {
		return nil
	}
	return t.RefundId
}

func (t *TransferDetailRecord) GetReturnedId() *ReturnedId {
	if t == nil {
		return nil
	}
	return t.ReturnedId
}

func (t *TransferDetailRecord) GetChargebackId() *ChargebackId {
	if t == nil {
		return nil
	}
	return t.ChargebackId
}

func (t *TransferDetailRecord) GetRetrievalId() *RetrievalId {
	if t == nil {
		return nil
	}
	return t.RetrievalId
}

func (t *TransferDetailRecord) GetTransAdditionalData() interface{} {
	if t == nil {
		return nil
	}
	return t.TransAdditionalData
}

func (t *TransferDetailRecord) GetInvoiceData() *BillData {
	if t == nil {
		return nil
	}
	return t.InvoiceData
}

func (t *TransferDetailRecord) GetEntrypageId() *EntrypageId {
	if t == nil {
		return nil
	}
	return t.EntrypageId
}

func (t *TransferDetailRecord) GetExternalPaypointId() *ExternalPaypointId {
	if t == nil {
		return nil
	}
	return t.ExternalPaypointId
}

func (t *TransferDetailRecord) GetIsValidatedAch() *bool {
	if t == nil {
		return nil
	}
	return t.IsValidatedAch
}

func (t *TransferDetailRecord) GetTransactionTime() *DatetimeNullable {
	if t == nil {
		return nil
	}
	return t.TransactionTime
}

func (t *TransferDetailRecord) GetCustomer() *QueryTransactionPayorData {
	if t == nil {
		return nil
	}
	return t.Customer
}

func (t *TransferDetailRecord) GetSplitFundingInstructions() *SplitFunding {
	if t == nil {
		return nil
	}
	return t.SplitFundingInstructions
}

func (t *TransferDetailRecord) GetCfeeTransactions() []*QueryCFeeTransaction {
	if t == nil {
		return nil
	}
	return t.CfeeTransactions
}

func (t *TransferDetailRecord) GetTransactionEvents() []*QueryTransactionEvents {
	if t == nil {
		return nil
	}
	return t.TransactionEvents
}

func (t *TransferDetailRecord) GetPendingFeeAmount() *PendingFeeAmount {
	if t == nil {
		return nil
	}
	return t.PendingFeeAmount
}

func (t *TransferDetailRecord) GetRiskFlagged() *RiskFlagged {
	if t == nil {
		return nil
	}
	return t.RiskFlagged
}

func (t *TransferDetailRecord) GetRiskFlaggedOn() *RiskFlaggedOn {
	if t == nil {
		return nil
	}
	return t.RiskFlaggedOn
}

func (t *TransferDetailRecord) GetRiskStatus() *RiskStatus {
	if t == nil {
		return nil
	}
	return t.RiskStatus
}

func (t *TransferDetailRecord) GetRiskReason() *RiskReason {
	if t == nil {
		return nil
	}
	return t.RiskReason
}

func (t *TransferDetailRecord) GetRiskAction() *RiskAction {
	if t == nil {
		return nil
	}
	return t.RiskAction
}

func (t *TransferDetailRecord) GetRiskActionCode() *RiskActionCode {
	if t == nil {
		return nil
	}
	return t.RiskActionCode
}

func (t *TransferDetailRecord) GetDeviceId() *DeviceId {
	if t == nil {
		return nil
	}
	return t.DeviceId
}

func (t *TransferDetailRecord) GetAchSecCode() *AchSecCode {
	if t == nil {
		return nil
	}
	return t.AchSecCode
}

func (t *TransferDetailRecord) GetAchHolderType() *AchHolderType {
	if t == nil {
		return nil
	}
	return t.AchHolderType
}

func (t *TransferDetailRecord) GetIpAddress() *IpAddress {
	if t == nil {
		return nil
	}
	return t.IpAddress
}

func (t *TransferDetailRecord) GetIsSameDayAch() *bool {
	if t == nil {
		return nil
	}
	return t.IsSameDayAch
}

func (t *TransferDetailRecord) GetWalletType() *string {
	if t == nil {
		return nil
	}
	return t.WalletType
}

func (t *TransferDetailRecord) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferDetailRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferDetailRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferDetailRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferDetailRecord) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Max number of records to return for the query. Use `0` or negative value to return all records. Defaults to 20.
type LimitRecord = *int
