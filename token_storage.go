// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
	time "time"
)

type AddMethodRequest struct {
	IdempotencyKey        *IdempotencyKey        `json:"-" url:"-"`
	AchValidation         *AchValidation         `json:"-" url:"achValidation,omitempty"`
	CreateAnonymous       CreateAnonymous        `json:"-" url:"createAnonymous,omitempty"`
	ForceCustomerCreation *ForceCustomerCreation `json:"-" url:"forceCustomerCreation,omitempty"`
	Temporary             Temporary              `json:"-" url:"temporary,omitempty"`
	Body                  *RequestTokenStorage   `json:"-" url:"-"`
}

func (a *AddMethodRequest) UnmarshalJSON(data []byte) error {
	body := new(RequestTokenStorage)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	a.Body = body
	return nil
}

func (a *AddMethodRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(a.Body)
}

type GetMethodRequest struct {
	// Format for card expiration dates in the response.
	//
	// Accepted values:
	//
	// - 0: default, no formatting. Expiration dates are returned in the format they're saved in.
	//
	// - 1: MMYY
	//
	// - 2: MM/YY
	CardExpirationFormat *int `json:"-" url:"cardExpirationFormat,omitempty"`
	// When `true`, the request will include temporary tokens in the search and return details for a matching temporary token. The default behavior searches only for permanent tokens.
	IncludeTemporary *bool `json:"-" url:"includeTemporary,omitempty"`
}

type UpdateMethodRequest struct {
	AchValidation *AchValidation       `json:"-" url:"achValidation,omitempty"`
	Body          *RequestTokenStorage `json:"-" url:"-"`
}

func (u *UpdateMethodRequest) UnmarshalJSON(data []byte) error {
	body := new(RequestTokenStorage)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.Body = body
	return nil
}

func (u *UpdateMethodRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}

// Response body for payment method deletion.
type PayabliApiResponsePaymethodDelete struct {
	IsSuccess    *IsSuccess                                     `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseData *PayabliApiResponsePaymethodDeleteResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText *ResponseText                                  `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponsePaymethodDelete) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponsePaymethodDelete) GetResponseData() *PayabliApiResponsePaymethodDeleteResponseData {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponsePaymethodDelete) GetResponseText() *ResponseText {
	if p == nil {
		return nil
	}
	return p.ResponseText
}

func (p *PayabliApiResponsePaymethodDelete) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponsePaymethodDelete) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponsePaymethodDelete
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponsePaymethodDelete(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponsePaymethodDelete) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayabliApiResponsePaymethodDeleteResponseData struct {
	// The method's reference ID.
	ReferenceId *MethodReferenceId `json:"referenceId,omitempty" url:"referenceId,omitempty"`
	ResultCode  *ResultCode        `json:"resultCode,omitempty" url:"resultCode,omitempty"`
	ResultText  *Resulttext        `json:"resultText,omitempty" url:"resultText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponsePaymethodDeleteResponseData) GetReferenceId() *MethodReferenceId {
	if p == nil {
		return nil
	}
	return p.ReferenceId
}

func (p *PayabliApiResponsePaymethodDeleteResponseData) GetResultCode() *ResultCode {
	if p == nil {
		return nil
	}
	return p.ResultCode
}

func (p *PayabliApiResponsePaymethodDeleteResponseData) GetResultText() *Resulttext {
	if p == nil {
		return nil
	}
	return p.ResultText
}

func (p *PayabliApiResponsePaymethodDeleteResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponsePaymethodDeleteResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponsePaymethodDeleteResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponsePaymethodDeleteResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponsePaymethodDeleteResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type AddMethodResponse struct {
	IsSuccess    *IsSuccess                     `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText *ResponseText                  `json:"responseText,omitempty" url:"responseText,omitempty"`
	ResponseData *AddMethodResponseResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddMethodResponse) GetIsSuccess() *IsSuccess {
	if a == nil {
		return nil
	}
	return a.IsSuccess
}

func (a *AddMethodResponse) GetResponseText() *ResponseText {
	if a == nil {
		return nil
	}
	return a.ResponseText
}

func (a *AddMethodResponse) GetResponseData() *AddMethodResponseResponseData {
	if a == nil {
		return nil
	}
	return a.ResponseData
}

func (a *AddMethodResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddMethodResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddMethodResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddMethodResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddMethodResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AddMethodResponseResponseData struct {
	// Internal unique ID of customer owner of the stored method.
	//
	// Returns `0` if the method wasn't assigned to an existing customer or no customer was created."
	CustomerId        *CustomerId        `json:"CustomerId,omitempty" url:"CustomerId,omitempty"`
	MethodReferenceId *MethodReferenceId `json:"methodReferenceId,omitempty" url:"methodReferenceId,omitempty"`
	// Stored method identifier in Payabli platform. This ID is used to manage the stored method.
	ReferenceId *MethodReferenceId `json:"ReferenceId,omitempty" url:"ReferenceId,omitempty"`
	ResultCode  *ResultCode        `json:"ResultCode,omitempty" url:"ResultCode,omitempty"`
	ResultText  *Resulttext        `json:"ResultText,omitempty" url:"ResultText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddMethodResponseResponseData) GetCustomerId() *CustomerId {
	if a == nil {
		return nil
	}
	return a.CustomerId
}

func (a *AddMethodResponseResponseData) GetMethodReferenceId() *MethodReferenceId {
	if a == nil {
		return nil
	}
	return a.MethodReferenceId
}

func (a *AddMethodResponseResponseData) GetReferenceId() *MethodReferenceId {
	if a == nil {
		return nil
	}
	return a.ReferenceId
}

func (a *AddMethodResponseResponseData) GetResultCode() *ResultCode {
	if a == nil {
		return nil
	}
	return a.ResultCode
}

func (a *AddMethodResponseResponseData) GetResultText() *Resulttext {
	if a == nil {
		return nil
	}
	return a.ResultText
}

func (a *AddMethodResponseResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddMethodResponseResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler AddMethodResponseResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddMethodResponseResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddMethodResponseResponseData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Object containing the information needed to convert a temporary token to a permanent token.
type ConvertToken struct {
	// The type of payment method to tokenize. When converting a temp token to a permanent token, this should match the `method` set for the temporary token, either `ach` or `card`.
	Method string `json:"method" url:"method"`
	// A temporary stored token ID to be converted to permanent.
	TokenId string `json:"tokenId" url:"tokenId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConvertToken) GetMethod() string {
	if c == nil {
		return ""
	}
	return c.Method
}

func (c *ConvertToken) GetTokenId() string {
	if c == nil {
		return ""
	}
	return c.TokenId
}

func (c *ConvertToken) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConvertToken) UnmarshalJSON(data []byte) error {
	type unmarshaler ConvertToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConvertToken(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConvertToken) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// When `true`, creates a saved method with no associated customer information. The token will be associated with customer information the first time it's used to make a payment. Defaults to `false`.
type CreateAnonymous = *bool

type GetMethodResponse struct {
	IsSuccess    *IsSuccess                     `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseData *GetMethodResponseResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText *ResponseText                  `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetMethodResponse) GetIsSuccess() *IsSuccess {
	if g == nil {
		return nil
	}
	return g.IsSuccess
}

func (g *GetMethodResponse) GetResponseData() *GetMethodResponseResponseData {
	if g == nil {
		return nil
	}
	return g.ResponseData
}

func (g *GetMethodResponse) GetResponseText() *ResponseText {
	if g == nil {
		return nil
	}
	return g.ResponseText
}

func (g *GetMethodResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetMethodResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetMethodResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetMethodResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetMethodResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetMethodResponseResponseData struct {
	// Bank routing number
	Aba           *string        `json:"aba,omitempty" url:"aba,omitempty"`
	AchHolderType *AchHolderType `json:"achHolderType,omitempty" url:"achHolderType,omitempty"`
	AchSecCode    *AchSecCode    `json:"achSecCode,omitempty" url:"achSecCode,omitempty"`
	// The bank identification number (BIN)
	Bin        *string                                       `json:"bin,omitempty" url:"bin,omitempty"`
	BinData    *BinData                                      `json:"binData,omitempty" url:"binData,omitempty"`
	Customers  []*GetMethodResponseResponseDataCustomersItem `json:"customers,omitempty" url:"customers,omitempty"`
	Descriptor *Descriptor                                   `json:"descriptor,omitempty" url:"descriptor,omitempty"`
	// Expiration date for card in stored method in format MM/YY
	ExpDate *string `json:"expDate,omitempty" url:"expDate,omitempty"`
	// Account holder name in stored method
	HolderName *Holdername `json:"holderName,omitempty" url:"holderName,omitempty"`
	// The stored payment method's identifier in Payabli
	IdPmethod *string `json:"idPmethod,omitempty" url:"idPmethod,omitempty"`
	// Timestamp for last update of stored method, in UTC
	LastUpdated   *LastModified  `json:"lastUpdated,omitempty" url:"lastUpdated,omitempty"`
	MaskedAccount *Maskedaccount `json:"maskedAccount,omitempty" url:"maskedAccount,omitempty"`
	// The saved method's type: `card` or `ach`.
	Method *string `json:"method,omitempty" url:"method,omitempty"`
	// The payment method's token type
	MethodType *string `json:"methodType,omitempty" url:"methodType,omitempty"`
	// The payment method postal code
	PostalCode *string `json:"postalCode,omitempty" url:"postalCode,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetMethodResponseResponseData) GetAba() *string {
	if g == nil {
		return nil
	}
	return g.Aba
}

func (g *GetMethodResponseResponseData) GetAchHolderType() *AchHolderType {
	if g == nil {
		return nil
	}
	return g.AchHolderType
}

func (g *GetMethodResponseResponseData) GetAchSecCode() *AchSecCode {
	if g == nil {
		return nil
	}
	return g.AchSecCode
}

func (g *GetMethodResponseResponseData) GetBin() *string {
	if g == nil {
		return nil
	}
	return g.Bin
}

func (g *GetMethodResponseResponseData) GetBinData() *BinData {
	if g == nil {
		return nil
	}
	return g.BinData
}

func (g *GetMethodResponseResponseData) GetCustomers() []*GetMethodResponseResponseDataCustomersItem {
	if g == nil {
		return nil
	}
	return g.Customers
}

func (g *GetMethodResponseResponseData) GetDescriptor() *Descriptor {
	if g == nil {
		return nil
	}
	return g.Descriptor
}

func (g *GetMethodResponseResponseData) GetExpDate() *string {
	if g == nil {
		return nil
	}
	return g.ExpDate
}

func (g *GetMethodResponseResponseData) GetHolderName() *Holdername {
	if g == nil {
		return nil
	}
	return g.HolderName
}

func (g *GetMethodResponseResponseData) GetIdPmethod() *string {
	if g == nil {
		return nil
	}
	return g.IdPmethod
}

func (g *GetMethodResponseResponseData) GetLastUpdated() *LastModified {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GetMethodResponseResponseData) GetMaskedAccount() *Maskedaccount {
	if g == nil {
		return nil
	}
	return g.MaskedAccount
}

func (g *GetMethodResponseResponseData) GetMethod() *string {
	if g == nil {
		return nil
	}
	return g.Method
}

func (g *GetMethodResponseResponseData) GetMethodType() *string {
	if g == nil {
		return nil
	}
	return g.MethodType
}

func (g *GetMethodResponseResponseData) GetPostalCode() *string {
	if g == nil {
		return nil
	}
	return g.PostalCode
}

func (g *GetMethodResponseResponseData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetMethodResponseResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler GetMethodResponseResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetMethodResponseResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetMethodResponseResponseData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetMethodResponseResponseDataCustomersItem struct {
	AdditionalData  *AdditionalData              `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	BillingAddress1 *BillingAddressNullable      `json:"billingAddress1,omitempty" url:"billingAddress1,omitempty"`
	BillingAddress2 *BillingAddressAddtlNullable `json:"billingAddress2,omitempty" url:"billingAddress2,omitempty"`
	BillingCity     *BillingCityNullable         `json:"billingCity,omitempty" url:"billingCity,omitempty"`
	BillingCountry  *BillingCountryNullable      `json:"billingCountry,omitempty" url:"billingCountry,omitempty"`
	BillingEmail    *Email                       `json:"billingEmail,omitempty" url:"billingEmail,omitempty"`
	BillingPhone    *PhoneNumber                 `json:"billingPhone,omitempty" url:"billingPhone,omitempty"`
	BillingState    *BillingStateNullable        `json:"billingState,omitempty" url:"billingState,omitempty"`
	// Customer's billing ZIP code. For Pay In functions, this field supports 5-digit and 9-digit ZIP codes and alphanumeric Canadian postal codes. For example: "37615-1234" or "37615".
	BillingZip *BillingZipNullable `json:"billingZip,omitempty" url:"billingZip,omitempty"`
	// Customer's company name.
	Company        *string                 `json:"company,omitempty" url:"company,omitempty"`
	CustomerId     *CustomerId             `json:"customerId,omitempty" url:"customerId,omitempty"`
	CustomerNumber *CustomerNumberNullable `json:"customerNumber,omitempty" url:"customerNumber,omitempty"`
	// Customer/Payor first name.
	FirstName        *string           `json:"firstName,omitempty" url:"firstName,omitempty"`
	IdentifierFields *Identifierfields `json:"identifierFields,omitempty" url:"identifierFields,omitempty"`
	// Customer/Payor last name.
	LastName         *string                    `json:"lastName,omitempty" url:"lastName,omitempty"`
	ShippingAddress1 *Shippingaddress           `json:"shippingAddress1,omitempty" url:"shippingAddress1,omitempty"`
	ShippingAddress2 *Shippingaddressadditional `json:"shippingAddress2,omitempty" url:"shippingAddress2,omitempty"`
	ShippingCity     *Shippingcity              `json:"shippingCity,omitempty" url:"shippingCity,omitempty"`
	ShippingCountry  *Shippingcountry           `json:"shippingCountry,omitempty" url:"shippingCountry,omitempty"`
	ShippingState    *Shippingstate             `json:"shippingState,omitempty" url:"shippingState,omitempty"`
	ShippingZip      *Shippingzip               `json:"shippingZip,omitempty" url:"shippingZip,omitempty"`
	// Customer's current balance
	Balance *float64 `json:"balance,omitempty" url:"balance,omitempty"`
	// Creation timestamp
	Created *time.Time `json:"created,omitempty" url:"created,omitempty"`
	// Customer consent information
	CustomerConsent map[string]interface{} `json:"customerConsent,omitempty" url:"customerConsent,omitempty"`
	// Status code for the customer
	CustomerStatus  *int                   `json:"customerStatus,omitempty" url:"customerStatus,omitempty"`
	CustomerSummary *CustomerSummaryRecord `json:"customerSummary,omitempty" url:"customerSummary,omitempty"`
	// Username of the customer
	CustomerUsername   *string             `json:"customerUsername,omitempty" url:"customerUsername,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// Last update timestamp
	LastUpdated *time.Time `json:"lastUpdated,omitempty" url:"lastUpdated,omitempty"`
	// Multi-factor authentication status
	Mfa *bool `json:"mfa,omitempty" url:"mfa,omitempty"`
	// MFA mode setting
	MfaMode         *int            `json:"mfaMode,omitempty" url:"mfaMode,omitempty"`
	Pageindentifier *PageIdentifier `json:"pageindentifier,omitempty" url:"pageindentifier,omitempty"`
	// Parent organization ID
	ParentOrgId     *int           `json:"parentOrgId,omitempty" url:"parentOrgId,omitempty"`
	ParentOrgName   *OrgParentName `json:"parentOrgName,omitempty" url:"parentOrgName,omitempty"`
	PaypointDbaname *Dbaname       `json:"paypointDbaname,omitempty" url:"paypointDbaname,omitempty"`
	// The paypoint entryname the customer is associated with
	PaypointEntryname *string    `json:"paypointEntryname,omitempty" url:"paypointEntryname,omitempty"`
	PaypointLegalname *Legalname `json:"paypointLegalname,omitempty" url:"paypointLegalname,omitempty"`
	// Social network data
	SnData map[string]interface{} `json:"snData,omitempty" url:"snData,omitempty"`
	// Social network identifier
	SnIdentifier *string `json:"snIdentifier,omitempty" url:"snIdentifier,omitempty"`
	// Social network provider
	SnProvider *string `json:"snProvider,omitempty" url:"snProvider,omitempty"`
	// List of payment methods associated to the customer
	StoredMethods []*MethodQueryRecords `json:"storedMethods,omitempty" url:"storedMethods,omitempty"`
	// List of subscriptions associated to the customer
	Subscriptions []*SubscriptionQueryRecords `json:"subscriptions,omitempty" url:"subscriptions,omitempty"`
	// Customer's timezone
	TimeZone *int `json:"timeZone,omitempty" url:"timeZone,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetMethodResponseResponseDataCustomersItem) GetAdditionalData() *AdditionalData {
	if g == nil {
		return nil
	}
	return g.AdditionalData
}

func (g *GetMethodResponseResponseDataCustomersItem) GetBillingAddress1() *BillingAddressNullable {
	if g == nil {
		return nil
	}
	return g.BillingAddress1
}

func (g *GetMethodResponseResponseDataCustomersItem) GetBillingAddress2() *BillingAddressAddtlNullable {
	if g == nil {
		return nil
	}
	return g.BillingAddress2
}

func (g *GetMethodResponseResponseDataCustomersItem) GetBillingCity() *BillingCityNullable {
	if g == nil {
		return nil
	}
	return g.BillingCity
}

func (g *GetMethodResponseResponseDataCustomersItem) GetBillingCountry() *BillingCountryNullable {
	if g == nil {
		return nil
	}
	return g.BillingCountry
}

func (g *GetMethodResponseResponseDataCustomersItem) GetBillingEmail() *Email {
	if g == nil {
		return nil
	}
	return g.BillingEmail
}

func (g *GetMethodResponseResponseDataCustomersItem) GetBillingPhone() *PhoneNumber {
	if g == nil {
		return nil
	}
	return g.BillingPhone
}

func (g *GetMethodResponseResponseDataCustomersItem) GetBillingState() *BillingStateNullable {
	if g == nil {
		return nil
	}
	return g.BillingState
}

func (g *GetMethodResponseResponseDataCustomersItem) GetBillingZip() *BillingZipNullable {
	if g == nil {
		return nil
	}
	return g.BillingZip
}

func (g *GetMethodResponseResponseDataCustomersItem) GetCompany() *string {
	if g == nil {
		return nil
	}
	return g.Company
}

func (g *GetMethodResponseResponseDataCustomersItem) GetCustomerId() *CustomerId {
	if g == nil {
		return nil
	}
	return g.CustomerId
}

func (g *GetMethodResponseResponseDataCustomersItem) GetCustomerNumber() *CustomerNumberNullable {
	if g == nil {
		return nil
	}
	return g.CustomerNumber
}

func (g *GetMethodResponseResponseDataCustomersItem) GetFirstName() *string {
	if g == nil {
		return nil
	}
	return g.FirstName
}

func (g *GetMethodResponseResponseDataCustomersItem) GetIdentifierFields() *Identifierfields {
	if g == nil {
		return nil
	}
	return g.IdentifierFields
}

func (g *GetMethodResponseResponseDataCustomersItem) GetLastName() *string {
	if g == nil {
		return nil
	}
	return g.LastName
}

func (g *GetMethodResponseResponseDataCustomersItem) GetShippingAddress1() *Shippingaddress {
	if g == nil {
		return nil
	}
	return g.ShippingAddress1
}

func (g *GetMethodResponseResponseDataCustomersItem) GetShippingAddress2() *Shippingaddressadditional {
	if g == nil {
		return nil
	}
	return g.ShippingAddress2
}

func (g *GetMethodResponseResponseDataCustomersItem) GetShippingCity() *Shippingcity {
	if g == nil {
		return nil
	}
	return g.ShippingCity
}

func (g *GetMethodResponseResponseDataCustomersItem) GetShippingCountry() *Shippingcountry {
	if g == nil {
		return nil
	}
	return g.ShippingCountry
}

func (g *GetMethodResponseResponseDataCustomersItem) GetShippingState() *Shippingstate {
	if g == nil {
		return nil
	}
	return g.ShippingState
}

func (g *GetMethodResponseResponseDataCustomersItem) GetShippingZip() *Shippingzip {
	if g == nil {
		return nil
	}
	return g.ShippingZip
}

func (g *GetMethodResponseResponseDataCustomersItem) GetBalance() *float64 {
	if g == nil {
		return nil
	}
	return g.Balance
}

func (g *GetMethodResponseResponseDataCustomersItem) GetCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.Created
}

func (g *GetMethodResponseResponseDataCustomersItem) GetCustomerConsent() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.CustomerConsent
}

func (g *GetMethodResponseResponseDataCustomersItem) GetCustomerStatus() *int {
	if g == nil {
		return nil
	}
	return g.CustomerStatus
}

func (g *GetMethodResponseResponseDataCustomersItem) GetCustomerSummary() *CustomerSummaryRecord {
	if g == nil {
		return nil
	}
	return g.CustomerSummary
}

func (g *GetMethodResponseResponseDataCustomersItem) GetCustomerUsername() *string {
	if g == nil {
		return nil
	}
	return g.CustomerUsername
}

func (g *GetMethodResponseResponseDataCustomersItem) GetExternalPaypointId() *ExternalPaypointId {
	if g == nil {
		return nil
	}
	return g.ExternalPaypointId
}

func (g *GetMethodResponseResponseDataCustomersItem) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GetMethodResponseResponseDataCustomersItem) GetMfa() *bool {
	if g == nil {
		return nil
	}
	return g.Mfa
}

func (g *GetMethodResponseResponseDataCustomersItem) GetMfaMode() *int {
	if g == nil {
		return nil
	}
	return g.MfaMode
}

func (g *GetMethodResponseResponseDataCustomersItem) GetPageindentifier() *PageIdentifier {
	if g == nil {
		return nil
	}
	return g.Pageindentifier
}

func (g *GetMethodResponseResponseDataCustomersItem) GetParentOrgId() *int {
	if g == nil {
		return nil
	}
	return g.ParentOrgId
}

func (g *GetMethodResponseResponseDataCustomersItem) GetParentOrgName() *OrgParentName {
	if g == nil {
		return nil
	}
	return g.ParentOrgName
}

func (g *GetMethodResponseResponseDataCustomersItem) GetPaypointDbaname() *Dbaname {
	if g == nil {
		return nil
	}
	return g.PaypointDbaname
}

func (g *GetMethodResponseResponseDataCustomersItem) GetPaypointEntryname() *string {
	if g == nil {
		return nil
	}
	return g.PaypointEntryname
}

func (g *GetMethodResponseResponseDataCustomersItem) GetPaypointLegalname() *Legalname {
	if g == nil {
		return nil
	}
	return g.PaypointLegalname
}

func (g *GetMethodResponseResponseDataCustomersItem) GetSnData() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.SnData
}

func (g *GetMethodResponseResponseDataCustomersItem) GetSnIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.SnIdentifier
}

func (g *GetMethodResponseResponseDataCustomersItem) GetSnProvider() *string {
	if g == nil {
		return nil
	}
	return g.SnProvider
}

func (g *GetMethodResponseResponseDataCustomersItem) GetStoredMethods() []*MethodQueryRecords {
	if g == nil {
		return nil
	}
	return g.StoredMethods
}

func (g *GetMethodResponseResponseDataCustomersItem) GetSubscriptions() []*SubscriptionQueryRecords {
	if g == nil {
		return nil
	}
	return g.Subscriptions
}

func (g *GetMethodResponseResponseDataCustomersItem) GetTimeZone() *int {
	if g == nil {
		return nil
	}
	return g.TimeZone
}

func (g *GetMethodResponseResponseDataCustomersItem) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetMethodResponseResponseDataCustomersItem) UnmarshalJSON(data []byte) error {
	type embed GetMethodResponseResponseDataCustomersItem
	var unmarshaler = struct {
		embed
		Created     *internal.DateTime `json:"created,omitempty"`
		LastUpdated *internal.DateTime `json:"lastUpdated,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetMethodResponseResponseDataCustomersItem(unmarshaler.embed)
	g.Created = unmarshaler.Created.TimePtr()
	g.LastUpdated = unmarshaler.LastUpdated.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetMethodResponseResponseDataCustomersItem) MarshalJSON() ([]byte, error) {
	type embed GetMethodResponseResponseDataCustomersItem
	var marshaler = struct {
		embed
		Created     *internal.DateTime `json:"created,omitempty"`
		LastUpdated *internal.DateTime `json:"lastUpdated,omitempty"`
	}{
		embed:       embed(*g),
		Created:     internal.NewOptionalDateTime(g.Created),
		LastUpdated: internal.NewOptionalDateTime(g.LastUpdated),
	}
	return json.Marshal(marshaler)
}

func (g *GetMethodResponseResponseDataCustomersItem) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type RequestTokenStorage struct {
	// Object describing the Customer/Payor owner of payment method. Required for POST requests. Which fields are required depends on the paypoint's custom identifier settings.
	CustomerData *PayorDataRequest `json:"customerData,omitempty" url:"customerData,omitempty"`
	// Entrypoint identifier. Required for POST requests.
	EntryPoint *Entrypointfield `json:"entryPoint,omitempty" url:"entryPoint,omitempty"`
	// When `true`, if tokenization fails, Payabli will attempt an authorization transaction to request a permanent token for the card. If the authorization is successful, the card will be tokenized and the authorization will be voided automatically.
	FallbackAuth *bool `json:"fallbackAuth,omitempty" url:"fallbackAuth,omitempty"`
	// The amount for the `fallbackAuth` transaction. Defaults to one dollar (`100`).
	FallbackAuthAmount *int `json:"fallbackAuthAmount,omitempty" url:"fallbackAuthAmount,omitempty"`
	// Custom description for stored payment method.
	MethodDescription *string `json:"methodDescription,omitempty" url:"methodDescription,omitempty"`
	// Information about the payment method for the transaction.
	PaymentMethod *RequestTokenStoragePaymentMethod `json:"paymentMethod,omitempty" url:"paymentMethod,omitempty"`
	// Custom identifier to indicate the source for the request
	Source    *Source    `json:"source,omitempty" url:"source,omitempty"`
	Subdomain *Subdomain `json:"subdomain,omitempty" url:"subdomain,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestTokenStorage) GetCustomerData() *PayorDataRequest {
	if r == nil {
		return nil
	}
	return r.CustomerData
}

func (r *RequestTokenStorage) GetEntryPoint() *Entrypointfield {
	if r == nil {
		return nil
	}
	return r.EntryPoint
}

func (r *RequestTokenStorage) GetFallbackAuth() *bool {
	if r == nil {
		return nil
	}
	return r.FallbackAuth
}

func (r *RequestTokenStorage) GetFallbackAuthAmount() *int {
	if r == nil {
		return nil
	}
	return r.FallbackAuthAmount
}

func (r *RequestTokenStorage) GetMethodDescription() *string {
	if r == nil {
		return nil
	}
	return r.MethodDescription
}

func (r *RequestTokenStorage) GetPaymentMethod() *RequestTokenStoragePaymentMethod {
	if r == nil {
		return nil
	}
	return r.PaymentMethod
}

func (r *RequestTokenStorage) GetSource() *Source {
	if r == nil {
		return nil
	}
	return r.Source
}

func (r *RequestTokenStorage) GetSubdomain() *Subdomain {
	if r == nil {
		return nil
	}
	return r.Subdomain
}

func (r *RequestTokenStorage) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestTokenStorage) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestTokenStorage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestTokenStorage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestTokenStorage) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Information about the payment method for the transaction.
type RequestTokenStoragePaymentMethod struct {
	// Tokenize a card payment method.
	TokenizeCard *TokenizeCard
	// Tokenize an ACH payment method.
	TokenizeAch *TokenizeAch
	// Converts a temporary token to a permanent token.
	ConvertToken *ConvertToken

	typ string
}

func (r *RequestTokenStoragePaymentMethod) GetTokenizeCard() *TokenizeCard {
	if r == nil {
		return nil
	}
	return r.TokenizeCard
}

func (r *RequestTokenStoragePaymentMethod) GetTokenizeAch() *TokenizeAch {
	if r == nil {
		return nil
	}
	return r.TokenizeAch
}

func (r *RequestTokenStoragePaymentMethod) GetConvertToken() *ConvertToken {
	if r == nil {
		return nil
	}
	return r.ConvertToken
}

func (r *RequestTokenStoragePaymentMethod) UnmarshalJSON(data []byte) error {
	valueTokenizeCard := new(TokenizeCard)
	if err := json.Unmarshal(data, &valueTokenizeCard); err == nil {
		r.typ = "TokenizeCard"
		r.TokenizeCard = valueTokenizeCard
		return nil
	}
	valueTokenizeAch := new(TokenizeAch)
	if err := json.Unmarshal(data, &valueTokenizeAch); err == nil {
		r.typ = "TokenizeAch"
		r.TokenizeAch = valueTokenizeAch
		return nil
	}
	valueConvertToken := new(ConvertToken)
	if err := json.Unmarshal(data, &valueConvertToken); err == nil {
		r.typ = "ConvertToken"
		r.ConvertToken = valueConvertToken
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestTokenStoragePaymentMethod) MarshalJSON() ([]byte, error) {
	if r.typ == "TokenizeCard" || r.TokenizeCard != nil {
		return json.Marshal(r.TokenizeCard)
	}
	if r.typ == "TokenizeAch" || r.TokenizeAch != nil {
		return json.Marshal(r.TokenizeAch)
	}
	if r.typ == "ConvertToken" || r.ConvertToken != nil {
		return json.Marshal(r.ConvertToken)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestTokenStoragePaymentMethodVisitor interface {
	VisitTokenizeCard(*TokenizeCard) error
	VisitTokenizeAch(*TokenizeAch) error
	VisitConvertToken(*ConvertToken) error
}

func (r *RequestTokenStoragePaymentMethod) Accept(visitor RequestTokenStoragePaymentMethodVisitor) error {
	if r.typ == "TokenizeCard" || r.TokenizeCard != nil {
		return visitor.VisitTokenizeCard(r.TokenizeCard)
	}
	if r.typ == "TokenizeAch" || r.TokenizeAch != nil {
		return visitor.VisitTokenizeAch(r.TokenizeAch)
	}
	if r.typ == "ConvertToken" || r.ConvertToken != nil {
		return visitor.VisitConvertToken(r.ConvertToken)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// Creates a temporary, one-time-use token for the payment method that expires in 12 hours. Defaults to `false`.
type Temporary = *bool

type TokenizeAch struct {
	// The type of payment method to tokenize. For ACH, this is always `ach`.
	Method         string         `json:"method" url:"method"`
	AchAccount     Achaccount     `json:"achAccount" url:"achAccount"`
	AchAccountType Achaccounttype `json:"achAccountType" url:"achAccountType"`
	AchCode        *AchSecCode    `json:"achCode,omitempty" url:"achCode,omitempty"`
	AchHolder      AchHolder      `json:"achHolder" url:"achHolder"`
	AchHolderType  *AchHolderType `json:"achHolderType,omitempty" url:"achHolderType,omitempty"`
	AchRouting     Achrouting     `json:"achRouting" url:"achRouting"`
	Device         *Device        `json:"device,omitempty" url:"device,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenizeAch) GetMethod() string {
	if t == nil {
		return ""
	}
	return t.Method
}

func (t *TokenizeAch) GetAchAccount() Achaccount {
	if t == nil {
		return ""
	}
	return t.AchAccount
}

func (t *TokenizeAch) GetAchAccountType() Achaccounttype {
	if t == nil {
		return ""
	}
	return t.AchAccountType
}

func (t *TokenizeAch) GetAchCode() *AchSecCode {
	if t == nil {
		return nil
	}
	return t.AchCode
}

func (t *TokenizeAch) GetAchHolder() AchHolder {
	if t == nil {
		return ""
	}
	return t.AchHolder
}

func (t *TokenizeAch) GetAchHolderType() *AchHolderType {
	if t == nil {
		return nil
	}
	return t.AchHolderType
}

func (t *TokenizeAch) GetAchRouting() Achrouting {
	if t == nil {
		return ""
	}
	return t.AchRouting
}

func (t *TokenizeAch) GetDevice() *Device {
	if t == nil {
		return nil
	}
	return t.Device
}

func (t *TokenizeAch) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenizeAch) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenizeAch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenizeAch(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenizeAch) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TokenizeCard struct {
	// The type of payment method to tokenize. For cards, this is always `card`.
	Method     string     `json:"method" url:"method"`
	Cardcvv    *Cardcvv   `json:"cardcvv,omitempty" url:"cardcvv,omitempty"`
	Cardexp    Cardexp    `json:"cardexp" url:"cardexp"`
	CardHolder Cardholder `json:"cardHolder" url:"cardHolder"`
	Cardnumber Cardnumber `json:"cardnumber" url:"cardnumber"`
	Cardzip    *Cardzip   `json:"cardzip,omitempty" url:"cardzip,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenizeCard) GetMethod() string {
	if t == nil {
		return ""
	}
	return t.Method
}

func (t *TokenizeCard) GetCardcvv() *Cardcvv {
	if t == nil {
		return nil
	}
	return t.Cardcvv
}

func (t *TokenizeCard) GetCardexp() Cardexp {
	if t == nil {
		return ""
	}
	return t.Cardexp
}

func (t *TokenizeCard) GetCardHolder() Cardholder {
	if t == nil {
		return ""
	}
	return t.CardHolder
}

func (t *TokenizeCard) GetCardnumber() Cardnumber {
	if t == nil {
		return ""
	}
	return t.Cardnumber
}

func (t *TokenizeCard) GetCardzip() *Cardzip {
	if t == nil {
		return nil
	}
	return t.Cardzip
}

func (t *TokenizeCard) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenizeCard) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenizeCard
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenizeCard(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenizeCard) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
