// Code generated by Fern. DO NOT EDIT.

package moneyin

import (
	context "context"
	http "net/http"
	sdk "sdk"
	core "sdk/core"
	internal "sdk/internal"
	option "sdk/option"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Authorize a card transaction. This returns an authorization code and reserves funds for the merchant. Authorized transactions aren't flagged for settlement until [captured](/api-reference/moneyin/capture-an-authorized-transaction).
//
// **Note**: Only card transactions can be authorized. This endpoint can't be used for ACH transactions.
func (c *Client) Authorize(
	ctx context.Context,
	request *sdk.RequestPaymentAuthorize,
	opts ...option.RequestOption,
) (*sdk.AuthResponse, error) {
	response, err := c.WithRawResponse.Authorize(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Capture an [authorized transaction](/api-reference/moneyin/authorize-a-transaction) to complete the transaction and move funds from the customer to merchant account.
func (c *Client) Capture(
	ctx context.Context,
	// Amount to be captured. The amount can't be greater the original total amount of the transaction. `0` captures the total amount authorized in the transaction.
	amount float64,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*sdk.CaptureResponse, error) {
	response, err := c.WithRawResponse.Capture(
		ctx,
		amount,
		transId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Make a temporary microdeposit in a customer account to verify the customer's ownership and access to the target account. Reverse the microdeposit with `reverseCredit`.
//
// This feature must be enabled by Payabli on a per-merchant basis. Contact support for help.
func (c *Client) Credit(
	ctx context.Context,
	request *sdk.RequestCredit,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponse0, error) {
	response, err := c.WithRawResponse.Credit(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieve a processed transaction's details.
func (c *Client) Details(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*sdk.TransactionQueryRecords, error) {
	response, err := c.WithRawResponse.Details(
		ctx,
		transId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Make a single transaction. This method authorizes and captures a payment in one step.
func (c *Client) Getpaid(
	ctx context.Context,
	request *sdk.RequestPayment,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponseGetPaid, error) {
	response, err := c.WithRawResponse.Getpaid(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// A reversal either refunds or voids a transaction independent of the transaction's settlement status. Send a reversal request for a transaction, and Payabli automatically determines whether it's a refund or void. You don't need to know whether the transaction is settled or not.
func (c *Client) Reverse(
	ctx context.Context,
	//
	// Amount to reverse from original transaction, minus any service fees charged on the original transaction.
	//
	// The amount provided can't be greater than the original total amount of the transaction, minus service fees. For example, if a transaction was $90 plus a $10 service fee, you can reverse up to $90.
	//
	// An amount equal to zero will refunds the total amount authorized minus any service fee.
	amount float64,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*sdk.ReverseResponse, error) {
	response, err := c.WithRawResponse.Reverse(
		ctx,
		amount,
		transId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Refund a transaction that has settled and send money back to the account holder. If a transaction hasn't been settled, void it instead.
func (c *Client) Refund(
	ctx context.Context,
	//
	// Amount to refund from original transaction, minus any service fees charged on the original transaction.
	//
	// The amount provided can't be greater than the original total amount of the transaction, minus service fees. For example, if a transaction was $90 plus a $10 service fee, you can refund up to $90.
	//
	// An amount equal to zero will refund the total amount authorized minus any service fee.
	amount float64,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*sdk.RefundResponse, error) {
	response, err := c.WithRawResponse.Refund(
		ctx,
		amount,
		transId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Refunds a settled transaction with split instructions.
func (c *Client) RefundWithInstructions(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	request *sdk.RequestRefund,
	opts ...option.RequestOption,
) (*sdk.RefundWithInstructionsResponse, error) {
	response, err := c.WithRawResponse.RefundWithInstructions(
		ctx,
		transId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Reverse microdeposits that are used to verify customer account ownership and access. The `transId` value is returned in the success response for the original credit transaction made with `api/MoneyIn/makecredit`.
func (c *Client) ReverseCredit(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponse, error) {
	response, err := c.WithRawResponse.ReverseCredit(
		ctx,
		transId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Send a payment receipt for a transaction.
func (c *Client) SendReceipt2Trans(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	request *sdk.SendReceipt2TransRequest,
	opts ...option.RequestOption,
) (*sdk.ReceiptResponse, error) {
	response, err := c.WithRawResponse.SendReceipt2Trans(
		ctx,
		transId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Validates a card number without running a transaction or authorizing a charge.
func (c *Client) Validate(
	ctx context.Context,
	request *sdk.RequestPaymentValidate,
	opts ...option.RequestOption,
) (*sdk.ValidateResponse, error) {
	response, err := c.WithRawResponse.Validate(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Cancel a transaction that hasn't been settled yet. Voiding non-captured authorizations prevents future captures. If a transaction has been settled, refund it instead.
func (c *Client) Void(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*sdk.VoidResponse, error) {
	response, err := c.WithRawResponse.Void(
		ctx,
		transId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
