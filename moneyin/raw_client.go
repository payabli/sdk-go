// Code generated by Fern. DO NOT EDIT.

package moneyin

import (
	context "context"
	sdkgo "github.com/payabli/sdk-go"
	core "github.com/payabli/sdk-go/core"
	internal "github.com/payabli/sdk-go/internal"
	option "github.com/payabli/sdk-go/option"
	http "net/http"
)

type RawClient struct {
	baseURL string
	caller  *internal.Caller
	options *core.RequestOptions
}

func NewRawClient(options *core.RequestOptions) *RawClient {
	return &RawClient{
		options: options,
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (r *RawClient) Authorize(
	ctx context.Context,
	request *sdkgo.RequestPaymentAuthorize,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.AuthResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := baseURL + "/MoneyIn/authorize"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	if request.IdempotencyKey != nil {
		headers.Add("idempotencyKey", *request.IdempotencyKey)
	}
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.AuthResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.AuthResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Capture(
	ctx context.Context,
	// Amount to be captured. The amount can't be greater the original total amount of the transaction. `0` captures the total amount authorized in the transaction. Partial captures aren't supported.
	amount float64,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.CaptureResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/MoneyIn/capture/%v/%v",
		amount,
		transId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.CaptureResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.CaptureResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) CaptureAuth(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	request *sdkgo.CaptureRequest,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.CaptureResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/MoneyIn/capture/%v",
		transId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.CaptureResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.CaptureResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Credit(
	ctx context.Context,
	request *sdkgo.RequestCredit,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.PayabliApiResponse0], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := baseURL + "/MoneyIn/makecredit"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	if request.IdempotencyKey != nil {
		headers.Add("idempotencyKey", *request.IdempotencyKey)
	}
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.PayabliApiResponse0
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.PayabliApiResponse0]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Details(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.TransactionQueryRecords], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/MoneyIn/details/%v",
		transId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.TransactionQueryRecords
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.TransactionQueryRecords]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Getpaid(
	ctx context.Context,
	request *sdkgo.RequestPayment,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.PayabliApiResponseGetPaid], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := baseURL + "/MoneyIn/getpaid"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	if request.IdempotencyKey != nil {
		headers.Add("idempotencyKey", *request.IdempotencyKey)
	}
	if request.ValidationCode != nil {
		headers.Add("validationCode", *request.ValidationCode)
	}
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.PayabliApiResponseGetPaid
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.PayabliApiResponseGetPaid]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Reverse(
	ctx context.Context,
	//
	// Amount to reverse from original transaction, minus any service fees charged on the original transaction.
	//
	// The amount provided can't be greater than the original total amount of the transaction, minus service fees. For example, if a transaction was $90 plus a $10 service fee, you can reverse up to $90.
	//
	// An amount equal to zero will refunds the total amount authorized minus any service fee.
	amount float64,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.ReverseResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/MoneyIn/reverse/%v/%v",
		amount,
		transId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.ReverseResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.ReverseResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Refund(
	ctx context.Context,
	//
	// Amount to refund from original transaction, minus any service fees charged on the original transaction.
	//
	// The amount provided can't be greater than the original total amount of the transaction, minus service fees. For example, if a transaction was $90 plus a $10 service fee, you can refund up to $90.
	//
	// An amount equal to zero will refund the total amount authorized minus any service fee.
	amount float64,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.RefundResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/MoneyIn/refund/%v/%v",
		amount,
		transId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.RefundResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.RefundResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) RefundWithInstructions(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	request *sdkgo.RequestRefund,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.RefundWithInstructionsResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/MoneyIn/refund/%v",
		transId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	if request.IdempotencyKey != nil {
		headers.Add("idempotencyKey", *request.IdempotencyKey)
	}
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.RefundWithInstructionsResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.RefundWithInstructionsResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) ReverseCredit(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.PayabliApiResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/MoneyIn/reverseCredit/%v",
		transId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.PayabliApiResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.PayabliApiResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) SendReceipt2Trans(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	request *sdkgo.SendReceipt2TransRequest,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.ReceiptResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/MoneyIn/sendreceipt/%v",
		transId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.ReceiptResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.ReceiptResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Validate(
	ctx context.Context,
	request *sdkgo.RequestPaymentValidate,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.ValidateResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := baseURL + "/MoneyIn/validate"
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	if request.IdempotencyKey != nil {
		headers.Add("idempotencyKey", *request.IdempotencyKey)
	}
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.ValidateResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.ValidateResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Void(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.VoidResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/MoneyIn/void/%v",
		transId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.VoidResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.VoidResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}
