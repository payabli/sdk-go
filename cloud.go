// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	big "math/big"
	time "time"
)

var (
	listDeviceRequestFieldForceRefresh = big.NewInt(1 << 0)
)

type ListDeviceRequest struct {
	// When `true`, the request retrieves an updated list of devices from the processor instead of returning a cached list of devices.
	ForceRefresh *bool `json:"-" url:"forceRefresh,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListDeviceRequest) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetForceRefresh sets the ForceRefresh field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListDeviceRequest) SetForceRefresh(forceRefresh *bool) {
	l.ForceRefresh = forceRefresh
	l.require(listDeviceRequestFieldForceRefresh)
}

var (
	deviceEntryFieldIdempotencyKey   = big.NewInt(1 << 0)
	deviceEntryFieldDescription      = big.NewInt(1 << 1)
	deviceEntryFieldRegistrationCode = big.NewInt(1 << 2)
)

type DeviceEntry struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	// Description or name for the device. This can be anything, but Payabli recommends entering the name of the paypoint, or some other easy to identify descriptor. If you have several devices for one paypoint, you can give them descriptions like "Cashier 1" and "Cashier 2", or "Front Desk" and "Back Office"
	Description *string `json:"description,omitempty" url:"-"`
	// The device registration code or serial number, depending on the model.
	//
	// - Ingenico devices: This is the activation code that's displayed on the device screen during setup.
	//
	// - PAX A920 device: This code is the serial number on the back of the device.
	RegistrationCode *string `json:"registrationCode,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (d *DeviceEntry) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetIdempotencyKey sets the IdempotencyKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeviceEntry) SetIdempotencyKey(idempotencyKey *IdempotencyKey) {
	d.IdempotencyKey = idempotencyKey
	d.require(deviceEntryFieldIdempotencyKey)
}

// SetDescription sets the Description field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeviceEntry) SetDescription(description *string) {
	d.Description = description
	d.require(deviceEntryFieldDescription)
}

// SetRegistrationCode sets the RegistrationCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeviceEntry) SetRegistrationCode(registrationCode *string) {
	d.RegistrationCode = registrationCode
	d.require(deviceEntryFieldRegistrationCode)
}

// Object containing details about cloud devices and their registration history.
var (
	cloudQueryApiResponseFieldIsSuccess    = big.NewInt(1 << 0)
	cloudQueryApiResponseFieldResponseList = big.NewInt(1 << 1)
	cloudQueryApiResponseFieldResponseText = big.NewInt(1 << 2)
)

type CloudQueryApiResponse struct {
	IsSuccess *IsSuccess `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	// List of devices and history of registration.
	ResponseList []*PoiDevice `json:"responseList,omitempty" url:"responseList,omitempty"`
	ResponseText ResponseText `json:"responseText" url:"responseText"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CloudQueryApiResponse) GetIsSuccess() *IsSuccess {
	if c == nil {
		return nil
	}
	return c.IsSuccess
}

func (c *CloudQueryApiResponse) GetResponseList() []*PoiDevice {
	if c == nil {
		return nil
	}
	return c.ResponseList
}

func (c *CloudQueryApiResponse) GetResponseText() ResponseText {
	if c == nil {
		return ""
	}
	return c.ResponseText
}

func (c *CloudQueryApiResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CloudQueryApiResponse) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetIsSuccess sets the IsSuccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CloudQueryApiResponse) SetIsSuccess(isSuccess *IsSuccess) {
	c.IsSuccess = isSuccess
	c.require(cloudQueryApiResponseFieldIsSuccess)
}

// SetResponseList sets the ResponseList field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CloudQueryApiResponse) SetResponseList(responseList []*PoiDevice) {
	c.ResponseList = responseList
	c.require(cloudQueryApiResponseFieldResponseList)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CloudQueryApiResponse) SetResponseText(responseText ResponseText) {
	c.ResponseText = responseText
	c.require(cloudQueryApiResponseFieldResponseText)
}

func (c *CloudQueryApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CloudQueryApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CloudQueryApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CloudQueryApiResponse) MarshalJSON() ([]byte, error) {
	type embed CloudQueryApiResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CloudQueryApiResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Information about the point of interaction device (also known as a terminal or cloud device) used to process the transaction.
var (
	poiDeviceFieldConnected            = big.NewInt(1 << 0)
	poiDeviceFieldDateDeRegistered     = big.NewInt(1 << 1)
	poiDeviceFieldDateRegistered       = big.NewInt(1 << 2)
	poiDeviceFieldDeviceId             = big.NewInt(1 << 3)
	poiDeviceFieldDeviceLicense        = big.NewInt(1 << 4)
	poiDeviceFieldDeviceNickName       = big.NewInt(1 << 5)
	poiDeviceFieldLastConnectedDate    = big.NewInt(1 << 6)
	poiDeviceFieldLastDisconnectedDate = big.NewInt(1 << 7)
	poiDeviceFieldLastTransactionDate  = big.NewInt(1 << 8)
	poiDeviceFieldMake                 = big.NewInt(1 << 9)
	poiDeviceFieldModel                = big.NewInt(1 << 10)
	poiDeviceFieldRegistered           = big.NewInt(1 << 11)
	poiDeviceFieldSerialNumber         = big.NewInt(1 << 12)
)

type PoiDevice struct {
	// The device connection status.
	Connected *bool `json:"connected,omitempty" url:"connected,omitempty"`
	// The date the device was unregistered.
	DateDeRegistered *time.Time `json:"dateDeRegistered,omitempty" url:"dateDeRegistered,omitempty"`
	// The date the device was registered.
	DateRegistered *time.Time `json:"dateRegistered,omitempty" url:"dateRegistered,omitempty"`
	// The device identifier.
	DeviceId *string `json:"deviceId,omitempty" url:"deviceId,omitempty"`
	// Device license. This is typically the same as `deviceId`.
	DeviceLicense *string `json:"deviceLicense,omitempty" url:"deviceLicense,omitempty"`
	// Device description provided during registration.
	DeviceNickName *string `json:"deviceNickName,omitempty" url:"deviceNickName,omitempty"`
	// Last connected date.
	LastConnectedDate *time.Time `json:"lastConnectedDate,omitempty" url:"lastConnectedDate,omitempty"`
	// Last disconnected date.
	LastDisconnectedDate *time.Time `json:"lastDisconnectedDate,omitempty" url:"lastDisconnectedDate,omitempty"`
	// Last transaction date.
	LastTransactionDate *time.Time `json:"lastTransactionDate,omitempty" url:"lastTransactionDate,omitempty"`
	// The device manufacturer.
	Make *string `json:"make,omitempty" url:"make,omitempty"`
	// The device model.
	Model *string `json:"model,omitempty" url:"model,omitempty"`
	// The device registration status.
	Registered *bool `json:"registered,omitempty" url:"registered,omitempty"`
	// The device serial number.
	SerialNumber *string `json:"serialNumber,omitempty" url:"serialNumber,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PoiDevice) GetConnected() *bool {
	if p == nil {
		return nil
	}
	return p.Connected
}

func (p *PoiDevice) GetDateDeRegistered() *time.Time {
	if p == nil {
		return nil
	}
	return p.DateDeRegistered
}

func (p *PoiDevice) GetDateRegistered() *time.Time {
	if p == nil {
		return nil
	}
	return p.DateRegistered
}

func (p *PoiDevice) GetDeviceId() *string {
	if p == nil {
		return nil
	}
	return p.DeviceId
}

func (p *PoiDevice) GetDeviceLicense() *string {
	if p == nil {
		return nil
	}
	return p.DeviceLicense
}

func (p *PoiDevice) GetDeviceNickName() *string {
	if p == nil {
		return nil
	}
	return p.DeviceNickName
}

func (p *PoiDevice) GetLastConnectedDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastConnectedDate
}

func (p *PoiDevice) GetLastDisconnectedDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastDisconnectedDate
}

func (p *PoiDevice) GetLastTransactionDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastTransactionDate
}

func (p *PoiDevice) GetMake() *string {
	if p == nil {
		return nil
	}
	return p.Make
}

func (p *PoiDevice) GetModel() *string {
	if p == nil {
		return nil
	}
	return p.Model
}

func (p *PoiDevice) GetRegistered() *bool {
	if p == nil {
		return nil
	}
	return p.Registered
}

func (p *PoiDevice) GetSerialNumber() *string {
	if p == nil {
		return nil
	}
	return p.SerialNumber
}

func (p *PoiDevice) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PoiDevice) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetConnected sets the Connected field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetConnected(connected *bool) {
	p.Connected = connected
	p.require(poiDeviceFieldConnected)
}

// SetDateDeRegistered sets the DateDeRegistered field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetDateDeRegistered(dateDeRegistered *time.Time) {
	p.DateDeRegistered = dateDeRegistered
	p.require(poiDeviceFieldDateDeRegistered)
}

// SetDateRegistered sets the DateRegistered field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetDateRegistered(dateRegistered *time.Time) {
	p.DateRegistered = dateRegistered
	p.require(poiDeviceFieldDateRegistered)
}

// SetDeviceId sets the DeviceId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetDeviceId(deviceId *string) {
	p.DeviceId = deviceId
	p.require(poiDeviceFieldDeviceId)
}

// SetDeviceLicense sets the DeviceLicense field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetDeviceLicense(deviceLicense *string) {
	p.DeviceLicense = deviceLicense
	p.require(poiDeviceFieldDeviceLicense)
}

// SetDeviceNickName sets the DeviceNickName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetDeviceNickName(deviceNickName *string) {
	p.DeviceNickName = deviceNickName
	p.require(poiDeviceFieldDeviceNickName)
}

// SetLastConnectedDate sets the LastConnectedDate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetLastConnectedDate(lastConnectedDate *time.Time) {
	p.LastConnectedDate = lastConnectedDate
	p.require(poiDeviceFieldLastConnectedDate)
}

// SetLastDisconnectedDate sets the LastDisconnectedDate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetLastDisconnectedDate(lastDisconnectedDate *time.Time) {
	p.LastDisconnectedDate = lastDisconnectedDate
	p.require(poiDeviceFieldLastDisconnectedDate)
}

// SetLastTransactionDate sets the LastTransactionDate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetLastTransactionDate(lastTransactionDate *time.Time) {
	p.LastTransactionDate = lastTransactionDate
	p.require(poiDeviceFieldLastTransactionDate)
}

// SetMake sets the Make field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetMake(make_ *string) {
	p.Make = make_
	p.require(poiDeviceFieldMake)
}

// SetModel sets the Model field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetModel(model *string) {
	p.Model = model
	p.require(poiDeviceFieldModel)
}

// SetRegistered sets the Registered field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetRegistered(registered *bool) {
	p.Registered = registered
	p.require(poiDeviceFieldRegistered)
}

// SetSerialNumber sets the SerialNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PoiDevice) SetSerialNumber(serialNumber *string) {
	p.SerialNumber = serialNumber
	p.require(poiDeviceFieldSerialNumber)
}

func (p *PoiDevice) UnmarshalJSON(data []byte) error {
	type embed PoiDevice
	var unmarshaler = struct {
		embed
		DateDeRegistered     *internal.DateTime `json:"dateDeRegistered,omitempty"`
		DateRegistered       *internal.DateTime `json:"dateRegistered,omitempty"`
		LastConnectedDate    *internal.DateTime `json:"lastConnectedDate,omitempty"`
		LastDisconnectedDate *internal.DateTime `json:"lastDisconnectedDate,omitempty"`
		LastTransactionDate  *internal.DateTime `json:"lastTransactionDate,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PoiDevice(unmarshaler.embed)
	p.DateDeRegistered = unmarshaler.DateDeRegistered.TimePtr()
	p.DateRegistered = unmarshaler.DateRegistered.TimePtr()
	p.LastConnectedDate = unmarshaler.LastConnectedDate.TimePtr()
	p.LastDisconnectedDate = unmarshaler.LastDisconnectedDate.TimePtr()
	p.LastTransactionDate = unmarshaler.LastTransactionDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PoiDevice) MarshalJSON() ([]byte, error) {
	type embed PoiDevice
	var marshaler = struct {
		embed
		DateDeRegistered     *internal.DateTime `json:"dateDeRegistered,omitempty"`
		DateRegistered       *internal.DateTime `json:"dateRegistered,omitempty"`
		LastConnectedDate    *internal.DateTime `json:"lastConnectedDate,omitempty"`
		LastDisconnectedDate *internal.DateTime `json:"lastDisconnectedDate,omitempty"`
		LastTransactionDate  *internal.DateTime `json:"lastTransactionDate,omitempty"`
	}{
		embed:                embed(*p),
		DateDeRegistered:     internal.NewOptionalDateTime(p.DateDeRegistered),
		DateRegistered:       internal.NewOptionalDateTime(p.DateRegistered),
		LastConnectedDate:    internal.NewOptionalDateTime(p.LastConnectedDate),
		LastDisconnectedDate: internal.NewOptionalDateTime(p.LastDisconnectedDate),
		LastTransactionDate:  internal.NewOptionalDateTime(p.LastTransactionDate),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PoiDevice) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	addDeviceResponseFieldIsSuccess      = big.NewInt(1 << 0)
	addDeviceResponseFieldResponseText   = big.NewInt(1 << 1)
	addDeviceResponseFieldPageIdentifier = big.NewInt(1 << 2)
	addDeviceResponseFieldResponseData   = big.NewInt(1 << 3)
)

type AddDeviceResponse struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText   ResponseText    `json:"responseText" url:"responseText"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	// If `isSuccess` = true, this contains the device identifier.
	// If `isSuccess` = false, this contains the reason for the error.
	ResponseData *string `json:"responseData,omitempty" url:"responseData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddDeviceResponse) GetIsSuccess() *IsSuccess {
	if a == nil {
		return nil
	}
	return a.IsSuccess
}

func (a *AddDeviceResponse) GetResponseText() ResponseText {
	if a == nil {
		return ""
	}
	return a.ResponseText
}

func (a *AddDeviceResponse) GetPageIdentifier() *PageIdentifier {
	if a == nil {
		return nil
	}
	return a.PageIdentifier
}

func (a *AddDeviceResponse) GetResponseData() *string {
	if a == nil {
		return nil
	}
	return a.ResponseData
}

func (a *AddDeviceResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddDeviceResponse) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIsSuccess sets the IsSuccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddDeviceResponse) SetIsSuccess(isSuccess *IsSuccess) {
	a.IsSuccess = isSuccess
	a.require(addDeviceResponseFieldIsSuccess)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddDeviceResponse) SetResponseText(responseText ResponseText) {
	a.ResponseText = responseText
	a.require(addDeviceResponseFieldResponseText)
}

// SetPageIdentifier sets the PageIdentifier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddDeviceResponse) SetPageIdentifier(pageIdentifier *PageIdentifier) {
	a.PageIdentifier = pageIdentifier
	a.require(addDeviceResponseFieldPageIdentifier)
}

// SetResponseData sets the ResponseData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddDeviceResponse) SetResponseData(responseData *string) {
	a.ResponseData = responseData
	a.require(addDeviceResponseFieldResponseData)
}

func (a *AddDeviceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddDeviceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddDeviceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddDeviceResponse) MarshalJSON() ([]byte, error) {
	type embed AddDeviceResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AddDeviceResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	removeDeviceResponseFieldIsSuccess      = big.NewInt(1 << 0)
	removeDeviceResponseFieldResponseText   = big.NewInt(1 << 1)
	removeDeviceResponseFieldPageIdentifier = big.NewInt(1 << 2)
	removeDeviceResponseFieldResponseData   = big.NewInt(1 << 3)
)

type RemoveDeviceResponse struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText   ResponseText    `json:"responseText" url:"responseText"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	// If `isSuccess` = true, this contains the device identifier.
	// If `isSuccess` = false, this contains the reason for the error.
	ResponseData *string `json:"responseData,omitempty" url:"responseData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoveDeviceResponse) GetIsSuccess() *IsSuccess {
	if r == nil {
		return nil
	}
	return r.IsSuccess
}

func (r *RemoveDeviceResponse) GetResponseText() ResponseText {
	if r == nil {
		return ""
	}
	return r.ResponseText
}

func (r *RemoveDeviceResponse) GetPageIdentifier() *PageIdentifier {
	if r == nil {
		return nil
	}
	return r.PageIdentifier
}

func (r *RemoveDeviceResponse) GetResponseData() *string {
	if r == nil {
		return nil
	}
	return r.ResponseData
}

func (r *RemoveDeviceResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoveDeviceResponse) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetIsSuccess sets the IsSuccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RemoveDeviceResponse) SetIsSuccess(isSuccess *IsSuccess) {
	r.IsSuccess = isSuccess
	r.require(removeDeviceResponseFieldIsSuccess)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RemoveDeviceResponse) SetResponseText(responseText ResponseText) {
	r.ResponseText = responseText
	r.require(removeDeviceResponseFieldResponseText)
}

// SetPageIdentifier sets the PageIdentifier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RemoveDeviceResponse) SetPageIdentifier(pageIdentifier *PageIdentifier) {
	r.PageIdentifier = pageIdentifier
	r.require(removeDeviceResponseFieldPageIdentifier)
}

// SetResponseData sets the ResponseData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RemoveDeviceResponse) SetResponseData(responseData *string) {
	r.ResponseData = responseData
	r.require(removeDeviceResponseFieldResponseData)
}

func (r *RemoveDeviceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoveDeviceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoveDeviceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoveDeviceResponse) MarshalJSON() ([]byte, error) {
	type embed RemoveDeviceResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RemoveDeviceResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
