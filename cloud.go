// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
	time "time"
)

type ListDeviceRequest struct {
	// When `true`, the request retrieves an updated list of devices from the processor instead of returning a cached list of devices.
	ForceRefresh *bool `json:"-" url:"forceRefresh,omitempty"`
}

type DeviceEntry struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	// Description or name for the device. This can be anything, but Payabli recommends entering the name of the paypoint, or some other easy to identify descriptor. If you have several devices for one paypoint, you can give them descriptions like "Cashier 1" and "Cashier 2", or "Front Desk" and "Back Office"
	Description *string `json:"description,omitempty" url:"-"`
	// The device registration code or serial number, depending on the model.
	//
	// - Ingenico devices: This is the activation code that's displayed on the device screen during setup.
	//
	// - PAX A920 device: This code is the serial number on the back of the device.
	RegistrationCode *string `json:"registrationCode,omitempty" url:"-"`
}

// Object containing details about cloud devices and their registration history.
type CloudQueryApiResponse struct {
	IsSuccess *IsSuccess `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	// List of devices and history of registration.
	ResponseList []*PoiDevice  `json:"responseList,omitempty" url:"responseList,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CloudQueryApiResponse) GetIsSuccess() *IsSuccess {
	if c == nil {
		return nil
	}
	return c.IsSuccess
}

func (c *CloudQueryApiResponse) GetResponseList() []*PoiDevice {
	if c == nil {
		return nil
	}
	return c.ResponseList
}

func (c *CloudQueryApiResponse) GetResponseText() *ResponseText {
	if c == nil {
		return nil
	}
	return c.ResponseText
}

func (c *CloudQueryApiResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CloudQueryApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CloudQueryApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CloudQueryApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CloudQueryApiResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Information about the point of interaction device (also known as a terminal or cloud device) used to process the transaction.
type PoiDevice struct {
	// The device connection status.
	Connected *bool `json:"connected,omitempty" url:"connected,omitempty"`
	// The date the device was unregistered.
	DateDeRegistered *time.Time `json:"dateDeRegistered,omitempty" url:"dateDeRegistered,omitempty"`
	// The date the device was registered.
	DateRegistered *time.Time `json:"dateRegistered,omitempty" url:"dateRegistered,omitempty"`
	// The device identifier.
	DeviceId *string `json:"deviceId,omitempty" url:"deviceId,omitempty"`
	// Device license. This is typically the same as `deviceId`.
	DeviceLicense *string `json:"deviceLicense,omitempty" url:"deviceLicense,omitempty"`
	// Device description provided during registration.
	DeviceNickName *string `json:"deviceNickName,omitempty" url:"deviceNickName,omitempty"`
	// Last connected date.
	LastConnectedDate *time.Time `json:"lastConnectedDate,omitempty" url:"lastConnectedDate,omitempty"`
	// Last disconnected date.
	LastDisconnectedDate *time.Time `json:"lastDisconnectedDate,omitempty" url:"lastDisconnectedDate,omitempty"`
	// Last transaction date.
	LastTransactionDate *time.Time `json:"lastTransactionDate,omitempty" url:"lastTransactionDate,omitempty"`
	// The device manufacturer.
	Make *string `json:"make,omitempty" url:"make,omitempty"`
	// The device model.
	Model *string `json:"model,omitempty" url:"model,omitempty"`
	// The device registration status.
	Registered *bool `json:"registered,omitempty" url:"registered,omitempty"`
	// The device serial number.
	SerialNumber *string `json:"serialNumber,omitempty" url:"serialNumber,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PoiDevice) GetConnected() *bool {
	if p == nil {
		return nil
	}
	return p.Connected
}

func (p *PoiDevice) GetDateDeRegistered() *time.Time {
	if p == nil {
		return nil
	}
	return p.DateDeRegistered
}

func (p *PoiDevice) GetDateRegistered() *time.Time {
	if p == nil {
		return nil
	}
	return p.DateRegistered
}

func (p *PoiDevice) GetDeviceId() *string {
	if p == nil {
		return nil
	}
	return p.DeviceId
}

func (p *PoiDevice) GetDeviceLicense() *string {
	if p == nil {
		return nil
	}
	return p.DeviceLicense
}

func (p *PoiDevice) GetDeviceNickName() *string {
	if p == nil {
		return nil
	}
	return p.DeviceNickName
}

func (p *PoiDevice) GetLastConnectedDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastConnectedDate
}

func (p *PoiDevice) GetLastDisconnectedDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastDisconnectedDate
}

func (p *PoiDevice) GetLastTransactionDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastTransactionDate
}

func (p *PoiDevice) GetMake() *string {
	if p == nil {
		return nil
	}
	return p.Make
}

func (p *PoiDevice) GetModel() *string {
	if p == nil {
		return nil
	}
	return p.Model
}

func (p *PoiDevice) GetRegistered() *bool {
	if p == nil {
		return nil
	}
	return p.Registered
}

func (p *PoiDevice) GetSerialNumber() *string {
	if p == nil {
		return nil
	}
	return p.SerialNumber
}

func (p *PoiDevice) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PoiDevice) UnmarshalJSON(data []byte) error {
	type embed PoiDevice
	var unmarshaler = struct {
		embed
		DateDeRegistered     *internal.DateTime `json:"dateDeRegistered,omitempty"`
		DateRegistered       *internal.DateTime `json:"dateRegistered,omitempty"`
		LastConnectedDate    *internal.DateTime `json:"lastConnectedDate,omitempty"`
		LastDisconnectedDate *internal.DateTime `json:"lastDisconnectedDate,omitempty"`
		LastTransactionDate  *internal.DateTime `json:"lastTransactionDate,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PoiDevice(unmarshaler.embed)
	p.DateDeRegistered = unmarshaler.DateDeRegistered.TimePtr()
	p.DateRegistered = unmarshaler.DateRegistered.TimePtr()
	p.LastConnectedDate = unmarshaler.LastConnectedDate.TimePtr()
	p.LastDisconnectedDate = unmarshaler.LastDisconnectedDate.TimePtr()
	p.LastTransactionDate = unmarshaler.LastTransactionDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PoiDevice) MarshalJSON() ([]byte, error) {
	type embed PoiDevice
	var marshaler = struct {
		embed
		DateDeRegistered     *internal.DateTime `json:"dateDeRegistered,omitempty"`
		DateRegistered       *internal.DateTime `json:"dateRegistered,omitempty"`
		LastConnectedDate    *internal.DateTime `json:"lastConnectedDate,omitempty"`
		LastDisconnectedDate *internal.DateTime `json:"lastDisconnectedDate,omitempty"`
		LastTransactionDate  *internal.DateTime `json:"lastTransactionDate,omitempty"`
	}{
		embed:                embed(*p),
		DateDeRegistered:     internal.NewOptionalDateTime(p.DateDeRegistered),
		DateRegistered:       internal.NewOptionalDateTime(p.DateRegistered),
		LastConnectedDate:    internal.NewOptionalDateTime(p.LastConnectedDate),
		LastDisconnectedDate: internal.NewOptionalDateTime(p.LastDisconnectedDate),
		LastTransactionDate:  internal.NewOptionalDateTime(p.LastTransactionDate),
	}
	return json.Marshal(marshaler)
}

func (p *PoiDevice) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type AddDeviceResponse struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText   *ResponseText   `json:"responseText,omitempty" url:"responseText,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	// If `isSuccess` = true, this contains the device identifier.
	// If `isSuccess` = false, this contains the reason for the error.
	ResponseData *string `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddDeviceResponse) GetIsSuccess() *IsSuccess {
	if a == nil {
		return nil
	}
	return a.IsSuccess
}

func (a *AddDeviceResponse) GetResponseText() *ResponseText {
	if a == nil {
		return nil
	}
	return a.ResponseText
}

func (a *AddDeviceResponse) GetPageIdentifier() *PageIdentifier {
	if a == nil {
		return nil
	}
	return a.PageIdentifier
}

func (a *AddDeviceResponse) GetResponseData() *string {
	if a == nil {
		return nil
	}
	return a.ResponseData
}

func (a *AddDeviceResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddDeviceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddDeviceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddDeviceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddDeviceResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type RemoveDeviceResponse struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText   *ResponseText   `json:"responseText,omitempty" url:"responseText,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	// If `isSuccess` = true, this contains the device identifier.
	// If `isSuccess` = false, this contains the reason for the error.
	ResponseData *string `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoveDeviceResponse) GetIsSuccess() *IsSuccess {
	if r == nil {
		return nil
	}
	return r.IsSuccess
}

func (r *RemoveDeviceResponse) GetResponseText() *ResponseText {
	if r == nil {
		return nil
	}
	return r.ResponseText
}

func (r *RemoveDeviceResponse) GetPageIdentifier() *PageIdentifier {
	if r == nil {
		return nil
	}
	return r.PageIdentifier
}

func (r *RemoveDeviceResponse) GetResponseData() *string {
	if r == nil {
		return nil
	}
	return r.ResponseData
}

func (r *RemoveDeviceResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoveDeviceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoveDeviceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoveDeviceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoveDeviceResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
