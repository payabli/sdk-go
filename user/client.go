// Code generated by Fern. DO NOT EDIT.

package user

import (
	context "context"
	sdk "github.com/payabli/sdk-go"
	core "github.com/payabli/sdk-go/core"
	internal "github.com/payabli/sdk-go/internal"
	option "github.com/payabli/sdk-go/option"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (c *Client) AddUser(
	ctx context.Context,
	request *sdk.UserData,
	opts ...option.RequestOption,
) (*sdk.AddUserResponse, error) {
	response, err := c.WithRawResponse.AddUser(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) AuthRefreshUser(
	ctx context.Context,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponseUserMfa, error) {
	response, err := c.WithRawResponse.AuthRefreshUser(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) AuthResetUser(
	ctx context.Context,
	request *sdk.UserAuthResetRequest,
	opts ...option.RequestOption,
) (*sdk.AuthResetUserResponse, error) {
	response, err := c.WithRawResponse.AuthResetUser(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// This endpoint requires an application API token.
func (c *Client) AuthUser(
	ctx context.Context,
	// Auth provider. This fields is optional and defaults to null for the built-in provider.
	provider string,
	request *sdk.UserAuthRequest,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponseMfaBasic, error) {
	response, err := c.WithRawResponse.AuthUser(
		ctx,
		provider,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ChangePswUser(
	ctx context.Context,
	request *sdk.UserAuthPswResetRequest,
	opts ...option.RequestOption,
) (*sdk.ChangePswUserResponse, error) {
	response, err := c.WithRawResponse.ChangePswUser(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) DeleteUser(
	ctx context.Context,
	// The Payabli-generated `userId` value.
	userId int64,
	opts ...option.RequestOption,
) (*sdk.DeleteUserResponse, error) {
	response, err := c.WithRawResponse.DeleteUser(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) EditMfaUser(
	ctx context.Context,
	// User Identifier
	userId int64,
	request *sdk.MfaData,
	opts ...option.RequestOption,
) (*sdk.EditMfaUserResponse, error) {
	response, err := c.WithRawResponse.EditMfaUser(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) EditUser(
	ctx context.Context,
	// User Identifier
	userId int64,
	request *sdk.UserData,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponse, error) {
	response, err := c.WithRawResponse.EditUser(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetUser(
	ctx context.Context,
	// The Payabli-generated `userId` value.
	userId int64,
	request *sdk.GetUserRequest,
	opts ...option.RequestOption,
) (*sdk.UserQueryRecord, error) {
	response, err := c.WithRawResponse.GetUser(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) LogoutUser(
	ctx context.Context,
	opts ...option.RequestOption,
) (*sdk.LogoutUserResponse, error) {
	response, err := c.WithRawResponse.LogoutUser(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ResendMfaCode(
	ctx context.Context,
	//
	entry string,
	//
	entryType int,
	//
	usrname string,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponseMfaBasic, error) {
	response, err := c.WithRawResponse.ResendMfaCode(
		ctx,
		entry,
		entryType,
		usrname,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ValidateMfaUser(
	ctx context.Context,
	request *sdk.MfaValidationData,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponseUserMfa, error) {
	response, err := c.WithRawResponse.ValidateMfaUser(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
