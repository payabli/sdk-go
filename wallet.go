// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	time "time"
)

type ConfigureOrganizationRequestApplePay struct {
	Cascade   *Cascade        `json:"cascade,omitempty" url:"-"`
	IsEnabled *IsEnabled      `json:"isEnabled,omitempty" url:"-"`
	OrgId     *OrganizationId `json:"orgId,omitempty" url:"-"`
}

type ConfigurePaypointRequestApplePay struct {
	Entry *Entry `json:"entry,omitempty" url:"-"`
	// When `true`, Apple Pay is enabled.
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"-"`
}

type ConfigureOrganizationRequestGooglePay struct {
	Cascade   *Cascade        `json:"cascade,omitempty" url:"-"`
	IsEnabled *IsEnabled      `json:"isEnabled,omitempty" url:"-"`
	OrgId     *OrganizationId `json:"orgId,omitempty" url:"-"`
}

type ConfigurePaypointRequestGooglePay struct {
	Entry *Entry `json:"entry,omitempty" url:"-"`
	// When `true`, Google Pay is enabled.
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"-"`
}

// The internal identifier for Apple Pay-related information.
type ApplePayId = string

type ApplePayOrganizationUpdateData struct {
	CreatedAt *CreatedAt `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	// Internal ID for the Apple Pay organization update.
	Id             *ApplePayId     `json:"id,omitempty" url:"id,omitempty"`
	JobId          *JobId          `json:"jobId,omitempty" url:"jobId,omitempty"`
	JobStatus      *JobStatus      `json:"jobStatus,omitempty" url:"jobStatus,omitempty"`
	OrganizationId *OrganizationId `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// The record type, in this context it will always be `ApplePayOrganizationUpdate`.
	Type      *ApplePayType        `json:"type,omitempty" url:"type,omitempty"`
	UpdatedAt *LastModified        `json:"updatedAt,omitempty" url:"updatedAt,omitempty"`
	Updates   *OrganizationUpdates `json:"updates,omitempty" url:"updates,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplePayOrganizationUpdateData) GetCreatedAt() *CreatedAt {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ApplePayOrganizationUpdateData) GetId() *ApplePayId {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *ApplePayOrganizationUpdateData) GetJobId() *JobId {
	if a == nil {
		return nil
	}
	return a.JobId
}

func (a *ApplePayOrganizationUpdateData) GetJobStatus() *JobStatus {
	if a == nil {
		return nil
	}
	return a.JobStatus
}

func (a *ApplePayOrganizationUpdateData) GetOrganizationId() *OrganizationId {
	if a == nil {
		return nil
	}
	return a.OrganizationId
}

func (a *ApplePayOrganizationUpdateData) GetType() *ApplePayType {
	if a == nil {
		return nil
	}
	return a.Type
}

func (a *ApplePayOrganizationUpdateData) GetUpdatedAt() *LastModified {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ApplePayOrganizationUpdateData) GetUpdates() *OrganizationUpdates {
	if a == nil {
		return nil
	}
	return a.Updates
}

func (a *ApplePayOrganizationUpdateData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplePayOrganizationUpdateData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplePayOrganizationUpdateData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplePayOrganizationUpdateData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplePayOrganizationUpdateData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplePayPaypointRegistrationData struct {
	Entry     *Entry     `json:"entry,omitempty" url:"entry,omitempty"`
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`
	// The wallet type. In this context it will always be `applePay`.
	WalletType *string          `json:"walletType,omitempty" url:"walletType,omitempty"`
	WalletData *AppleWalletData `json:"walletData,omitempty" url:"walletData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplePayPaypointRegistrationData) GetEntry() *Entry {
	if a == nil {
		return nil
	}
	return a.Entry
}

func (a *ApplePayPaypointRegistrationData) GetIsEnabled() *IsEnabled {
	if a == nil {
		return nil
	}
	return a.IsEnabled
}

func (a *ApplePayPaypointRegistrationData) GetWalletType() *string {
	if a == nil {
		return nil
	}
	return a.WalletType
}

func (a *ApplePayPaypointRegistrationData) GetWalletData() *AppleWalletData {
	if a == nil {
		return nil
	}
	return a.WalletData
}

func (a *ApplePayPaypointRegistrationData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplePayPaypointRegistrationData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplePayPaypointRegistrationData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplePayPaypointRegistrationData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplePayPaypointRegistrationData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The record type.
type ApplePayType = *string

// The wallet data.
type AppleWalletData struct {
	Entry *Entry `json:"entry,omitempty" url:"entry,omitempty"`
	// The Apple Pay merchant identifier.
	ApplePayMerchantId *string `json:"applePayMerchantId,omitempty" url:"applePayMerchantId,omitempty"`
	// A list of domain names that are enabled for this paypoint.
	DomainNames  []DomainName  `json:"domainNames,omitempty" url:"domainNames,omitempty"`
	PaypointName *PaypointName `json:"paypointName,omitempty" url:"paypointName,omitempty"`
	// The paypoint URL.
	PaypointUrl *string `json:"paypointUrl,omitempty" url:"paypointUrl,omitempty"`
	// The date and time a paypoint's Apple Pay registration was scheduled for deletion. The paypoint will be unregistered from Apple Pay permanently 30 days from this value.
	MarkedForDeletionAt *time.Time    `json:"markedForDeletionAt,omitempty" url:"markedForDeletionAt,omitempty"`
	CreatedAt           *CreatedAt    `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	UpdatedAt           *LastModified `json:"updatedAt,omitempty" url:"updatedAt,omitempty"`
	// Internal ID for the Apple Pay paypoint registration update.
	Id *ApplePayId `json:"id,omitempty" url:"id,omitempty"`
	// The record type, in this context it will always be `ApplePayRegistration`.
	Type *ApplePayType `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AppleWalletData) GetEntry() *Entry {
	if a == nil {
		return nil
	}
	return a.Entry
}

func (a *AppleWalletData) GetApplePayMerchantId() *string {
	if a == nil {
		return nil
	}
	return a.ApplePayMerchantId
}

func (a *AppleWalletData) GetDomainNames() []DomainName {
	if a == nil {
		return nil
	}
	return a.DomainNames
}

func (a *AppleWalletData) GetPaypointName() *PaypointName {
	if a == nil {
		return nil
	}
	return a.PaypointName
}

func (a *AppleWalletData) GetPaypointUrl() *string {
	if a == nil {
		return nil
	}
	return a.PaypointUrl
}

func (a *AppleWalletData) GetMarkedForDeletionAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.MarkedForDeletionAt
}

func (a *AppleWalletData) GetCreatedAt() *CreatedAt {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AppleWalletData) GetUpdatedAt() *LastModified {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AppleWalletData) GetId() *ApplePayId {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AppleWalletData) GetType() *ApplePayType {
	if a == nil {
		return nil
	}
	return a.Type
}

func (a *AppleWalletData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AppleWalletData) UnmarshalJSON(data []byte) error {
	type embed AppleWalletData
	var unmarshaler = struct {
		embed
		MarkedForDeletionAt *internal.DateTime `json:"markedForDeletionAt,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AppleWalletData(unmarshaler.embed)
	a.MarkedForDeletionAt = unmarshaler.MarkedForDeletionAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AppleWalletData) MarshalJSON() ([]byte, error) {
	type embed AppleWalletData
	var marshaler = struct {
		embed
		MarkedForDeletionAt *internal.DateTime `json:"markedForDeletionAt,omitempty"`
	}{
		embed:               embed(*a),
		MarkedForDeletionAt: internal.NewOptionalDateTime(a.MarkedForDeletionAt),
	}
	return json.Marshal(marshaler)
}

func (a *AppleWalletData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// When `true`, the wallet service configuration cascades to all paypoints and suborganizations belonging to the parent entity.
type Cascade = bool

type ConfigureApplePayOrganizationApiResponse struct {
	IsSuccess      *IsSuccess                      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier                 `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode                   `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	ResponseData   *ApplePayOrganizationUpdateData `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText   ResponseText                    `json:"responseText" url:"responseText"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConfigureApplePayOrganizationApiResponse) GetIsSuccess() *IsSuccess {
	if c == nil {
		return nil
	}
	return c.IsSuccess
}

func (c *ConfigureApplePayOrganizationApiResponse) GetPageIdentifier() *PageIdentifier {
	if c == nil {
		return nil
	}
	return c.PageIdentifier
}

func (c *ConfigureApplePayOrganizationApiResponse) GetResponseCode() *Responsecode {
	if c == nil {
		return nil
	}
	return c.ResponseCode
}

func (c *ConfigureApplePayOrganizationApiResponse) GetResponseData() *ApplePayOrganizationUpdateData {
	if c == nil {
		return nil
	}
	return c.ResponseData
}

func (c *ConfigureApplePayOrganizationApiResponse) GetResponseText() ResponseText {
	if c == nil {
		return ""
	}
	return c.ResponseText
}

func (c *ConfigureApplePayOrganizationApiResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConfigureApplePayOrganizationApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConfigureApplePayOrganizationApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConfigureApplePayOrganizationApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConfigureApplePayOrganizationApiResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConfigureApplePaypointApiResponse struct {
	IsSuccess      *IsSuccess                        `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier                   `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode                     `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	ResponseData   *ApplePayPaypointRegistrationData `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText   ResponseText                      `json:"responseText" url:"responseText"`
	// Field not in use on this endpoint
	RoomId *int64 `json:"roomId,omitempty" url:"roomId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConfigureApplePaypointApiResponse) GetIsSuccess() *IsSuccess {
	if c == nil {
		return nil
	}
	return c.IsSuccess
}

func (c *ConfigureApplePaypointApiResponse) GetPageIdentifier() *PageIdentifier {
	if c == nil {
		return nil
	}
	return c.PageIdentifier
}

func (c *ConfigureApplePaypointApiResponse) GetResponseCode() *Responsecode {
	if c == nil {
		return nil
	}
	return c.ResponseCode
}

func (c *ConfigureApplePaypointApiResponse) GetResponseData() *ApplePayPaypointRegistrationData {
	if c == nil {
		return nil
	}
	return c.ResponseData
}

func (c *ConfigureApplePaypointApiResponse) GetResponseText() ResponseText {
	if c == nil {
		return ""
	}
	return c.ResponseText
}

func (c *ConfigureApplePaypointApiResponse) GetRoomId() *int64 {
	if c == nil {
		return nil
	}
	return c.RoomId
}

func (c *ConfigureApplePaypointApiResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConfigureApplePaypointApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConfigureApplePaypointApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConfigureApplePaypointApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConfigureApplePaypointApiResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConfigureGooglePaypointApiResponse struct {
	IsSuccess      IsSuccess                          `json:"isSuccess" url:"isSuccess"`
	PageIdentifier PageIdentifier                     `json:"pageIdentifier" url:"pageIdentifier"`
	ResponseCode   Responsecode                       `json:"responseCode" url:"responseCode"`
	ResponseData   *GooglePayPaypointRegistrationData `json:"responseData" url:"responseData"`
	ResponseText   ResponseText                       `json:"responseText" url:"responseText"`
	// Field not in use on this endpoint
	RoomId *int64 `json:"roomId,omitempty" url:"roomId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConfigureGooglePaypointApiResponse) GetIsSuccess() IsSuccess {
	if c == nil {
		return false
	}
	return c.IsSuccess
}

func (c *ConfigureGooglePaypointApiResponse) GetPageIdentifier() PageIdentifier {
	if c == nil {
		return ""
	}
	return c.PageIdentifier
}

func (c *ConfigureGooglePaypointApiResponse) GetResponseCode() Responsecode {
	if c == nil {
		return 0
	}
	return c.ResponseCode
}

func (c *ConfigureGooglePaypointApiResponse) GetResponseData() *GooglePayPaypointRegistrationData {
	if c == nil {
		return nil
	}
	return c.ResponseData
}

func (c *ConfigureGooglePaypointApiResponse) GetResponseText() ResponseText {
	if c == nil {
		return ""
	}
	return c.ResponseText
}

func (c *ConfigureGooglePaypointApiResponse) GetRoomId() *int64 {
	if c == nil {
		return nil
	}
	return c.RoomId
}

func (c *ConfigureGooglePaypointApiResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConfigureGooglePaypointApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConfigureGooglePaypointApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConfigureGooglePaypointApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConfigureGooglePaypointApiResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GooglePayPaypointRegistrationData struct {
	Entry     *Entry     `json:"entry,omitempty" url:"entry,omitempty"`
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`
	// The wallet type. In this context it will always be `googlePay`.
	WalletType *string           `json:"walletType,omitempty" url:"walletType,omitempty"`
	WalletData *GoogleWalletData `json:"walletData,omitempty" url:"walletData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayPaypointRegistrationData) GetEntry() *Entry {
	if g == nil {
		return nil
	}
	return g.Entry
}

func (g *GooglePayPaypointRegistrationData) GetIsEnabled() *IsEnabled {
	if g == nil {
		return nil
	}
	return g.IsEnabled
}

func (g *GooglePayPaypointRegistrationData) GetWalletType() *string {
	if g == nil {
		return nil
	}
	return g.WalletType
}

func (g *GooglePayPaypointRegistrationData) GetWalletData() *GoogleWalletData {
	if g == nil {
		return nil
	}
	return g.WalletData
}

func (g *GooglePayPaypointRegistrationData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayPaypointRegistrationData) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePayPaypointRegistrationData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePayPaypointRegistrationData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayPaypointRegistrationData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// The wallet data.
type GoogleWalletData struct {
	// The Google Pay merchant identifier.
	GatewayMerchantId *string `json:"gatewayMerchantId,omitempty" url:"gatewayMerchantId,omitempty"`
	// The Google Pay gateway identifier.
	GatewayId *string `json:"gatewayId,omitempty" url:"gatewayId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GoogleWalletData) GetGatewayMerchantId() *string {
	if g == nil {
		return nil
	}
	return g.GatewayMerchantId
}

func (g *GoogleWalletData) GetGatewayId() *string {
	if g == nil {
		return nil
	}
	return g.GatewayId
}

func (g *GoogleWalletData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleWalletData) UnmarshalJSON(data []byte) error {
	type unmarshaler GoogleWalletData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GoogleWalletData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleWalletData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Organization ID for the target organization.
type OrganizationId = int64

type OrganizationUpdates struct {
	Cascade   *WalletCascade   `json:"cascade,omitempty" url:"cascade,omitempty"`
	IsEnabled *WalletIsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationUpdates) GetCascade() *WalletCascade {
	if o == nil {
		return nil
	}
	return o.Cascade
}

func (o *OrganizationUpdates) GetIsEnabled() *WalletIsEnabled {
	if o == nil {
		return nil
	}
	return o.IsEnabled
}

func (o *OrganizationUpdates) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationUpdates) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationUpdates
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationUpdates(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationUpdates) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// When `true`, the wallet service configuration cascades to all paypoints and suborganizations belonging to the parent entity.
type WalletCascade = bool

// When `true`, wallet service is enabled.
type WalletIsEnabled = bool
