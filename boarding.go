// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
)

type RequestAppByAuth struct {
	// The email address the applicant used to save the application.
	Email *Email `json:"email,omitempty" url:"-"`
	// The referenceId is sent to the applicant via email when they save the application.
	ReferenceId *string `json:"referenceId,omitempty" url:"-"`
}

type ListApplicationsRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `createdAt` (gt, ge, lt, le, eq, ne)
	// - `startDate` (gt, ge, lt, le, eq, ne)
	// - `dbaname` (ct, nct)
	// - `legalname` (ct, nct)
	// - `ein` (ct, nct)
	// - `address` (ct, nct)
	// - `city` (ct, nct)
	// - `state` (ct, nct)
	// - `phone` (ct, nct)
	// - `mcc` (ct, nct)
	// - `owntype` (ct, nct)
	// - `ownerName` (ct, nct)
	// - `contactName` (ct, nct)
	// - `status` (in, nin, eq,ne)
	// - `orgParentname` (ct, nct)
	// - `externalpaypointID` (ct, nct, eq, ne)
	// - `repCode` (ct, nct, eq, ne)
	// - `repName` (ct, nct, eq, ne)
	// - `repOffice` (ct, nct, eq, ne)
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListBoardingLinksRequest struct {
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `lastUpdated` (gt, ge, lt, le, eq, ne)
	// - `templateName` (ct, nct)
	// - `referenceName` (ct, nct)
	// - `acceptRegister` (eq, ne)
	// - `acceptAuth` (eq, ne)
	// - `templateCode` (ct, nct)
	// - `templateId` (eq, ne)
	// - `orgParentname` (ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: templateName(ct)=hoa return all records with template title containing "hoa"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type GetExternalApplicationRequest struct {
	// If `true`, sends an email that includes the link to the application to the `mail2` address. Defaults to `false`.
	SendEmail *bool `json:"-" url:"sendEmail,omitempty"`
}

type ASection struct {
	MinimumDocuments *int  `json:"minimumDocuments,omitempty" url:"minimumDocuments,omitempty"`
	MultipleContacts *bool `json:"multipleContacts,omitempty" url:"multipleContacts,omitempty"`
	MultipleOwners   *bool `json:"multipleOwners,omitempty" url:"multipleOwners,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ASection) GetMinimumDocuments() *int {
	if a == nil {
		return nil
	}
	return a.MinimumDocuments
}

func (a *ASection) GetMultipleContacts() *bool {
	if a == nil {
		return nil
	}
	return a.MultipleContacts
}

func (a *ASection) GetMultipleOwners() *bool {
	if a == nil {
		return nil
	}
	return a.MultipleOwners
}

func (a *ASection) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ASection) UnmarshalJSON(data []byte) error {
	type unmarshaler ASection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ASection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ASection) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AchLinkTypes struct {
	Ccd *LinkData `json:"ccd,omitempty" url:"ccd,omitempty"`
	Ppd *LinkData `json:"ppd,omitempty" url:"ppd,omitempty"`
	Web *LinkData `json:"web,omitempty" url:"web,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchLinkTypes) GetCcd() *LinkData {
	if a == nil {
		return nil
	}
	return a.Ccd
}

func (a *AchLinkTypes) GetPpd() *LinkData {
	if a == nil {
		return nil
	}
	return a.Ppd
}

func (a *AchLinkTypes) GetWeb() *LinkData {
	if a == nil {
		return nil
	}
	return a.Web
}

func (a *AchLinkTypes) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchLinkTypes) UnmarshalJSON(data []byte) error {
	type unmarshaler AchLinkTypes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchLinkTypes(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchLinkTypes) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AchSection struct {
	Acceptance *AchLinkTypes `json:"acceptance,omitempty" url:"acceptance,omitempty"`
	Fees       *BasicTable   `json:"fees,omitempty" url:"fees,omitempty"`
	Price      *BasicTable   `json:"price,omitempty" url:"price,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchSection) GetAcceptance() *AchLinkTypes {
	if a == nil {
		return nil
	}
	return a.Acceptance
}

func (a *AchSection) GetFees() *BasicTable {
	if a == nil {
		return nil
	}
	return a.Fees
}

func (a *AchSection) GetPrice() *BasicTable {
	if a == nil {
		return nil
	}
	return a.Price
}

func (a *AchSection) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchSection) UnmarshalJSON(data []byte) error {
	type unmarshaler AchSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchSection) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Annual revenue amount.
type Annualrevenue = *float64

// Boarding application ID.
type AppId = int

type ApplicationData struct {
	Services                   *Services                   `json:"services,omitempty" url:"services,omitempty"`
	AnnualRevenue              *Annualrevenue              `json:"annualRevenue,omitempty" url:"annualRevenue,omitempty"`
	Attachments                *Attachments                `json:"attachments,omitempty" url:"attachments,omitempty"`
	Avgmonthly                 *Avgmonthly                 `json:"avgmonthly,omitempty" url:"avgmonthly,omitempty"`
	Baddress                   *Baddress1                  `json:"baddress,omitempty" url:"baddress,omitempty"`
	Baddress1                  *Baddress2                  `json:"baddress1,omitempty" url:"baddress1,omitempty"`
	BankData                   *Bank                       `json:"bankData,omitempty" url:"bankData,omitempty"`
	Bcity                      *Bcity                      `json:"bcity,omitempty" url:"bcity,omitempty"`
	Bcountry                   *Bcountry                   `json:"bcountry,omitempty" url:"bcountry,omitempty"`
	Binperson                  *Binperson                  `json:"binperson,omitempty" url:"binperson,omitempty"`
	Binphone                   *Binphone                   `json:"binphone,omitempty" url:"binphone,omitempty"`
	Binweb                     *Binweb                     `json:"binweb,omitempty" url:"binweb,omitempty"`
	Bstate                     *Bstate                     `json:"bstate,omitempty" url:"bstate,omitempty"`
	Bsummary                   *Bsummary                   `json:"bsummary,omitempty" url:"bsummary,omitempty"`
	Btype                      *OwnType                    `json:"btype,omitempty" url:"btype,omitempty"`
	Bzip                       *Bzip                       `json:"bzip,omitempty" url:"bzip,omitempty"`
	Contacts                   *ContactsField              `json:"contacts,omitempty" url:"contacts,omitempty"`
	Dbaname                    *Dbaname                    `json:"dbaname,omitempty" url:"dbaname,omitempty"`
	Ein                        *Ein                        `json:"ein,omitempty" url:"ein,omitempty"`
	ExternalPaypointId         *ExternalPaypointId         `json:"externalPaypointId,omitempty" url:"externalPaypointId,omitempty"`
	Faxnumber                  *BoardingBusinessFax        `json:"faxnumber,omitempty" url:"faxnumber,omitempty"`
	Highticketamt              *Highticketamt              `json:"highticketamt,omitempty" url:"highticketamt,omitempty"`
	Legalname                  *Legalname                  `json:"legalname,omitempty" url:"legalname,omitempty"`
	License                    *License                    `json:"license,omitempty" url:"license,omitempty"`
	Licstate                   *Licensestate               `json:"licstate,omitempty" url:"licstate,omitempty"`
	Maddress                   *Maddress                   `json:"maddress,omitempty" url:"maddress,omitempty"`
	Maddress1                  *Maddress1                  `json:"maddress1,omitempty" url:"maddress1,omitempty"`
	Mcc                        *Mcc                        `json:"mcc,omitempty" url:"mcc,omitempty"`
	Mcity                      *Mcity                      `json:"mcity,omitempty" url:"mcity,omitempty"`
	Mcountry                   *Mcountry                   `json:"mcountry,omitempty" url:"mcountry,omitempty"`
	Mstate                     *Mstate                     `json:"mstate,omitempty" url:"mstate,omitempty"`
	Mzip                       *Mzip                       `json:"mzip,omitempty" url:"mzip,omitempty"`
	OrgId                      *Orgid                      `json:"orgId,omitempty" url:"orgId,omitempty"`
	Ownership                  *Ownership                  `json:"ownership,omitempty" url:"ownership,omitempty"`
	PayoutAverageMonthlyVolume *PayoutAverageMonthlyVolume `json:"payoutAverageMonthlyVolume,omitempty" url:"payoutAverageMonthlyVolume,omitempty"`
	PayoutAverageTicketLimit   *PayoutAverageTicketLimit   `json:"payoutAverageTicketLimit,omitempty" url:"payoutAverageTicketLimit,omitempty"`
	PayoutCreditLimit          *PayoutCreditLimit          `json:"payoutCreditLimit,omitempty" url:"payoutCreditLimit,omitempty"`
	PayoutHighTicketAmount     *PayoutHighTicketAmount     `json:"payoutHighTicketAmount,omitempty" url:"payoutHighTicketAmount,omitempty"`
	Phonenumber                *BoardingBusinessPhone      `json:"phonenumber,omitempty" url:"phonenumber,omitempty"`
	// Email address for the applicant. This is used to send the applicant a boarding link.
	RecipientEmail             *Email                      `json:"recipientEmail,omitempty" url:"recipientEmail,omitempty"`
	RecipientEmailNotification *RecipientEmailNotification `json:"recipientEmailNotification,omitempty" url:"recipientEmailNotification,omitempty"`
	Resumable                  *Resumable                  `json:"resumable,omitempty" url:"resumable,omitempty"`
	Signer                     *SignerDataRequest          `json:"signer,omitempty" url:"signer,omitempty"`
	Startdate                  *Busstartdate               `json:"startdate,omitempty" url:"startdate,omitempty"`
	Taxfillname                *Taxfillname                `json:"taxfillname,omitempty" url:"taxfillname,omitempty"`
	TemplateId                 *TemplateId                 `json:"templateId,omitempty" url:"templateId,omitempty"`
	Ticketamt                  *Ticketamt                  `json:"ticketamt,omitempty" url:"ticketamt,omitempty"`
	Website                    *Website                    `json:"website,omitempty" url:"website,omitempty"`
	WhenCharged                *Whencharged                `json:"whenCharged,omitempty" url:"whenCharged,omitempty"`
	WhenDelivered              *Whendelivered              `json:"whenDelivered,omitempty" url:"whenDelivered,omitempty"`
	WhenProvided               *Whenprovided               `json:"whenProvided,omitempty" url:"whenProvided,omitempty"`
	WhenRefunded               *Whenrefunded               `json:"whenRefunded,omitempty" url:"whenRefunded,omitempty"`
	RepCode                    *RepCode                    `json:"RepCode,omitempty" url:"RepCode,omitempty"`
	RepName                    *RepName                    `json:"RepName,omitempty" url:"RepName,omitempty"`
	RepOffice                  *RepOffice                  `json:"RepOffice,omitempty" url:"RepOffice,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationData) GetServices() *Services {
	if a == nil {
		return nil
	}
	return a.Services
}

func (a *ApplicationData) GetAnnualRevenue() *Annualrevenue {
	if a == nil {
		return nil
	}
	return a.AnnualRevenue
}

func (a *ApplicationData) GetAttachments() *Attachments {
	if a == nil {
		return nil
	}
	return a.Attachments
}

func (a *ApplicationData) GetAvgmonthly() *Avgmonthly {
	if a == nil {
		return nil
	}
	return a.Avgmonthly
}

func (a *ApplicationData) GetBaddress() *Baddress1 {
	if a == nil {
		return nil
	}
	return a.Baddress
}

func (a *ApplicationData) GetBaddress1() *Baddress2 {
	if a == nil {
		return nil
	}
	return a.Baddress1
}

func (a *ApplicationData) GetBankData() *Bank {
	if a == nil {
		return nil
	}
	return a.BankData
}

func (a *ApplicationData) GetBcity() *Bcity {
	if a == nil {
		return nil
	}
	return a.Bcity
}

func (a *ApplicationData) GetBcountry() *Bcountry {
	if a == nil {
		return nil
	}
	return a.Bcountry
}

func (a *ApplicationData) GetBinperson() *Binperson {
	if a == nil {
		return nil
	}
	return a.Binperson
}

func (a *ApplicationData) GetBinphone() *Binphone {
	if a == nil {
		return nil
	}
	return a.Binphone
}

func (a *ApplicationData) GetBinweb() *Binweb {
	if a == nil {
		return nil
	}
	return a.Binweb
}

func (a *ApplicationData) GetBstate() *Bstate {
	if a == nil {
		return nil
	}
	return a.Bstate
}

func (a *ApplicationData) GetBsummary() *Bsummary {
	if a == nil {
		return nil
	}
	return a.Bsummary
}

func (a *ApplicationData) GetBtype() *OwnType {
	if a == nil {
		return nil
	}
	return a.Btype
}

func (a *ApplicationData) GetBzip() *Bzip {
	if a == nil {
		return nil
	}
	return a.Bzip
}

func (a *ApplicationData) GetContacts() *ContactsField {
	if a == nil {
		return nil
	}
	return a.Contacts
}

func (a *ApplicationData) GetDbaname() *Dbaname {
	if a == nil {
		return nil
	}
	return a.Dbaname
}

func (a *ApplicationData) GetEin() *Ein {
	if a == nil {
		return nil
	}
	return a.Ein
}

func (a *ApplicationData) GetExternalPaypointId() *ExternalPaypointId {
	if a == nil {
		return nil
	}
	return a.ExternalPaypointId
}

func (a *ApplicationData) GetFaxnumber() *BoardingBusinessFax {
	if a == nil {
		return nil
	}
	return a.Faxnumber
}

func (a *ApplicationData) GetHighticketamt() *Highticketamt {
	if a == nil {
		return nil
	}
	return a.Highticketamt
}

func (a *ApplicationData) GetLegalname() *Legalname {
	if a == nil {
		return nil
	}
	return a.Legalname
}

func (a *ApplicationData) GetLicense() *License {
	if a == nil {
		return nil
	}
	return a.License
}

func (a *ApplicationData) GetLicstate() *Licensestate {
	if a == nil {
		return nil
	}
	return a.Licstate
}

func (a *ApplicationData) GetMaddress() *Maddress {
	if a == nil {
		return nil
	}
	return a.Maddress
}

func (a *ApplicationData) GetMaddress1() *Maddress1 {
	if a == nil {
		return nil
	}
	return a.Maddress1
}

func (a *ApplicationData) GetMcc() *Mcc {
	if a == nil {
		return nil
	}
	return a.Mcc
}

func (a *ApplicationData) GetMcity() *Mcity {
	if a == nil {
		return nil
	}
	return a.Mcity
}

func (a *ApplicationData) GetMcountry() *Mcountry {
	if a == nil {
		return nil
	}
	return a.Mcountry
}

func (a *ApplicationData) GetMstate() *Mstate {
	if a == nil {
		return nil
	}
	return a.Mstate
}

func (a *ApplicationData) GetMzip() *Mzip {
	if a == nil {
		return nil
	}
	return a.Mzip
}

func (a *ApplicationData) GetOrgId() *Orgid {
	if a == nil {
		return nil
	}
	return a.OrgId
}

func (a *ApplicationData) GetOwnership() *Ownership {
	if a == nil {
		return nil
	}
	return a.Ownership
}

func (a *ApplicationData) GetPayoutAverageMonthlyVolume() *PayoutAverageMonthlyVolume {
	if a == nil {
		return nil
	}
	return a.PayoutAverageMonthlyVolume
}

func (a *ApplicationData) GetPayoutAverageTicketLimit() *PayoutAverageTicketLimit {
	if a == nil {
		return nil
	}
	return a.PayoutAverageTicketLimit
}

func (a *ApplicationData) GetPayoutCreditLimit() *PayoutCreditLimit {
	if a == nil {
		return nil
	}
	return a.PayoutCreditLimit
}

func (a *ApplicationData) GetPayoutHighTicketAmount() *PayoutHighTicketAmount {
	if a == nil {
		return nil
	}
	return a.PayoutHighTicketAmount
}

func (a *ApplicationData) GetPhonenumber() *BoardingBusinessPhone {
	if a == nil {
		return nil
	}
	return a.Phonenumber
}

func (a *ApplicationData) GetRecipientEmail() *Email {
	if a == nil {
		return nil
	}
	return a.RecipientEmail
}

func (a *ApplicationData) GetRecipientEmailNotification() *RecipientEmailNotification {
	if a == nil {
		return nil
	}
	return a.RecipientEmailNotification
}

func (a *ApplicationData) GetResumable() *Resumable {
	if a == nil {
		return nil
	}
	return a.Resumable
}

func (a *ApplicationData) GetSigner() *SignerDataRequest {
	if a == nil {
		return nil
	}
	return a.Signer
}

func (a *ApplicationData) GetStartdate() *Busstartdate {
	if a == nil {
		return nil
	}
	return a.Startdate
}

func (a *ApplicationData) GetTaxfillname() *Taxfillname {
	if a == nil {
		return nil
	}
	return a.Taxfillname
}

func (a *ApplicationData) GetTemplateId() *TemplateId {
	if a == nil {
		return nil
	}
	return a.TemplateId
}

func (a *ApplicationData) GetTicketamt() *Ticketamt {
	if a == nil {
		return nil
	}
	return a.Ticketamt
}

func (a *ApplicationData) GetWebsite() *Website {
	if a == nil {
		return nil
	}
	return a.Website
}

func (a *ApplicationData) GetWhenCharged() *Whencharged {
	if a == nil {
		return nil
	}
	return a.WhenCharged
}

func (a *ApplicationData) GetWhenDelivered() *Whendelivered {
	if a == nil {
		return nil
	}
	return a.WhenDelivered
}

func (a *ApplicationData) GetWhenProvided() *Whenprovided {
	if a == nil {
		return nil
	}
	return a.WhenProvided
}

func (a *ApplicationData) GetWhenRefunded() *Whenrefunded {
	if a == nil {
		return nil
	}
	return a.WhenRefunded
}

func (a *ApplicationData) GetRepCode() *RepCode {
	if a == nil {
		return nil
	}
	return a.RepCode
}

func (a *ApplicationData) GetRepName() *RepName {
	if a == nil {
		return nil
	}
	return a.RepName
}

func (a *ApplicationData) GetRepOffice() *RepOffice {
	if a == nil {
		return nil
	}
	return a.RepOffice
}

func (a *ApplicationData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataManaged struct {
	// Annual revenue amount. We recommend including this value.
	AnnualRevenue *Annualrevenue `json:"annualRevenue,omitempty" url:"annualRevenue,omitempty"`
	Attachments   *Attachments   `json:"attachments,omitempty" url:"attachments,omitempty"`
	Baddress      *Baddress1     `json:"baddress,omitempty" url:"baddress,omitempty"`
	Baddress1     *Baddress2     `json:"baddress1,omitempty" url:"baddress1,omitempty"`
	BankData      *BankData      `json:"bankData,omitempty" url:"bankData,omitempty"`
	Bcity         *Bcity         `json:"bcity,omitempty" url:"bcity,omitempty"`
	Bcountry      *Bcountry      `json:"bcountry,omitempty" url:"bcountry,omitempty"`
	// Boarding link ID for the application. Either `templateId` or `boardingLinkId` are required.
	BoardingLinkId *string   `json:"boardingLinkId,omitempty" url:"boardingLinkId,omitempty"`
	Bstate         *Bstate   `json:"bstate,omitempty" url:"bstate,omitempty"`
	Bsummary       *Bsummary `json:"bsummary,omitempty" url:"bsummary,omitempty"`
	Btype          *OwnType  `json:"btype,omitempty" url:"btype,omitempty"`
	Bzip           *Bzip     `json:"bzip,omitempty" url:"bzip,omitempty"`
	// List of contacts for the business.
	Contacts  []*ApplicationDataManagedContactsItem `json:"contacts,omitempty" url:"contacts,omitempty"`
	Dbaname   *Dbaname                              `json:"dbaname,omitempty" url:"dbaname,omitempty"`
	Ein       *Ein                                  `json:"ein,omitempty" url:"ein,omitempty"`
	Faxnumber *BoardingBusinessFax                  `json:"faxnumber,omitempty" url:"faxnumber,omitempty"`
	Legalname *Legalname                            `json:"legalname,omitempty" url:"legalname,omitempty"`
	License   *License                              `json:"license,omitempty" url:"license,omitempty"`
	Licstate  *Licensestate                         `json:"licstate,omitempty" url:"licstate,omitempty"`
	Maddress  *Maddress                             `json:"maddress,omitempty" url:"maddress,omitempty"`
	Maddress1 *Maddress1                            `json:"maddress1,omitempty" url:"maddress1,omitempty"`
	Mcc       *Mcc                                  `json:"mcc,omitempty" url:"mcc,omitempty"`
	Mcity     *Mcity                                `json:"mcity,omitempty" url:"mcity,omitempty"`
	Mcountry  *Mcountry                             `json:"mcountry,omitempty" url:"mcountry,omitempty"`
	Mstate    *Mstate                               `json:"mstate,omitempty" url:"mstate,omitempty"`
	Mzip      *Mzip                                 `json:"mzip,omitempty" url:"mzip,omitempty"`
	OrgId     *Orgid                                `json:"orgId,omitempty" url:"orgId,omitempty"`
	// List of Owners with at least a 25% ownership.
	Ownership   []*ApplicationDataManagedOwnershipItem `json:"ownership,omitempty" url:"ownership,omitempty"`
	Phonenumber *BoardingBusinessPhone                 `json:"phonenumber,omitempty" url:"phonenumber,omitempty"`
	// Email address for the applicant. This is used to send the applicant a boarding link.
	RecipientEmail             *Email                      `json:"recipientEmail,omitempty" url:"recipientEmail,omitempty"`
	RecipientEmailNotification *RecipientEmailNotification `json:"recipientEmailNotification,omitempty" url:"recipientEmailNotification,omitempty"`
	Resumable                  *Resumable                  `json:"resumable,omitempty" url:"resumable,omitempty"`
	Signer                     *SignerDataRequest          `json:"signer" url:"signer"`
	Startdate                  *Busstartdate               `json:"startdate,omitempty" url:"startdate,omitempty"`
	Taxfillname                *Taxfillname                `json:"taxfillname,omitempty" url:"taxfillname,omitempty"`
	// The associated boarding template's ID in Payabli. Either `templateId` or `boardingLinkId` are required.
	TemplateId *TemplateId `json:"templateId,omitempty" url:"templateId,omitempty"`
	Website    *Website    `json:"website,omitempty" url:"website,omitempty"`
	RepCode    *RepCode    `json:"RepCode,omitempty" url:"RepCode,omitempty"`
	RepName    *RepName    `json:"RepName,omitempty" url:"RepName,omitempty"`
	RepOffice  *RepOffice  `json:"RepOffice,omitempty" url:"RepOffice,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataManaged) GetAnnualRevenue() *Annualrevenue {
	if a == nil {
		return nil
	}
	return a.AnnualRevenue
}

func (a *ApplicationDataManaged) GetAttachments() *Attachments {
	if a == nil {
		return nil
	}
	return a.Attachments
}

func (a *ApplicationDataManaged) GetBaddress() *Baddress1 {
	if a == nil {
		return nil
	}
	return a.Baddress
}

func (a *ApplicationDataManaged) GetBaddress1() *Baddress2 {
	if a == nil {
		return nil
	}
	return a.Baddress1
}

func (a *ApplicationDataManaged) GetBankData() *BankData {
	if a == nil {
		return nil
	}
	return a.BankData
}

func (a *ApplicationDataManaged) GetBcity() *Bcity {
	if a == nil {
		return nil
	}
	return a.Bcity
}

func (a *ApplicationDataManaged) GetBcountry() *Bcountry {
	if a == nil {
		return nil
	}
	return a.Bcountry
}

func (a *ApplicationDataManaged) GetBoardingLinkId() *string {
	if a == nil {
		return nil
	}
	return a.BoardingLinkId
}

func (a *ApplicationDataManaged) GetBstate() *Bstate {
	if a == nil {
		return nil
	}
	return a.Bstate
}

func (a *ApplicationDataManaged) GetBsummary() *Bsummary {
	if a == nil {
		return nil
	}
	return a.Bsummary
}

func (a *ApplicationDataManaged) GetBtype() *OwnType {
	if a == nil {
		return nil
	}
	return a.Btype
}

func (a *ApplicationDataManaged) GetBzip() *Bzip {
	if a == nil {
		return nil
	}
	return a.Bzip
}

func (a *ApplicationDataManaged) GetContacts() []*ApplicationDataManagedContactsItem {
	if a == nil {
		return nil
	}
	return a.Contacts
}

func (a *ApplicationDataManaged) GetDbaname() *Dbaname {
	if a == nil {
		return nil
	}
	return a.Dbaname
}

func (a *ApplicationDataManaged) GetEin() *Ein {
	if a == nil {
		return nil
	}
	return a.Ein
}

func (a *ApplicationDataManaged) GetFaxnumber() *BoardingBusinessFax {
	if a == nil {
		return nil
	}
	return a.Faxnumber
}

func (a *ApplicationDataManaged) GetLegalname() *Legalname {
	if a == nil {
		return nil
	}
	return a.Legalname
}

func (a *ApplicationDataManaged) GetLicense() *License {
	if a == nil {
		return nil
	}
	return a.License
}

func (a *ApplicationDataManaged) GetLicstate() *Licensestate {
	if a == nil {
		return nil
	}
	return a.Licstate
}

func (a *ApplicationDataManaged) GetMaddress() *Maddress {
	if a == nil {
		return nil
	}
	return a.Maddress
}

func (a *ApplicationDataManaged) GetMaddress1() *Maddress1 {
	if a == nil {
		return nil
	}
	return a.Maddress1
}

func (a *ApplicationDataManaged) GetMcc() *Mcc {
	if a == nil {
		return nil
	}
	return a.Mcc
}

func (a *ApplicationDataManaged) GetMcity() *Mcity {
	if a == nil {
		return nil
	}
	return a.Mcity
}

func (a *ApplicationDataManaged) GetMcountry() *Mcountry {
	if a == nil {
		return nil
	}
	return a.Mcountry
}

func (a *ApplicationDataManaged) GetMstate() *Mstate {
	if a == nil {
		return nil
	}
	return a.Mstate
}

func (a *ApplicationDataManaged) GetMzip() *Mzip {
	if a == nil {
		return nil
	}
	return a.Mzip
}

func (a *ApplicationDataManaged) GetOrgId() *Orgid {
	if a == nil {
		return nil
	}
	return a.OrgId
}

func (a *ApplicationDataManaged) GetOwnership() []*ApplicationDataManagedOwnershipItem {
	if a == nil {
		return nil
	}
	return a.Ownership
}

func (a *ApplicationDataManaged) GetPhonenumber() *BoardingBusinessPhone {
	if a == nil {
		return nil
	}
	return a.Phonenumber
}

func (a *ApplicationDataManaged) GetRecipientEmail() *Email {
	if a == nil {
		return nil
	}
	return a.RecipientEmail
}

func (a *ApplicationDataManaged) GetRecipientEmailNotification() *RecipientEmailNotification {
	if a == nil {
		return nil
	}
	return a.RecipientEmailNotification
}

func (a *ApplicationDataManaged) GetResumable() *Resumable {
	if a == nil {
		return nil
	}
	return a.Resumable
}

func (a *ApplicationDataManaged) GetSigner() *SignerDataRequest {
	if a == nil {
		return nil
	}
	return a.Signer
}

func (a *ApplicationDataManaged) GetStartdate() *Busstartdate {
	if a == nil {
		return nil
	}
	return a.Startdate
}

func (a *ApplicationDataManaged) GetTaxfillname() *Taxfillname {
	if a == nil {
		return nil
	}
	return a.Taxfillname
}

func (a *ApplicationDataManaged) GetTemplateId() *TemplateId {
	if a == nil {
		return nil
	}
	return a.TemplateId
}

func (a *ApplicationDataManaged) GetWebsite() *Website {
	if a == nil {
		return nil
	}
	return a.Website
}

func (a *ApplicationDataManaged) GetRepCode() *RepCode {
	if a == nil {
		return nil
	}
	return a.RepCode
}

func (a *ApplicationDataManaged) GetRepName() *RepName {
	if a == nil {
		return nil
	}
	return a.RepName
}

func (a *ApplicationDataManaged) GetRepOffice() *RepOffice {
	if a == nil {
		return nil
	}
	return a.RepOffice
}

func (a *ApplicationDataManaged) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataManaged) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataManaged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataManaged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataManaged) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataManagedContactsItem struct {
	// Contact email address.
	ContactEmail *Email `json:"contactEmail,omitempty" url:"contactEmail,omitempty"`
	// Contact name.
	ContactName *string `json:"contactName,omitempty" url:"contactName,omitempty"`
	// Contact phone number.
	ContactPhone *string `json:"contactPhone,omitempty" url:"contactPhone,omitempty"`
	// Contact title.
	ContactTitle   *string               `json:"contactTitle,omitempty" url:"contactTitle,omitempty"`
	AdditionalData *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataManagedContactsItem) GetContactEmail() *Email {
	if a == nil {
		return nil
	}
	return a.ContactEmail
}

func (a *ApplicationDataManagedContactsItem) GetContactName() *string {
	if a == nil {
		return nil
	}
	return a.ContactName
}

func (a *ApplicationDataManagedContactsItem) GetContactPhone() *string {
	if a == nil {
		return nil
	}
	return a.ContactPhone
}

func (a *ApplicationDataManagedContactsItem) GetContactTitle() *string {
	if a == nil {
		return nil
	}
	return a.ContactTitle
}

func (a *ApplicationDataManagedContactsItem) GetAdditionalData() *AdditionalDataString {
	if a == nil {
		return nil
	}
	return a.AdditionalData
}

func (a *ApplicationDataManagedContactsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataManagedContactsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataManagedContactsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataManagedContactsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataManagedContactsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataManagedOwnershipItem struct {
	// Person who is registered as the beneficial owner of the business. This is a combination of first and last name.
	Ownername *string `json:"ownername,omitempty" url:"ownername,omitempty"`
	// The job title of the person such as CEO or director.
	Ownertitle *string `json:"ownertitle,omitempty" url:"ownertitle,omitempty"`
	// Percentage of ownership the person holds, in integer format.
	Ownerpercent *int `json:"ownerpercent,omitempty" url:"ownerpercent,omitempty"`
	// The relevant identifier for the person such as a Social Security Number.
	Ownerssn *string `json:"ownerssn,omitempty" url:"ownerssn,omitempty"`
	// Owner's date of birth.
	Ownerdob *string `json:"ownerdob,omitempty" url:"ownerdob,omitempty"`
	// Owner phone 1.
	Ownerphone1 *string `json:"ownerphone1,omitempty" url:"ownerphone1,omitempty"`
	// Owner phone 2.
	Ownerphone2 *string `json:"ownerphone2,omitempty" url:"ownerphone2,omitempty"`
	// Owner email.
	Owneremail *Email `json:"owneremail,omitempty" url:"owneremail,omitempty"`
	// Owner driver's license ID number. Payabli strongly recommends including this.
	Ownerdriver *string `json:"ownerdriver,omitempty" url:"ownerdriver,omitempty"`
	// Owner street address. This must be the physical address of the owner, not a P.O. box.
	Oaddress *string `json:"oaddress,omitempty" url:"oaddress,omitempty"`
	// Owner address city.
	Ocity *string `json:"ocity,omitempty" url:"ocity,omitempty"`
	// Owner address country in ISO-3166-1 alpha 2 format. Check out https://en.wikipedia.org/wiki/ISO_3166-1 for reference.
	Ocountry *string `json:"ocountry,omitempty" url:"ocountry,omitempty"`
	// Owner driver's license State. Payabli strongly recommends including this.
	Odriverstate *string `json:"odriverstate,omitempty" url:"odriverstate,omitempty"`
	// Owner address state.
	Ostate *string `json:"ostate,omitempty" url:"ostate,omitempty"`
	// Owner address ZIP.
	Ozip           *string               `json:"ozip,omitempty" url:"ozip,omitempty"`
	AdditionalData *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataManagedOwnershipItem) GetOwnername() *string {
	if a == nil {
		return nil
	}
	return a.Ownername
}

func (a *ApplicationDataManagedOwnershipItem) GetOwnertitle() *string {
	if a == nil {
		return nil
	}
	return a.Ownertitle
}

func (a *ApplicationDataManagedOwnershipItem) GetOwnerpercent() *int {
	if a == nil {
		return nil
	}
	return a.Ownerpercent
}

func (a *ApplicationDataManagedOwnershipItem) GetOwnerssn() *string {
	if a == nil {
		return nil
	}
	return a.Ownerssn
}

func (a *ApplicationDataManagedOwnershipItem) GetOwnerdob() *string {
	if a == nil {
		return nil
	}
	return a.Ownerdob
}

func (a *ApplicationDataManagedOwnershipItem) GetOwnerphone1() *string {
	if a == nil {
		return nil
	}
	return a.Ownerphone1
}

func (a *ApplicationDataManagedOwnershipItem) GetOwnerphone2() *string {
	if a == nil {
		return nil
	}
	return a.Ownerphone2
}

func (a *ApplicationDataManagedOwnershipItem) GetOwneremail() *Email {
	if a == nil {
		return nil
	}
	return a.Owneremail
}

func (a *ApplicationDataManagedOwnershipItem) GetOwnerdriver() *string {
	if a == nil {
		return nil
	}
	return a.Ownerdriver
}

func (a *ApplicationDataManagedOwnershipItem) GetOaddress() *string {
	if a == nil {
		return nil
	}
	return a.Oaddress
}

func (a *ApplicationDataManagedOwnershipItem) GetOcity() *string {
	if a == nil {
		return nil
	}
	return a.Ocity
}

func (a *ApplicationDataManagedOwnershipItem) GetOcountry() *string {
	if a == nil {
		return nil
	}
	return a.Ocountry
}

func (a *ApplicationDataManagedOwnershipItem) GetOdriverstate() *string {
	if a == nil {
		return nil
	}
	return a.Odriverstate
}

func (a *ApplicationDataManagedOwnershipItem) GetOstate() *string {
	if a == nil {
		return nil
	}
	return a.Ostate
}

func (a *ApplicationDataManagedOwnershipItem) GetOzip() *string {
	if a == nil {
		return nil
	}
	return a.Ozip
}

func (a *ApplicationDataManagedOwnershipItem) GetAdditionalData() *AdditionalDataString {
	if a == nil {
		return nil
	}
	return a.AdditionalData
}

func (a *ApplicationDataManagedOwnershipItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataManagedOwnershipItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataManagedOwnershipItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataManagedOwnershipItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataManagedOwnershipItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataOdp struct {
	Services *Services `json:"services,omitempty" url:"services,omitempty"`
	// Annual revenue amount. We recommend including this value.
	AnnualRevenue *Annualrevenue `json:"annualRevenue,omitempty" url:"annualRevenue,omitempty"`
	Attachments   *Attachments   `json:"attachments,omitempty" url:"attachments,omitempty"`
	Baddress      *Baddress1     `json:"baddress,omitempty" url:"baddress,omitempty"`
	Baddress1     *Baddress2     `json:"baddress1,omitempty" url:"baddress1,omitempty"`
	BankData      *BankData      `json:"bankData,omitempty" url:"bankData,omitempty"`
	Bcity         *Bcity         `json:"bcity,omitempty" url:"bcity,omitempty"`
	Bcountry      *Bcountry      `json:"bcountry,omitempty" url:"bcountry,omitempty"`
	// Boarding link ID for the application. Either `templateId` or `boardingLinkId` are required.
	BoardingLinkId *string   `json:"boardingLinkId,omitempty" url:"boardingLinkId,omitempty"`
	Bstate         *Bstate   `json:"bstate,omitempty" url:"bstate,omitempty"`
	Bsummary       *Bsummary `json:"bsummary,omitempty" url:"bsummary,omitempty"`
	Btype          *OwnType  `json:"btype,omitempty" url:"btype,omitempty"`
	Bzip           *Bzip     `json:"bzip,omitempty" url:"bzip,omitempty"`
	// List of contacts for the business.
	Contacts      []*ApplicationDataOdpContactsItem `json:"contacts,omitempty" url:"contacts,omitempty"`
	Dbaname       *Dbaname                          `json:"dbaname,omitempty" url:"dbaname,omitempty"`
	Ein           *Ein                              `json:"ein,omitempty" url:"ein,omitempty"`
	Faxnumber     *BoardingBusinessFax              `json:"faxnumber,omitempty" url:"faxnumber,omitempty"`
	Highticketamt *Highticketamt                    `json:"highticketamt,omitempty" url:"highticketamt,omitempty"`
	Legalname     *Legalname                        `json:"legalname,omitempty" url:"legalname,omitempty"`
	License       *License                          `json:"license,omitempty" url:"license,omitempty"`
	Licstate      *Licensestate                     `json:"licstate,omitempty" url:"licstate,omitempty"`
	Maddress      *Maddress                         `json:"maddress,omitempty" url:"maddress,omitempty"`
	Maddress1     *Maddress1                        `json:"maddress1,omitempty" url:"maddress1,omitempty"`
	Mcc           *Mcc                              `json:"mcc,omitempty" url:"mcc,omitempty"`
	Mcity         *Mcity                            `json:"mcity,omitempty" url:"mcity,omitempty"`
	Mcountry      *Mcountry                         `json:"mcountry,omitempty" url:"mcountry,omitempty"`
	Mstate        *Mstate                           `json:"mstate,omitempty" url:"mstate,omitempty"`
	Mzip          *Mzip                             `json:"mzip,omitempty" url:"mzip,omitempty"`
	OrgId         *Orgid                            `json:"orgId,omitempty" url:"orgId,omitempty"`
	// List of Owners with at least a 25% ownership.
	Ownership                  []*ApplicationDataOdpOwnershipItem `json:"ownership,omitempty" url:"ownership,omitempty"`
	PayoutAverageMonthlyVolume PayoutAverageMonthlyVolume         `json:"payoutAverageMonthlyVolume" url:"payoutAverageMonthlyVolume"`
	PayoutAverageTicketAmount  PayoutAverageTicketLimit           `json:"payoutAverageTicketAmount" url:"payoutAverageTicketAmount"`
	PayoutCreditLimit          PayoutCreditLimit                  `json:"payoutCreditLimit" url:"payoutCreditLimit"`
	PayoutHighTicketAmount     PayoutHighTicketAmount             `json:"payoutHighTicketAmount" url:"payoutHighTicketAmount"`
	Phonenumber                *BoardingBusinessPhone             `json:"phonenumber,omitempty" url:"phonenumber,omitempty"`
	// Email address for the applicant. This is used to send the applicant a boarding link.
	RecipientEmail             *Email                      `json:"recipientEmail,omitempty" url:"recipientEmail,omitempty"`
	RecipientEmailNotification *RecipientEmailNotification `json:"recipientEmailNotification,omitempty" url:"recipientEmailNotification,omitempty"`
	Resumable                  *Resumable                  `json:"resumable,omitempty" url:"resumable,omitempty"`
	Signer                     *SignerDataRequest          `json:"signer" url:"signer"`
	Startdate                  *Busstartdate               `json:"startdate,omitempty" url:"startdate,omitempty"`
	Taxfillname                *Taxfillname                `json:"taxfillname,omitempty" url:"taxfillname,omitempty"`
	// The associated boarding template's ID in Payabli. Either `templateId` or `boardingLinkId` are required.
	TemplateId *TemplateId `json:"templateId,omitempty" url:"templateId,omitempty"`
	Website    *Website    `json:"website,omitempty" url:"website,omitempty"`
	RepCode    *RepCode    `json:"RepCode,omitempty" url:"RepCode,omitempty"`
	RepName    *RepName    `json:"RepName,omitempty" url:"RepName,omitempty"`
	RepOffice  *RepOffice  `json:"RepOffice,omitempty" url:"RepOffice,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataOdp) GetServices() *Services {
	if a == nil {
		return nil
	}
	return a.Services
}

func (a *ApplicationDataOdp) GetAnnualRevenue() *Annualrevenue {
	if a == nil {
		return nil
	}
	return a.AnnualRevenue
}

func (a *ApplicationDataOdp) GetAttachments() *Attachments {
	if a == nil {
		return nil
	}
	return a.Attachments
}

func (a *ApplicationDataOdp) GetBaddress() *Baddress1 {
	if a == nil {
		return nil
	}
	return a.Baddress
}

func (a *ApplicationDataOdp) GetBaddress1() *Baddress2 {
	if a == nil {
		return nil
	}
	return a.Baddress1
}

func (a *ApplicationDataOdp) GetBankData() *BankData {
	if a == nil {
		return nil
	}
	return a.BankData
}

func (a *ApplicationDataOdp) GetBcity() *Bcity {
	if a == nil {
		return nil
	}
	return a.Bcity
}

func (a *ApplicationDataOdp) GetBcountry() *Bcountry {
	if a == nil {
		return nil
	}
	return a.Bcountry
}

func (a *ApplicationDataOdp) GetBoardingLinkId() *string {
	if a == nil {
		return nil
	}
	return a.BoardingLinkId
}

func (a *ApplicationDataOdp) GetBstate() *Bstate {
	if a == nil {
		return nil
	}
	return a.Bstate
}

func (a *ApplicationDataOdp) GetBsummary() *Bsummary {
	if a == nil {
		return nil
	}
	return a.Bsummary
}

func (a *ApplicationDataOdp) GetBtype() *OwnType {
	if a == nil {
		return nil
	}
	return a.Btype
}

func (a *ApplicationDataOdp) GetBzip() *Bzip {
	if a == nil {
		return nil
	}
	return a.Bzip
}

func (a *ApplicationDataOdp) GetContacts() []*ApplicationDataOdpContactsItem {
	if a == nil {
		return nil
	}
	return a.Contacts
}

func (a *ApplicationDataOdp) GetDbaname() *Dbaname {
	if a == nil {
		return nil
	}
	return a.Dbaname
}

func (a *ApplicationDataOdp) GetEin() *Ein {
	if a == nil {
		return nil
	}
	return a.Ein
}

func (a *ApplicationDataOdp) GetFaxnumber() *BoardingBusinessFax {
	if a == nil {
		return nil
	}
	return a.Faxnumber
}

func (a *ApplicationDataOdp) GetHighticketamt() *Highticketamt {
	if a == nil {
		return nil
	}
	return a.Highticketamt
}

func (a *ApplicationDataOdp) GetLegalname() *Legalname {
	if a == nil {
		return nil
	}
	return a.Legalname
}

func (a *ApplicationDataOdp) GetLicense() *License {
	if a == nil {
		return nil
	}
	return a.License
}

func (a *ApplicationDataOdp) GetLicstate() *Licensestate {
	if a == nil {
		return nil
	}
	return a.Licstate
}

func (a *ApplicationDataOdp) GetMaddress() *Maddress {
	if a == nil {
		return nil
	}
	return a.Maddress
}

func (a *ApplicationDataOdp) GetMaddress1() *Maddress1 {
	if a == nil {
		return nil
	}
	return a.Maddress1
}

func (a *ApplicationDataOdp) GetMcc() *Mcc {
	if a == nil {
		return nil
	}
	return a.Mcc
}

func (a *ApplicationDataOdp) GetMcity() *Mcity {
	if a == nil {
		return nil
	}
	return a.Mcity
}

func (a *ApplicationDataOdp) GetMcountry() *Mcountry {
	if a == nil {
		return nil
	}
	return a.Mcountry
}

func (a *ApplicationDataOdp) GetMstate() *Mstate {
	if a == nil {
		return nil
	}
	return a.Mstate
}

func (a *ApplicationDataOdp) GetMzip() *Mzip {
	if a == nil {
		return nil
	}
	return a.Mzip
}

func (a *ApplicationDataOdp) GetOrgId() *Orgid {
	if a == nil {
		return nil
	}
	return a.OrgId
}

func (a *ApplicationDataOdp) GetOwnership() []*ApplicationDataOdpOwnershipItem {
	if a == nil {
		return nil
	}
	return a.Ownership
}

func (a *ApplicationDataOdp) GetPayoutAverageMonthlyVolume() PayoutAverageMonthlyVolume {
	if a == nil {
		return 0
	}
	return a.PayoutAverageMonthlyVolume
}

func (a *ApplicationDataOdp) GetPayoutAverageTicketAmount() PayoutAverageTicketLimit {
	if a == nil {
		return 0
	}
	return a.PayoutAverageTicketAmount
}

func (a *ApplicationDataOdp) GetPayoutCreditLimit() PayoutCreditLimit {
	if a == nil {
		return 0
	}
	return a.PayoutCreditLimit
}

func (a *ApplicationDataOdp) GetPayoutHighTicketAmount() PayoutHighTicketAmount {
	if a == nil {
		return 0
	}
	return a.PayoutHighTicketAmount
}

func (a *ApplicationDataOdp) GetPhonenumber() *BoardingBusinessPhone {
	if a == nil {
		return nil
	}
	return a.Phonenumber
}

func (a *ApplicationDataOdp) GetRecipientEmail() *Email {
	if a == nil {
		return nil
	}
	return a.RecipientEmail
}

func (a *ApplicationDataOdp) GetRecipientEmailNotification() *RecipientEmailNotification {
	if a == nil {
		return nil
	}
	return a.RecipientEmailNotification
}

func (a *ApplicationDataOdp) GetResumable() *Resumable {
	if a == nil {
		return nil
	}
	return a.Resumable
}

func (a *ApplicationDataOdp) GetSigner() *SignerDataRequest {
	if a == nil {
		return nil
	}
	return a.Signer
}

func (a *ApplicationDataOdp) GetStartdate() *Busstartdate {
	if a == nil {
		return nil
	}
	return a.Startdate
}

func (a *ApplicationDataOdp) GetTaxfillname() *Taxfillname {
	if a == nil {
		return nil
	}
	return a.Taxfillname
}

func (a *ApplicationDataOdp) GetTemplateId() *TemplateId {
	if a == nil {
		return nil
	}
	return a.TemplateId
}

func (a *ApplicationDataOdp) GetWebsite() *Website {
	if a == nil {
		return nil
	}
	return a.Website
}

func (a *ApplicationDataOdp) GetRepCode() *RepCode {
	if a == nil {
		return nil
	}
	return a.RepCode
}

func (a *ApplicationDataOdp) GetRepName() *RepName {
	if a == nil {
		return nil
	}
	return a.RepName
}

func (a *ApplicationDataOdp) GetRepOffice() *RepOffice {
	if a == nil {
		return nil
	}
	return a.RepOffice
}

func (a *ApplicationDataOdp) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataOdp) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataOdp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataOdp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataOdp) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataOdpContactsItem struct {
	// Contact email address.
	ContactEmail *Email `json:"contactEmail,omitempty" url:"contactEmail,omitempty"`
	// Contact name.
	ContactName *string `json:"contactName,omitempty" url:"contactName,omitempty"`
	// Contact phone number.
	ContactPhone *string `json:"contactPhone,omitempty" url:"contactPhone,omitempty"`
	// Contact title.
	ContactTitle   *string               `json:"contactTitle,omitempty" url:"contactTitle,omitempty"`
	AdditionalData *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataOdpContactsItem) GetContactEmail() *Email {
	if a == nil {
		return nil
	}
	return a.ContactEmail
}

func (a *ApplicationDataOdpContactsItem) GetContactName() *string {
	if a == nil {
		return nil
	}
	return a.ContactName
}

func (a *ApplicationDataOdpContactsItem) GetContactPhone() *string {
	if a == nil {
		return nil
	}
	return a.ContactPhone
}

func (a *ApplicationDataOdpContactsItem) GetContactTitle() *string {
	if a == nil {
		return nil
	}
	return a.ContactTitle
}

func (a *ApplicationDataOdpContactsItem) GetAdditionalData() *AdditionalDataString {
	if a == nil {
		return nil
	}
	return a.AdditionalData
}

func (a *ApplicationDataOdpContactsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataOdpContactsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataOdpContactsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataOdpContactsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataOdpContactsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataOdpOwnershipItem struct {
	// Person who is registered as the beneficial owner of the business. This is a combination of first and last name.
	Ownername *string `json:"ownername,omitempty" url:"ownername,omitempty"`
	// The job title of the person such as CEO or director.
	Ownertitle *string `json:"ownertitle,omitempty" url:"ownertitle,omitempty"`
	// Percentage of ownership the person holds, in integer format.
	Ownerpercent *int `json:"ownerpercent,omitempty" url:"ownerpercent,omitempty"`
	// The relevant identifier for the person such as a Social Security Number.
	Ownerssn *string `json:"ownerssn,omitempty" url:"ownerssn,omitempty"`
	// Owner's date of birth.
	Ownerdob *string `json:"ownerdob,omitempty" url:"ownerdob,omitempty"`
	// Owner phone 1.
	Ownerphone1 *string `json:"ownerphone1,omitempty" url:"ownerphone1,omitempty"`
	// Owner phone 2.
	Ownerphone2 *string `json:"ownerphone2,omitempty" url:"ownerphone2,omitempty"`
	// Owner email.
	Owneremail *Email `json:"owneremail,omitempty" url:"owneremail,omitempty"`
	// Owner driver's license ID number. Payabli strongly recommends including this.
	Ownerdriver *string `json:"ownerdriver,omitempty" url:"ownerdriver,omitempty"`
	// Owner street address. This must be the physical address of the owner, not a P.O. box.
	Oaddress *string `json:"oaddress,omitempty" url:"oaddress,omitempty"`
	// Owner address city.
	Ocity *string `json:"ocity,omitempty" url:"ocity,omitempty"`
	// Owner address country in ISO-3166-1 alpha 2 format. Check out https://en.wikipedia.org/wiki/ISO_3166-1 for reference.
	Ocountry *string `json:"ocountry,omitempty" url:"ocountry,omitempty"`
	// Owner driver's license State. Payabli strongly recommends including this.
	Odriverstate *string `json:"odriverstate,omitempty" url:"odriverstate,omitempty"`
	// Owner address state.
	Ostate *string `json:"ostate,omitempty" url:"ostate,omitempty"`
	// Owner address ZIP.
	Ozip           *string               `json:"ozip,omitempty" url:"ozip,omitempty"`
	AdditionalData *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataOdpOwnershipItem) GetOwnername() *string {
	if a == nil {
		return nil
	}
	return a.Ownername
}

func (a *ApplicationDataOdpOwnershipItem) GetOwnertitle() *string {
	if a == nil {
		return nil
	}
	return a.Ownertitle
}

func (a *ApplicationDataOdpOwnershipItem) GetOwnerpercent() *int {
	if a == nil {
		return nil
	}
	return a.Ownerpercent
}

func (a *ApplicationDataOdpOwnershipItem) GetOwnerssn() *string {
	if a == nil {
		return nil
	}
	return a.Ownerssn
}

func (a *ApplicationDataOdpOwnershipItem) GetOwnerdob() *string {
	if a == nil {
		return nil
	}
	return a.Ownerdob
}

func (a *ApplicationDataOdpOwnershipItem) GetOwnerphone1() *string {
	if a == nil {
		return nil
	}
	return a.Ownerphone1
}

func (a *ApplicationDataOdpOwnershipItem) GetOwnerphone2() *string {
	if a == nil {
		return nil
	}
	return a.Ownerphone2
}

func (a *ApplicationDataOdpOwnershipItem) GetOwneremail() *Email {
	if a == nil {
		return nil
	}
	return a.Owneremail
}

func (a *ApplicationDataOdpOwnershipItem) GetOwnerdriver() *string {
	if a == nil {
		return nil
	}
	return a.Ownerdriver
}

func (a *ApplicationDataOdpOwnershipItem) GetOaddress() *string {
	if a == nil {
		return nil
	}
	return a.Oaddress
}

func (a *ApplicationDataOdpOwnershipItem) GetOcity() *string {
	if a == nil {
		return nil
	}
	return a.Ocity
}

func (a *ApplicationDataOdpOwnershipItem) GetOcountry() *string {
	if a == nil {
		return nil
	}
	return a.Ocountry
}

func (a *ApplicationDataOdpOwnershipItem) GetOdriverstate() *string {
	if a == nil {
		return nil
	}
	return a.Odriverstate
}

func (a *ApplicationDataOdpOwnershipItem) GetOstate() *string {
	if a == nil {
		return nil
	}
	return a.Ostate
}

func (a *ApplicationDataOdpOwnershipItem) GetOzip() *string {
	if a == nil {
		return nil
	}
	return a.Ozip
}

func (a *ApplicationDataOdpOwnershipItem) GetAdditionalData() *AdditionalDataString {
	if a == nil {
		return nil
	}
	return a.AdditionalData
}

func (a *ApplicationDataOdpOwnershipItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataOdpOwnershipItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataOdpOwnershipItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataOdpOwnershipItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataOdpOwnershipItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Fields for Pay In boarding applications.
type ApplicationDataPayIn struct {
	Services           *ApplicationDataPayInServices `json:"services" url:"services"`
	AnnualRevenue      *Annualrevenue                `json:"annualRevenue,omitempty" url:"annualRevenue,omitempty"`
	AverageBillSize    *BoardingAverageBillSize      `json:"averageBillSize,omitempty" url:"averageBillSize,omitempty"`
	AverageMonthlyBill *BoardingAvgMonthlyBill       `json:"averageMonthlyBill,omitempty" url:"averageMonthlyBill,omitempty"`
	Avgmonthly         *Avgmonthly                   `json:"avgmonthly,omitempty" url:"avgmonthly,omitempty"`
	Baddress           *Baddress1                    `json:"baddress,omitempty" url:"baddress,omitempty"`
	Baddress1          *Baddress2                    `json:"baddress1,omitempty" url:"baddress1,omitempty"`
	BankData           *ApplicationDataPayInBankData `json:"bankData" url:"bankData"`
	Bcity              *Bcity                        `json:"bcity,omitempty" url:"bcity,omitempty"`
	Bcountry           *Bcountry                     `json:"bcountry,omitempty" url:"bcountry,omitempty"`
	Binperson          *Binperson                    `json:"binperson,omitempty" url:"binperson,omitempty"`
	Binphone           *Binphone                     `json:"binphone,omitempty" url:"binphone,omitempty"`
	Binweb             *Binweb                       `json:"binweb,omitempty" url:"binweb,omitempty"`
	// Boarding link ID for the application. Either `templateId` or `boardingLinkId` are required.
	BoardingLinkId *string   `json:"boardingLinkId,omitempty" url:"boardingLinkId,omitempty"`
	Bstate         *Bstate   `json:"bstate,omitempty" url:"bstate,omitempty"`
	Bsummary       *Bsummary `json:"bsummary,omitempty" url:"bsummary,omitempty"`
	Btype          *OwnType  `json:"btype,omitempty" url:"btype,omitempty"`
	Bzip           *Bzip     `json:"bzip,omitempty" url:"bzip,omitempty"`
	// List of contacts for the business.
	Contacts    []*ApplicationDataPayInContactsItem `json:"contacts,omitempty" url:"contacts,omitempty"`
	CreditLimit *BoardingCreditLimit                `json:"creditLimit,omitempty" url:"creditLimit,omitempty"`
	// The alternate or common name that this business is doing business under usually referred to as a DBA name. Payabli strongly recommends including this information.
	DbaName            *Dbaname            `json:"dbaName,omitempty" url:"dbaName,omitempty"`
	Ein                *Ein                `json:"ein,omitempty" url:"ein,omitempty"`
	ExternalpaypointId *ExternalPaypointId `json:"externalpaypointID,omitempty" url:"externalpaypointID,omitempty"`
	// The business's fax number.
	Faxnumber     *FaxNumber     `json:"faxnumber,omitempty" url:"faxnumber,omitempty"`
	Highticketamt *Highticketamt `json:"highticketamt,omitempty" url:"highticketamt,omitempty"`
	LegalName     *Legalname     `json:"legalName,omitempty" url:"legalName,omitempty"`
	License       *License       `json:"license,omitempty" url:"license,omitempty"`
	Licstate      *Licensestate  `json:"licstate,omitempty" url:"licstate,omitempty"`
	Maddress      *Maddress      `json:"maddress,omitempty" url:"maddress,omitempty"`
	Maddress1     *Maddress1     `json:"maddress1,omitempty" url:"maddress1,omitempty"`
	Mcc           *Mcc           `json:"mcc,omitempty" url:"mcc,omitempty"`
	Mcity         *Mcity         `json:"mcity,omitempty" url:"mcity,omitempty"`
	Mcountry      *Mcountry      `json:"mcountry,omitempty" url:"mcountry,omitempty"`
	Mstate        *Mstate        `json:"mstate,omitempty" url:"mstate,omitempty"`
	Mzip          *Mzip          `json:"mzip,omitempty" url:"mzip,omitempty"`
	OrgId         *Orgid         `json:"orgId,omitempty" url:"orgId,omitempty"`
	// List of Owners with at least a 25% ownership.
	Ownership []*ApplicationDataPayInOwnershipItem `json:"ownership,omitempty" url:"ownership,omitempty"`
	// The business's phone number.
	Phonenumber      PhoneNumber              `json:"phonenumber" url:"phonenumber"`
	ProcessingRegion BoardingProcessingRegion `json:"processingRegion" url:"processingRegion"`
	// Email address for the applicant. This is used to send the applicant a boarding link.
	RecipientEmail             *Email                      `json:"recipientEmail,omitempty" url:"recipientEmail,omitempty"`
	RecipientEmailNotification *RecipientEmailNotification `json:"recipientEmailNotification,omitempty" url:"recipientEmailNotification,omitempty"`
	Resumable                  *Resumable                  `json:"resumable,omitempty" url:"resumable,omitempty"`
	Signer                     *SignerDataRequest          `json:"signer" url:"signer"`
	Startdate                  *Busstartdate               `json:"startdate,omitempty" url:"startdate,omitempty"`
	TaxFillName                *Taxfillname                `json:"taxFillName,omitempty" url:"taxFillName,omitempty"`
	// The associated boarding template's ID in Payabli. Either `templateId` or `boardingLinkId` are required.
	TemplateId     *TemplateId           `json:"templateId,omitempty" url:"templateId,omitempty"`
	Ticketamt      *Ticketamt            `json:"ticketamt,omitempty" url:"ticketamt,omitempty"`
	Website        *Website              `json:"website,omitempty" url:"website,omitempty"`
	WhenCharged    Whencharged           `json:"whenCharged" url:"whenCharged"`
	WhenDelivered  Whendelivered         `json:"whenDelivered" url:"whenDelivered"`
	WhenProvided   Whenprovided          `json:"whenProvided" url:"whenProvided"`
	WhenRefunded   Whenrefunded          `json:"whenRefunded" url:"whenRefunded"`
	AdditionalData *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	RepCode        *RepCode              `json:"RepCode,omitempty" url:"RepCode,omitempty"`
	RepName        *RepName              `json:"RepName,omitempty" url:"RepName,omitempty"`
	RepOffice      *RepOffice            `json:"RepOffice,omitempty" url:"RepOffice,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataPayIn) GetServices() *ApplicationDataPayInServices {
	if a == nil {
		return nil
	}
	return a.Services
}

func (a *ApplicationDataPayIn) GetAnnualRevenue() *Annualrevenue {
	if a == nil {
		return nil
	}
	return a.AnnualRevenue
}

func (a *ApplicationDataPayIn) GetAverageBillSize() *BoardingAverageBillSize {
	if a == nil {
		return nil
	}
	return a.AverageBillSize
}

func (a *ApplicationDataPayIn) GetAverageMonthlyBill() *BoardingAvgMonthlyBill {
	if a == nil {
		return nil
	}
	return a.AverageMonthlyBill
}

func (a *ApplicationDataPayIn) GetAvgmonthly() *Avgmonthly {
	if a == nil {
		return nil
	}
	return a.Avgmonthly
}

func (a *ApplicationDataPayIn) GetBaddress() *Baddress1 {
	if a == nil {
		return nil
	}
	return a.Baddress
}

func (a *ApplicationDataPayIn) GetBaddress1() *Baddress2 {
	if a == nil {
		return nil
	}
	return a.Baddress1
}

func (a *ApplicationDataPayIn) GetBankData() *ApplicationDataPayInBankData {
	if a == nil {
		return nil
	}
	return a.BankData
}

func (a *ApplicationDataPayIn) GetBcity() *Bcity {
	if a == nil {
		return nil
	}
	return a.Bcity
}

func (a *ApplicationDataPayIn) GetBcountry() *Bcountry {
	if a == nil {
		return nil
	}
	return a.Bcountry
}

func (a *ApplicationDataPayIn) GetBinperson() *Binperson {
	if a == nil {
		return nil
	}
	return a.Binperson
}

func (a *ApplicationDataPayIn) GetBinphone() *Binphone {
	if a == nil {
		return nil
	}
	return a.Binphone
}

func (a *ApplicationDataPayIn) GetBinweb() *Binweb {
	if a == nil {
		return nil
	}
	return a.Binweb
}

func (a *ApplicationDataPayIn) GetBoardingLinkId() *string {
	if a == nil {
		return nil
	}
	return a.BoardingLinkId
}

func (a *ApplicationDataPayIn) GetBstate() *Bstate {
	if a == nil {
		return nil
	}
	return a.Bstate
}

func (a *ApplicationDataPayIn) GetBsummary() *Bsummary {
	if a == nil {
		return nil
	}
	return a.Bsummary
}

func (a *ApplicationDataPayIn) GetBtype() *OwnType {
	if a == nil {
		return nil
	}
	return a.Btype
}

func (a *ApplicationDataPayIn) GetBzip() *Bzip {
	if a == nil {
		return nil
	}
	return a.Bzip
}

func (a *ApplicationDataPayIn) GetContacts() []*ApplicationDataPayInContactsItem {
	if a == nil {
		return nil
	}
	return a.Contacts
}

func (a *ApplicationDataPayIn) GetCreditLimit() *BoardingCreditLimit {
	if a == nil {
		return nil
	}
	return a.CreditLimit
}

func (a *ApplicationDataPayIn) GetDbaName() *Dbaname {
	if a == nil {
		return nil
	}
	return a.DbaName
}

func (a *ApplicationDataPayIn) GetEin() *Ein {
	if a == nil {
		return nil
	}
	return a.Ein
}

func (a *ApplicationDataPayIn) GetExternalpaypointId() *ExternalPaypointId {
	if a == nil {
		return nil
	}
	return a.ExternalpaypointId
}

func (a *ApplicationDataPayIn) GetFaxnumber() *FaxNumber {
	if a == nil {
		return nil
	}
	return a.Faxnumber
}

func (a *ApplicationDataPayIn) GetHighticketamt() *Highticketamt {
	if a == nil {
		return nil
	}
	return a.Highticketamt
}

func (a *ApplicationDataPayIn) GetLegalName() *Legalname {
	if a == nil {
		return nil
	}
	return a.LegalName
}

func (a *ApplicationDataPayIn) GetLicense() *License {
	if a == nil {
		return nil
	}
	return a.License
}

func (a *ApplicationDataPayIn) GetLicstate() *Licensestate {
	if a == nil {
		return nil
	}
	return a.Licstate
}

func (a *ApplicationDataPayIn) GetMaddress() *Maddress {
	if a == nil {
		return nil
	}
	return a.Maddress
}

func (a *ApplicationDataPayIn) GetMaddress1() *Maddress1 {
	if a == nil {
		return nil
	}
	return a.Maddress1
}

func (a *ApplicationDataPayIn) GetMcc() *Mcc {
	if a == nil {
		return nil
	}
	return a.Mcc
}

func (a *ApplicationDataPayIn) GetMcity() *Mcity {
	if a == nil {
		return nil
	}
	return a.Mcity
}

func (a *ApplicationDataPayIn) GetMcountry() *Mcountry {
	if a == nil {
		return nil
	}
	return a.Mcountry
}

func (a *ApplicationDataPayIn) GetMstate() *Mstate {
	if a == nil {
		return nil
	}
	return a.Mstate
}

func (a *ApplicationDataPayIn) GetMzip() *Mzip {
	if a == nil {
		return nil
	}
	return a.Mzip
}

func (a *ApplicationDataPayIn) GetOrgId() *Orgid {
	if a == nil {
		return nil
	}
	return a.OrgId
}

func (a *ApplicationDataPayIn) GetOwnership() []*ApplicationDataPayInOwnershipItem {
	if a == nil {
		return nil
	}
	return a.Ownership
}

func (a *ApplicationDataPayIn) GetPhonenumber() PhoneNumber {
	if a == nil {
		return ""
	}
	return a.Phonenumber
}

func (a *ApplicationDataPayIn) GetProcessingRegion() BoardingProcessingRegion {
	if a == nil {
		return ""
	}
	return a.ProcessingRegion
}

func (a *ApplicationDataPayIn) GetRecipientEmail() *Email {
	if a == nil {
		return nil
	}
	return a.RecipientEmail
}

func (a *ApplicationDataPayIn) GetRecipientEmailNotification() *RecipientEmailNotification {
	if a == nil {
		return nil
	}
	return a.RecipientEmailNotification
}

func (a *ApplicationDataPayIn) GetResumable() *Resumable {
	if a == nil {
		return nil
	}
	return a.Resumable
}

func (a *ApplicationDataPayIn) GetSigner() *SignerDataRequest {
	if a == nil {
		return nil
	}
	return a.Signer
}

func (a *ApplicationDataPayIn) GetStartdate() *Busstartdate {
	if a == nil {
		return nil
	}
	return a.Startdate
}

func (a *ApplicationDataPayIn) GetTaxFillName() *Taxfillname {
	if a == nil {
		return nil
	}
	return a.TaxFillName
}

func (a *ApplicationDataPayIn) GetTemplateId() *TemplateId {
	if a == nil {
		return nil
	}
	return a.TemplateId
}

func (a *ApplicationDataPayIn) GetTicketamt() *Ticketamt {
	if a == nil {
		return nil
	}
	return a.Ticketamt
}

func (a *ApplicationDataPayIn) GetWebsite() *Website {
	if a == nil {
		return nil
	}
	return a.Website
}

func (a *ApplicationDataPayIn) GetWhenCharged() Whencharged {
	if a == nil {
		return ""
	}
	return a.WhenCharged
}

func (a *ApplicationDataPayIn) GetWhenDelivered() Whendelivered {
	if a == nil {
		return ""
	}
	return a.WhenDelivered
}

func (a *ApplicationDataPayIn) GetWhenProvided() Whenprovided {
	if a == nil {
		return ""
	}
	return a.WhenProvided
}

func (a *ApplicationDataPayIn) GetWhenRefunded() Whenrefunded {
	if a == nil {
		return ""
	}
	return a.WhenRefunded
}

func (a *ApplicationDataPayIn) GetAdditionalData() *AdditionalDataString {
	if a == nil {
		return nil
	}
	return a.AdditionalData
}

func (a *ApplicationDataPayIn) GetRepCode() *RepCode {
	if a == nil {
		return nil
	}
	return a.RepCode
}

func (a *ApplicationDataPayIn) GetRepName() *RepName {
	if a == nil {
		return nil
	}
	return a.RepName
}

func (a *ApplicationDataPayIn) GetRepOffice() *RepOffice {
	if a == nil {
		return nil
	}
	return a.RepOffice
}

func (a *ApplicationDataPayIn) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataPayIn) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataPayIn
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataPayIn(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataPayIn) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataPayInBankData struct {
	// The Payabli-assigned internal identifier for the bank account.
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// A user-defined internal identifier for the bank account. This allows you to specify which bank account should be used for payments in cases where multiple accounts are configured.
	AccountId             *string                `json:"accountId,omitempty" url:"accountId,omitempty"`
	Nickname              *BankNickname          `json:"nickname,omitempty" url:"nickname,omitempty"`
	BankName              *BankName              `json:"bankName,omitempty" url:"bankName,omitempty"`
	RoutingAccount        *RoutingAccount        `json:"routingAccount,omitempty" url:"routingAccount,omitempty"`
	AccountNumber         *AccountNumber         `json:"accountNumber,omitempty" url:"accountNumber,omitempty"`
	TypeAccount           *TypeAccount           `json:"typeAccount,omitempty" url:"typeAccount,omitempty"`
	BankAccountHolderName *BankAccountHolderName `json:"bankAccountHolderName,omitempty" url:"bankAccountHolderName,omitempty"`
	BankAccountHolderType *BankAccountHolderType `json:"bankAccountHolderType,omitempty" url:"bankAccountHolderType,omitempty"`
	BankAccountFunction   *BankAccountFunction   `json:"bankAccountFunction,omitempty" url:"bankAccountFunction,omitempty"`
	// Bank account verification status. When `true`, the account has been verified to exist and be in good standing based on vendor checks or previous processing histories.
	Verified *bool `json:"verified,omitempty" url:"verified,omitempty"`
	// Bank account status
	Status *int `json:"status,omitempty" url:"status,omitempty"`
	// Array of services associated with this bank account
	Services []string `json:"services,omitempty" url:"services,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataPayInBankData) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *ApplicationDataPayInBankData) GetAccountId() *string {
	if a == nil {
		return nil
	}
	return a.AccountId
}

func (a *ApplicationDataPayInBankData) GetNickname() *BankNickname {
	if a == nil {
		return nil
	}
	return a.Nickname
}

func (a *ApplicationDataPayInBankData) GetBankName() *BankName {
	if a == nil {
		return nil
	}
	return a.BankName
}

func (a *ApplicationDataPayInBankData) GetRoutingAccount() *RoutingAccount {
	if a == nil {
		return nil
	}
	return a.RoutingAccount
}

func (a *ApplicationDataPayInBankData) GetAccountNumber() *AccountNumber {
	if a == nil {
		return nil
	}
	return a.AccountNumber
}

func (a *ApplicationDataPayInBankData) GetTypeAccount() *TypeAccount {
	if a == nil {
		return nil
	}
	return a.TypeAccount
}

func (a *ApplicationDataPayInBankData) GetBankAccountHolderName() *BankAccountHolderName {
	if a == nil {
		return nil
	}
	return a.BankAccountHolderName
}

func (a *ApplicationDataPayInBankData) GetBankAccountHolderType() *BankAccountHolderType {
	if a == nil {
		return nil
	}
	return a.BankAccountHolderType
}

func (a *ApplicationDataPayInBankData) GetBankAccountFunction() *BankAccountFunction {
	if a == nil {
		return nil
	}
	return a.BankAccountFunction
}

func (a *ApplicationDataPayInBankData) GetVerified() *bool {
	if a == nil {
		return nil
	}
	return a.Verified
}

func (a *ApplicationDataPayInBankData) GetStatus() *int {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *ApplicationDataPayInBankData) GetServices() []string {
	if a == nil {
		return nil
	}
	return a.Services
}

func (a *ApplicationDataPayInBankData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataPayInBankData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataPayInBankData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataPayInBankData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataPayInBankData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataPayInContactsItem struct {
	// Contact email address.
	ContactEmail *Email `json:"contactEmail,omitempty" url:"contactEmail,omitempty"`
	// Contact name.
	ContactName *string `json:"contactName,omitempty" url:"contactName,omitempty"`
	// Contact phone number.
	ContactPhone *string `json:"contactPhone,omitempty" url:"contactPhone,omitempty"`
	// Contact title.
	ContactTitle   *string               `json:"contactTitle,omitempty" url:"contactTitle,omitempty"`
	AdditionalData *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataPayInContactsItem) GetContactEmail() *Email {
	if a == nil {
		return nil
	}
	return a.ContactEmail
}

func (a *ApplicationDataPayInContactsItem) GetContactName() *string {
	if a == nil {
		return nil
	}
	return a.ContactName
}

func (a *ApplicationDataPayInContactsItem) GetContactPhone() *string {
	if a == nil {
		return nil
	}
	return a.ContactPhone
}

func (a *ApplicationDataPayInContactsItem) GetContactTitle() *string {
	if a == nil {
		return nil
	}
	return a.ContactTitle
}

func (a *ApplicationDataPayInContactsItem) GetAdditionalData() *AdditionalDataString {
	if a == nil {
		return nil
	}
	return a.AdditionalData
}

func (a *ApplicationDataPayInContactsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataPayInContactsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataPayInContactsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataPayInContactsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataPayInContactsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataPayInOwnershipItem struct {
	// Person who is registered as the beneficial owner of the business. This is a combination of first and last name.
	Ownername *string `json:"ownername,omitempty" url:"ownername,omitempty"`
	// The job title of the person such as CEO or director.
	Ownertitle *string `json:"ownertitle,omitempty" url:"ownertitle,omitempty"`
	// Percentage of ownership the person holds, in integer format.
	Ownerpercent *int `json:"ownerpercent,omitempty" url:"ownerpercent,omitempty"`
	// The relevant identifier for the person such as a Social Security Number.
	Ownerssn *string `json:"ownerssn,omitempty" url:"ownerssn,omitempty"`
	// Owner's date of birth.
	Ownerdob *string `json:"ownerdob,omitempty" url:"ownerdob,omitempty"`
	// Owner phone 1.
	Ownerphone1 *string `json:"ownerphone1,omitempty" url:"ownerphone1,omitempty"`
	// Owner phone 2.
	Ownerphone2 *string `json:"ownerphone2,omitempty" url:"ownerphone2,omitempty"`
	// Owner email.
	Owneremail *Email `json:"owneremail,omitempty" url:"owneremail,omitempty"`
	// Owner driver's license ID number. Payabli strongly recommends including this.
	Ownerdriver *string `json:"ownerdriver,omitempty" url:"ownerdriver,omitempty"`
	// Owner street address. This must be the physical address of the owner, not a P.O. box.
	Oaddress *string `json:"oaddress,omitempty" url:"oaddress,omitempty"`
	// Owner address city.
	Ocity *string `json:"ocity,omitempty" url:"ocity,omitempty"`
	// Owner address country in ISO-3166-1 alpha 2 format. Check out https://en.wikipedia.org/wiki/ISO_3166-1 for reference.
	Ocountry *string `json:"ocountry,omitempty" url:"ocountry,omitempty"`
	// Owner driver's license State. Payabli strongly recommends including this.
	Odriverstate *string `json:"odriverstate,omitempty" url:"odriverstate,omitempty"`
	// Owner address state.
	Ostate *string `json:"ostate,omitempty" url:"ostate,omitempty"`
	// Owner address ZIP.
	Ozip           *string               `json:"ozip,omitempty" url:"ozip,omitempty"`
	AdditionalData *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataPayInOwnershipItem) GetOwnername() *string {
	if a == nil {
		return nil
	}
	return a.Ownername
}

func (a *ApplicationDataPayInOwnershipItem) GetOwnertitle() *string {
	if a == nil {
		return nil
	}
	return a.Ownertitle
}

func (a *ApplicationDataPayInOwnershipItem) GetOwnerpercent() *int {
	if a == nil {
		return nil
	}
	return a.Ownerpercent
}

func (a *ApplicationDataPayInOwnershipItem) GetOwnerssn() *string {
	if a == nil {
		return nil
	}
	return a.Ownerssn
}

func (a *ApplicationDataPayInOwnershipItem) GetOwnerdob() *string {
	if a == nil {
		return nil
	}
	return a.Ownerdob
}

func (a *ApplicationDataPayInOwnershipItem) GetOwnerphone1() *string {
	if a == nil {
		return nil
	}
	return a.Ownerphone1
}

func (a *ApplicationDataPayInOwnershipItem) GetOwnerphone2() *string {
	if a == nil {
		return nil
	}
	return a.Ownerphone2
}

func (a *ApplicationDataPayInOwnershipItem) GetOwneremail() *Email {
	if a == nil {
		return nil
	}
	return a.Owneremail
}

func (a *ApplicationDataPayInOwnershipItem) GetOwnerdriver() *string {
	if a == nil {
		return nil
	}
	return a.Ownerdriver
}

func (a *ApplicationDataPayInOwnershipItem) GetOaddress() *string {
	if a == nil {
		return nil
	}
	return a.Oaddress
}

func (a *ApplicationDataPayInOwnershipItem) GetOcity() *string {
	if a == nil {
		return nil
	}
	return a.Ocity
}

func (a *ApplicationDataPayInOwnershipItem) GetOcountry() *string {
	if a == nil {
		return nil
	}
	return a.Ocountry
}

func (a *ApplicationDataPayInOwnershipItem) GetOdriverstate() *string {
	if a == nil {
		return nil
	}
	return a.Odriverstate
}

func (a *ApplicationDataPayInOwnershipItem) GetOstate() *string {
	if a == nil {
		return nil
	}
	return a.Ostate
}

func (a *ApplicationDataPayInOwnershipItem) GetOzip() *string {
	if a == nil {
		return nil
	}
	return a.Ozip
}

func (a *ApplicationDataPayInOwnershipItem) GetAdditionalData() *AdditionalDataString {
	if a == nil {
		return nil
	}
	return a.AdditionalData
}

func (a *ApplicationDataPayInOwnershipItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataPayInOwnershipItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataPayInOwnershipItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataPayInOwnershipItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataPayInOwnershipItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataPayInServices struct {
	Ach  *ApplicationDataPayInServicesAch  `json:"ach" url:"ach"`
	Card *ApplicationDataPayInServicesCard `json:"card" url:"card"`
	Odp  *OdpSetup                         `json:"odp,omitempty" url:"odp,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataPayInServices) GetAch() *ApplicationDataPayInServicesAch {
	if a == nil {
		return nil
	}
	return a.Ach
}

func (a *ApplicationDataPayInServices) GetCard() *ApplicationDataPayInServicesCard {
	if a == nil {
		return nil
	}
	return a.Card
}

func (a *ApplicationDataPayInServices) GetOdp() *OdpSetup {
	if a == nil {
		return nil
	}
	return a.Odp
}

func (a *ApplicationDataPayInServices) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataPayInServices) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataPayInServices
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataPayInServices(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataPayInServices) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataPayInServicesAch struct {
	// CCD is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Corporate Credit or Debit Entry. Options are: `true` and `false`
	AcceptCcd *bool `json:"acceptCCD,omitempty" url:"acceptCCD,omitempty"`
	// PPD is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Prearranged Payment and Deposit.
	AcceptPpd *bool `json:"acceptPPD,omitempty" url:"acceptPPD,omitempty"`
	// Web is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Internet Initiated/Mobile Entry Options are `true` and `false`.
	AcceptWeb *bool `json:"acceptWeb,omitempty" url:"acceptWeb,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataPayInServicesAch) GetAcceptCcd() *bool {
	if a == nil {
		return nil
	}
	return a.AcceptCcd
}

func (a *ApplicationDataPayInServicesAch) GetAcceptPpd() *bool {
	if a == nil {
		return nil
	}
	return a.AcceptPpd
}

func (a *ApplicationDataPayInServicesAch) GetAcceptWeb() *bool {
	if a == nil {
		return nil
	}
	return a.AcceptWeb
}

func (a *ApplicationDataPayInServicesAch) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataPayInServicesAch) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataPayInServicesAch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataPayInServicesAch(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataPayInServicesAch) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDataPayInServicesCard struct {
	// Determines whether American Express is accepted.
	AcceptAmex *bool `json:"acceptAmex,omitempty" url:"acceptAmex,omitempty"`
	// Determines whether Discover is accepted.
	AcceptDiscover *bool `json:"acceptDiscover,omitempty" url:"acceptDiscover,omitempty"`
	// Determines whether Mastercard is accepted.
	AcceptMastercard *bool `json:"acceptMastercard,omitempty" url:"acceptMastercard,omitempty"`
	// Determines whether Visa is accepted.
	AcceptVisa *bool `json:"acceptVisa,omitempty" url:"acceptVisa,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDataPayInServicesCard) GetAcceptAmex() *bool {
	if a == nil {
		return nil
	}
	return a.AcceptAmex
}

func (a *ApplicationDataPayInServicesCard) GetAcceptDiscover() *bool {
	if a == nil {
		return nil
	}
	return a.AcceptDiscover
}

func (a *ApplicationDataPayInServicesCard) GetAcceptMastercard() *bool {
	if a == nil {
		return nil
	}
	return a.AcceptMastercard
}

func (a *ApplicationDataPayInServicesCard) GetAcceptVisa() *bool {
	if a == nil {
		return nil
	}
	return a.AcceptVisa
}

func (a *ApplicationDataPayInServicesCard) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDataPayInServicesCard) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDataPayInServicesCard
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDataPayInServicesCard(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDataPayInServicesCard) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDetailsRecord struct {
	AnnualRevenue        *Annualrevenue `json:"annualRevenue,omitempty" url:"annualRevenue,omitempty"`
	AverageMonthlyVolume *Avgmonthly    `json:"averageMonthlyVolume,omitempty" url:"averageMonthlyVolume,omitempty"`
	AverageTicketAmount  *Ticketamt     `json:"averageTicketAmount,omitempty" url:"averageTicketAmount,omitempty"`
	BAddress1            *Baddress1     `json:"bAddress1,omitempty" url:"bAddress1,omitempty"`
	BAddress2            *Baddress2     `json:"bAddress2,omitempty" url:"bAddress2,omitempty"`
	BankData             *BankData      `json:"bankData,omitempty" url:"bankData,omitempty"`
	BCity                *Bcity         `json:"bCity,omitempty" url:"bCity,omitempty"`
	BCountry             *Bcountry      `json:"bCountry,omitempty" url:"bCountry,omitempty"`
	// The business's fax number.
	BFax               *Bphone                         `json:"bFax,omitempty" url:"bFax,omitempty"`
	BinPerson          *Binperson                      `json:"binPerson,omitempty" url:"binPerson,omitempty"`
	BinPhone           *Binphone                       `json:"binPhone,omitempty" url:"binPhone,omitempty"`
	BinWeb             *Binweb                         `json:"binWeb,omitempty" url:"binWeb,omitempty"`
	BoardingLinkId     *BoardingLinkId                 `json:"boardingLinkId,omitempty" url:"boardingLinkId,omitempty"`
	BoardingStatus     *BoardingStatus                 `json:"boardingStatus,omitempty" url:"boardingStatus,omitempty"`
	BoardingSubStatus  *BoardingStatus                 `json:"boardingSubStatus,omitempty" url:"boardingSubStatus,omitempty"`
	BPhone             *Bphone                         `json:"bPhone,omitempty" url:"bPhone,omitempty"`
	BStartdate         *Busstartdate                   `json:"bStartdate,omitempty" url:"bStartdate,omitempty"`
	BState             *Bstate                         `json:"bState,omitempty" url:"bState,omitempty"`
	BSummary           *Bsummary                       `json:"bSummary,omitempty" url:"bSummary,omitempty"`
	BuilderData        *BuilderData                    `json:"builderData,omitempty" url:"builderData,omitempty"`
	BZip               *Bzip                           `json:"bZip,omitempty" url:"bZip,omitempty"`
	ContactData        *ContactsField                  `json:"contactData,omitempty" url:"contactData,omitempty"`
	CreatedAt          *CreatedAt                      `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	DbaName            *Dbaname                        `json:"dbaName,omitempty" url:"dbaName,omitempty"`
	DocumentsRef       *BoardingApplicationAttachments `json:"documentsRef,omitempty" url:"documentsRef,omitempty"`
	Ein                *Ein                            `json:"ein,omitempty" url:"ein,omitempty"`
	ExternalPaypointId *ExternalPaypointId             `json:"externalPaypointId,omitempty" url:"externalPaypointId,omitempty"`
	// Events associated with the application.
	GeneralEvents    []*GeneralEvents `json:"generalEvents,omitempty" url:"generalEvents,omitempty"`
	HighTicketAmount *Highticketamt   `json:"highTicketAmount,omitempty" url:"highTicketAmount,omitempty"`
	IdApplication    *AppId           `json:"idApplication,omitempty" url:"idApplication,omitempty"`
	LastModified     *LastModified    `json:"lastModified,omitempty" url:"lastModified,omitempty"`
	LegalName        *Legalname       `json:"legalName,omitempty" url:"legalName,omitempty"`
	License          *License         `json:"license,omitempty" url:"license,omitempty"`
	LicenseState     *Licensestate    `json:"licenseState,omitempty" url:"licenseState,omitempty"`
	// Object containing logo file.
	Logo                       *FileContent                            `json:"logo,omitempty" url:"logo,omitempty"`
	MAddress1                  *Maddress                               `json:"mAddress1,omitempty" url:"mAddress1,omitempty"`
	MAddress2                  *Maddress1                              `json:"mAddress2,omitempty" url:"mAddress2,omitempty"`
	Mccid                      *string                                 `json:"mccid,omitempty" url:"mccid,omitempty"`
	MCity                      *Mstate                                 `json:"mCity,omitempty" url:"mCity,omitempty"`
	MCountry                   *Mcountry                               `json:"mCountry,omitempty" url:"mCountry,omitempty"`
	Messages                   []*ApplicationDetailsRecordMessagesItem `json:"messages,omitempty" url:"messages,omitempty"`
	MState                     *Mstate                                 `json:"mState,omitempty" url:"mState,omitempty"`
	MZip                       *Mzip                                   `json:"mZip,omitempty" url:"mZip,omitempty"`
	OrgId                      *Orgid                                  `json:"orgId,omitempty" url:"orgId,omitempty"`
	OrgParentName              *OrgParentName                          `json:"orgParentName,omitempty" url:"orgParentName,omitempty"`
	OwnerData                  *Ownership                              `json:"ownerData,omitempty" url:"ownerData,omitempty"`
	OwnType                    *OwnType                                `json:"ownType,omitempty" url:"ownType,omitempty"`
	Pageidentifier             *PageIdentifier                         `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`
	RecipientEmailNotification *RecipientEmailNotification             `json:"recipientEmailNotification,omitempty" url:"recipientEmailNotification,omitempty"`
	Resumable                  *Resumable                              `json:"resumable,omitempty" url:"resumable,omitempty"`
	SalesCode                  *SalesCode                              `json:"salesCode,omitempty" url:"salesCode,omitempty"`
	ServiceData                *Services                               `json:"serviceData,omitempty" url:"serviceData,omitempty"`
	Signer                     *SignerData                             `json:"signer,omitempty" url:"signer,omitempty"`
	Taxfillname                *Taxfillname                            `json:"taxfillname,omitempty" url:"taxfillname,omitempty"`
	TemplateId                 *TemplateId                             `json:"templateId,omitempty" url:"templateId,omitempty"`
	WebsiteAddress             *Website                                `json:"websiteAddress,omitempty" url:"websiteAddress,omitempty"`
	Whencharged                *Whencharged                            `json:"whencharged,omitempty" url:"whencharged,omitempty"`
	Whendelivered              *Whendelivered                          `json:"whendelivered,omitempty" url:"whendelivered,omitempty"`
	WhenProvided               *Whenprovided                           `json:"whenProvided,omitempty" url:"whenProvided,omitempty"`
	Whenrefund                 *Whenrefunded                           `json:"whenrefund,omitempty" url:"whenrefund,omitempty"`
	AdditionalData             *AdditionalDataString                   `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDetailsRecord) GetAnnualRevenue() *Annualrevenue {
	if a == nil {
		return nil
	}
	return a.AnnualRevenue
}

func (a *ApplicationDetailsRecord) GetAverageMonthlyVolume() *Avgmonthly {
	if a == nil {
		return nil
	}
	return a.AverageMonthlyVolume
}

func (a *ApplicationDetailsRecord) GetAverageTicketAmount() *Ticketamt {
	if a == nil {
		return nil
	}
	return a.AverageTicketAmount
}

func (a *ApplicationDetailsRecord) GetBAddress1() *Baddress1 {
	if a == nil {
		return nil
	}
	return a.BAddress1
}

func (a *ApplicationDetailsRecord) GetBAddress2() *Baddress2 {
	if a == nil {
		return nil
	}
	return a.BAddress2
}

func (a *ApplicationDetailsRecord) GetBankData() *BankData {
	if a == nil {
		return nil
	}
	return a.BankData
}

func (a *ApplicationDetailsRecord) GetBCity() *Bcity {
	if a == nil {
		return nil
	}
	return a.BCity
}

func (a *ApplicationDetailsRecord) GetBCountry() *Bcountry {
	if a == nil {
		return nil
	}
	return a.BCountry
}

func (a *ApplicationDetailsRecord) GetBFax() *Bphone {
	if a == nil {
		return nil
	}
	return a.BFax
}

func (a *ApplicationDetailsRecord) GetBinPerson() *Binperson {
	if a == nil {
		return nil
	}
	return a.BinPerson
}

func (a *ApplicationDetailsRecord) GetBinPhone() *Binphone {
	if a == nil {
		return nil
	}
	return a.BinPhone
}

func (a *ApplicationDetailsRecord) GetBinWeb() *Binweb {
	if a == nil {
		return nil
	}
	return a.BinWeb
}

func (a *ApplicationDetailsRecord) GetBoardingLinkId() *BoardingLinkId {
	if a == nil {
		return nil
	}
	return a.BoardingLinkId
}

func (a *ApplicationDetailsRecord) GetBoardingStatus() *BoardingStatus {
	if a == nil {
		return nil
	}
	return a.BoardingStatus
}

func (a *ApplicationDetailsRecord) GetBoardingSubStatus() *BoardingStatus {
	if a == nil {
		return nil
	}
	return a.BoardingSubStatus
}

func (a *ApplicationDetailsRecord) GetBPhone() *Bphone {
	if a == nil {
		return nil
	}
	return a.BPhone
}

func (a *ApplicationDetailsRecord) GetBStartdate() *Busstartdate {
	if a == nil {
		return nil
	}
	return a.BStartdate
}

func (a *ApplicationDetailsRecord) GetBState() *Bstate {
	if a == nil {
		return nil
	}
	return a.BState
}

func (a *ApplicationDetailsRecord) GetBSummary() *Bsummary {
	if a == nil {
		return nil
	}
	return a.BSummary
}

func (a *ApplicationDetailsRecord) GetBuilderData() *BuilderData {
	if a == nil {
		return nil
	}
	return a.BuilderData
}

func (a *ApplicationDetailsRecord) GetBZip() *Bzip {
	if a == nil {
		return nil
	}
	return a.BZip
}

func (a *ApplicationDetailsRecord) GetContactData() *ContactsField {
	if a == nil {
		return nil
	}
	return a.ContactData
}

func (a *ApplicationDetailsRecord) GetCreatedAt() *CreatedAt {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ApplicationDetailsRecord) GetDbaName() *Dbaname {
	if a == nil {
		return nil
	}
	return a.DbaName
}

func (a *ApplicationDetailsRecord) GetDocumentsRef() *BoardingApplicationAttachments {
	if a == nil {
		return nil
	}
	return a.DocumentsRef
}

func (a *ApplicationDetailsRecord) GetEin() *Ein {
	if a == nil {
		return nil
	}
	return a.Ein
}

func (a *ApplicationDetailsRecord) GetExternalPaypointId() *ExternalPaypointId {
	if a == nil {
		return nil
	}
	return a.ExternalPaypointId
}

func (a *ApplicationDetailsRecord) GetGeneralEvents() []*GeneralEvents {
	if a == nil {
		return nil
	}
	return a.GeneralEvents
}

func (a *ApplicationDetailsRecord) GetHighTicketAmount() *Highticketamt {
	if a == nil {
		return nil
	}
	return a.HighTicketAmount
}

func (a *ApplicationDetailsRecord) GetIdApplication() *AppId {
	if a == nil {
		return nil
	}
	return a.IdApplication
}

func (a *ApplicationDetailsRecord) GetLastModified() *LastModified {
	if a == nil {
		return nil
	}
	return a.LastModified
}

func (a *ApplicationDetailsRecord) GetLegalName() *Legalname {
	if a == nil {
		return nil
	}
	return a.LegalName
}

func (a *ApplicationDetailsRecord) GetLicense() *License {
	if a == nil {
		return nil
	}
	return a.License
}

func (a *ApplicationDetailsRecord) GetLicenseState() *Licensestate {
	if a == nil {
		return nil
	}
	return a.LicenseState
}

func (a *ApplicationDetailsRecord) GetLogo() *FileContent {
	if a == nil {
		return nil
	}
	return a.Logo
}

func (a *ApplicationDetailsRecord) GetMAddress1() *Maddress {
	if a == nil {
		return nil
	}
	return a.MAddress1
}

func (a *ApplicationDetailsRecord) GetMAddress2() *Maddress1 {
	if a == nil {
		return nil
	}
	return a.MAddress2
}

func (a *ApplicationDetailsRecord) GetMccid() *string {
	if a == nil {
		return nil
	}
	return a.Mccid
}

func (a *ApplicationDetailsRecord) GetMCity() *Mstate {
	if a == nil {
		return nil
	}
	return a.MCity
}

func (a *ApplicationDetailsRecord) GetMCountry() *Mcountry {
	if a == nil {
		return nil
	}
	return a.MCountry
}

func (a *ApplicationDetailsRecord) GetMessages() []*ApplicationDetailsRecordMessagesItem {
	if a == nil {
		return nil
	}
	return a.Messages
}

func (a *ApplicationDetailsRecord) GetMState() *Mstate {
	if a == nil {
		return nil
	}
	return a.MState
}

func (a *ApplicationDetailsRecord) GetMZip() *Mzip {
	if a == nil {
		return nil
	}
	return a.MZip
}

func (a *ApplicationDetailsRecord) GetOrgId() *Orgid {
	if a == nil {
		return nil
	}
	return a.OrgId
}

func (a *ApplicationDetailsRecord) GetOrgParentName() *OrgParentName {
	if a == nil {
		return nil
	}
	return a.OrgParentName
}

func (a *ApplicationDetailsRecord) GetOwnerData() *Ownership {
	if a == nil {
		return nil
	}
	return a.OwnerData
}

func (a *ApplicationDetailsRecord) GetOwnType() *OwnType {
	if a == nil {
		return nil
	}
	return a.OwnType
}

func (a *ApplicationDetailsRecord) GetPageidentifier() *PageIdentifier {
	if a == nil {
		return nil
	}
	return a.Pageidentifier
}

func (a *ApplicationDetailsRecord) GetRecipientEmailNotification() *RecipientEmailNotification {
	if a == nil {
		return nil
	}
	return a.RecipientEmailNotification
}

func (a *ApplicationDetailsRecord) GetResumable() *Resumable {
	if a == nil {
		return nil
	}
	return a.Resumable
}

func (a *ApplicationDetailsRecord) GetSalesCode() *SalesCode {
	if a == nil {
		return nil
	}
	return a.SalesCode
}

func (a *ApplicationDetailsRecord) GetServiceData() *Services {
	if a == nil {
		return nil
	}
	return a.ServiceData
}

func (a *ApplicationDetailsRecord) GetSigner() *SignerData {
	if a == nil {
		return nil
	}
	return a.Signer
}

func (a *ApplicationDetailsRecord) GetTaxfillname() *Taxfillname {
	if a == nil {
		return nil
	}
	return a.Taxfillname
}

func (a *ApplicationDetailsRecord) GetTemplateId() *TemplateId {
	if a == nil {
		return nil
	}
	return a.TemplateId
}

func (a *ApplicationDetailsRecord) GetWebsiteAddress() *Website {
	if a == nil {
		return nil
	}
	return a.WebsiteAddress
}

func (a *ApplicationDetailsRecord) GetWhencharged() *Whencharged {
	if a == nil {
		return nil
	}
	return a.Whencharged
}

func (a *ApplicationDetailsRecord) GetWhendelivered() *Whendelivered {
	if a == nil {
		return nil
	}
	return a.Whendelivered
}

func (a *ApplicationDetailsRecord) GetWhenProvided() *Whenprovided {
	if a == nil {
		return nil
	}
	return a.WhenProvided
}

func (a *ApplicationDetailsRecord) GetWhenrefund() *Whenrefunded {
	if a == nil {
		return nil
	}
	return a.Whenrefund
}

func (a *ApplicationDetailsRecord) GetAdditionalData() *AdditionalDataString {
	if a == nil {
		return nil
	}
	return a.AdditionalData
}

func (a *ApplicationDetailsRecord) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDetailsRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDetailsRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDetailsRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDetailsRecord) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationDetailsRecordMessagesItem struct {
	Content                      *string    `json:"content,omitempty" url:"content,omitempty"`
	CreatedAt                    *CreatedAt `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	CurrentApplicationStatus     *int       `json:"currentApplicationStatus,omitempty" url:"currentApplicationStatus,omitempty"`
	CurrentApplicationSubStatus  *int       `json:"currentApplicationSubStatus,omitempty" url:"currentApplicationSubStatus,omitempty"`
	Id                           *int       `json:"id,omitempty" url:"id,omitempty"`
	MessageType                  *int       `json:"messageType,omitempty" url:"messageType,omitempty"`
	OriginalApplicationStatus    *int       `json:"originalApplicationStatus,omitempty" url:"originalApplicationStatus,omitempty"`
	OriginalApplicationSubStatus *int       `json:"originalApplicationSubStatus,omitempty" url:"originalApplicationSubStatus,omitempty"`
	RoomId                       *int       `json:"roomId,omitempty" url:"roomId,omitempty"`
	UserId                       *int       `json:"userId,omitempty" url:"userId,omitempty"`
	UserName                     *string    `json:"userName,omitempty" url:"userName,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationDetailsRecordMessagesItem) GetContent() *string {
	if a == nil {
		return nil
	}
	return a.Content
}

func (a *ApplicationDetailsRecordMessagesItem) GetCreatedAt() *CreatedAt {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ApplicationDetailsRecordMessagesItem) GetCurrentApplicationStatus() *int {
	if a == nil {
		return nil
	}
	return a.CurrentApplicationStatus
}

func (a *ApplicationDetailsRecordMessagesItem) GetCurrentApplicationSubStatus() *int {
	if a == nil {
		return nil
	}
	return a.CurrentApplicationSubStatus
}

func (a *ApplicationDetailsRecordMessagesItem) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *ApplicationDetailsRecordMessagesItem) GetMessageType() *int {
	if a == nil {
		return nil
	}
	return a.MessageType
}

func (a *ApplicationDetailsRecordMessagesItem) GetOriginalApplicationStatus() *int {
	if a == nil {
		return nil
	}
	return a.OriginalApplicationStatus
}

func (a *ApplicationDetailsRecordMessagesItem) GetOriginalApplicationSubStatus() *int {
	if a == nil {
		return nil
	}
	return a.OriginalApplicationSubStatus
}

func (a *ApplicationDetailsRecordMessagesItem) GetRoomId() *int {
	if a == nil {
		return nil
	}
	return a.RoomId
}

func (a *ApplicationDetailsRecordMessagesItem) GetUserId() *int {
	if a == nil {
		return nil
	}
	return a.UserId
}

func (a *ApplicationDetailsRecordMessagesItem) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *ApplicationDetailsRecordMessagesItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationDetailsRecordMessagesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationDetailsRecordMessagesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationDetailsRecordMessagesItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationDetailsRecordMessagesItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationQueryRecord struct {
	AnnualRevenue        *Annualrevenue `json:"annualRevenue,omitempty" url:"annualRevenue,omitempty"`
	AverageMonthlyVolume *Avgmonthly    `json:"averageMonthlyVolume,omitempty" url:"averageMonthlyVolume,omitempty"`
	AverageTicketAmount  *Ticketamt     `json:"averageTicketAmount,omitempty" url:"averageTicketAmount,omitempty"`
	BAddress1            *Baddress1     `json:"bAddress1,omitempty" url:"bAddress1,omitempty"`
	BAddress2            *Baddress2     `json:"bAddress2,omitempty" url:"bAddress2,omitempty"`
	BankData             *BankData      `json:"bankData,omitempty" url:"bankData,omitempty"`
	BCity                *Bcity         `json:"bCity,omitempty" url:"bCity,omitempty"`
	BCountry             *Bcountry      `json:"bCountry,omitempty" url:"bCountry,omitempty"`
	// The business's fax number.
	BFax               *Bphone                         `json:"bFax,omitempty" url:"bFax,omitempty"`
	BinPerson          *Binperson                      `json:"binPerson,omitempty" url:"binPerson,omitempty"`
	BinPhone           *Binphone                       `json:"binPhone,omitempty" url:"binPhone,omitempty"`
	BinWeb             *Binweb                         `json:"binWeb,omitempty" url:"binWeb,omitempty"`
	BoardingLinkId     *BoardingLinkId                 `json:"boardingLinkId,omitempty" url:"boardingLinkId,omitempty"`
	BoardingStatus     *BoardingStatus                 `json:"boardingStatus,omitempty" url:"boardingStatus,omitempty"`
	BoardingSubStatus  *BoardingStatus                 `json:"boardingSubStatus,omitempty" url:"boardingSubStatus,omitempty"`
	BPhone             *Bphone                         `json:"bPhone,omitempty" url:"bPhone,omitempty"`
	BStartdate         *Busstartdate                   `json:"bStartdate,omitempty" url:"bStartdate,omitempty"`
	BState             *Bstate                         `json:"bState,omitempty" url:"bState,omitempty"`
	BSummary           *Bsummary                       `json:"bSummary,omitempty" url:"bSummary,omitempty"`
	BuilderData        *BuilderData                    `json:"builderData,omitempty" url:"builderData,omitempty"`
	BZip               *Bzip                           `json:"bZip,omitempty" url:"bZip,omitempty"`
	ContactData        *ContactsField                  `json:"contactData,omitempty" url:"contactData,omitempty"`
	CreatedAt          *CreatedAt                      `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	DbaName            *Dbaname                        `json:"dbaName,omitempty" url:"dbaName,omitempty"`
	DocumentsRef       *BoardingApplicationAttachments `json:"documentsRef,omitempty" url:"documentsRef,omitempty"`
	Ein                *Ein                            `json:"ein,omitempty" url:"ein,omitempty"`
	ExternalPaypointId *ExternalPaypointId             `json:"externalPaypointId,omitempty" url:"externalPaypointId,omitempty"`
	// Events associated with the application.
	GeneralEvents    []*GeneralEvents `json:"generalEvents,omitempty" url:"generalEvents,omitempty"`
	HighTicketAmount *Highticketamt   `json:"highTicketAmount,omitempty" url:"highTicketAmount,omitempty"`
	IdApplication    *AppId           `json:"idApplication,omitempty" url:"idApplication,omitempty"`
	LastModified     *LastModified    `json:"lastModified,omitempty" url:"lastModified,omitempty"`
	LegalName        *Legalname       `json:"legalName,omitempty" url:"legalName,omitempty"`
	License          *License         `json:"license,omitempty" url:"license,omitempty"`
	LicenseState     *Licensestate    `json:"licenseState,omitempty" url:"licenseState,omitempty"`
	// Object containing logo file.
	Logo                       *FileContent                `json:"logo,omitempty" url:"logo,omitempty"`
	MAddress1                  *Maddress                   `json:"mAddress1,omitempty" url:"mAddress1,omitempty"`
	MAddress2                  *Maddress1                  `json:"mAddress2,omitempty" url:"mAddress2,omitempty"`
	Mccid                      *string                     `json:"mccid,omitempty" url:"mccid,omitempty"`
	MCity                      *Mstate                     `json:"mCity,omitempty" url:"mCity,omitempty"`
	MCountry                   *Mcountry                   `json:"mCountry,omitempty" url:"mCountry,omitempty"`
	MState                     *Mstate                     `json:"mState,omitempty" url:"mState,omitempty"`
	MZip                       *Mzip                       `json:"mZip,omitempty" url:"mZip,omitempty"`
	OrgId                      *Orgid                      `json:"orgId,omitempty" url:"orgId,omitempty"`
	OrgParentName              *OrgParentName              `json:"orgParentName,omitempty" url:"orgParentName,omitempty"`
	OwnerData                  *Ownership                  `json:"ownerData,omitempty" url:"ownerData,omitempty"`
	OwnType                    *OwnType                    `json:"ownType,omitempty" url:"ownType,omitempty"`
	Pageidentifier             *PageIdentifier             `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`
	RecipientEmailNotification *RecipientEmailNotification `json:"recipientEmailNotification,omitempty" url:"recipientEmailNotification,omitempty"`
	Resumable                  *Resumable                  `json:"resumable,omitempty" url:"resumable,omitempty"`
	SalesCode                  *SalesCode                  `json:"salesCode,omitempty" url:"salesCode,omitempty"`
	ServiceData                *Services                   `json:"serviceData,omitempty" url:"serviceData,omitempty"`
	Signer                     *SignerData                 `json:"signer,omitempty" url:"signer,omitempty"`
	Taxfillname                *Taxfillname                `json:"taxfillname,omitempty" url:"taxfillname,omitempty"`
	TemplateId                 *TemplateId                 `json:"templateId,omitempty" url:"templateId,omitempty"`
	WebsiteAddress             *Website                    `json:"websiteAddress,omitempty" url:"websiteAddress,omitempty"`
	Whencharged                *Whencharged                `json:"whencharged,omitempty" url:"whencharged,omitempty"`
	Whendelivered              *Whendelivered              `json:"whendelivered,omitempty" url:"whendelivered,omitempty"`
	WhenProvided               *Whenprovided               `json:"whenProvided,omitempty" url:"whenProvided,omitempty"`
	Whenrefund                 *Whenrefunded               `json:"whenrefund,omitempty" url:"whenrefund,omitempty"`
	AdditionalData             *AdditionalDataString       `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	RepCode                    *RepCode                    `json:"RepCode,omitempty" url:"RepCode,omitempty"`
	RepName                    *RepName                    `json:"RepName,omitempty" url:"RepName,omitempty"`
	RepOffice                  *RepOffice                  `json:"RepOffice,omitempty" url:"RepOffice,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplicationQueryRecord) GetAnnualRevenue() *Annualrevenue {
	if a == nil {
		return nil
	}
	return a.AnnualRevenue
}

func (a *ApplicationQueryRecord) GetAverageMonthlyVolume() *Avgmonthly {
	if a == nil {
		return nil
	}
	return a.AverageMonthlyVolume
}

func (a *ApplicationQueryRecord) GetAverageTicketAmount() *Ticketamt {
	if a == nil {
		return nil
	}
	return a.AverageTicketAmount
}

func (a *ApplicationQueryRecord) GetBAddress1() *Baddress1 {
	if a == nil {
		return nil
	}
	return a.BAddress1
}

func (a *ApplicationQueryRecord) GetBAddress2() *Baddress2 {
	if a == nil {
		return nil
	}
	return a.BAddress2
}

func (a *ApplicationQueryRecord) GetBankData() *BankData {
	if a == nil {
		return nil
	}
	return a.BankData
}

func (a *ApplicationQueryRecord) GetBCity() *Bcity {
	if a == nil {
		return nil
	}
	return a.BCity
}

func (a *ApplicationQueryRecord) GetBCountry() *Bcountry {
	if a == nil {
		return nil
	}
	return a.BCountry
}

func (a *ApplicationQueryRecord) GetBFax() *Bphone {
	if a == nil {
		return nil
	}
	return a.BFax
}

func (a *ApplicationQueryRecord) GetBinPerson() *Binperson {
	if a == nil {
		return nil
	}
	return a.BinPerson
}

func (a *ApplicationQueryRecord) GetBinPhone() *Binphone {
	if a == nil {
		return nil
	}
	return a.BinPhone
}

func (a *ApplicationQueryRecord) GetBinWeb() *Binweb {
	if a == nil {
		return nil
	}
	return a.BinWeb
}

func (a *ApplicationQueryRecord) GetBoardingLinkId() *BoardingLinkId {
	if a == nil {
		return nil
	}
	return a.BoardingLinkId
}

func (a *ApplicationQueryRecord) GetBoardingStatus() *BoardingStatus {
	if a == nil {
		return nil
	}
	return a.BoardingStatus
}

func (a *ApplicationQueryRecord) GetBoardingSubStatus() *BoardingStatus {
	if a == nil {
		return nil
	}
	return a.BoardingSubStatus
}

func (a *ApplicationQueryRecord) GetBPhone() *Bphone {
	if a == nil {
		return nil
	}
	return a.BPhone
}

func (a *ApplicationQueryRecord) GetBStartdate() *Busstartdate {
	if a == nil {
		return nil
	}
	return a.BStartdate
}

func (a *ApplicationQueryRecord) GetBState() *Bstate {
	if a == nil {
		return nil
	}
	return a.BState
}

func (a *ApplicationQueryRecord) GetBSummary() *Bsummary {
	if a == nil {
		return nil
	}
	return a.BSummary
}

func (a *ApplicationQueryRecord) GetBuilderData() *BuilderData {
	if a == nil {
		return nil
	}
	return a.BuilderData
}

func (a *ApplicationQueryRecord) GetBZip() *Bzip {
	if a == nil {
		return nil
	}
	return a.BZip
}

func (a *ApplicationQueryRecord) GetContactData() *ContactsField {
	if a == nil {
		return nil
	}
	return a.ContactData
}

func (a *ApplicationQueryRecord) GetCreatedAt() *CreatedAt {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ApplicationQueryRecord) GetDbaName() *Dbaname {
	if a == nil {
		return nil
	}
	return a.DbaName
}

func (a *ApplicationQueryRecord) GetDocumentsRef() *BoardingApplicationAttachments {
	if a == nil {
		return nil
	}
	return a.DocumentsRef
}

func (a *ApplicationQueryRecord) GetEin() *Ein {
	if a == nil {
		return nil
	}
	return a.Ein
}

func (a *ApplicationQueryRecord) GetExternalPaypointId() *ExternalPaypointId {
	if a == nil {
		return nil
	}
	return a.ExternalPaypointId
}

func (a *ApplicationQueryRecord) GetGeneralEvents() []*GeneralEvents {
	if a == nil {
		return nil
	}
	return a.GeneralEvents
}

func (a *ApplicationQueryRecord) GetHighTicketAmount() *Highticketamt {
	if a == nil {
		return nil
	}
	return a.HighTicketAmount
}

func (a *ApplicationQueryRecord) GetIdApplication() *AppId {
	if a == nil {
		return nil
	}
	return a.IdApplication
}

func (a *ApplicationQueryRecord) GetLastModified() *LastModified {
	if a == nil {
		return nil
	}
	return a.LastModified
}

func (a *ApplicationQueryRecord) GetLegalName() *Legalname {
	if a == nil {
		return nil
	}
	return a.LegalName
}

func (a *ApplicationQueryRecord) GetLicense() *License {
	if a == nil {
		return nil
	}
	return a.License
}

func (a *ApplicationQueryRecord) GetLicenseState() *Licensestate {
	if a == nil {
		return nil
	}
	return a.LicenseState
}

func (a *ApplicationQueryRecord) GetLogo() *FileContent {
	if a == nil {
		return nil
	}
	return a.Logo
}

func (a *ApplicationQueryRecord) GetMAddress1() *Maddress {
	if a == nil {
		return nil
	}
	return a.MAddress1
}

func (a *ApplicationQueryRecord) GetMAddress2() *Maddress1 {
	if a == nil {
		return nil
	}
	return a.MAddress2
}

func (a *ApplicationQueryRecord) GetMccid() *string {
	if a == nil {
		return nil
	}
	return a.Mccid
}

func (a *ApplicationQueryRecord) GetMCity() *Mstate {
	if a == nil {
		return nil
	}
	return a.MCity
}

func (a *ApplicationQueryRecord) GetMCountry() *Mcountry {
	if a == nil {
		return nil
	}
	return a.MCountry
}

func (a *ApplicationQueryRecord) GetMState() *Mstate {
	if a == nil {
		return nil
	}
	return a.MState
}

func (a *ApplicationQueryRecord) GetMZip() *Mzip {
	if a == nil {
		return nil
	}
	return a.MZip
}

func (a *ApplicationQueryRecord) GetOrgId() *Orgid {
	if a == nil {
		return nil
	}
	return a.OrgId
}

func (a *ApplicationQueryRecord) GetOrgParentName() *OrgParentName {
	if a == nil {
		return nil
	}
	return a.OrgParentName
}

func (a *ApplicationQueryRecord) GetOwnerData() *Ownership {
	if a == nil {
		return nil
	}
	return a.OwnerData
}

func (a *ApplicationQueryRecord) GetOwnType() *OwnType {
	if a == nil {
		return nil
	}
	return a.OwnType
}

func (a *ApplicationQueryRecord) GetPageidentifier() *PageIdentifier {
	if a == nil {
		return nil
	}
	return a.Pageidentifier
}

func (a *ApplicationQueryRecord) GetRecipientEmailNotification() *RecipientEmailNotification {
	if a == nil {
		return nil
	}
	return a.RecipientEmailNotification
}

func (a *ApplicationQueryRecord) GetResumable() *Resumable {
	if a == nil {
		return nil
	}
	return a.Resumable
}

func (a *ApplicationQueryRecord) GetSalesCode() *SalesCode {
	if a == nil {
		return nil
	}
	return a.SalesCode
}

func (a *ApplicationQueryRecord) GetServiceData() *Services {
	if a == nil {
		return nil
	}
	return a.ServiceData
}

func (a *ApplicationQueryRecord) GetSigner() *SignerData {
	if a == nil {
		return nil
	}
	return a.Signer
}

func (a *ApplicationQueryRecord) GetTaxfillname() *Taxfillname {
	if a == nil {
		return nil
	}
	return a.Taxfillname
}

func (a *ApplicationQueryRecord) GetTemplateId() *TemplateId {
	if a == nil {
		return nil
	}
	return a.TemplateId
}

func (a *ApplicationQueryRecord) GetWebsiteAddress() *Website {
	if a == nil {
		return nil
	}
	return a.WebsiteAddress
}

func (a *ApplicationQueryRecord) GetWhencharged() *Whencharged {
	if a == nil {
		return nil
	}
	return a.Whencharged
}

func (a *ApplicationQueryRecord) GetWhendelivered() *Whendelivered {
	if a == nil {
		return nil
	}
	return a.Whendelivered
}

func (a *ApplicationQueryRecord) GetWhenProvided() *Whenprovided {
	if a == nil {
		return nil
	}
	return a.WhenProvided
}

func (a *ApplicationQueryRecord) GetWhenrefund() *Whenrefunded {
	if a == nil {
		return nil
	}
	return a.Whenrefund
}

func (a *ApplicationQueryRecord) GetAdditionalData() *AdditionalDataString {
	if a == nil {
		return nil
	}
	return a.AdditionalData
}

func (a *ApplicationQueryRecord) GetRepCode() *RepCode {
	if a == nil {
		return nil
	}
	return a.RepCode
}

func (a *ApplicationQueryRecord) GetRepName() *RepName {
	if a == nil {
		return nil
	}
	return a.RepName
}

func (a *ApplicationQueryRecord) GetRepOffice() *RepOffice {
	if a == nil {
		return nil
	}
	return a.RepOffice
}

func (a *ApplicationQueryRecord) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplicationQueryRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationQueryRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationQueryRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationQueryRecord) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Date the attestation was provided for PCI Compliance (`pciAttestation`), in MM/DD/YYYY format.
type AttestationDate = string

type BAddress struct {
	Baddress  *LinkData `json:"baddress,omitempty" url:"baddress,omitempty"`
	Baddress1 *LinkData `json:"baddress1,omitempty" url:"baddress1,omitempty"`
	Bcity     *LinkData `json:"bcity,omitempty" url:"bcity,omitempty"`
	Bcountry  *LinkData `json:"bcountry,omitempty" url:"bcountry,omitempty"`
	Bstate    *LinkData `json:"bstate,omitempty" url:"bstate,omitempty"`
	Bzip      *LinkData `json:"bzip,omitempty" url:"bzip,omitempty"`
	Maddress  *LinkData `json:"maddress,omitempty" url:"maddress,omitempty"`
	Maddress1 *LinkData `json:"maddress1,omitempty" url:"maddress1,omitempty"`
	Mcity     *LinkData `json:"mcity,omitempty" url:"mcity,omitempty"`
	Mcountry  *LinkData `json:"mcountry,omitempty" url:"mcountry,omitempty"`
	Mstate    *LinkData `json:"mstate,omitempty" url:"mstate,omitempty"`
	Mzip      *LinkData `json:"mzip,omitempty" url:"mzip,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BAddress) GetBaddress() *LinkData {
	if b == nil {
		return nil
	}
	return b.Baddress
}

func (b *BAddress) GetBaddress1() *LinkData {
	if b == nil {
		return nil
	}
	return b.Baddress1
}

func (b *BAddress) GetBcity() *LinkData {
	if b == nil {
		return nil
	}
	return b.Bcity
}

func (b *BAddress) GetBcountry() *LinkData {
	if b == nil {
		return nil
	}
	return b.Bcountry
}

func (b *BAddress) GetBstate() *LinkData {
	if b == nil {
		return nil
	}
	return b.Bstate
}

func (b *BAddress) GetBzip() *LinkData {
	if b == nil {
		return nil
	}
	return b.Bzip
}

func (b *BAddress) GetMaddress() *LinkData {
	if b == nil {
		return nil
	}
	return b.Maddress
}

func (b *BAddress) GetMaddress1() *LinkData {
	if b == nil {
		return nil
	}
	return b.Maddress1
}

func (b *BAddress) GetMcity() *LinkData {
	if b == nil {
		return nil
	}
	return b.Mcity
}

func (b *BAddress) GetMcountry() *LinkData {
	if b == nil {
		return nil
	}
	return b.Mcountry
}

func (b *BAddress) GetMstate() *LinkData {
	if b == nil {
		return nil
	}
	return b.Mstate
}

func (b *BAddress) GetMzip() *LinkData {
	if b == nil {
		return nil
	}
	return b.Mzip
}

func (b *BAddress) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler BAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BAddress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BAddress) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BDetails struct {
	Btype       *LinkData `json:"btype,omitempty" url:"btype,omitempty"`
	Dbaname     *LinkData `json:"dbaname,omitempty" url:"dbaname,omitempty"`
	Ein         *LinkData `json:"ein,omitempty" url:"ein,omitempty"`
	Faxnumber   *LinkData `json:"faxnumber,omitempty" url:"faxnumber,omitempty"`
	Legalname   *LinkData `json:"legalname,omitempty" url:"legalname,omitempty"`
	License     *LinkData `json:"license,omitempty" url:"license,omitempty"`
	Licstate    *LinkData `json:"licstate,omitempty" url:"licstate,omitempty"`
	Phonenumber *LinkData `json:"phonenumber,omitempty" url:"phonenumber,omitempty"`
	Startdate   *LinkData `json:"startdate,omitempty" url:"startdate,omitempty"`
	Taxfillname *LinkData `json:"taxfillname,omitempty" url:"taxfillname,omitempty"`
	Website     *LinkData `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BDetails) GetBtype() *LinkData {
	if b == nil {
		return nil
	}
	return b.Btype
}

func (b *BDetails) GetDbaname() *LinkData {
	if b == nil {
		return nil
	}
	return b.Dbaname
}

func (b *BDetails) GetEin() *LinkData {
	if b == nil {
		return nil
	}
	return b.Ein
}

func (b *BDetails) GetFaxnumber() *LinkData {
	if b == nil {
		return nil
	}
	return b.Faxnumber
}

func (b *BDetails) GetLegalname() *LinkData {
	if b == nil {
		return nil
	}
	return b.Legalname
}

func (b *BDetails) GetLicense() *LinkData {
	if b == nil {
		return nil
	}
	return b.License
}

func (b *BDetails) GetLicstate() *LinkData {
	if b == nil {
		return nil
	}
	return b.Licstate
}

func (b *BDetails) GetPhonenumber() *LinkData {
	if b == nil {
		return nil
	}
	return b.Phonenumber
}

func (b *BDetails) GetStartdate() *LinkData {
	if b == nil {
		return nil
	}
	return b.Startdate
}

func (b *BDetails) GetTaxfillname() *LinkData {
	if b == nil {
		return nil
	}
	return b.Taxfillname
}

func (b *BDetails) GetWebsite() *LinkData {
	if b == nil {
		return nil
	}
	return b.Website
}

func (b *BDetails) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler BDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BDetails) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BSection struct {
	Address *BAddress `json:"address,omitempty" url:"address,omitempty"`
	Details *BDetails `json:"details,omitempty" url:"details,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BSection) GetAddress() *BAddress {
	if b == nil {
		return nil
	}
	return b.Address
}

func (b *BSection) GetDetails() *BDetails {
	if b == nil {
		return nil
	}
	return b.Details
}

func (b *BSection) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BSection) UnmarshalJSON(data []byte) error {
	type unmarshaler BSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BSection) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BasicTable struct {
	Body   []*LinkRow `json:"body,omitempty" url:"body,omitempty"`
	Header *LinkRow   `json:"header,omitempty" url:"header,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BasicTable) GetBody() []*LinkRow {
	if b == nil {
		return nil
	}
	return b.Body
}

func (b *BasicTable) GetHeader() *LinkRow {
	if b == nil {
		return nil
	}
	return b.Header
}

func (b *BasicTable) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicTable) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicTable
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicTable(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicTable) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Bnk struct {
	AccountNumber  *LinkData `json:"accountNumber,omitempty" url:"accountNumber,omitempty"`
	BankName       *LinkData `json:"bankName,omitempty" url:"bankName,omitempty"`
	RoutingAccount *LinkData `json:"routingAccount,omitempty" url:"routingAccount,omitempty"`
	TypeAccount    *LinkData `json:"typeAccount,omitempty" url:"typeAccount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *Bnk) GetAccountNumber() *LinkData {
	if b == nil {
		return nil
	}
	return b.AccountNumber
}

func (b *Bnk) GetBankName() *LinkData {
	if b == nil {
		return nil
	}
	return b.BankName
}

func (b *Bnk) GetRoutingAccount() *LinkData {
	if b == nil {
		return nil
	}
	return b.RoutingAccount
}

func (b *Bnk) GetTypeAccount() *LinkData {
	if b == nil {
		return nil
	}
	return b.TypeAccount
}

func (b *Bnk) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *Bnk) UnmarshalJSON(data []byte) error {
	type unmarshaler Bnk
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = Bnk(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *Bnk) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// This is the average amount of each bill you pay through our service. For example, if your business paid 3 bills for a total of \$1,500 then your average bill size is \$500.
type BoardingAverageBillSize = string

// This is the total number of bills the business pays each month. For example, if your business pays an electric bill of \$500, a internet bill of \$150, and various suppliers \$5,000 every month then your monthly bill volume would be \$5,650.
type BoardingAvgMonthlyBill = string

// The business's fax number.
type BoardingBusinessFax = string

// The business's phone number.
type BoardingBusinessPhone = string

// The maximum amount of credit that our lending partner, has authorized to your business. It's the upper boundary on how much you can spend or owe on a credit account at any given time.
type BoardingCreditLimit = string

type BoardingLinkQueryRecord struct {
	AcceptOauth     *AcceptOauth     `json:"acceptOauth,omitempty" url:"acceptOauth,omitempty"`
	AcceptRegister  *AcceptRegister  `json:"acceptRegister,omitempty" url:"acceptRegister,omitempty"`
	BuilderData     *BuilderData     `json:"builderData,omitempty" url:"builderData,omitempty"`
	EntryAttributes *EntryAttributes `json:"entryAttributes,omitempty" url:"entryAttributes,omitempty"`
	Id              *int64           `json:"id,omitempty" url:"id,omitempty"`
	// Object containing logo file.
	Logo                       *FileContent                `json:"logo,omitempty" url:"logo,omitempty"`
	OrgId                      *Orgid                      `json:"orgId,omitempty" url:"orgId,omitempty"`
	PageIdentifier             *PageIdentifier             `json:"pageIdentifier:,omitempty" url:"pageIdentifier:,omitempty"`
	RecipientEmailNotification *RecipientEmailNotification `json:"recipientEmailNotification,omitempty" url:"recipientEmailNotification,omitempty"`
	ReferenceName              *ReferenceName              `json:"referenceName,omitempty" url:"referenceName,omitempty"`
	ReferenceTemplateId        *ReferenceTemplateId        `json:"referenceTemplateId,omitempty" url:"referenceTemplateId,omitempty"`
	Resumable                  *Resumable                  `json:"resumable,omitempty" url:"resumable,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BoardingLinkQueryRecord) GetAcceptOauth() *AcceptOauth {
	if b == nil {
		return nil
	}
	return b.AcceptOauth
}

func (b *BoardingLinkQueryRecord) GetAcceptRegister() *AcceptRegister {
	if b == nil {
		return nil
	}
	return b.AcceptRegister
}

func (b *BoardingLinkQueryRecord) GetBuilderData() *BuilderData {
	if b == nil {
		return nil
	}
	return b.BuilderData
}

func (b *BoardingLinkQueryRecord) GetEntryAttributes() *EntryAttributes {
	if b == nil {
		return nil
	}
	return b.EntryAttributes
}

func (b *BoardingLinkQueryRecord) GetId() *int64 {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *BoardingLinkQueryRecord) GetLogo() *FileContent {
	if b == nil {
		return nil
	}
	return b.Logo
}

func (b *BoardingLinkQueryRecord) GetOrgId() *Orgid {
	if b == nil {
		return nil
	}
	return b.OrgId
}

func (b *BoardingLinkQueryRecord) GetPageIdentifier() *PageIdentifier {
	if b == nil {
		return nil
	}
	return b.PageIdentifier
}

func (b *BoardingLinkQueryRecord) GetRecipientEmailNotification() *RecipientEmailNotification {
	if b == nil {
		return nil
	}
	return b.RecipientEmailNotification
}

func (b *BoardingLinkQueryRecord) GetReferenceName() *ReferenceName {
	if b == nil {
		return nil
	}
	return b.ReferenceName
}

func (b *BoardingLinkQueryRecord) GetReferenceTemplateId() *ReferenceTemplateId {
	if b == nil {
		return nil
	}
	return b.ReferenceTemplateId
}

func (b *BoardingLinkQueryRecord) GetResumable() *Resumable {
	if b == nil {
		return nil
	}
	return b.Resumable
}

func (b *BoardingLinkQueryRecord) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BoardingLinkQueryRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler BoardingLinkQueryRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BoardingLinkQueryRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BoardingLinkQueryRecord) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The business's processing region.
type BoardingProcessingRegion string

const (
	BoardingProcessingRegionUs BoardingProcessingRegion = "US"
	BoardingProcessingRegionCa BoardingProcessingRegion = "CA"
)

func NewBoardingProcessingRegionFromString(s string) (BoardingProcessingRegion, error) {
	switch s {
	case "US":
		return BoardingProcessingRegionUs, nil
	case "CA":
		return BoardingProcessingRegionCa, nil
	}
	var t BoardingProcessingRegion
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BoardingProcessingRegion) Ptr() *BoardingProcessingRegion {
	return &b
}

// The application's status in the merchant boarding process. See [Boarding Status Reference](/developers/references/boarding-statuses) for more.
type BoardingStatus = int

type BuilderData struct {
	Services   *SSection `json:"services,omitempty" url:"services,omitempty"`
	Attributes *ASection `json:"attributes,omitempty" url:"attributes,omitempty"`
	Banking    *DSection `json:"banking,omitempty" url:"banking,omitempty"`
	Business   *BSection `json:"business,omitempty" url:"business,omitempty"`
	Owners     *OSection `json:"owners,omitempty" url:"owners,omitempty"`
	Processing *PSection `json:"processing,omitempty" url:"processing,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BuilderData) GetServices() *SSection {
	if b == nil {
		return nil
	}
	return b.Services
}

func (b *BuilderData) GetAttributes() *ASection {
	if b == nil {
		return nil
	}
	return b.Attributes
}

func (b *BuilderData) GetBanking() *DSection {
	if b == nil {
		return nil
	}
	return b.Banking
}

func (b *BuilderData) GetBusiness() *BSection {
	if b == nil {
		return nil
	}
	return b.Business
}

func (b *BuilderData) GetOwners() *OSection {
	if b == nil {
		return nil
	}
	return b.Owners
}

func (b *BuilderData) GetProcessing() *PSection {
	if b == nil {
		return nil
	}
	return b.Processing
}

func (b *BuilderData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BuilderData) UnmarshalJSON(data []byte) error {
	type unmarshaler BuilderData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BuilderData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BuilderData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CList struct {
	ContactEmail *LinkData `json:"contactEmail,omitempty" url:"contactEmail,omitempty"`
	ContactName  *LinkData `json:"contactName,omitempty" url:"contactName,omitempty"`
	ContactPhone *LinkData `json:"contactPhone,omitempty" url:"contactPhone,omitempty"`
	ContactTitle *LinkData `json:"contactTitle,omitempty" url:"contactTitle,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CList) GetContactEmail() *LinkData {
	if c == nil {
		return nil
	}
	return c.ContactEmail
}

func (c *CList) GetContactName() *LinkData {
	if c == nil {
		return nil
	}
	return c.ContactName
}

func (c *CList) GetContactPhone() *LinkData {
	if c == nil {
		return nil
	}
	return c.ContactPhone
}

func (c *CList) GetContactTitle() *LinkData {
	if c == nil {
		return nil
	}
	return c.ContactTitle
}

func (c *CList) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CList) UnmarshalJSON(data []byte) error {
	type unmarshaler CList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CList) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardLinkTypes struct {
	Amex       *LinkData `json:"amex,omitempty" url:"amex,omitempty"`
	Discover   *LinkData `json:"discover,omitempty" url:"discover,omitempty"`
	Mastercard *LinkData `json:"mastercard,omitempty" url:"mastercard,omitempty"`
	Visa       *LinkData `json:"visa,omitempty" url:"visa,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardLinkTypes) GetAmex() *LinkData {
	if c == nil {
		return nil
	}
	return c.Amex
}

func (c *CardLinkTypes) GetDiscover() *LinkData {
	if c == nil {
		return nil
	}
	return c.Discover
}

func (c *CardLinkTypes) GetMastercard() *LinkData {
	if c == nil {
		return nil
	}
	return c.Mastercard
}

func (c *CardLinkTypes) GetVisa() *LinkData {
	if c == nil {
		return nil
	}
	return c.Visa
}

func (c *CardLinkTypes) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardLinkTypes) UnmarshalJSON(data []byte) error {
	type unmarshaler CardLinkTypes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardLinkTypes(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardLinkTypes) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardSection struct {
	Acceptance *CardLinkTypes `json:"acceptance,omitempty" url:"acceptance,omitempty"`
	Fees       *BasicTable    `json:"fees,omitempty" url:"fees,omitempty"`
	Price      *BasicTable    `json:"price,omitempty" url:"price,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardSection) GetAcceptance() *CardLinkTypes {
	if c == nil {
		return nil
	}
	return c.Acceptance
}

func (c *CardSection) GetFees() *BasicTable {
	if c == nil {
		return nil
	}
	return c.Fees
}

func (c *CardSection) GetPrice() *BasicTable {
	if c == nil {
		return nil
	}
	return c.Price
}

func (c *CardSection) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardSection) UnmarshalJSON(data []byte) error {
	type unmarshaler CardSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardSection) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DSection struct {
	DepositAccount    *Bnk `json:"depositAccount,omitempty" url:"depositAccount,omitempty"`
	WithdrawalAccount *Bnk `json:"withdrawalAccount,omitempty" url:"withdrawalAccount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DSection) GetDepositAccount() *Bnk {
	if d == nil {
		return nil
	}
	return d.DepositAccount
}

func (d *DSection) GetWithdrawalAccount() *Bnk {
	if d == nil {
		return nil
	}
	return d.WithdrawalAccount
}

func (d *DSection) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DSection) UnmarshalJSON(data []byte) error {
	type unmarshaler DSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DSection) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Fax number.
type FaxNumber = string

type LinkData struct {
	Ro *ReadOnly        `json:"ro,omitempty" url:"ro,omitempty"`
	Rq *RequiredElement `json:"rq,omitempty" url:"rq,omitempty"`
	// The type of validation applied to the field. Available values:
	// - text
	// - alpha
	// - ein
	// - url
	// - phone
	// - alphanumeric
	// - zipcode
	// - numbers
	// - float
	// - ssn
	// - email
	// - routing
	Validator *string         `json:"validator,omitempty" url:"validator,omitempty"`
	Value     *ValueTemplates `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LinkData) GetRo() *ReadOnly {
	if l == nil {
		return nil
	}
	return l.Ro
}

func (l *LinkData) GetRq() *RequiredElement {
	if l == nil {
		return nil
	}
	return l.Rq
}

func (l *LinkData) GetValidator() *string {
	if l == nil {
		return nil
	}
	return l.Validator
}

func (l *LinkData) GetValue() *ValueTemplates {
	if l == nil {
		return nil
	}
	return l.Value
}

func (l *LinkData) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LinkData) UnmarshalJSON(data []byte) error {
	type unmarshaler LinkData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LinkData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LinkData) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LinkRow struct {
	Columns []*LinkData `json:"columns,omitempty" url:"columns,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LinkRow) GetColumns() []*LinkData {
	if l == nil {
		return nil
	}
	return l.Columns
}

func (l *LinkRow) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LinkRow) UnmarshalJSON(data []byte) error {
	type unmarshaler LinkRow
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LinkRow(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LinkRow) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type OList struct {
	Oaddress     *LinkData `json:"oaddress,omitempty" url:"oaddress,omitempty"`
	Ocity        *LinkData `json:"ocity,omitempty" url:"ocity,omitempty"`
	Ocountry     *LinkData `json:"ocountry,omitempty" url:"ocountry,omitempty"`
	Odriverstate *LinkData `json:"odriverstate,omitempty" url:"odriverstate,omitempty"`
	Ostate       *LinkData `json:"ostate,omitempty" url:"ostate,omitempty"`
	Ownerdob     *LinkData `json:"ownerdob,omitempty" url:"ownerdob,omitempty"`
	Ownerdriver  *LinkData `json:"ownerdriver,omitempty" url:"ownerdriver,omitempty"`
	Owneremail   *LinkData `json:"owneremail,omitempty" url:"owneremail,omitempty"`
	Ownername    *LinkData `json:"ownername,omitempty" url:"ownername,omitempty"`
	Ownerpercent *LinkData `json:"ownerpercent,omitempty" url:"ownerpercent,omitempty"`
	Ownerphone1  *LinkData `json:"ownerphone1,omitempty" url:"ownerphone1,omitempty"`
	Ownerphone2  *LinkData `json:"ownerphone2,omitempty" url:"ownerphone2,omitempty"`
	Ownerssn     *LinkData `json:"ownerssn,omitempty" url:"ownerssn,omitempty"`
	Ownertitle   *LinkData `json:"ownertitle,omitempty" url:"ownertitle,omitempty"`
	Ozip         *LinkData `json:"ozip,omitempty" url:"ozip,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OList) GetOaddress() *LinkData {
	if o == nil {
		return nil
	}
	return o.Oaddress
}

func (o *OList) GetOcity() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ocity
}

func (o *OList) GetOcountry() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ocountry
}

func (o *OList) GetOdriverstate() *LinkData {
	if o == nil {
		return nil
	}
	return o.Odriverstate
}

func (o *OList) GetOstate() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ostate
}

func (o *OList) GetOwnerdob() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ownerdob
}

func (o *OList) GetOwnerdriver() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ownerdriver
}

func (o *OList) GetOwneremail() *LinkData {
	if o == nil {
		return nil
	}
	return o.Owneremail
}

func (o *OList) GetOwnername() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ownername
}

func (o *OList) GetOwnerpercent() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ownerpercent
}

func (o *OList) GetOwnerphone1() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ownerphone1
}

func (o *OList) GetOwnerphone2() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ownerphone2
}

func (o *OList) GetOwnerssn() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ownerssn
}

func (o *OList) GetOwnertitle() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ownertitle
}

func (o *OList) GetOzip() *LinkData {
	if o == nil {
		return nil
	}
	return o.Ozip
}

func (o *OList) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OList) UnmarshalJSON(data []byte) error {
	type unmarshaler OList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OList) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OSection struct {
	ContactList *CList `json:"contact_list,omitempty" url:"contact_list,omitempty"`
	OwnList     *OList `json:"own_list,omitempty" url:"own_list,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OSection) GetContactList() *CList {
	if o == nil {
		return nil
	}
	return o.ContactList
}

func (o *OSection) GetOwnList() *OList {
	if o == nil {
		return nil
	}
	return o.OwnList
}

func (o *OSection) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OSection) UnmarshalJSON(data []byte) error {
	type unmarshaler OSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OSection) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type PSection struct {
	Avgmonthly    *LinkData `json:"avgmonthly,omitempty" url:"avgmonthly,omitempty"`
	Binperson     *LinkData `json:"binperson,omitempty" url:"binperson,omitempty"`
	Binphone      *LinkData `json:"binphone,omitempty" url:"binphone,omitempty"`
	Binweb        *LinkData `json:"binweb,omitempty" url:"binweb,omitempty"`
	Bsummary      *LinkData `json:"bsummary,omitempty" url:"bsummary,omitempty"`
	Highticketamt *LinkData `json:"highticketamt,omitempty" url:"highticketamt,omitempty"`
	Mcc           *LinkData `json:"mcc,omitempty" url:"mcc,omitempty"`
	Ticketamt     *LinkData `json:"ticketamt,omitempty" url:"ticketamt,omitempty"`
	WhenCharged   *LinkData `json:"whenCharged,omitempty" url:"whenCharged,omitempty"`
	WhenDelivered *LinkData `json:"whenDelivered,omitempty" url:"whenDelivered,omitempty"`
	WhenProvided  *LinkData `json:"whenProvided,omitempty" url:"whenProvided,omitempty"`
	WhenRefunded  *LinkData `json:"whenRefunded,omitempty" url:"whenRefunded,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PSection) GetAvgmonthly() *LinkData {
	if p == nil {
		return nil
	}
	return p.Avgmonthly
}

func (p *PSection) GetBinperson() *LinkData {
	if p == nil {
		return nil
	}
	return p.Binperson
}

func (p *PSection) GetBinphone() *LinkData {
	if p == nil {
		return nil
	}
	return p.Binphone
}

func (p *PSection) GetBinweb() *LinkData {
	if p == nil {
		return nil
	}
	return p.Binweb
}

func (p *PSection) GetBsummary() *LinkData {
	if p == nil {
		return nil
	}
	return p.Bsummary
}

func (p *PSection) GetHighticketamt() *LinkData {
	if p == nil {
		return nil
	}
	return p.Highticketamt
}

func (p *PSection) GetMcc() *LinkData {
	if p == nil {
		return nil
	}
	return p.Mcc
}

func (p *PSection) GetTicketamt() *LinkData {
	if p == nil {
		return nil
	}
	return p.Ticketamt
}

func (p *PSection) GetWhenCharged() *LinkData {
	if p == nil {
		return nil
	}
	return p.WhenCharged
}

func (p *PSection) GetWhenDelivered() *LinkData {
	if p == nil {
		return nil
	}
	return p.WhenDelivered
}

func (p *PSection) GetWhenProvided() *LinkData {
	if p == nil {
		return nil
	}
	return p.WhenProvided
}

func (p *PSection) GetWhenRefunded() *LinkData {
	if p == nil {
		return nil
	}
	return p.WhenRefunded
}

func (p *PSection) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PSection) UnmarshalJSON(data []byte) error {
	type unmarshaler PSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PSection) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayabliApiResponse00 struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode   `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	ResponseData   *Responsedata   `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText   *ResponseText   `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponse00) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponse00) GetPageIdentifier() *PageIdentifier {
	if p == nil {
		return nil
	}
	return p.PageIdentifier
}

func (p *PayabliApiResponse00) GetResponseCode() *Responsecode {
	if p == nil {
		return nil
	}
	return p.ResponseCode
}

func (p *PayabliApiResponse00) GetResponseData() *Responsedata {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponse00) GetResponseText() *ResponseText {
	if p == nil {
		return nil
	}
	return p.ResponseText
}

func (p *PayabliApiResponse00) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponse00) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponse00
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponse00(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponse00) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The total number of bills the business pays each month. For example, if your business pays an electric bill of \$500, an internet bill of \$150, and various suppliers \$5,000 every month then your monthly bill volume would be \$5,650.
type PayoutAverageMonthlyVolume = float64

// The average amount of each bill you pay through our service. For example, if your business paid 3 bills for a total of \$1,500 then your average bill size is \$500.
type PayoutAverageTicketLimit = float64

// The maximum amount of credit that our lending partner has authorized to the business for on-demand payouts. It's the upper boundary on how much you can spend or owe on a credit account at any given time.
type PayoutCreditLimit = float64

// The largest amount for bill you will pay through our service. For example, if your business paid for 3 bills each month for \$500, \$1000, and \$5000 respectively, then your highest ticket is \$5000.
type PayoutHighTicketAmount = float64

// When `true`, indicates that the merchant acknowledges PCI responsibilities and can be enrolled in the PCI program for breach insurance
type PciAttestation = *bool

type QueryBoardingAppsListResponse struct {
	Records []*ApplicationQueryRecord `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary             `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBoardingAppsListResponse) GetRecords() []*ApplicationQueryRecord {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryBoardingAppsListResponse) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryBoardingAppsListResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBoardingAppsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryBoardingAppsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryBoardingAppsListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBoardingAppsListResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryBoardingLinksResponse struct {
	Records []*QueryBoardingLinksResponseRecordsItem `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary                            `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBoardingLinksResponse) GetRecords() []*QueryBoardingLinksResponseRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryBoardingLinksResponse) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryBoardingLinksResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBoardingLinksResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryBoardingLinksResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryBoardingLinksResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBoardingLinksResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryBoardingLinksResponseRecordsItem struct {
	AcceptOauth     *AcceptOauth     `json:"AcceptOauth,omitempty" url:"AcceptOauth,omitempty"`
	AcceptRegister  *AcceptRegister  `json:"AcceptRegister,omitempty" url:"AcceptRegister,omitempty"`
	EntryAttributes *EntryAttributes `json:"EntryAttributes,omitempty" url:"EntryAttributes,omitempty"`
	// The record ID.
	Id                  *int                 `json:"Id,omitempty" url:"Id,omitempty"`
	LastUpdated         *LastModified        `json:"LastUpdated,omitempty" url:"LastUpdated,omitempty"`
	OrgParentName       *OrgParentName       `json:"OrgParentName,omitempty" url:"OrgParentName,omitempty"`
	ReferenceName       *ReferenceName       `json:"ReferenceName,omitempty" url:"ReferenceName,omitempty"`
	ReferenceTemplateId *ReferenceTemplateId `json:"ReferenceTemplateId,omitempty" url:"ReferenceTemplateId,omitempty"`
	TemplateCode        *TemplateCode        `json:"TemplateCode,omitempty" url:"TemplateCode,omitempty"`
	TemplateName        *TemplateName        `json:"TemplateName,omitempty" url:"TemplateName,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBoardingLinksResponseRecordsItem) GetAcceptOauth() *AcceptOauth {
	if q == nil {
		return nil
	}
	return q.AcceptOauth
}

func (q *QueryBoardingLinksResponseRecordsItem) GetAcceptRegister() *AcceptRegister {
	if q == nil {
		return nil
	}
	return q.AcceptRegister
}

func (q *QueryBoardingLinksResponseRecordsItem) GetEntryAttributes() *EntryAttributes {
	if q == nil {
		return nil
	}
	return q.EntryAttributes
}

func (q *QueryBoardingLinksResponseRecordsItem) GetId() *int {
	if q == nil {
		return nil
	}
	return q.Id
}

func (q *QueryBoardingLinksResponseRecordsItem) GetLastUpdated() *LastModified {
	if q == nil {
		return nil
	}
	return q.LastUpdated
}

func (q *QueryBoardingLinksResponseRecordsItem) GetOrgParentName() *OrgParentName {
	if q == nil {
		return nil
	}
	return q.OrgParentName
}

func (q *QueryBoardingLinksResponseRecordsItem) GetReferenceName() *ReferenceName {
	if q == nil {
		return nil
	}
	return q.ReferenceName
}

func (q *QueryBoardingLinksResponseRecordsItem) GetReferenceTemplateId() *ReferenceTemplateId {
	if q == nil {
		return nil
	}
	return q.ReferenceTemplateId
}

func (q *QueryBoardingLinksResponseRecordsItem) GetTemplateCode() *TemplateCode {
	if q == nil {
		return nil
	}
	return q.TemplateCode
}

func (q *QueryBoardingLinksResponseRecordsItem) GetTemplateName() *TemplateName {
	if q == nil {
		return nil
	}
	return q.TemplateName
}

func (q *QueryBoardingLinksResponseRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBoardingLinksResponseRecordsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryBoardingLinksResponseRecordsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryBoardingLinksResponseRecordsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBoardingLinksResponseRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Sales representative code. This is an optional field that can be used to track the sales representative associated with the application.
type RepCode = string

// Sales representative name. This is an optional field that can be used to track the sales representative associated with the application.
type RepName = string

// Sales representative office location. This is an optional field that can be used to track the sales representative office associated with the application.
type RepOffice = string

type SSection struct {
	Ach  *AchSection  `json:"ach,omitempty" url:"ach,omitempty"`
	Card *CardSection `json:"card,omitempty" url:"card,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SSection) GetAch() *AchSection {
	if s == nil {
		return nil
	}
	return s.Ach
}

func (s *SSection) GetCard() *CardSection {
	if s == nil {
		return nil
	}
	return s.Card
}

func (s *SSection) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SSection) UnmarshalJSON(data []byte) error {
	type unmarshaler SSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SSection) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Date when the signer signed the document. Accepted formats:
// YYYY-MM-DD, MM/DD/YYYY
type SignDate = string

// Reference to the signed document.
type SignedDocumentReference = string

// The signer's acceptance status. A true or false indicating an acceptance to the terms of service with the root org or provider.
type SignerAcceptance = *bool

// Additional line for the signer's address. If used, this must be the physical address of the signer, not a P.O. box.
type SignerAddress1 = string

// The signer's city.
type SignerCity = string

// The signer's country in ISO-3166-1 alpha 2 format. See this reference for more: https://en.wikipedia.org/wiki/ISO_3166-1.
type SignerCountry = string

// Information about the application's signer.
type SignerData struct {
	// The signer's ID. This is automatically generated by Payabli.
	SignerUuid *string      `json:"signerUuid,omitempty" url:"signerUuid,omitempty"`
	Name       *SignerName  `json:"name,omitempty" url:"name,omitempty"`
	Ssn        *SignerSsn   `json:"ssn,omitempty" url:"ssn,omitempty"`
	Dob        *SignerDob   `json:"dob,omitempty" url:"dob,omitempty"`
	Phone      *SignerPhone `json:"phone,omitempty" url:"phone,omitempty"`
	// The signer's email address.
	Email      *Email            `json:"email,omitempty" url:"email,omitempty"`
	Address    *Signeraddress    `json:"address,omitempty" url:"address,omitempty"`
	Address1   *SignerAddress1   `json:"address1,omitempty" url:"address1,omitempty"`
	City       *SignerCity       `json:"city,omitempty" url:"city,omitempty"`
	State      *SignerState      `json:"state,omitempty" url:"state,omitempty"`
	Zip        *SignerZip        `json:"zip,omitempty" url:"zip,omitempty"`
	Country    *SignerCountry    `json:"country,omitempty" url:"country,omitempty"`
	Acceptance *SignerAcceptance `json:"acceptance,omitempty" url:"acceptance,omitempty"`
	// Reference to the signed document.
	SignedDocumentReference *string               `json:"signedDocumentReference,omitempty" url:"signedDocumentReference,omitempty"`
	PciAttestation          *PciAttestation       `json:"pciAttestation,omitempty" url:"pciAttestation,omitempty"`
	AttestationDate         *AttestationDate      `json:"attestationDate,omitempty" url:"attestationDate,omitempty"`
	SignDate                *SignDate             `json:"signDate,omitempty" url:"signDate,omitempty"`
	AdditionalData          *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SignerData) GetSignerUuid() *string {
	if s == nil {
		return nil
	}
	return s.SignerUuid
}

func (s *SignerData) GetName() *SignerName {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SignerData) GetSsn() *SignerSsn {
	if s == nil {
		return nil
	}
	return s.Ssn
}

func (s *SignerData) GetDob() *SignerDob {
	if s == nil {
		return nil
	}
	return s.Dob
}

func (s *SignerData) GetPhone() *SignerPhone {
	if s == nil {
		return nil
	}
	return s.Phone
}

func (s *SignerData) GetEmail() *Email {
	if s == nil {
		return nil
	}
	return s.Email
}

func (s *SignerData) GetAddress() *Signeraddress {
	if s == nil {
		return nil
	}
	return s.Address
}

func (s *SignerData) GetAddress1() *SignerAddress1 {
	if s == nil {
		return nil
	}
	return s.Address1
}

func (s *SignerData) GetCity() *SignerCity {
	if s == nil {
		return nil
	}
	return s.City
}

func (s *SignerData) GetState() *SignerState {
	if s == nil {
		return nil
	}
	return s.State
}

func (s *SignerData) GetZip() *SignerZip {
	if s == nil {
		return nil
	}
	return s.Zip
}

func (s *SignerData) GetCountry() *SignerCountry {
	if s == nil {
		return nil
	}
	return s.Country
}

func (s *SignerData) GetAcceptance() *SignerAcceptance {
	if s == nil {
		return nil
	}
	return s.Acceptance
}

func (s *SignerData) GetSignedDocumentReference() *string {
	if s == nil {
		return nil
	}
	return s.SignedDocumentReference
}

func (s *SignerData) GetPciAttestation() *PciAttestation {
	if s == nil {
		return nil
	}
	return s.PciAttestation
}

func (s *SignerData) GetAttestationDate() *AttestationDate {
	if s == nil {
		return nil
	}
	return s.AttestationDate
}

func (s *SignerData) GetSignDate() *SignDate {
	if s == nil {
		return nil
	}
	return s.SignDate
}

func (s *SignerData) GetAdditionalData() *AdditionalDataString {
	if s == nil {
		return nil
	}
	return s.AdditionalData
}

func (s *SignerData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SignerData) UnmarshalJSON(data []byte) error {
	type unmarshaler SignerData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SignerData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SignerData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Information about the application's signer.
type SignerDataRequest struct {
	Name  *SignerName  `json:"name,omitempty" url:"name,omitempty"`
	Ssn   *SignerSsn   `json:"ssn,omitempty" url:"ssn,omitempty"`
	Dob   *SignerDob   `json:"dob,omitempty" url:"dob,omitempty"`
	Phone *SignerPhone `json:"phone,omitempty" url:"phone,omitempty"`
	// The signer's email address.
	Email                   *Email                   `json:"email,omitempty" url:"email,omitempty"`
	Address                 *Signeraddress           `json:"address,omitempty" url:"address,omitempty"`
	Address1                *SignerAddress1          `json:"address1,omitempty" url:"address1,omitempty"`
	City                    *SignerCity              `json:"city,omitempty" url:"city,omitempty"`
	Country                 *SignerCountry           `json:"country,omitempty" url:"country,omitempty"`
	State                   *SignerState             `json:"state,omitempty" url:"state,omitempty"`
	Zip                     *SignerZip               `json:"zip,omitempty" url:"zip,omitempty"`
	Acceptance              *SignerAcceptance        `json:"acceptance,omitempty" url:"acceptance,omitempty"`
	SignedDocumentReference *SignedDocumentReference `json:"signedDocumentReference,omitempty" url:"signedDocumentReference,omitempty"`
	PciAttestation          *PciAttestation          `json:"pciAttestation,omitempty" url:"pciAttestation,omitempty"`
	AttestationDate         *AttestationDate         `json:"attestationDate,omitempty" url:"attestationDate,omitempty"`
	AdditionalData          *AdditionalDataString    `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	SignDate                *SignDate                `json:"signDate,omitempty" url:"signDate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SignerDataRequest) GetName() *SignerName {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SignerDataRequest) GetSsn() *SignerSsn {
	if s == nil {
		return nil
	}
	return s.Ssn
}

func (s *SignerDataRequest) GetDob() *SignerDob {
	if s == nil {
		return nil
	}
	return s.Dob
}

func (s *SignerDataRequest) GetPhone() *SignerPhone {
	if s == nil {
		return nil
	}
	return s.Phone
}

func (s *SignerDataRequest) GetEmail() *Email {
	if s == nil {
		return nil
	}
	return s.Email
}

func (s *SignerDataRequest) GetAddress() *Signeraddress {
	if s == nil {
		return nil
	}
	return s.Address
}

func (s *SignerDataRequest) GetAddress1() *SignerAddress1 {
	if s == nil {
		return nil
	}
	return s.Address1
}

func (s *SignerDataRequest) GetCity() *SignerCity {
	if s == nil {
		return nil
	}
	return s.City
}

func (s *SignerDataRequest) GetCountry() *SignerCountry {
	if s == nil {
		return nil
	}
	return s.Country
}

func (s *SignerDataRequest) GetState() *SignerState {
	if s == nil {
		return nil
	}
	return s.State
}

func (s *SignerDataRequest) GetZip() *SignerZip {
	if s == nil {
		return nil
	}
	return s.Zip
}

func (s *SignerDataRequest) GetAcceptance() *SignerAcceptance {
	if s == nil {
		return nil
	}
	return s.Acceptance
}

func (s *SignerDataRequest) GetSignedDocumentReference() *SignedDocumentReference {
	if s == nil {
		return nil
	}
	return s.SignedDocumentReference
}

func (s *SignerDataRequest) GetPciAttestation() *PciAttestation {
	if s == nil {
		return nil
	}
	return s.PciAttestation
}

func (s *SignerDataRequest) GetAttestationDate() *AttestationDate {
	if s == nil {
		return nil
	}
	return s.AttestationDate
}

func (s *SignerDataRequest) GetAdditionalData() *AdditionalDataString {
	if s == nil {
		return nil
	}
	return s.AdditionalData
}

func (s *SignerDataRequest) GetSignDate() *SignDate {
	if s == nil {
		return nil
	}
	return s.SignDate
}

func (s *SignerDataRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SignerDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SignerDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SignerDataRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SignerDataRequest) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The signer's date of birth.
type SignerDob = string

// The signer's name.
type SignerName = string

// The signer's phone number.
type SignerPhone = string

// The signer's SSN.
type SignerSsn = string

// The signer's state.
type SignerState = string

// The signer's zip code.
type SignerZip = string

// The signer's address. This must be the physical address of the signer, not a P.O. box.
type Signeraddress = string

// The average transaction size that the business expects to process. For example, if you process \$10,000 a month across 10 transactions, that's an average ticket of \$1000.
type Ticketamt = *float64

type AddApplicationRequest struct {
	// Fields for Pay In processing applications
	ApplicationDataPayIn *ApplicationDataPayIn
	// Fields for Managed Payout processing applications
	ApplicationDataManaged *ApplicationDataManaged
	// Fields for On-Demand Payout processing applications
	ApplicationDataOdp *ApplicationDataOdp
	// All fields for boarding applications
	ApplicationData *ApplicationData

	typ string
}

func (a *AddApplicationRequest) GetApplicationDataPayIn() *ApplicationDataPayIn {
	if a == nil {
		return nil
	}
	return a.ApplicationDataPayIn
}

func (a *AddApplicationRequest) GetApplicationDataManaged() *ApplicationDataManaged {
	if a == nil {
		return nil
	}
	return a.ApplicationDataManaged
}

func (a *AddApplicationRequest) GetApplicationDataOdp() *ApplicationDataOdp {
	if a == nil {
		return nil
	}
	return a.ApplicationDataOdp
}

func (a *AddApplicationRequest) GetApplicationData() *ApplicationData {
	if a == nil {
		return nil
	}
	return a.ApplicationData
}

func (a *AddApplicationRequest) UnmarshalJSON(data []byte) error {
	valueApplicationDataPayIn := new(ApplicationDataPayIn)
	if err := json.Unmarshal(data, &valueApplicationDataPayIn); err == nil {
		a.typ = "ApplicationDataPayIn"
		a.ApplicationDataPayIn = valueApplicationDataPayIn
		return nil
	}
	valueApplicationDataManaged := new(ApplicationDataManaged)
	if err := json.Unmarshal(data, &valueApplicationDataManaged); err == nil {
		a.typ = "ApplicationDataManaged"
		a.ApplicationDataManaged = valueApplicationDataManaged
		return nil
	}
	valueApplicationDataOdp := new(ApplicationDataOdp)
	if err := json.Unmarshal(data, &valueApplicationDataOdp); err == nil {
		a.typ = "ApplicationDataOdp"
		a.ApplicationDataOdp = valueApplicationDataOdp
		return nil
	}
	valueApplicationData := new(ApplicationData)
	if err := json.Unmarshal(data, &valueApplicationData); err == nil {
		a.typ = "ApplicationData"
		a.ApplicationData = valueApplicationData
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddApplicationRequest) MarshalJSON() ([]byte, error) {
	if a.typ == "ApplicationDataPayIn" || a.ApplicationDataPayIn != nil {
		return json.Marshal(a.ApplicationDataPayIn)
	}
	if a.typ == "ApplicationDataManaged" || a.ApplicationDataManaged != nil {
		return json.Marshal(a.ApplicationDataManaged)
	}
	if a.typ == "ApplicationDataOdp" || a.ApplicationDataOdp != nil {
		return json.Marshal(a.ApplicationDataOdp)
	}
	if a.typ == "ApplicationData" || a.ApplicationData != nil {
		return json.Marshal(a.ApplicationData)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AddApplicationRequestVisitor interface {
	VisitApplicationDataPayIn(*ApplicationDataPayIn) error
	VisitApplicationDataManaged(*ApplicationDataManaged) error
	VisitApplicationDataOdp(*ApplicationDataOdp) error
	VisitApplicationData(*ApplicationData) error
}

func (a *AddApplicationRequest) Accept(visitor AddApplicationRequestVisitor) error {
	if a.typ == "ApplicationDataPayIn" || a.ApplicationDataPayIn != nil {
		return visitor.VisitApplicationDataPayIn(a.ApplicationDataPayIn)
	}
	if a.typ == "ApplicationDataManaged" || a.ApplicationDataManaged != nil {
		return visitor.VisitApplicationDataManaged(a.ApplicationDataManaged)
	}
	if a.typ == "ApplicationDataOdp" || a.ApplicationDataOdp != nil {
		return visitor.VisitApplicationDataOdp(a.ApplicationDataOdp)
	}
	if a.typ == "ApplicationData" || a.ApplicationData != nil {
		return visitor.VisitApplicationData(a.ApplicationData)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}
