// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	big "math/big"
	time "time"
)

var (
	fileContentImageOnlyFieldFtype    = big.NewInt(1 << 0)
	fileContentImageOnlyFieldFilename = big.NewInt(1 << 1)
	fileContentImageOnlyFieldFurl     = big.NewInt(1 << 2)
	fileContentImageOnlyFieldFContent = big.NewInt(1 << 3)
)

type FileContentImageOnly struct {
	Ftype *FileContentFtype `json:"ftype,omitempty" url:"ftype,omitempty"`
	// The name of the file to be uploaded
	Filename *string `json:"filename,omitempty" url:"filename,omitempty"`
	// Optional URL link to the file
	Furl *string `json:"furl,omitempty" url:"furl,omitempty"`
	// Base64-encoded file content
	FContent *string `json:"fContent,omitempty" url:"fContent,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FileContentImageOnly) GetFtype() *FileContentFtype {
	if f == nil {
		return nil
	}
	return f.Ftype
}

func (f *FileContentImageOnly) GetFilename() *string {
	if f == nil {
		return nil
	}
	return f.Filename
}

func (f *FileContentImageOnly) GetFurl() *string {
	if f == nil {
		return nil
	}
	return f.Furl
}

func (f *FileContentImageOnly) GetFContent() *string {
	if f == nil {
		return nil
	}
	return f.FContent
}

func (f *FileContentImageOnly) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileContentImageOnly) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetFtype sets the Ftype field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileContentImageOnly) SetFtype(ftype *FileContentFtype) {
	f.Ftype = ftype
	f.require(fileContentImageOnlyFieldFtype)
}

// SetFilename sets the Filename field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileContentImageOnly) SetFilename(filename *string) {
	f.Filename = filename
	f.require(fileContentImageOnlyFieldFilename)
}

// SetFurl sets the Furl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileContentImageOnly) SetFurl(furl *string) {
	f.Furl = furl
	f.require(fileContentImageOnlyFieldFurl)
}

// SetFContent sets the FContent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileContentImageOnly) SetFContent(fContent *string) {
	f.FContent = fContent
	f.require(fileContentImageOnlyFieldFContent)
}

func (f *FileContentImageOnly) UnmarshalJSON(data []byte) error {
	type unmarshaler FileContentImageOnly
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FileContentImageOnly(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileContentImageOnly) MarshalJSON() ([]byte, error) {
	type embed FileContentImageOnly
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FileContentImageOnly) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	ocrAttachmentFieldFtype          = big.NewInt(1 << 0)
	ocrAttachmentFieldFilename       = big.NewInt(1 << 1)
	ocrAttachmentFieldFileDescriptor = big.NewInt(1 << 2)
	ocrAttachmentFieldFurl           = big.NewInt(1 << 3)
	ocrAttachmentFieldFContent       = big.NewInt(1 << 4)
)

type OcrAttachment struct {
	Ftype          *string `json:"ftype,omitempty" url:"ftype,omitempty"`
	Filename       *string `json:"filename,omitempty" url:"filename,omitempty"`
	FileDescriptor *string `json:"fileDescriptor,omitempty" url:"fileDescriptor,omitempty"`
	Furl           *string `json:"furl,omitempty" url:"furl,omitempty"`
	FContent       *string `json:"fContent,omitempty" url:"fContent,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrAttachment) GetFtype() *string {
	if o == nil {
		return nil
	}
	return o.Ftype
}

func (o *OcrAttachment) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

func (o *OcrAttachment) GetFileDescriptor() *string {
	if o == nil {
		return nil
	}
	return o.FileDescriptor
}

func (o *OcrAttachment) GetFurl() *string {
	if o == nil {
		return nil
	}
	return o.Furl
}

func (o *OcrAttachment) GetFContent() *string {
	if o == nil {
		return nil
	}
	return o.FContent
}

func (o *OcrAttachment) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrAttachment) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetFtype sets the Ftype field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrAttachment) SetFtype(ftype *string) {
	o.Ftype = ftype
	o.require(ocrAttachmentFieldFtype)
}

// SetFilename sets the Filename field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrAttachment) SetFilename(filename *string) {
	o.Filename = filename
	o.require(ocrAttachmentFieldFilename)
}

// SetFileDescriptor sets the FileDescriptor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrAttachment) SetFileDescriptor(fileDescriptor *string) {
	o.FileDescriptor = fileDescriptor
	o.require(ocrAttachmentFieldFileDescriptor)
}

// SetFurl sets the Furl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrAttachment) SetFurl(furl *string) {
	o.Furl = furl
	o.require(ocrAttachmentFieldFurl)
}

// SetFContent sets the FContent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrAttachment) SetFContent(fContent *string) {
	o.FContent = fContent
	o.require(ocrAttachmentFieldFContent)
}

func (o *OcrAttachment) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrAttachment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrAttachment(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrAttachment) MarshalJSON() ([]byte, error) {
	type embed OcrAttachment
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OcrAttachment) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	ocrBillItemFieldItemTotalAmount   = big.NewInt(1 << 0)
	ocrBillItemFieldItemTaxAmount     = big.NewInt(1 << 1)
	ocrBillItemFieldItemTaxRate       = big.NewInt(1 << 2)
	ocrBillItemFieldItemProductCode   = big.NewInt(1 << 3)
	ocrBillItemFieldItemProductName   = big.NewInt(1 << 4)
	ocrBillItemFieldItemDescription   = big.NewInt(1 << 5)
	ocrBillItemFieldItemCommodityCode = big.NewInt(1 << 6)
	ocrBillItemFieldItemUnitOfMeasure = big.NewInt(1 << 7)
	ocrBillItemFieldItemCost          = big.NewInt(1 << 8)
	ocrBillItemFieldItemQty           = big.NewInt(1 << 9)
	ocrBillItemFieldItemMode          = big.NewInt(1 << 10)
	ocrBillItemFieldItemCategories    = big.NewInt(1 << 11)
)

type OcrBillItem struct {
	ItemTotalAmount   *float64 `json:"itemTotalAmount,omitempty" url:"itemTotalAmount,omitempty"`
	ItemTaxAmount     *float64 `json:"itemTaxAmount,omitempty" url:"itemTaxAmount,omitempty"`
	ItemTaxRate       *float64 `json:"itemTaxRate,omitempty" url:"itemTaxRate,omitempty"`
	ItemProductCode   *string  `json:"itemProductCode,omitempty" url:"itemProductCode,omitempty"`
	ItemProductName   *string  `json:"itemProductName,omitempty" url:"itemProductName,omitempty"`
	ItemDescription   *string  `json:"itemDescription,omitempty" url:"itemDescription,omitempty"`
	ItemCommodityCode *string  `json:"itemCommodityCode,omitempty" url:"itemCommodityCode,omitempty"`
	ItemUnitOfMeasure *string  `json:"itemUnitOfMeasure,omitempty" url:"itemUnitOfMeasure,omitempty"`
	ItemCost          *float64 `json:"itemCost,omitempty" url:"itemCost,omitempty"`
	ItemQty           *int     `json:"itemQty,omitempty" url:"itemQty,omitempty"`
	ItemMode          *int     `json:"itemMode,omitempty" url:"itemMode,omitempty"`
	ItemCategories    []string `json:"itemCategories,omitempty" url:"itemCategories,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrBillItem) GetItemTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.ItemTotalAmount
}

func (o *OcrBillItem) GetItemTaxAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.ItemTaxAmount
}

func (o *OcrBillItem) GetItemTaxRate() *float64 {
	if o == nil {
		return nil
	}
	return o.ItemTaxRate
}

func (o *OcrBillItem) GetItemProductCode() *string {
	if o == nil {
		return nil
	}
	return o.ItemProductCode
}

func (o *OcrBillItem) GetItemProductName() *string {
	if o == nil {
		return nil
	}
	return o.ItemProductName
}

func (o *OcrBillItem) GetItemDescription() *string {
	if o == nil {
		return nil
	}
	return o.ItemDescription
}

func (o *OcrBillItem) GetItemCommodityCode() *string {
	if o == nil {
		return nil
	}
	return o.ItemCommodityCode
}

func (o *OcrBillItem) GetItemUnitOfMeasure() *string {
	if o == nil {
		return nil
	}
	return o.ItemUnitOfMeasure
}

func (o *OcrBillItem) GetItemCost() *float64 {
	if o == nil {
		return nil
	}
	return o.ItemCost
}

func (o *OcrBillItem) GetItemQty() *int {
	if o == nil {
		return nil
	}
	return o.ItemQty
}

func (o *OcrBillItem) GetItemMode() *int {
	if o == nil {
		return nil
	}
	return o.ItemMode
}

func (o *OcrBillItem) GetItemCategories() []string {
	if o == nil {
		return nil
	}
	return o.ItemCategories
}

func (o *OcrBillItem) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrBillItem) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetItemTotalAmount sets the ItemTotalAmount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemTotalAmount(itemTotalAmount *float64) {
	o.ItemTotalAmount = itemTotalAmount
	o.require(ocrBillItemFieldItemTotalAmount)
}

// SetItemTaxAmount sets the ItemTaxAmount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemTaxAmount(itemTaxAmount *float64) {
	o.ItemTaxAmount = itemTaxAmount
	o.require(ocrBillItemFieldItemTaxAmount)
}

// SetItemTaxRate sets the ItemTaxRate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemTaxRate(itemTaxRate *float64) {
	o.ItemTaxRate = itemTaxRate
	o.require(ocrBillItemFieldItemTaxRate)
}

// SetItemProductCode sets the ItemProductCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemProductCode(itemProductCode *string) {
	o.ItemProductCode = itemProductCode
	o.require(ocrBillItemFieldItemProductCode)
}

// SetItemProductName sets the ItemProductName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemProductName(itemProductName *string) {
	o.ItemProductName = itemProductName
	o.require(ocrBillItemFieldItemProductName)
}

// SetItemDescription sets the ItemDescription field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemDescription(itemDescription *string) {
	o.ItemDescription = itemDescription
	o.require(ocrBillItemFieldItemDescription)
}

// SetItemCommodityCode sets the ItemCommodityCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemCommodityCode(itemCommodityCode *string) {
	o.ItemCommodityCode = itemCommodityCode
	o.require(ocrBillItemFieldItemCommodityCode)
}

// SetItemUnitOfMeasure sets the ItemUnitOfMeasure field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemUnitOfMeasure(itemUnitOfMeasure *string) {
	o.ItemUnitOfMeasure = itemUnitOfMeasure
	o.require(ocrBillItemFieldItemUnitOfMeasure)
}

// SetItemCost sets the ItemCost field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemCost(itemCost *float64) {
	o.ItemCost = itemCost
	o.require(ocrBillItemFieldItemCost)
}

// SetItemQty sets the ItemQty field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemQty(itemQty *int) {
	o.ItemQty = itemQty
	o.require(ocrBillItemFieldItemQty)
}

// SetItemMode sets the ItemMode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemMode(itemMode *int) {
	o.ItemMode = itemMode
	o.require(ocrBillItemFieldItemMode)
}

// SetItemCategories sets the ItemCategories field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItem) SetItemCategories(itemCategories []string) {
	o.ItemCategories = itemCategories
	o.require(ocrBillItemFieldItemCategories)
}

func (o *OcrBillItem) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrBillItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrBillItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrBillItem) MarshalJSON() ([]byte, error) {
	type embed OcrBillItem
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OcrBillItem) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	ocrBillItemAdditionalDataFieldCategory        = big.NewInt(1 << 0)
	ocrBillItemAdditionalDataFieldCurrencyCode    = big.NewInt(1 << 1)
	ocrBillItemAdditionalDataFieldType            = big.NewInt(1 << 2)
	ocrBillItemAdditionalDataFieldReferenceNumber = big.NewInt(1 << 3)
)

type OcrBillItemAdditionalData struct {
	Category        *string `json:"category,omitempty" url:"category,omitempty"`
	CurrencyCode    *string `json:"currency_code,omitempty" url:"currency_code,omitempty"`
	Type            *string `json:"type,omitempty" url:"type,omitempty"`
	ReferenceNumber *string `json:"reference_number,omitempty" url:"reference_number,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrBillItemAdditionalData) GetCategory() *string {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *OcrBillItemAdditionalData) GetCurrencyCode() *string {
	if o == nil {
		return nil
	}
	return o.CurrencyCode
}

func (o *OcrBillItemAdditionalData) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *OcrBillItemAdditionalData) GetReferenceNumber() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceNumber
}

func (o *OcrBillItemAdditionalData) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrBillItemAdditionalData) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetCategory sets the Category field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItemAdditionalData) SetCategory(category *string) {
	o.Category = category
	o.require(ocrBillItemAdditionalDataFieldCategory)
}

// SetCurrencyCode sets the CurrencyCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItemAdditionalData) SetCurrencyCode(currencyCode *string) {
	o.CurrencyCode = currencyCode
	o.require(ocrBillItemAdditionalDataFieldCurrencyCode)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItemAdditionalData) SetType(type_ *string) {
	o.Type = type_
	o.require(ocrBillItemAdditionalDataFieldType)
}

// SetReferenceNumber sets the ReferenceNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrBillItemAdditionalData) SetReferenceNumber(referenceNumber *string) {
	o.ReferenceNumber = referenceNumber
	o.require(ocrBillItemAdditionalDataFieldReferenceNumber)
}

func (o *OcrBillItemAdditionalData) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrBillItemAdditionalData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrBillItemAdditionalData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrBillItemAdditionalData) MarshalJSON() ([]byte, error) {
	type embed OcrBillItemAdditionalData
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OcrBillItemAdditionalData) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	ocrResponseDataFieldResultData = big.NewInt(1 << 0)
)

type OcrResponseData struct {
	ResultData *OcrResultData `json:"resultData,omitempty" url:"resultData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrResponseData) GetResultData() *OcrResultData {
	if o == nil {
		return nil
	}
	return o.ResultData
}

func (o *OcrResponseData) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrResponseData) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetResultData sets the ResultData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResponseData) SetResultData(resultData *OcrResultData) {
	o.ResultData = resultData
	o.require(ocrResponseDataFieldResultData)
}

func (o *OcrResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrResponseData) MarshalJSON() ([]byte, error) {
	type embed OcrResponseData
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OcrResponseData) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	ocrResultDataFieldBillNumber       = big.NewInt(1 << 0)
	ocrResultDataFieldNetAmount        = big.NewInt(1 << 1)
	ocrResultDataFieldBillDate         = big.NewInt(1 << 2)
	ocrResultDataFieldDueDate          = big.NewInt(1 << 3)
	ocrResultDataFieldComments         = big.NewInt(1 << 4)
	ocrResultDataFieldBillItems        = big.NewInt(1 << 5)
	ocrResultDataFieldMode             = big.NewInt(1 << 6)
	ocrResultDataFieldAccountingField1 = big.NewInt(1 << 7)
	ocrResultDataFieldAccountingField2 = big.NewInt(1 << 8)
	ocrResultDataFieldAdditionalData   = big.NewInt(1 << 9)
	ocrResultDataFieldVendor           = big.NewInt(1 << 10)
	ocrResultDataFieldEndDate          = big.NewInt(1 << 11)
	ocrResultDataFieldFrequency        = big.NewInt(1 << 12)
	ocrResultDataFieldTerms            = big.NewInt(1 << 13)
	ocrResultDataFieldStatus           = big.NewInt(1 << 14)
	ocrResultDataFieldLotNumber        = big.NewInt(1 << 15)
	ocrResultDataFieldAttachments      = big.NewInt(1 << 16)
)

type OcrResultData struct {
	BillNumber       *string                    `json:"billNumber,omitempty" url:"billNumber,omitempty"`
	NetAmount        *float64                   `json:"netAmount,omitempty" url:"netAmount,omitempty"`
	BillDate         *time.Time                 `json:"billDate,omitempty" url:"billDate,omitempty"`
	DueDate          *time.Time                 `json:"dueDate,omitempty" url:"dueDate,omitempty"`
	Comments         *string                    `json:"comments,omitempty" url:"comments,omitempty"`
	BillItems        []*OcrBillItem             `json:"billItems,omitempty" url:"billItems,omitempty"`
	Mode             *int                       `json:"mode,omitempty" url:"mode,omitempty"`
	AccountingField1 *string                    `json:"accountingField1,omitempty" url:"accountingField1,omitempty"`
	AccountingField2 *string                    `json:"accountingField2,omitempty" url:"accountingField2,omitempty"`
	AdditionalData   *OcrBillItemAdditionalData `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	Vendor           *OcrVendor                 `json:"vendor,omitempty" url:"vendor,omitempty"`
	EndDate          *time.Time                 `json:"endDate,omitempty" url:"endDate,omitempty"`
	Frequency        *string                    `json:"frequency,omitempty" url:"frequency,omitempty"`
	Terms            *string                    `json:"terms,omitempty" url:"terms,omitempty"`
	Status           *int                       `json:"status,omitempty" url:"status,omitempty"`
	LotNumber        *string                    `json:"lotNumber,omitempty" url:"lotNumber,omitempty"`
	Attachments      []*OcrAttachment           `json:"attachments,omitempty" url:"attachments,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrResultData) GetBillNumber() *string {
	if o == nil {
		return nil
	}
	return o.BillNumber
}

func (o *OcrResultData) GetNetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.NetAmount
}

func (o *OcrResultData) GetBillDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.BillDate
}

func (o *OcrResultData) GetDueDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *OcrResultData) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *OcrResultData) GetBillItems() []*OcrBillItem {
	if o == nil {
		return nil
	}
	return o.BillItems
}

func (o *OcrResultData) GetMode() *int {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *OcrResultData) GetAccountingField1() *string {
	if o == nil {
		return nil
	}
	return o.AccountingField1
}

func (o *OcrResultData) GetAccountingField2() *string {
	if o == nil {
		return nil
	}
	return o.AccountingField2
}

func (o *OcrResultData) GetAdditionalData() *OcrBillItemAdditionalData {
	if o == nil {
		return nil
	}
	return o.AdditionalData
}

func (o *OcrResultData) GetVendor() *OcrVendor {
	if o == nil {
		return nil
	}
	return o.Vendor
}

func (o *OcrResultData) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *OcrResultData) GetFrequency() *string {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *OcrResultData) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *OcrResultData) GetStatus() *int {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *OcrResultData) GetLotNumber() *string {
	if o == nil {
		return nil
	}
	return o.LotNumber
}

func (o *OcrResultData) GetAttachments() []*OcrAttachment {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *OcrResultData) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrResultData) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetBillNumber sets the BillNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetBillNumber(billNumber *string) {
	o.BillNumber = billNumber
	o.require(ocrResultDataFieldBillNumber)
}

// SetNetAmount sets the NetAmount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetNetAmount(netAmount *float64) {
	o.NetAmount = netAmount
	o.require(ocrResultDataFieldNetAmount)
}

// SetBillDate sets the BillDate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetBillDate(billDate *time.Time) {
	o.BillDate = billDate
	o.require(ocrResultDataFieldBillDate)
}

// SetDueDate sets the DueDate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetDueDate(dueDate *time.Time) {
	o.DueDate = dueDate
	o.require(ocrResultDataFieldDueDate)
}

// SetComments sets the Comments field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetComments(comments *string) {
	o.Comments = comments
	o.require(ocrResultDataFieldComments)
}

// SetBillItems sets the BillItems field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetBillItems(billItems []*OcrBillItem) {
	o.BillItems = billItems
	o.require(ocrResultDataFieldBillItems)
}

// SetMode sets the Mode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetMode(mode *int) {
	o.Mode = mode
	o.require(ocrResultDataFieldMode)
}

// SetAccountingField1 sets the AccountingField1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetAccountingField1(accountingField1 *string) {
	o.AccountingField1 = accountingField1
	o.require(ocrResultDataFieldAccountingField1)
}

// SetAccountingField2 sets the AccountingField2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetAccountingField2(accountingField2 *string) {
	o.AccountingField2 = accountingField2
	o.require(ocrResultDataFieldAccountingField2)
}

// SetAdditionalData sets the AdditionalData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetAdditionalData(additionalData *OcrBillItemAdditionalData) {
	o.AdditionalData = additionalData
	o.require(ocrResultDataFieldAdditionalData)
}

// SetVendor sets the Vendor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetVendor(vendor_ *OcrVendor) {
	o.Vendor = vendor_
	o.require(ocrResultDataFieldVendor)
}

// SetEndDate sets the EndDate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetEndDate(endDate *time.Time) {
	o.EndDate = endDate
	o.require(ocrResultDataFieldEndDate)
}

// SetFrequency sets the Frequency field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetFrequency(frequency *string) {
	o.Frequency = frequency
	o.require(ocrResultDataFieldFrequency)
}

// SetTerms sets the Terms field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetTerms(terms *string) {
	o.Terms = terms
	o.require(ocrResultDataFieldTerms)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetStatus(status *int) {
	o.Status = status
	o.require(ocrResultDataFieldStatus)
}

// SetLotNumber sets the LotNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetLotNumber(lotNumber *string) {
	o.LotNumber = lotNumber
	o.require(ocrResultDataFieldLotNumber)
}

// SetAttachments sets the Attachments field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrResultData) SetAttachments(attachments []*OcrAttachment) {
	o.Attachments = attachments
	o.require(ocrResultDataFieldAttachments)
}

func (o *OcrResultData) UnmarshalJSON(data []byte) error {
	type embed OcrResultData
	var unmarshaler = struct {
		embed
		BillDate *internal.DateTime `json:"billDate,omitempty"`
		DueDate  *internal.DateTime `json:"dueDate,omitempty"`
		EndDate  *internal.DateTime `json:"endDate,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OcrResultData(unmarshaler.embed)
	o.BillDate = unmarshaler.BillDate.TimePtr()
	o.DueDate = unmarshaler.DueDate.TimePtr()
	o.EndDate = unmarshaler.EndDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrResultData) MarshalJSON() ([]byte, error) {
	type embed OcrResultData
	var marshaler = struct {
		embed
		BillDate *internal.DateTime `json:"billDate,omitempty"`
		DueDate  *internal.DateTime `json:"dueDate,omitempty"`
		EndDate  *internal.DateTime `json:"endDate,omitempty"`
	}{
		embed:    embed(*o),
		BillDate: internal.NewOptionalDateTime(o.BillDate),
		DueDate:  internal.NewOptionalDateTime(o.DueDate),
		EndDate:  internal.NewOptionalDateTime(o.EndDate),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OcrResultData) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	ocrVendorFieldVendorNumber          = big.NewInt(1 << 0)
	ocrVendorFieldName1                 = big.NewInt(1 << 1)
	ocrVendorFieldName2                 = big.NewInt(1 << 2)
	ocrVendorFieldEin                   = big.NewInt(1 << 3)
	ocrVendorFieldPhone                 = big.NewInt(1 << 4)
	ocrVendorFieldEmail                 = big.NewInt(1 << 5)
	ocrVendorFieldAddress1              = big.NewInt(1 << 6)
	ocrVendorFieldAddress2              = big.NewInt(1 << 7)
	ocrVendorFieldCity                  = big.NewInt(1 << 8)
	ocrVendorFieldState                 = big.NewInt(1 << 9)
	ocrVendorFieldZip                   = big.NewInt(1 << 10)
	ocrVendorFieldCountry               = big.NewInt(1 << 11)
	ocrVendorFieldMcc                   = big.NewInt(1 << 12)
	ocrVendorFieldLocationCode          = big.NewInt(1 << 13)
	ocrVendorFieldContacts              = big.NewInt(1 << 14)
	ocrVendorFieldBillingData           = big.NewInt(1 << 15)
	ocrVendorFieldPaymentMethod         = big.NewInt(1 << 16)
	ocrVendorFieldVendorStatus          = big.NewInt(1 << 17)
	ocrVendorFieldRemitAddress1         = big.NewInt(1 << 18)
	ocrVendorFieldRemitAddress2         = big.NewInt(1 << 19)
	ocrVendorFieldRemitCity             = big.NewInt(1 << 20)
	ocrVendorFieldRemitState            = big.NewInt(1 << 21)
	ocrVendorFieldRemitZip              = big.NewInt(1 << 22)
	ocrVendorFieldRemitCountry          = big.NewInt(1 << 23)
	ocrVendorFieldPayeeName1            = big.NewInt(1 << 24)
	ocrVendorFieldPayeeName2            = big.NewInt(1 << 25)
	ocrVendorFieldCustomerVendorAccount = big.NewInt(1 << 26)
	ocrVendorFieldInternalReferenceId   = big.NewInt(1 << 27)
	ocrVendorFieldCustomField1          = big.NewInt(1 << 28)
	ocrVendorFieldCustomField2          = big.NewInt(1 << 29)
	ocrVendorFieldAdditionalData        = big.NewInt(1 << 30)
)

type OcrVendor struct {
	VendorNumber          *string                  `json:"vendorNumber,omitempty" url:"vendorNumber,omitempty"`
	Name1                 *string                  `json:"name1,omitempty" url:"name1,omitempty"`
	Name2                 *string                  `json:"name2,omitempty" url:"name2,omitempty"`
	Ein                   *string                  `json:"ein,omitempty" url:"ein,omitempty"`
	Phone                 *string                  `json:"phone,omitempty" url:"phone,omitempty"`
	Email                 *string                  `json:"email,omitempty" url:"email,omitempty"`
	Address1              *string                  `json:"address1,omitempty" url:"address1,omitempty"`
	Address2              *string                  `json:"address2,omitempty" url:"address2,omitempty"`
	City                  *string                  `json:"city,omitempty" url:"city,omitempty"`
	State                 *string                  `json:"state,omitempty" url:"state,omitempty"`
	Zip                   *string                  `json:"zip,omitempty" url:"zip,omitempty"`
	Country               *string                  `json:"country,omitempty" url:"country,omitempty"`
	Mcc                   *string                  `json:"mcc,omitempty" url:"mcc,omitempty"`
	LocationCode          *string                  `json:"locationCode,omitempty" url:"locationCode,omitempty"`
	Contacts              []*Contacts              `json:"contacts,omitempty" url:"contacts,omitempty"`
	BillingData           *OcrVendorBillingData    `json:"billingData,omitempty" url:"billingData,omitempty"`
	PaymentMethod         *string                  `json:"paymentMethod,omitempty" url:"paymentMethod,omitempty"`
	VendorStatus          *int                     `json:"vendorStatus,omitempty" url:"vendorStatus,omitempty"`
	RemitAddress1         *string                  `json:"remitAddress1,omitempty" url:"remitAddress1,omitempty"`
	RemitAddress2         *string                  `json:"remitAddress2,omitempty" url:"remitAddress2,omitempty"`
	RemitCity             *string                  `json:"remitCity,omitempty" url:"remitCity,omitempty"`
	RemitState            *string                  `json:"remitState,omitempty" url:"remitState,omitempty"`
	RemitZip              *string                  `json:"remitZip,omitempty" url:"remitZip,omitempty"`
	RemitCountry          *string                  `json:"remitCountry,omitempty" url:"remitCountry,omitempty"`
	PayeeName1            *string                  `json:"payeeName1,omitempty" url:"payeeName1,omitempty"`
	PayeeName2            *string                  `json:"payeeName2,omitempty" url:"payeeName2,omitempty"`
	CustomerVendorAccount *string                  `json:"customerVendorAccount,omitempty" url:"customerVendorAccount,omitempty"`
	InternalReferenceId   *int64                   `json:"internalReferenceId,omitempty" url:"internalReferenceId,omitempty"`
	CustomField1          *string                  `json:"customField1,omitempty" url:"customField1,omitempty"`
	CustomField2          *string                  `json:"customField2,omitempty" url:"customField2,omitempty"`
	AdditionalData        *OcrVendorAdditionalData `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrVendor) GetVendorNumber() *string {
	if o == nil {
		return nil
	}
	return o.VendorNumber
}

func (o *OcrVendor) GetName1() *string {
	if o == nil {
		return nil
	}
	return o.Name1
}

func (o *OcrVendor) GetName2() *string {
	if o == nil {
		return nil
	}
	return o.Name2
}

func (o *OcrVendor) GetEin() *string {
	if o == nil {
		return nil
	}
	return o.Ein
}

func (o *OcrVendor) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *OcrVendor) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *OcrVendor) GetAddress1() *string {
	if o == nil {
		return nil
	}
	return o.Address1
}

func (o *OcrVendor) GetAddress2() *string {
	if o == nil {
		return nil
	}
	return o.Address2
}

func (o *OcrVendor) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *OcrVendor) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *OcrVendor) GetZip() *string {
	if o == nil {
		return nil
	}
	return o.Zip
}

func (o *OcrVendor) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *OcrVendor) GetMcc() *string {
	if o == nil {
		return nil
	}
	return o.Mcc
}

func (o *OcrVendor) GetLocationCode() *string {
	if o == nil {
		return nil
	}
	return o.LocationCode
}

func (o *OcrVendor) GetContacts() []*Contacts {
	if o == nil {
		return nil
	}
	return o.Contacts
}

func (o *OcrVendor) GetBillingData() *OcrVendorBillingData {
	if o == nil {
		return nil
	}
	return o.BillingData
}

func (o *OcrVendor) GetPaymentMethod() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *OcrVendor) GetVendorStatus() *int {
	if o == nil {
		return nil
	}
	return o.VendorStatus
}

func (o *OcrVendor) GetRemitAddress1() *string {
	if o == nil {
		return nil
	}
	return o.RemitAddress1
}

func (o *OcrVendor) GetRemitAddress2() *string {
	if o == nil {
		return nil
	}
	return o.RemitAddress2
}

func (o *OcrVendor) GetRemitCity() *string {
	if o == nil {
		return nil
	}
	return o.RemitCity
}

func (o *OcrVendor) GetRemitState() *string {
	if o == nil {
		return nil
	}
	return o.RemitState
}

func (o *OcrVendor) GetRemitZip() *string {
	if o == nil {
		return nil
	}
	return o.RemitZip
}

func (o *OcrVendor) GetRemitCountry() *string {
	if o == nil {
		return nil
	}
	return o.RemitCountry
}

func (o *OcrVendor) GetPayeeName1() *string {
	if o == nil {
		return nil
	}
	return o.PayeeName1
}

func (o *OcrVendor) GetPayeeName2() *string {
	if o == nil {
		return nil
	}
	return o.PayeeName2
}

func (o *OcrVendor) GetCustomerVendorAccount() *string {
	if o == nil {
		return nil
	}
	return o.CustomerVendorAccount
}

func (o *OcrVendor) GetInternalReferenceId() *int64 {
	if o == nil {
		return nil
	}
	return o.InternalReferenceId
}

func (o *OcrVendor) GetCustomField1() *string {
	if o == nil {
		return nil
	}
	return o.CustomField1
}

func (o *OcrVendor) GetCustomField2() *string {
	if o == nil {
		return nil
	}
	return o.CustomField2
}

func (o *OcrVendor) GetAdditionalData() *OcrVendorAdditionalData {
	if o == nil {
		return nil
	}
	return o.AdditionalData
}

func (o *OcrVendor) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrVendor) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetVendorNumber sets the VendorNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetVendorNumber(vendorNumber *string) {
	o.VendorNumber = vendorNumber
	o.require(ocrVendorFieldVendorNumber)
}

// SetName1 sets the Name1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetName1(name1 *string) {
	o.Name1 = name1
	o.require(ocrVendorFieldName1)
}

// SetName2 sets the Name2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetName2(name2 *string) {
	o.Name2 = name2
	o.require(ocrVendorFieldName2)
}

// SetEin sets the Ein field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetEin(ein *string) {
	o.Ein = ein
	o.require(ocrVendorFieldEin)
}

// SetPhone sets the Phone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetPhone(phone *string) {
	o.Phone = phone
	o.require(ocrVendorFieldPhone)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetEmail(email *string) {
	o.Email = email
	o.require(ocrVendorFieldEmail)
}

// SetAddress1 sets the Address1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetAddress1(address1 *string) {
	o.Address1 = address1
	o.require(ocrVendorFieldAddress1)
}

// SetAddress2 sets the Address2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetAddress2(address2 *string) {
	o.Address2 = address2
	o.require(ocrVendorFieldAddress2)
}

// SetCity sets the City field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetCity(city *string) {
	o.City = city
	o.require(ocrVendorFieldCity)
}

// SetState sets the State field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetState(state *string) {
	o.State = state
	o.require(ocrVendorFieldState)
}

// SetZip sets the Zip field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetZip(zip *string) {
	o.Zip = zip
	o.require(ocrVendorFieldZip)
}

// SetCountry sets the Country field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetCountry(country *string) {
	o.Country = country
	o.require(ocrVendorFieldCountry)
}

// SetMcc sets the Mcc field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetMcc(mcc *string) {
	o.Mcc = mcc
	o.require(ocrVendorFieldMcc)
}

// SetLocationCode sets the LocationCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetLocationCode(locationCode *string) {
	o.LocationCode = locationCode
	o.require(ocrVendorFieldLocationCode)
}

// SetContacts sets the Contacts field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetContacts(contacts []*Contacts) {
	o.Contacts = contacts
	o.require(ocrVendorFieldContacts)
}

// SetBillingData sets the BillingData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetBillingData(billingData *OcrVendorBillingData) {
	o.BillingData = billingData
	o.require(ocrVendorFieldBillingData)
}

// SetPaymentMethod sets the PaymentMethod field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetPaymentMethod(paymentMethod *string) {
	o.PaymentMethod = paymentMethod
	o.require(ocrVendorFieldPaymentMethod)
}

// SetVendorStatus sets the VendorStatus field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetVendorStatus(vendorStatus *int) {
	o.VendorStatus = vendorStatus
	o.require(ocrVendorFieldVendorStatus)
}

// SetRemitAddress1 sets the RemitAddress1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetRemitAddress1(remitAddress1 *string) {
	o.RemitAddress1 = remitAddress1
	o.require(ocrVendorFieldRemitAddress1)
}

// SetRemitAddress2 sets the RemitAddress2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetRemitAddress2(remitAddress2 *string) {
	o.RemitAddress2 = remitAddress2
	o.require(ocrVendorFieldRemitAddress2)
}

// SetRemitCity sets the RemitCity field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetRemitCity(remitCity *string) {
	o.RemitCity = remitCity
	o.require(ocrVendorFieldRemitCity)
}

// SetRemitState sets the RemitState field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetRemitState(remitState *string) {
	o.RemitState = remitState
	o.require(ocrVendorFieldRemitState)
}

// SetRemitZip sets the RemitZip field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetRemitZip(remitZip *string) {
	o.RemitZip = remitZip
	o.require(ocrVendorFieldRemitZip)
}

// SetRemitCountry sets the RemitCountry field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetRemitCountry(remitCountry *string) {
	o.RemitCountry = remitCountry
	o.require(ocrVendorFieldRemitCountry)
}

// SetPayeeName1 sets the PayeeName1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetPayeeName1(payeeName1 *string) {
	o.PayeeName1 = payeeName1
	o.require(ocrVendorFieldPayeeName1)
}

// SetPayeeName2 sets the PayeeName2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetPayeeName2(payeeName2 *string) {
	o.PayeeName2 = payeeName2
	o.require(ocrVendorFieldPayeeName2)
}

// SetCustomerVendorAccount sets the CustomerVendorAccount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetCustomerVendorAccount(customerVendorAccount *string) {
	o.CustomerVendorAccount = customerVendorAccount
	o.require(ocrVendorFieldCustomerVendorAccount)
}

// SetInternalReferenceId sets the InternalReferenceId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetInternalReferenceId(internalReferenceId *int64) {
	o.InternalReferenceId = internalReferenceId
	o.require(ocrVendorFieldInternalReferenceId)
}

// SetCustomField1 sets the CustomField1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetCustomField1(customField1 *string) {
	o.CustomField1 = customField1
	o.require(ocrVendorFieldCustomField1)
}

// SetCustomField2 sets the CustomField2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetCustomField2(customField2 *string) {
	o.CustomField2 = customField2
	o.require(ocrVendorFieldCustomField2)
}

// SetAdditionalData sets the AdditionalData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendor) SetAdditionalData(additionalData *OcrVendorAdditionalData) {
	o.AdditionalData = additionalData
	o.require(ocrVendorFieldAdditionalData)
}

func (o *OcrVendor) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrVendor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrVendor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrVendor) MarshalJSON() ([]byte, error) {
	type embed OcrVendor
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OcrVendor) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	ocrVendorAdditionalDataFieldWeb = big.NewInt(1 << 0)
)

type OcrVendorAdditionalData struct {
	Web *string `json:"web,omitempty" url:"web,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrVendorAdditionalData) GetWeb() *string {
	if o == nil {
		return nil
	}
	return o.Web
}

func (o *OcrVendorAdditionalData) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrVendorAdditionalData) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetWeb sets the Web field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendorAdditionalData) SetWeb(web *string) {
	o.Web = web
	o.require(ocrVendorAdditionalDataFieldWeb)
}

func (o *OcrVendorAdditionalData) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrVendorAdditionalData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrVendorAdditionalData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrVendorAdditionalData) MarshalJSON() ([]byte, error) {
	type embed OcrVendorAdditionalData
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OcrVendorAdditionalData) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	ocrVendorBillingDataFieldId                    = big.NewInt(1 << 0)
	ocrVendorBillingDataFieldBankName              = big.NewInt(1 << 1)
	ocrVendorBillingDataFieldRoutingAccount        = big.NewInt(1 << 2)
	ocrVendorBillingDataFieldAccountNumber         = big.NewInt(1 << 3)
	ocrVendorBillingDataFieldTypeAccount           = big.NewInt(1 << 4)
	ocrVendorBillingDataFieldBankAccountHolderName = big.NewInt(1 << 5)
	ocrVendorBillingDataFieldBankAccountHolderType = big.NewInt(1 << 6)
	ocrVendorBillingDataFieldBankAccountFunction   = big.NewInt(1 << 7)
)

type OcrVendorBillingData struct {
	Id                    *int    `json:"id,omitempty" url:"id,omitempty"`
	BankName              *string `json:"bankName,omitempty" url:"bankName,omitempty"`
	RoutingAccount        *string `json:"routingAccount,omitempty" url:"routingAccount,omitempty"`
	AccountNumber         *string `json:"accountNumber,omitempty" url:"accountNumber,omitempty"`
	TypeAccount           *string `json:"typeAccount,omitempty" url:"typeAccount,omitempty"`
	BankAccountHolderName *string `json:"bankAccountHolderName,omitempty" url:"bankAccountHolderName,omitempty"`
	BankAccountHolderType *string `json:"bankAccountHolderType,omitempty" url:"bankAccountHolderType,omitempty"`
	BankAccountFunction   *int    `json:"bankAccountFunction,omitempty" url:"bankAccountFunction,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrVendorBillingData) GetId() *int {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OcrVendorBillingData) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *OcrVendorBillingData) GetRoutingAccount() *string {
	if o == nil {
		return nil
	}
	return o.RoutingAccount
}

func (o *OcrVendorBillingData) GetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AccountNumber
}

func (o *OcrVendorBillingData) GetTypeAccount() *string {
	if o == nil {
		return nil
	}
	return o.TypeAccount
}

func (o *OcrVendorBillingData) GetBankAccountHolderName() *string {
	if o == nil {
		return nil
	}
	return o.BankAccountHolderName
}

func (o *OcrVendorBillingData) GetBankAccountHolderType() *string {
	if o == nil {
		return nil
	}
	return o.BankAccountHolderType
}

func (o *OcrVendorBillingData) GetBankAccountFunction() *int {
	if o == nil {
		return nil
	}
	return o.BankAccountFunction
}

func (o *OcrVendorBillingData) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrVendorBillingData) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendorBillingData) SetId(id *int) {
	o.Id = id
	o.require(ocrVendorBillingDataFieldId)
}

// SetBankName sets the BankName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendorBillingData) SetBankName(bankName *string) {
	o.BankName = bankName
	o.require(ocrVendorBillingDataFieldBankName)
}

// SetRoutingAccount sets the RoutingAccount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendorBillingData) SetRoutingAccount(routingAccount *string) {
	o.RoutingAccount = routingAccount
	o.require(ocrVendorBillingDataFieldRoutingAccount)
}

// SetAccountNumber sets the AccountNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendorBillingData) SetAccountNumber(accountNumber *string) {
	o.AccountNumber = accountNumber
	o.require(ocrVendorBillingDataFieldAccountNumber)
}

// SetTypeAccount sets the TypeAccount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendorBillingData) SetTypeAccount(typeAccount *string) {
	o.TypeAccount = typeAccount
	o.require(ocrVendorBillingDataFieldTypeAccount)
}

// SetBankAccountHolderName sets the BankAccountHolderName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendorBillingData) SetBankAccountHolderName(bankAccountHolderName *string) {
	o.BankAccountHolderName = bankAccountHolderName
	o.require(ocrVendorBillingDataFieldBankAccountHolderName)
}

// SetBankAccountHolderType sets the BankAccountHolderType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendorBillingData) SetBankAccountHolderType(bankAccountHolderType *string) {
	o.BankAccountHolderType = bankAccountHolderType
	o.require(ocrVendorBillingDataFieldBankAccountHolderType)
}

// SetBankAccountFunction sets the BankAccountFunction field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OcrVendorBillingData) SetBankAccountFunction(bankAccountFunction *int) {
	o.BankAccountFunction = bankAccountFunction
	o.require(ocrVendorBillingDataFieldBankAccountFunction)
}

func (o *OcrVendorBillingData) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrVendorBillingData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrVendorBillingData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrVendorBillingData) MarshalJSON() ([]byte, error) {
	type embed OcrVendorBillingData
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OcrVendorBillingData) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	payabliApiResponseOcrFieldIsSuccess    = big.NewInt(1 << 0)
	payabliApiResponseOcrFieldResponseText = big.NewInt(1 << 1)
	payabliApiResponseOcrFieldResponseCode = big.NewInt(1 << 2)
	payabliApiResponseOcrFieldResponseData = big.NewInt(1 << 3)
)

type PayabliApiResponseOcr struct {
	IsSuccess    IsSuccess    `json:"isSuccess" url:"isSuccess"`
	ResponseText ResponseText `json:"responseText" url:"responseText"`
	ResponseCode Responsecode `json:"responseCode" url:"responseCode"`
	// Details of the OCR processing result
	ResponseData *OcrResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponseOcr) GetIsSuccess() IsSuccess {
	if p == nil {
		return false
	}
	return p.IsSuccess
}

func (p *PayabliApiResponseOcr) GetResponseText() ResponseText {
	if p == nil {
		return ""
	}
	return p.ResponseText
}

func (p *PayabliApiResponseOcr) GetResponseCode() Responsecode {
	if p == nil {
		return 0
	}
	return p.ResponseCode
}

func (p *PayabliApiResponseOcr) GetResponseData() *OcrResponseData {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponseOcr) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponseOcr) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetIsSuccess sets the IsSuccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponseOcr) SetIsSuccess(isSuccess IsSuccess) {
	p.IsSuccess = isSuccess
	p.require(payabliApiResponseOcrFieldIsSuccess)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponseOcr) SetResponseText(responseText ResponseText) {
	p.ResponseText = responseText
	p.require(payabliApiResponseOcrFieldResponseText)
}

// SetResponseCode sets the ResponseCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponseOcr) SetResponseCode(responseCode Responsecode) {
	p.ResponseCode = responseCode
	p.require(payabliApiResponseOcrFieldResponseCode)
}

// SetResponseData sets the ResponseData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponseOcr) SetResponseData(responseData *OcrResponseData) {
	p.ResponseData = responseData
	p.require(payabliApiResponseOcrFieldResponseData)
}

func (p *PayabliApiResponseOcr) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponseOcr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponseOcr(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponseOcr) MarshalJSON() ([]byte, error) {
	type embed PayabliApiResponseOcr
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PayabliApiResponseOcr) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The type of object to create in Payabli. Accepted values are `bill` and `invoice`.
type TypeResult = string
