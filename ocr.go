// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	time "time"
)

type FileContentImageOnly struct {
	Ftype *FileContentFtype `json:"ftype,omitempty" url:"ftype,omitempty"`
	// The name of the file to be uploaded
	Filename *string `json:"filename,omitempty" url:"filename,omitempty"`
	// Optional URL link to the file
	Furl *string `json:"furl,omitempty" url:"furl,omitempty"`
	// Base64-encoded file content
	FContent *string `json:"fContent,omitempty" url:"fContent,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FileContentImageOnly) GetFtype() *FileContentFtype {
	if f == nil {
		return nil
	}
	return f.Ftype
}

func (f *FileContentImageOnly) GetFilename() *string {
	if f == nil {
		return nil
	}
	return f.Filename
}

func (f *FileContentImageOnly) GetFurl() *string {
	if f == nil {
		return nil
	}
	return f.Furl
}

func (f *FileContentImageOnly) GetFContent() *string {
	if f == nil {
		return nil
	}
	return f.FContent
}

func (f *FileContentImageOnly) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileContentImageOnly) UnmarshalJSON(data []byte) error {
	type unmarshaler FileContentImageOnly
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FileContentImageOnly(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileContentImageOnly) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type OcrAttachment struct {
	Ftype          *string `json:"ftype,omitempty" url:"ftype,omitempty"`
	Filename       *string `json:"filename,omitempty" url:"filename,omitempty"`
	FileDescriptor *string `json:"fileDescriptor,omitempty" url:"fileDescriptor,omitempty"`
	Furl           *string `json:"furl,omitempty" url:"furl,omitempty"`
	FContent       *string `json:"fContent,omitempty" url:"fContent,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrAttachment) GetFtype() *string {
	if o == nil {
		return nil
	}
	return o.Ftype
}

func (o *OcrAttachment) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

func (o *OcrAttachment) GetFileDescriptor() *string {
	if o == nil {
		return nil
	}
	return o.FileDescriptor
}

func (o *OcrAttachment) GetFurl() *string {
	if o == nil {
		return nil
	}
	return o.Furl
}

func (o *OcrAttachment) GetFContent() *string {
	if o == nil {
		return nil
	}
	return o.FContent
}

func (o *OcrAttachment) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrAttachment) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrAttachment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrAttachment(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrAttachment) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OcrBillItem struct {
	ItemTotalAmount   *float64 `json:"itemTotalAmount,omitempty" url:"itemTotalAmount,omitempty"`
	ItemTaxAmount     *float64 `json:"itemTaxAmount,omitempty" url:"itemTaxAmount,omitempty"`
	ItemTaxRate       *float64 `json:"itemTaxRate,omitempty" url:"itemTaxRate,omitempty"`
	ItemProductCode   *string  `json:"itemProductCode,omitempty" url:"itemProductCode,omitempty"`
	ItemProductName   *string  `json:"itemProductName,omitempty" url:"itemProductName,omitempty"`
	ItemDescription   *string  `json:"itemDescription,omitempty" url:"itemDescription,omitempty"`
	ItemCommodityCode *string  `json:"itemCommodityCode,omitempty" url:"itemCommodityCode,omitempty"`
	ItemUnitOfMeasure *string  `json:"itemUnitOfMeasure,omitempty" url:"itemUnitOfMeasure,omitempty"`
	ItemCost          *float64 `json:"itemCost,omitempty" url:"itemCost,omitempty"`
	ItemQty           *int     `json:"itemQty,omitempty" url:"itemQty,omitempty"`
	ItemMode          *int     `json:"itemMode,omitempty" url:"itemMode,omitempty"`
	ItemCategories    []string `json:"itemCategories,omitempty" url:"itemCategories,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrBillItem) GetItemTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.ItemTotalAmount
}

func (o *OcrBillItem) GetItemTaxAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.ItemTaxAmount
}

func (o *OcrBillItem) GetItemTaxRate() *float64 {
	if o == nil {
		return nil
	}
	return o.ItemTaxRate
}

func (o *OcrBillItem) GetItemProductCode() *string {
	if o == nil {
		return nil
	}
	return o.ItemProductCode
}

func (o *OcrBillItem) GetItemProductName() *string {
	if o == nil {
		return nil
	}
	return o.ItemProductName
}

func (o *OcrBillItem) GetItemDescription() *string {
	if o == nil {
		return nil
	}
	return o.ItemDescription
}

func (o *OcrBillItem) GetItemCommodityCode() *string {
	if o == nil {
		return nil
	}
	return o.ItemCommodityCode
}

func (o *OcrBillItem) GetItemUnitOfMeasure() *string {
	if o == nil {
		return nil
	}
	return o.ItemUnitOfMeasure
}

func (o *OcrBillItem) GetItemCost() *float64 {
	if o == nil {
		return nil
	}
	return o.ItemCost
}

func (o *OcrBillItem) GetItemQty() *int {
	if o == nil {
		return nil
	}
	return o.ItemQty
}

func (o *OcrBillItem) GetItemMode() *int {
	if o == nil {
		return nil
	}
	return o.ItemMode
}

func (o *OcrBillItem) GetItemCategories() []string {
	if o == nil {
		return nil
	}
	return o.ItemCategories
}

func (o *OcrBillItem) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrBillItem) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrBillItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrBillItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrBillItem) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OcrBillItemAdditionalData struct {
	Category        *string `json:"category,omitempty" url:"category,omitempty"`
	CurrencyCode    *string `json:"currency_code,omitempty" url:"currency_code,omitempty"`
	Type            *string `json:"type,omitempty" url:"type,omitempty"`
	ReferenceNumber *string `json:"reference_number,omitempty" url:"reference_number,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrBillItemAdditionalData) GetCategory() *string {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *OcrBillItemAdditionalData) GetCurrencyCode() *string {
	if o == nil {
		return nil
	}
	return o.CurrencyCode
}

func (o *OcrBillItemAdditionalData) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *OcrBillItemAdditionalData) GetReferenceNumber() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceNumber
}

func (o *OcrBillItemAdditionalData) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrBillItemAdditionalData) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrBillItemAdditionalData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrBillItemAdditionalData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrBillItemAdditionalData) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OcrResponseData struct {
	ResultData *OcrResultData `json:"resultData,omitempty" url:"resultData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrResponseData) GetResultData() *OcrResultData {
	if o == nil {
		return nil
	}
	return o.ResultData
}

func (o *OcrResponseData) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrResponseData) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OcrResultData struct {
	BillNumber       *string                    `json:"billNumber,omitempty" url:"billNumber,omitempty"`
	NetAmount        *float64                   `json:"netAmount,omitempty" url:"netAmount,omitempty"`
	BillDate         *time.Time                 `json:"billDate,omitempty" url:"billDate,omitempty"`
	DueDate          *time.Time                 `json:"dueDate,omitempty" url:"dueDate,omitempty"`
	Comments         *string                    `json:"comments,omitempty" url:"comments,omitempty"`
	BillItems        []*OcrBillItem             `json:"billItems,omitempty" url:"billItems,omitempty"`
	Mode             *int                       `json:"mode,omitempty" url:"mode,omitempty"`
	AccountingField1 *string                    `json:"accountingField1,omitempty" url:"accountingField1,omitempty"`
	AccountingField2 *string                    `json:"accountingField2,omitempty" url:"accountingField2,omitempty"`
	AdditionalData   *OcrBillItemAdditionalData `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	Vendor           *OcrVendor                 `json:"vendor,omitempty" url:"vendor,omitempty"`
	EndDate          *time.Time                 `json:"endDate,omitempty" url:"endDate,omitempty"`
	Frequency        *string                    `json:"frequency,omitempty" url:"frequency,omitempty"`
	Terms            *string                    `json:"terms,omitempty" url:"terms,omitempty"`
	Status           *int                       `json:"status,omitempty" url:"status,omitempty"`
	LotNumber        *string                    `json:"lotNumber,omitempty" url:"lotNumber,omitempty"`
	Attachments      []*OcrAttachment           `json:"attachments,omitempty" url:"attachments,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrResultData) GetBillNumber() *string {
	if o == nil {
		return nil
	}
	return o.BillNumber
}

func (o *OcrResultData) GetNetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.NetAmount
}

func (o *OcrResultData) GetBillDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.BillDate
}

func (o *OcrResultData) GetDueDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *OcrResultData) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *OcrResultData) GetBillItems() []*OcrBillItem {
	if o == nil {
		return nil
	}
	return o.BillItems
}

func (o *OcrResultData) GetMode() *int {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *OcrResultData) GetAccountingField1() *string {
	if o == nil {
		return nil
	}
	return o.AccountingField1
}

func (o *OcrResultData) GetAccountingField2() *string {
	if o == nil {
		return nil
	}
	return o.AccountingField2
}

func (o *OcrResultData) GetAdditionalData() *OcrBillItemAdditionalData {
	if o == nil {
		return nil
	}
	return o.AdditionalData
}

func (o *OcrResultData) GetVendor() *OcrVendor {
	if o == nil {
		return nil
	}
	return o.Vendor
}

func (o *OcrResultData) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *OcrResultData) GetFrequency() *string {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *OcrResultData) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *OcrResultData) GetStatus() *int {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *OcrResultData) GetLotNumber() *string {
	if o == nil {
		return nil
	}
	return o.LotNumber
}

func (o *OcrResultData) GetAttachments() []*OcrAttachment {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *OcrResultData) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrResultData) UnmarshalJSON(data []byte) error {
	type embed OcrResultData
	var unmarshaler = struct {
		embed
		BillDate *internal.DateTime `json:"billDate,omitempty"`
		DueDate  *internal.DateTime `json:"dueDate,omitempty"`
		EndDate  *internal.DateTime `json:"endDate,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OcrResultData(unmarshaler.embed)
	o.BillDate = unmarshaler.BillDate.TimePtr()
	o.DueDate = unmarshaler.DueDate.TimePtr()
	o.EndDate = unmarshaler.EndDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrResultData) MarshalJSON() ([]byte, error) {
	type embed OcrResultData
	var marshaler = struct {
		embed
		BillDate *internal.DateTime `json:"billDate,omitempty"`
		DueDate  *internal.DateTime `json:"dueDate,omitempty"`
		EndDate  *internal.DateTime `json:"endDate,omitempty"`
	}{
		embed:    embed(*o),
		BillDate: internal.NewOptionalDateTime(o.BillDate),
		DueDate:  internal.NewOptionalDateTime(o.DueDate),
		EndDate:  internal.NewOptionalDateTime(o.EndDate),
	}
	return json.Marshal(marshaler)
}

func (o *OcrResultData) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OcrVendor struct {
	VendorNumber          *string                  `json:"vendorNumber,omitempty" url:"vendorNumber,omitempty"`
	Name1                 *string                  `json:"name1,omitempty" url:"name1,omitempty"`
	Name2                 *string                  `json:"name2,omitempty" url:"name2,omitempty"`
	Ein                   *string                  `json:"ein,omitempty" url:"ein,omitempty"`
	Phone                 *string                  `json:"phone,omitempty" url:"phone,omitempty"`
	Email                 *string                  `json:"email,omitempty" url:"email,omitempty"`
	Address1              *string                  `json:"address1,omitempty" url:"address1,omitempty"`
	Address2              *string                  `json:"address2,omitempty" url:"address2,omitempty"`
	City                  *string                  `json:"city,omitempty" url:"city,omitempty"`
	State                 *string                  `json:"state,omitempty" url:"state,omitempty"`
	Zip                   *string                  `json:"zip,omitempty" url:"zip,omitempty"`
	Country               *string                  `json:"country,omitempty" url:"country,omitempty"`
	Mcc                   *string                  `json:"mcc,omitempty" url:"mcc,omitempty"`
	LocationCode          *string                  `json:"locationCode,omitempty" url:"locationCode,omitempty"`
	Contacts              []*Contacts              `json:"contacts,omitempty" url:"contacts,omitempty"`
	BillingData           *OcrVendorBillingData    `json:"billingData,omitempty" url:"billingData,omitempty"`
	PaymentMethod         *string                  `json:"paymentMethod,omitempty" url:"paymentMethod,omitempty"`
	VendorStatus          *int                     `json:"vendorStatus,omitempty" url:"vendorStatus,omitempty"`
	RemitAddress1         *string                  `json:"remitAddress1,omitempty" url:"remitAddress1,omitempty"`
	RemitAddress2         *string                  `json:"remitAddress2,omitempty" url:"remitAddress2,omitempty"`
	RemitCity             *string                  `json:"remitCity,omitempty" url:"remitCity,omitempty"`
	RemitState            *string                  `json:"remitState,omitempty" url:"remitState,omitempty"`
	RemitZip              *string                  `json:"remitZip,omitempty" url:"remitZip,omitempty"`
	RemitCountry          *string                  `json:"remitCountry,omitempty" url:"remitCountry,omitempty"`
	PayeeName1            *string                  `json:"payeeName1,omitempty" url:"payeeName1,omitempty"`
	PayeeName2            *string                  `json:"payeeName2,omitempty" url:"payeeName2,omitempty"`
	CustomerVendorAccount *string                  `json:"customerVendorAccount,omitempty" url:"customerVendorAccount,omitempty"`
	InternalReferenceId   *int64                   `json:"internalReferenceId,omitempty" url:"internalReferenceId,omitempty"`
	CustomField1          *string                  `json:"customField1,omitempty" url:"customField1,omitempty"`
	CustomField2          *string                  `json:"customField2,omitempty" url:"customField2,omitempty"`
	AdditionalData        *OcrVendorAdditionalData `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrVendor) GetVendorNumber() *string {
	if o == nil {
		return nil
	}
	return o.VendorNumber
}

func (o *OcrVendor) GetName1() *string {
	if o == nil {
		return nil
	}
	return o.Name1
}

func (o *OcrVendor) GetName2() *string {
	if o == nil {
		return nil
	}
	return o.Name2
}

func (o *OcrVendor) GetEin() *string {
	if o == nil {
		return nil
	}
	return o.Ein
}

func (o *OcrVendor) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *OcrVendor) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *OcrVendor) GetAddress1() *string {
	if o == nil {
		return nil
	}
	return o.Address1
}

func (o *OcrVendor) GetAddress2() *string {
	if o == nil {
		return nil
	}
	return o.Address2
}

func (o *OcrVendor) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *OcrVendor) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *OcrVendor) GetZip() *string {
	if o == nil {
		return nil
	}
	return o.Zip
}

func (o *OcrVendor) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *OcrVendor) GetMcc() *string {
	if o == nil {
		return nil
	}
	return o.Mcc
}

func (o *OcrVendor) GetLocationCode() *string {
	if o == nil {
		return nil
	}
	return o.LocationCode
}

func (o *OcrVendor) GetContacts() []*Contacts {
	if o == nil {
		return nil
	}
	return o.Contacts
}

func (o *OcrVendor) GetBillingData() *OcrVendorBillingData {
	if o == nil {
		return nil
	}
	return o.BillingData
}

func (o *OcrVendor) GetPaymentMethod() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *OcrVendor) GetVendorStatus() *int {
	if o == nil {
		return nil
	}
	return o.VendorStatus
}

func (o *OcrVendor) GetRemitAddress1() *string {
	if o == nil {
		return nil
	}
	return o.RemitAddress1
}

func (o *OcrVendor) GetRemitAddress2() *string {
	if o == nil {
		return nil
	}
	return o.RemitAddress2
}

func (o *OcrVendor) GetRemitCity() *string {
	if o == nil {
		return nil
	}
	return o.RemitCity
}

func (o *OcrVendor) GetRemitState() *string {
	if o == nil {
		return nil
	}
	return o.RemitState
}

func (o *OcrVendor) GetRemitZip() *string {
	if o == nil {
		return nil
	}
	return o.RemitZip
}

func (o *OcrVendor) GetRemitCountry() *string {
	if o == nil {
		return nil
	}
	return o.RemitCountry
}

func (o *OcrVendor) GetPayeeName1() *string {
	if o == nil {
		return nil
	}
	return o.PayeeName1
}

func (o *OcrVendor) GetPayeeName2() *string {
	if o == nil {
		return nil
	}
	return o.PayeeName2
}

func (o *OcrVendor) GetCustomerVendorAccount() *string {
	if o == nil {
		return nil
	}
	return o.CustomerVendorAccount
}

func (o *OcrVendor) GetInternalReferenceId() *int64 {
	if o == nil {
		return nil
	}
	return o.InternalReferenceId
}

func (o *OcrVendor) GetCustomField1() *string {
	if o == nil {
		return nil
	}
	return o.CustomField1
}

func (o *OcrVendor) GetCustomField2() *string {
	if o == nil {
		return nil
	}
	return o.CustomField2
}

func (o *OcrVendor) GetAdditionalData() *OcrVendorAdditionalData {
	if o == nil {
		return nil
	}
	return o.AdditionalData
}

func (o *OcrVendor) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrVendor) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrVendor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrVendor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrVendor) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OcrVendorAdditionalData struct {
	Web *string `json:"web,omitempty" url:"web,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrVendorAdditionalData) GetWeb() *string {
	if o == nil {
		return nil
	}
	return o.Web
}

func (o *OcrVendorAdditionalData) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrVendorAdditionalData) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrVendorAdditionalData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrVendorAdditionalData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrVendorAdditionalData) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OcrVendorBillingData struct {
	Id                    *int    `json:"id,omitempty" url:"id,omitempty"`
	BankName              *string `json:"bankName,omitempty" url:"bankName,omitempty"`
	RoutingAccount        *string `json:"routingAccount,omitempty" url:"routingAccount,omitempty"`
	AccountNumber         *string `json:"accountNumber,omitempty" url:"accountNumber,omitempty"`
	TypeAccount           *string `json:"typeAccount,omitempty" url:"typeAccount,omitempty"`
	BankAccountHolderName *string `json:"bankAccountHolderName,omitempty" url:"bankAccountHolderName,omitempty"`
	BankAccountHolderType *string `json:"bankAccountHolderType,omitempty" url:"bankAccountHolderType,omitempty"`
	BankAccountFunction   *int    `json:"bankAccountFunction,omitempty" url:"bankAccountFunction,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrVendorBillingData) GetId() *int {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OcrVendorBillingData) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *OcrVendorBillingData) GetRoutingAccount() *string {
	if o == nil {
		return nil
	}
	return o.RoutingAccount
}

func (o *OcrVendorBillingData) GetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AccountNumber
}

func (o *OcrVendorBillingData) GetTypeAccount() *string {
	if o == nil {
		return nil
	}
	return o.TypeAccount
}

func (o *OcrVendorBillingData) GetBankAccountHolderName() *string {
	if o == nil {
		return nil
	}
	return o.BankAccountHolderName
}

func (o *OcrVendorBillingData) GetBankAccountHolderType() *string {
	if o == nil {
		return nil
	}
	return o.BankAccountHolderType
}

func (o *OcrVendorBillingData) GetBankAccountFunction() *int {
	if o == nil {
		return nil
	}
	return o.BankAccountFunction
}

func (o *OcrVendorBillingData) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrVendorBillingData) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrVendorBillingData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrVendorBillingData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrVendorBillingData) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type PayabliApiResponseOcr struct {
	IsSuccess    IsSuccess    `json:"isSuccess" url:"isSuccess"`
	ResponseText ResponseText `json:"responseText" url:"responseText"`
	ResponseCode Responsecode `json:"responseCode" url:"responseCode"`
	// Details of the OCR processing result
	ResponseData *OcrResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponseOcr) GetIsSuccess() IsSuccess {
	if p == nil {
		return false
	}
	return p.IsSuccess
}

func (p *PayabliApiResponseOcr) GetResponseText() ResponseText {
	if p == nil {
		return ""
	}
	return p.ResponseText
}

func (p *PayabliApiResponseOcr) GetResponseCode() Responsecode {
	if p == nil {
		return 0
	}
	return p.ResponseCode
}

func (p *PayabliApiResponseOcr) GetResponseData() *OcrResponseData {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponseOcr) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponseOcr) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponseOcr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponseOcr(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponseOcr) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The type of object to create in Payabli. Accepted values are `bill` and `invoice`.
type TypeResult = string
