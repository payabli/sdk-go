// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
)

type AddOrganizationRequest struct {
	// A unique ID you can include to prevent duplicating objects or transactions if a request is sent more than once. This key isn't generated in Payabli, you must generate it yourself.
	IdempotencyKey *string        `json:"-" url:"-"`
	Services       []*ServiceCost `json:"services,omitempty" url:"-"`
	BillingInfo    *Instrument    `json:"billingInfo,omitempty" url:"-"`
	Contacts       *ContactsField `json:"contacts,omitempty" url:"-"`
	HasBilling     *bool          `json:"hasBilling,omitempty" url:"-"`
	HasResidual    *bool          `json:"hasResidual,omitempty" url:"-"`
	OrgAddress     *Orgaddress    `json:"orgAddress,omitempty" url:"-"`
	OrgCity        *Orgcity       `json:"orgCity,omitempty" url:"-"`
	OrgCountry     *Orgcountry    `json:"orgCountry,omitempty" url:"-"`
	OrgEntryName   *Orgentryname  `json:"orgEntryName,omitempty" url:"-"`
	OrgId          *Orgidstring   `json:"orgId,omitempty" url:"-"`
	OrgLogo        *FileContent   `json:"orgLogo,omitempty" url:"-"`
	OrgName        Orgname        `json:"orgName" url:"-"`
	OrgParentId    *OrgParentId   `json:"orgParentId,omitempty" url:"-"`
	OrgState       *Orgstate      `json:"orgState,omitempty" url:"-"`
	OrgTimezone    *Orgtimezone   `json:"orgTimezone,omitempty" url:"-"`
	OrgType        Orgtype        `json:"orgType" url:"-"`
	OrgWebsite     *Orgwebsite    `json:"orgWebsite,omitempty" url:"-"`
	OrgZip         *Orgzip        `json:"orgZip,omitempty" url:"-"`
	ReplyToEmail   ReplyToEmail   `json:"replyToEmail" url:"-"`
}

type OrganizationData struct {
	Services              []*ServiceCost `json:"services,omitempty" url:"-"`
	BillingInfo           *Instrument    `json:"billingInfo,omitempty" url:"-"`
	Contacts              *ContactsField `json:"contacts,omitempty" url:"-"`
	HasBilling            *bool          `json:"hasBilling,omitempty" url:"-"`
	HasResidual           *bool          `json:"hasResidual,omitempty" url:"-"`
	OrgAddress            *Orgaddress    `json:"orgAddress,omitempty" url:"-"`
	OrgCity               *Orgcity       `json:"orgCity,omitempty" url:"-"`
	OrgCountry            *Orgcountry    `json:"orgCountry,omitempty" url:"-"`
	OrgEntryName          *Orgentryname  `json:"orgEntryName,omitempty" url:"-"`
	OrganizationDataOrgId *Orgidstring   `json:"orgId,omitempty" url:"-"`
	OrgLogo               *FileContent   `json:"orgLogo,omitempty" url:"-"`
	OrgName               *Orgname       `json:"orgName,omitempty" url:"-"`
	OrgParentId           *OrgParentId   `json:"orgParentId,omitempty" url:"-"`
	OrgState              *Orgstate      `json:"orgState,omitempty" url:"-"`
	OrgTimezone           *Orgtimezone   `json:"orgTimezone,omitempty" url:"-"`
	OrgType               *Orgtype       `json:"orgType,omitempty" url:"-"`
	OrgWebsite            *Orgwebsite    `json:"orgWebsite,omitempty" url:"-"`
	OrgZip                *Orgzip        `json:"orgZip,omitempty" url:"-"`
	ReplyToEmail          *ReplyToEmail  `json:"replyToEmail,omitempty" url:"-"`
}

type ServiceCost struct {
	Description   *string  `json:"description,omitempty" url:"description,omitempty"`
	Enabled       *Enabled `json:"enabled,omitempty" url:"enabled,omitempty"`
	MonthlyCost   *float64 `json:"monthlyCost,omitempty" url:"monthlyCost,omitempty"`
	Name          *string  `json:"name,omitempty" url:"name,omitempty"`
	Reseller      *bool    `json:"reseller,omitempty" url:"reseller,omitempty"`
	SetupCost     *float64 `json:"setupCost,omitempty" url:"setupCost,omitempty"`
	TxCost        *float64 `json:"txCost,omitempty" url:"txCost,omitempty"`
	TxPercentCost *float64 `json:"txPercentCost,omitempty" url:"txPercentCost,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ServiceCost) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *ServiceCost) GetEnabled() *Enabled {
	if s == nil {
		return nil
	}
	return s.Enabled
}

func (s *ServiceCost) GetMonthlyCost() *float64 {
	if s == nil {
		return nil
	}
	return s.MonthlyCost
}

func (s *ServiceCost) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *ServiceCost) GetReseller() *bool {
	if s == nil {
		return nil
	}
	return s.Reseller
}

func (s *ServiceCost) GetSetupCost() *float64 {
	if s == nil {
		return nil
	}
	return s.SetupCost
}

func (s *ServiceCost) GetTxCost() *float64 {
	if s == nil {
		return nil
	}
	return s.TxCost
}

func (s *ServiceCost) GetTxPercentCost() *float64 {
	if s == nil {
		return nil
	}
	return s.TxPercentCost
}

func (s *ServiceCost) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ServiceCost) UnmarshalJSON(data []byte) error {
	type unmarshaler ServiceCost
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ServiceCost(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ServiceCost) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type AddOrganizationResponse struct {
	IsSuccess *IsSuccess `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	// Returns the organization ID.
	ResponseData *Responsedatanonobject `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText *ResponseText          `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddOrganizationResponse) GetIsSuccess() *IsSuccess {
	if a == nil {
		return nil
	}
	return a.IsSuccess
}

func (a *AddOrganizationResponse) GetResponseData() *Responsedatanonobject {
	if a == nil {
		return nil
	}
	return a.ResponseData
}

func (a *AddOrganizationResponse) GetResponseText() *ResponseText {
	if a == nil {
		return nil
	}
	return a.ResponseText
}

func (a *AddOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddOrganizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddOrganizationResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type DeleteOrganizationResponse struct {
	IsSuccess *IsSuccess `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	// Returns the organization ID.
	ResponseData *Responsedatanonobject `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText *ResponseText          `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteOrganizationResponse) GetIsSuccess() *IsSuccess {
	if d == nil {
		return nil
	}
	return d.IsSuccess
}

func (d *DeleteOrganizationResponse) GetResponseData() *Responsedatanonobject {
	if d == nil {
		return nil
	}
	return d.ResponseData
}

func (d *DeleteOrganizationResponse) GetResponseText() *ResponseText {
	if d == nil {
		return nil
	}
	return d.ResponseText
}

func (d *DeleteOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteOrganizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteOrganizationResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EditOrganizationResponse struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode   `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	// Returns the organization ID.
	ResponseData *Responsedatanonobject `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText *ResponseText          `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EditOrganizationResponse) GetIsSuccess() *IsSuccess {
	if e == nil {
		return nil
	}
	return e.IsSuccess
}

func (e *EditOrganizationResponse) GetPageIdentifier() *PageIdentifier {
	if e == nil {
		return nil
	}
	return e.PageIdentifier
}

func (e *EditOrganizationResponse) GetResponseCode() *Responsecode {
	if e == nil {
		return nil
	}
	return e.ResponseCode
}

func (e *EditOrganizationResponse) GetResponseData() *Responsedatanonobject {
	if e == nil {
		return nil
	}
	return e.ResponseData
}

func (e *EditOrganizationResponse) GetResponseText() *ResponseText {
	if e == nil {
		return nil
	}
	return e.ResponseText
}

func (e *EditOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EditOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EditOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EditOrganizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EditOrganizationResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}
