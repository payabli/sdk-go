// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
)

type ListTemplatesRequest struct {
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `createdAt` (gt, ge, lt, le, eq, ne)
	// - `title` (ct, nct)
	// - `description` (ct, nct)
	// - `code` (ct, nct)
	// - `orgParentname` (ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: title(ct)=hoa return all records with title containing "hoa"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type AchAbsorbSection struct {
	MultiTier *bool            `json:"multiTier,omitempty" url:"multiTier,omitempty"`
	Tiers     []*AchTypesTiers `json:"tiers,omitempty" url:"tiers,omitempty"`
	Visible   *Visible         `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchAbsorbSection) GetMultiTier() *bool {
	if a == nil {
		return nil
	}
	return a.MultiTier
}

func (a *AchAbsorbSection) GetTiers() []*AchTypesTiers {
	if a == nil {
		return nil
	}
	return a.Tiers
}

func (a *AchAbsorbSection) GetVisible() *Visible {
	if a == nil {
		return nil
	}
	return a.Visible
}

func (a *AchAbsorbSection) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchAbsorbSection) UnmarshalJSON(data []byte) error {
	type unmarshaler AchAbsorbSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchAbsorbSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchAbsorbSection) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AchAcceptanceElement struct {
	Types    *AchTypes       `json:"types,omitempty" url:"types,omitempty"`
	PosCol   *PosCol         `json:"posCol,omitempty" url:"posCol,omitempty"`
	PosRow   *PosRow         `json:"posRow,omitempty" url:"posRow,omitempty"`
	ReadOnly *ReadOnly       `json:"readOnly,omitempty" url:"readOnly,omitempty"`
	Value    *ValueTemplates `json:"value,omitempty" url:"value,omitempty"`
	Visible  *Visible        `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchAcceptanceElement) GetTypes() *AchTypes {
	if a == nil {
		return nil
	}
	return a.Types
}

func (a *AchAcceptanceElement) GetPosCol() *PosCol {
	if a == nil {
		return nil
	}
	return a.PosCol
}

func (a *AchAcceptanceElement) GetPosRow() *PosRow {
	if a == nil {
		return nil
	}
	return a.PosRow
}

func (a *AchAcceptanceElement) GetReadOnly() *ReadOnly {
	if a == nil {
		return nil
	}
	return a.ReadOnly
}

func (a *AchAcceptanceElement) GetValue() *ValueTemplates {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AchAcceptanceElement) GetVisible() *Visible {
	if a == nil {
		return nil
	}
	return a.Visible
}

func (a *AchAcceptanceElement) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchAcceptanceElement) UnmarshalJSON(data []byte) error {
	type unmarshaler AchAcceptanceElement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchAcceptanceElement(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchAcceptanceElement) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AchFeeSection struct {
	AdvancedSettlementAchFee *TemplateElement `json:"advancedSettlementAchFee,omitempty" url:"advancedSettlementAchFee,omitempty"`
	AnnualAchFee             *TemplateElement `json:"annualAchFee,omitempty" url:"annualAchFee,omitempty"`
	ChargebackAchFee         *TemplateElement `json:"chargebackAchFee,omitempty" url:"chargebackAchFee,omitempty"`
	EarlyTerminationAchFee   *TemplateElement `json:"earlyTerminationAchFee,omitempty" url:"earlyTerminationAchFee,omitempty"`
	MonthlyAchFee            *TemplateElement `json:"monthlyAchFee,omitempty" url:"monthlyAchFee,omitempty"`
	QuarterlyPciAchFee       *TemplateElement `json:"quarterlyPCIAchFee,omitempty" url:"quarterlyPCIAchFee,omitempty"`
	ReturnedAchFee           *TemplateElement `json:"returnedAchFee,omitempty" url:"returnedAchFee,omitempty"`
	SameDayAchFee            *TemplateElement `json:"sameDayAchFee,omitempty" url:"sameDayAchFee,omitempty"`
	SundayOriginationAchFee  *TemplateElement `json:"sundayOriginationAchFee,omitempty" url:"sundayOriginationAchFee,omitempty"`
	VerifyBankAchFee         *TemplateElement `json:"verifyBankAchFee,omitempty" url:"verifyBankAchFee,omitempty"`
	VerifyFundAchFee         *TemplateElement `json:"verifyFundAchFee,omitempty" url:"verifyFundAchFee,omitempty"`
	VerifyNegativeAchFee     *TemplateElement `json:"verifyNegativeAchFee,omitempty" url:"verifyNegativeAchFee,omitempty"`
	Visible                  *Visible         `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchFeeSection) GetAdvancedSettlementAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AdvancedSettlementAchFee
}

func (a *AchFeeSection) GetAnnualAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AnnualAchFee
}

func (a *AchFeeSection) GetChargebackAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.ChargebackAchFee
}

func (a *AchFeeSection) GetEarlyTerminationAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.EarlyTerminationAchFee
}

func (a *AchFeeSection) GetMonthlyAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.MonthlyAchFee
}

func (a *AchFeeSection) GetQuarterlyPciAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.QuarterlyPciAchFee
}

func (a *AchFeeSection) GetReturnedAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.ReturnedAchFee
}

func (a *AchFeeSection) GetSameDayAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.SameDayAchFee
}

func (a *AchFeeSection) GetSundayOriginationAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.SundayOriginationAchFee
}

func (a *AchFeeSection) GetVerifyBankAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.VerifyBankAchFee
}

func (a *AchFeeSection) GetVerifyFundAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.VerifyFundAchFee
}

func (a *AchFeeSection) GetVerifyNegativeAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.VerifyNegativeAchFee
}

func (a *AchFeeSection) GetVisible() *Visible {
	if a == nil {
		return nil
	}
	return a.Visible
}

func (a *AchFeeSection) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchFeeSection) UnmarshalJSON(data []byte) error {
	type unmarshaler AchFeeSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchFeeSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchFeeSection) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AchPassThroughSection struct {
	MultiTier *bool           `json:"multiTier,omitempty" url:"multiTier,omitempty"`
	Tiers     []*AchTypesPass `json:"tiers,omitempty" url:"tiers,omitempty"`
	Visible   *Visible        `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchPassThroughSection) GetMultiTier() *bool {
	if a == nil {
		return nil
	}
	return a.MultiTier
}

func (a *AchPassThroughSection) GetTiers() []*AchTypesPass {
	if a == nil {
		return nil
	}
	return a.Tiers
}

func (a *AchPassThroughSection) GetVisible() *Visible {
	if a == nil {
		return nil
	}
	return a.Visible
}

func (a *AchPassThroughSection) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchPassThroughSection) UnmarshalJSON(data []byte) error {
	type unmarshaler AchPassThroughSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchPassThroughSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchPassThroughSection) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AchService struct {
	AchAbsorb             *AchAbsorbSection      `json:"achAbsorb,omitempty" url:"achAbsorb,omitempty"`
	AchAbsorbHighPayRange *TemplateElement       `json:"achAbsorb_highPayRange,omitempty" url:"achAbsorb_highPayRange,omitempty"`
	AchAbsorbLowPayRange  *TemplateElement       `json:"achAbsorb_lowPayRange,omitempty" url:"achAbsorb_lowPayRange,omitempty"`
	AchAcceptance         *AchAcceptanceElement  `json:"achAcceptance,omitempty" url:"achAcceptance,omitempty"`
	AchFees               *AchFeeSection         `json:"achFees,omitempty" url:"achFees,omitempty"`
	AchPassHighPayRange   *TemplateElement       `json:"achPass_highPayRange,omitempty" url:"achPass_highPayRange,omitempty"`
	AchPassLowPayRange    *TemplateElement       `json:"achPass_lowPayRange,omitempty" url:"achPass_lowPayRange,omitempty"`
	AchPassThrough        *AchPassThroughSection `json:"achPassThrough,omitempty" url:"achPassThrough,omitempty"`
	// Controls how to present the `batchCutoffTime` field on the application. If this field isn't sent, batch cut off time defaults to 5 ET.
	BatchCutoffTime   *TemplateElement `json:"batchCutoffTime,omitempty" url:"batchCutoffTime,omitempty"`
	DiscountFrequency *TemplateElement `json:"discountFrequency,omitempty" url:"discountFrequency,omitempty"`
	FundingRollup     *TemplateElement `json:"fundingRollup,omitempty" url:"fundingRollup,omitempty"`
	Gateway           *TemplateElement `json:"gateway,omitempty" url:"gateway,omitempty"`
	PdfTemplateId     *TemplateElement `json:"pdfTemplateId,omitempty" url:"pdfTemplateId,omitempty"`
	PricingPlan       *int64           `json:"pricingPlan,omitempty" url:"pricingPlan,omitempty"`
	PricingType       *TemplateElement `json:"pricingType,omitempty" url:"pricingType,omitempty"`
	Processor         *TemplateElement `json:"processor,omitempty" url:"processor,omitempty"`
	Provider          *TemplateElement `json:"provider,omitempty" url:"provider,omitempty"`
	TierName          *TemplateElement `json:"tierName,omitempty" url:"tierName,omitempty"`
	Visible           *Visible         `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchService) GetAchAbsorb() *AchAbsorbSection {
	if a == nil {
		return nil
	}
	return a.AchAbsorb
}

func (a *AchService) GetAchAbsorbHighPayRange() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AchAbsorbHighPayRange
}

func (a *AchService) GetAchAbsorbLowPayRange() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AchAbsorbLowPayRange
}

func (a *AchService) GetAchAcceptance() *AchAcceptanceElement {
	if a == nil {
		return nil
	}
	return a.AchAcceptance
}

func (a *AchService) GetAchFees() *AchFeeSection {
	if a == nil {
		return nil
	}
	return a.AchFees
}

func (a *AchService) GetAchPassHighPayRange() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AchPassHighPayRange
}

func (a *AchService) GetAchPassLowPayRange() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AchPassLowPayRange
}

func (a *AchService) GetAchPassThrough() *AchPassThroughSection {
	if a == nil {
		return nil
	}
	return a.AchPassThrough
}

func (a *AchService) GetBatchCutoffTime() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.BatchCutoffTime
}

func (a *AchService) GetDiscountFrequency() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.DiscountFrequency
}

func (a *AchService) GetFundingRollup() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.FundingRollup
}

func (a *AchService) GetGateway() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.Gateway
}

func (a *AchService) GetPdfTemplateId() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.PdfTemplateId
}

func (a *AchService) GetPricingPlan() *int64 {
	if a == nil {
		return nil
	}
	return a.PricingPlan
}

func (a *AchService) GetPricingType() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.PricingType
}

func (a *AchService) GetProcessor() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.Processor
}

func (a *AchService) GetProvider() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.Provider
}

func (a *AchService) GetTierName() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.TierName
}

func (a *AchService) GetVisible() *Visible {
	if a == nil {
		return nil
	}
	return a.Visible
}

func (a *AchService) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchService) UnmarshalJSON(data []byte) error {
	type unmarshaler AchService
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchService(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchService) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AchTypes struct {
	Ccd *BasicTemplateElement `json:"ccd,omitempty" url:"ccd,omitempty"`
	Ppd *BasicTemplateElement `json:"ppd,omitempty" url:"ppd,omitempty"`
	Web *BasicTemplateElement `json:"web,omitempty" url:"web,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchTypes) GetCcd() *BasicTemplateElement {
	if a == nil {
		return nil
	}
	return a.Ccd
}

func (a *AchTypes) GetPpd() *BasicTemplateElement {
	if a == nil {
		return nil
	}
	return a.Ppd
}

func (a *AchTypes) GetWeb() *BasicTemplateElement {
	if a == nil {
		return nil
	}
	return a.Web
}

func (a *AchTypes) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchTypes) UnmarshalJSON(data []byte) error {
	type unmarshaler AchTypes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchTypes(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchTypes) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AchTypesPass struct {
	Ccd *TierItemPass `json:"ccd,omitempty" url:"ccd,omitempty"`
	Ppd *TierItemPass `json:"ppd,omitempty" url:"ppd,omitempty"`
	Web *TierItemPass `json:"web,omitempty" url:"web,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchTypesPass) GetCcd() *TierItemPass {
	if a == nil {
		return nil
	}
	return a.Ccd
}

func (a *AchTypesPass) GetPpd() *TierItemPass {
	if a == nil {
		return nil
	}
	return a.Ppd
}

func (a *AchTypesPass) GetWeb() *TierItemPass {
	if a == nil {
		return nil
	}
	return a.Web
}

func (a *AchTypesPass) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchTypesPass) UnmarshalJSON(data []byte) error {
	type unmarshaler AchTypesPass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchTypesPass(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchTypesPass) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AchTypesTiers struct {
	Ccd *TierItem `json:"ccd,omitempty" url:"ccd,omitempty"`
	Ppd *TierItem `json:"ppd,omitempty" url:"ppd,omitempty"`
	Web *TierItem `json:"web,omitempty" url:"web,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchTypesTiers) GetCcd() *TierItem {
	if a == nil {
		return nil
	}
	return a.Ccd
}

func (a *AchTypesTiers) GetPpd() *TierItem {
	if a == nil {
		return nil
	}
	return a.Ppd
}

func (a *AchTypesTiers) GetWeb() *TierItem {
	if a == nil {
		return nil
	}
	return a.Web
}

func (a *AchTypesTiers) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchTypesTiers) UnmarshalJSON(data []byte) error {
	type unmarshaler AchTypesTiers
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchTypesTiers(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchTypesTiers) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Details about a bank account.
type BankSection struct {
	Visible       *Visible         `json:"visible,omitempty" url:"visible,omitempty"`
	AccountNumber *TemplateElement `json:"accountNumber,omitempty" url:"accountNumber,omitempty"`
	AccountType   *TemplateElement `json:"accountType,omitempty" url:"accountType,omitempty"`
	BankName      *TemplateElement `json:"bankName,omitempty" url:"bankName,omitempty"`
	RoutingNumber *TemplateElement `json:"routingNumber,omitempty" url:"routingNumber,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankSection) GetVisible() *Visible {
	if b == nil {
		return nil
	}
	return b.Visible
}

func (b *BankSection) GetAccountNumber() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.AccountNumber
}

func (b *BankSection) GetAccountType() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.AccountType
}

func (b *BankSection) GetBankName() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.BankName
}

func (b *BankSection) GetRoutingNumber() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.RoutingNumber
}

func (b *BankSection) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankSection) UnmarshalJSON(data []byte) error {
	type unmarshaler BankSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BankSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankSection) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BasicTemplateElement struct {
	ReadOnly *ReadOnly        `json:"readOnly,omitempty" url:"readOnly,omitempty"`
	Required *RequiredElement `json:"required,omitempty" url:"required,omitempty"`
	Visible  *Visible         `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BasicTemplateElement) GetReadOnly() *ReadOnly {
	if b == nil {
		return nil
	}
	return b.ReadOnly
}

func (b *BasicTemplateElement) GetRequired() *RequiredElement {
	if b == nil {
		return nil
	}
	return b.Required
}

func (b *BasicTemplateElement) GetVisible() *Visible {
	if b == nil {
		return nil
	}
	return b.Visible
}

func (b *BasicTemplateElement) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicTemplateElement) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicTemplateElement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicTemplateElement(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicTemplateElement) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BoardingLinkApiResponse struct {
	// Reference name for boarding link (if responseText = Success) or
	// List of empty fields separated by comma (if responseText = Fail)
	ResponseData *string       `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BoardingLinkApiResponse) GetResponseData() *string {
	if b == nil {
		return nil
	}
	return b.ResponseData
}

func (b *BoardingLinkApiResponse) GetResponseText() *ResponseText {
	if b == nil {
		return nil
	}
	return b.ResponseText
}

func (b *BoardingLinkApiResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BoardingLinkApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BoardingLinkApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BoardingLinkApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BoardingLinkApiResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BoardingQueryLinks struct {
	AcceptOauth         *AcceptOauth         `json:"acceptOauth,omitempty" url:"acceptOauth,omitempty"`
	AcceptRegister      *AcceptRegister      `json:"acceptRegister,omitempty" url:"acceptRegister,omitempty"`
	EntryAttributes     *EntryAttributes     `json:"entryAttributes,omitempty" url:"entryAttributes,omitempty"`
	Id                  *BoardingLinkId      `json:"id,omitempty" url:"id,omitempty"`
	LastUpdated         *LastModified        `json:"lastUpdated,omitempty" url:"lastUpdated,omitempty"`
	OrgParentName       *OrgParentName       `json:"orgParentName,omitempty" url:"orgParentName,omitempty"`
	ReferenceName       *ReferenceName       `json:"referenceName,omitempty" url:"referenceName,omitempty"`
	ReferenceTemplateId *ReferenceTemplateId `json:"referenceTemplateId,omitempty" url:"referenceTemplateId,omitempty"`
	TemplateCode        *TemplateCode        `json:"templateCode,omitempty" url:"templateCode,omitempty"`
	TemplateName        *TemplateName        `json:"templateName,omitempty" url:"templateName,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BoardingQueryLinks) GetAcceptOauth() *AcceptOauth {
	if b == nil {
		return nil
	}
	return b.AcceptOauth
}

func (b *BoardingQueryLinks) GetAcceptRegister() *AcceptRegister {
	if b == nil {
		return nil
	}
	return b.AcceptRegister
}

func (b *BoardingQueryLinks) GetEntryAttributes() *EntryAttributes {
	if b == nil {
		return nil
	}
	return b.EntryAttributes
}

func (b *BoardingQueryLinks) GetId() *BoardingLinkId {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *BoardingQueryLinks) GetLastUpdated() *LastModified {
	if b == nil {
		return nil
	}
	return b.LastUpdated
}

func (b *BoardingQueryLinks) GetOrgParentName() *OrgParentName {
	if b == nil {
		return nil
	}
	return b.OrgParentName
}

func (b *BoardingQueryLinks) GetReferenceName() *ReferenceName {
	if b == nil {
		return nil
	}
	return b.ReferenceName
}

func (b *BoardingQueryLinks) GetReferenceTemplateId() *ReferenceTemplateId {
	if b == nil {
		return nil
	}
	return b.ReferenceTemplateId
}

func (b *BoardingQueryLinks) GetTemplateCode() *TemplateCode {
	if b == nil {
		return nil
	}
	return b.TemplateCode
}

func (b *BoardingQueryLinks) GetTemplateName() *TemplateName {
	if b == nil {
		return nil
	}
	return b.TemplateName
}

func (b *BoardingQueryLinks) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BoardingQueryLinks) UnmarshalJSON(data []byte) error {
	type unmarshaler BoardingQueryLinks
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BoardingQueryLinks(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BoardingQueryLinks) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Details about a business.
type BusinessSection struct {
	Baddress       *TemplateElement               `json:"baddress,omitempty" url:"baddress,omitempty"`
	Baddress1      *TemplateElement               `json:"baddress1,omitempty" url:"baddress1,omitempty"`
	Bcity          *TemplateElement               `json:"bcity,omitempty" url:"bcity,omitempty"`
	Bcountry       *TemplateElement               `json:"bcountry,omitempty" url:"bcountry,omitempty"`
	Bstate         *TemplateElement               `json:"bstate,omitempty" url:"bstate,omitempty"`
	Btype          *TemplateElement               `json:"btype,omitempty" url:"btype,omitempty"`
	Bzip           *TemplateElement               `json:"bzip,omitempty" url:"bzip,omitempty"`
	Dbaname        *TemplateElement               `json:"dbaname,omitempty" url:"dbaname,omitempty"`
	Ein            *TemplateElement               `json:"ein,omitempty" url:"ein,omitempty"`
	Faxnumber      *TemplateElement               `json:"faxnumber,omitempty" url:"faxnumber,omitempty"`
	Legalname      *TemplateElement               `json:"legalname,omitempty" url:"legalname,omitempty"`
	License        *TemplateElement               `json:"license,omitempty" url:"license,omitempty"`
	Licstate       *TemplateElement               `json:"licstate,omitempty" url:"licstate,omitempty"`
	Maddress       *TemplateElement               `json:"maddress,omitempty" url:"maddress,omitempty"`
	Maddress1      *TemplateElement               `json:"maddress1,omitempty" url:"maddress1,omitempty"`
	Mcity          *TemplateElement               `json:"mcity,omitempty" url:"mcity,omitempty"`
	Mcountry       *TemplateElement               `json:"mcountry,omitempty" url:"mcountry,omitempty"`
	Mstate         *TemplateElement               `json:"mstate,omitempty" url:"mstate,omitempty"`
	Mzip           *TemplateElement               `json:"mzip,omitempty" url:"mzip,omitempty"`
	Phonenumber    *TemplateElement               `json:"phonenumber,omitempty" url:"phonenumber,omitempty"`
	Startdate      *TemplateElement               `json:"startdate,omitempty" url:"startdate,omitempty"`
	Taxfillname    *TemplateElement               `json:"taxfillname,omitempty" url:"taxfillname,omitempty"`
	Visible        *Visible                       `json:"visible,omitempty" url:"visible,omitempty"`
	Website        *TemplateElement               `json:"website,omitempty" url:"website,omitempty"`
	AdditionalData *TemplateAdditionalDataSection `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BusinessSection) GetBaddress() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Baddress
}

func (b *BusinessSection) GetBaddress1() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Baddress1
}

func (b *BusinessSection) GetBcity() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Bcity
}

func (b *BusinessSection) GetBcountry() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Bcountry
}

func (b *BusinessSection) GetBstate() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Bstate
}

func (b *BusinessSection) GetBtype() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Btype
}

func (b *BusinessSection) GetBzip() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Bzip
}

func (b *BusinessSection) GetDbaname() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Dbaname
}

func (b *BusinessSection) GetEin() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Ein
}

func (b *BusinessSection) GetFaxnumber() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Faxnumber
}

func (b *BusinessSection) GetLegalname() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Legalname
}

func (b *BusinessSection) GetLicense() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.License
}

func (b *BusinessSection) GetLicstate() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Licstate
}

func (b *BusinessSection) GetMaddress() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Maddress
}

func (b *BusinessSection) GetMaddress1() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Maddress1
}

func (b *BusinessSection) GetMcity() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Mcity
}

func (b *BusinessSection) GetMcountry() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Mcountry
}

func (b *BusinessSection) GetMstate() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Mstate
}

func (b *BusinessSection) GetMzip() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Mzip
}

func (b *BusinessSection) GetPhonenumber() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Phonenumber
}

func (b *BusinessSection) GetStartdate() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Startdate
}

func (b *BusinessSection) GetTaxfillname() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Taxfillname
}

func (b *BusinessSection) GetVisible() *Visible {
	if b == nil {
		return nil
	}
	return b.Visible
}

func (b *BusinessSection) GetWebsite() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Website
}

func (b *BusinessSection) GetAdditionalData() *TemplateAdditionalDataSection {
	if b == nil {
		return nil
	}
	return b.AdditionalData
}

func (b *BusinessSection) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BusinessSection) UnmarshalJSON(data []byte) error {
	type unmarshaler BusinessSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BusinessSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BusinessSection) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CardAcceptanceElement struct {
	Types    *CardTypes `json:"types,omitempty" url:"types,omitempty"`
	PosCol   *PosCol    `json:"posCol,omitempty" url:"posCol,omitempty"`
	PosRow   *PosRow    `json:"posRow,omitempty" url:"posRow,omitempty"`
	ReadOnly *ReadOnly  `json:"readOnly,omitempty" url:"readOnly,omitempty"`
	Value    *string    `json:"value,omitempty" url:"value,omitempty"`
	Visible  *Visible   `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardAcceptanceElement) GetTypes() *CardTypes {
	if c == nil {
		return nil
	}
	return c.Types
}

func (c *CardAcceptanceElement) GetPosCol() *PosCol {
	if c == nil {
		return nil
	}
	return c.PosCol
}

func (c *CardAcceptanceElement) GetPosRow() *PosRow {
	if c == nil {
		return nil
	}
	return c.PosRow
}

func (c *CardAcceptanceElement) GetReadOnly() *ReadOnly {
	if c == nil {
		return nil
	}
	return c.ReadOnly
}

func (c *CardAcceptanceElement) GetValue() *string {
	if c == nil {
		return nil
	}
	return c.Value
}

func (c *CardAcceptanceElement) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardAcceptanceElement) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardAcceptanceElement) UnmarshalJSON(data []byte) error {
	type unmarshaler CardAcceptanceElement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardAcceptanceElement(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardAcceptanceElement) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardFeeSection struct {
	AchBatchCardFee          *TemplateElement `json:"achBatchCardFee,omitempty" url:"achBatchCardFee,omitempty"`
	AnnualCardFee            *TemplateElement `json:"annualCardFee,omitempty" url:"annualCardFee,omitempty"`
	AvsCardFee               *TemplateElement `json:"avsCardFee,omitempty" url:"avsCardFee,omitempty"`
	ChargebackCardFee        *TemplateElement `json:"chargebackCardFee,omitempty" url:"chargebackCardFee,omitempty"`
	DdaRejectsCardFee        *TemplateElement `json:"ddaRejectsCardFee,omitempty" url:"ddaRejectsCardFee,omitempty"`
	EarlyTerminationCardFee  *TemplateElement `json:"earlyTerminationCardFee,omitempty" url:"earlyTerminationCardFee,omitempty"`
	MinimumProcessingCardFee *TemplateElement `json:"minimumProcessingCardFee,omitempty" url:"minimumProcessingCardFee,omitempty"`
	MonthlyPciCardFee        *TemplateElement `json:"monthlyPCICardFee,omitempty" url:"monthlyPCICardFee,omitempty"`
	MontlyPlatformCardFee    *TemplateElement `json:"montlyPlatformCardFee,omitempty" url:"montlyPlatformCardFee,omitempty"`
	RetrievalCardFee         *TemplateElement `json:"retrievalCardFee,omitempty" url:"retrievalCardFee,omitempty"`
	TransactionCardFee       *TemplateElement `json:"transactionCardFee,omitempty" url:"transactionCardFee,omitempty"`
	Visible                  *Visible         `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardFeeSection) GetAchBatchCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.AchBatchCardFee
}

func (c *CardFeeSection) GetAnnualCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.AnnualCardFee
}

func (c *CardFeeSection) GetAvsCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.AvsCardFee
}

func (c *CardFeeSection) GetChargebackCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.ChargebackCardFee
}

func (c *CardFeeSection) GetDdaRejectsCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.DdaRejectsCardFee
}

func (c *CardFeeSection) GetEarlyTerminationCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.EarlyTerminationCardFee
}

func (c *CardFeeSection) GetMinimumProcessingCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.MinimumProcessingCardFee
}

func (c *CardFeeSection) GetMonthlyPciCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.MonthlyPciCardFee
}

func (c *CardFeeSection) GetMontlyPlatformCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.MontlyPlatformCardFee
}

func (c *CardFeeSection) GetRetrievalCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.RetrievalCardFee
}

func (c *CardFeeSection) GetTransactionCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.TransactionCardFee
}

func (c *CardFeeSection) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardFeeSection) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardFeeSection) UnmarshalJSON(data []byte) error {
	type unmarshaler CardFeeSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardFeeSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardFeeSection) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardFlatSection struct {
	Tiers   []*CardType `json:"tiers,omitempty" url:"tiers,omitempty"`
	Visible *Visible    `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardFlatSection) GetTiers() []*CardType {
	if c == nil {
		return nil
	}
	return c.Tiers
}

func (c *CardFlatSection) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardFlatSection) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardFlatSection) UnmarshalJSON(data []byte) error {
	type unmarshaler CardFlatSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardFlatSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardFlatSection) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardIcpSection struct {
	Tiers   []*CardType `json:"tiers,omitempty" url:"tiers,omitempty"`
	Visible *Visible    `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardIcpSection) GetTiers() []*CardType {
	if c == nil {
		return nil
	}
	return c.Tiers
}

func (c *CardIcpSection) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardIcpSection) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardIcpSection) UnmarshalJSON(data []byte) error {
	type unmarshaler CardIcpSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardIcpSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardIcpSection) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardPassThroughSection struct {
	MultiTier *bool           `json:"multiTier,omitempty" url:"multiTier,omitempty"`
	Tiers     []*CardTypePass `json:"tiers,omitempty" url:"tiers,omitempty"`
	Visible   *Visible        `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardPassThroughSection) GetMultiTier() *bool {
	if c == nil {
		return nil
	}
	return c.MultiTier
}

func (c *CardPassThroughSection) GetTiers() []*CardTypePass {
	if c == nil {
		return nil
	}
	return c.Tiers
}

func (c *CardPassThroughSection) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardPassThroughSection) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardPassThroughSection) UnmarshalJSON(data []byte) error {
	type unmarshaler CardPassThroughSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardPassThroughSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardPassThroughSection) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardService struct {
	// Controls how to present the `batchCutoffTime` field on the application. If this field isn't sent, batch cut off time defaults to 5 ET.
	BatchCutoffTime                 *TemplateElement        `json:"batchCutoffTime,omitempty" url:"batchCutoffTime,omitempty"`
	CardAcceptance                  *CardAcceptanceElement  `json:"cardAcceptance,omitempty" url:"cardAcceptance,omitempty"`
	CardFees                        *CardFeeSection         `json:"cardFees,omitempty" url:"cardFees,omitempty"`
	CardFlat                        *CardFlatSection        `json:"cardFlat,omitempty" url:"cardFlat,omitempty"`
	CardFlatAmountxAuth             *TemplateElement        `json:"cardFlat_amountxAuth,omitempty" url:"cardFlat_amountxAuth,omitempty"`
	CardFlatHighPayRange            *TemplateElement        `json:"cardFlat_highPayRange,omitempty" url:"cardFlat_highPayRange,omitempty"`
	CardFlatLowPayRange             *TemplateElement        `json:"cardFlat_lowPayRange,omitempty" url:"cardFlat_lowPayRange,omitempty"`
	CardFlatPercentxAuth            *TemplateElement        `json:"cardFlat_percentxAuth,omitempty" url:"cardFlat_percentxAuth,omitempty"`
	CardIcp                         *CardIcpSection         `json:"cardICP,omitempty" url:"cardICP,omitempty"`
	CardIcpAmountxAuth              *TemplateElement        `json:"cardICP_amountxAuth,omitempty" url:"cardICP_amountxAuth,omitempty"`
	CardIcpHighPayRange             *TemplateElement        `json:"cardICP_highPayRange,omitempty" url:"cardICP_highPayRange,omitempty"`
	CardIcpLowPayRange              *TemplateElement        `json:"cardICP_lowPayRange,omitempty" url:"cardICP_lowPayRange,omitempty"`
	CardIcpPercentxAuth             *TemplateElement        `json:"cardICP_percentxAuth,omitempty" url:"cardICP_percentxAuth,omitempty"`
	CardPassThrough                 *CardPassThroughSection `json:"cardPassThrough,omitempty" url:"cardPassThrough,omitempty"`
	CardPassThroughAmountRecurring  *TemplateElement        `json:"cardPassThrough_amountRecurring,omitempty" url:"cardPassThrough_amountRecurring,omitempty"`
	CardPassThroughAmountxAuth      *TemplateElement        `json:"cardPassThrough_amountxAuth,omitempty" url:"cardPassThrough_amountxAuth,omitempty"`
	CardPassThroughHighPayRange     *TemplateElement        `json:"cardPassThrough_highPayRange,omitempty" url:"cardPassThrough_highPayRange,omitempty"`
	CardPassThroughLowPayRange      *TemplateElement        `json:"cardPassThrough_lowPayRange,omitempty" url:"cardPassThrough_lowPayRange,omitempty"`
	CardPassThroughPercentRecurring *TemplateElement        `json:"cardPassThrough_percentRecurring,omitempty" url:"cardPassThrough_percentRecurring,omitempty"`
	CardPassThroughPercentxAuth     *TemplateElement        `json:"cardPassThrough_percentxAuth,omitempty" url:"cardPassThrough_percentxAuth,omitempty"`
	DiscountFrequency               *TemplateElement        `json:"discountFrequency,omitempty" url:"discountFrequency,omitempty"`
	FundingRollup                   *TemplateElement        `json:"fundingRollup,omitempty" url:"fundingRollup,omitempty"`
	Gateway                         *TemplateElement        `json:"gateway,omitempty" url:"gateway,omitempty"`
	PassThroughCost                 *TemplateElement        `json:"passThroughCost,omitempty" url:"passThroughCost,omitempty"`
	PdfTemplateId                   *TemplateElement        `json:"pdfTemplateId,omitempty" url:"pdfTemplateId,omitempty"`
	PricingPlan                     *int64                  `json:"pricingPlan,omitempty" url:"pricingPlan,omitempty"`
	PricingType                     *TemplateElement        `json:"pricingType,omitempty" url:"pricingType,omitempty"`
	Processor                       *TemplateElement        `json:"processor,omitempty" url:"processor,omitempty"`
	Provider                        *TemplateElement        `json:"provider,omitempty" url:"provider,omitempty"`
	TierName                        *TemplateElement        `json:"tierName,omitempty" url:"tierName,omitempty"`
	Visible                         *Visible                `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardService) GetBatchCutoffTime() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.BatchCutoffTime
}

func (c *CardService) GetCardAcceptance() *CardAcceptanceElement {
	if c == nil {
		return nil
	}
	return c.CardAcceptance
}

func (c *CardService) GetCardFees() *CardFeeSection {
	if c == nil {
		return nil
	}
	return c.CardFees
}

func (c *CardService) GetCardFlat() *CardFlatSection {
	if c == nil {
		return nil
	}
	return c.CardFlat
}

func (c *CardService) GetCardFlatAmountxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardFlatAmountxAuth
}

func (c *CardService) GetCardFlatHighPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardFlatHighPayRange
}

func (c *CardService) GetCardFlatLowPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardFlatLowPayRange
}

func (c *CardService) GetCardFlatPercentxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardFlatPercentxAuth
}

func (c *CardService) GetCardIcp() *CardIcpSection {
	if c == nil {
		return nil
	}
	return c.CardIcp
}

func (c *CardService) GetCardIcpAmountxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardIcpAmountxAuth
}

func (c *CardService) GetCardIcpHighPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardIcpHighPayRange
}

func (c *CardService) GetCardIcpLowPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardIcpLowPayRange
}

func (c *CardService) GetCardIcpPercentxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardIcpPercentxAuth
}

func (c *CardService) GetCardPassThrough() *CardPassThroughSection {
	if c == nil {
		return nil
	}
	return c.CardPassThrough
}

func (c *CardService) GetCardPassThroughAmountRecurring() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughAmountRecurring
}

func (c *CardService) GetCardPassThroughAmountxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughAmountxAuth
}

func (c *CardService) GetCardPassThroughHighPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughHighPayRange
}

func (c *CardService) GetCardPassThroughLowPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughLowPayRange
}

func (c *CardService) GetCardPassThroughPercentRecurring() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughPercentRecurring
}

func (c *CardService) GetCardPassThroughPercentxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughPercentxAuth
}

func (c *CardService) GetDiscountFrequency() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.DiscountFrequency
}

func (c *CardService) GetFundingRollup() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.FundingRollup
}

func (c *CardService) GetGateway() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.Gateway
}

func (c *CardService) GetPassThroughCost() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.PassThroughCost
}

func (c *CardService) GetPdfTemplateId() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.PdfTemplateId
}

func (c *CardService) GetPricingPlan() *int64 {
	if c == nil {
		return nil
	}
	return c.PricingPlan
}

func (c *CardService) GetPricingType() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.PricingType
}

func (c *CardService) GetProcessor() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.Processor
}

func (c *CardService) GetProvider() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.Provider
}

func (c *CardService) GetTierName() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.TierName
}

func (c *CardService) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardService) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardService) UnmarshalJSON(data []byte) error {
	type unmarshaler CardService
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardService(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardService) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardType struct {
	Amex       *TierItem `json:"amex,omitempty" url:"amex,omitempty"`
	Discover   *TierItem `json:"discover,omitempty" url:"discover,omitempty"`
	MasterCard *TierItem `json:"masterCard,omitempty" url:"masterCard,omitempty"`
	Visa       *TierItem `json:"visa,omitempty" url:"visa,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardType) GetAmex() *TierItem {
	if c == nil {
		return nil
	}
	return c.Amex
}

func (c *CardType) GetDiscover() *TierItem {
	if c == nil {
		return nil
	}
	return c.Discover
}

func (c *CardType) GetMasterCard() *TierItem {
	if c == nil {
		return nil
	}
	return c.MasterCard
}

func (c *CardType) GetVisa() *TierItem {
	if c == nil {
		return nil
	}
	return c.Visa
}

func (c *CardType) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardType) UnmarshalJSON(data []byte) error {
	type unmarshaler CardType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardType) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardTypePass struct {
	Amex       *TierItemPass `json:"amex,omitempty" url:"amex,omitempty"`
	Discover   *TierItemPass `json:"discover,omitempty" url:"discover,omitempty"`
	MasterCard *TierItemPass `json:"masterCard,omitempty" url:"masterCard,omitempty"`
	Visa       *TierItemPass `json:"visa,omitempty" url:"visa,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardTypePass) GetAmex() *TierItemPass {
	if c == nil {
		return nil
	}
	return c.Amex
}

func (c *CardTypePass) GetDiscover() *TierItemPass {
	if c == nil {
		return nil
	}
	return c.Discover
}

func (c *CardTypePass) GetMasterCard() *TierItemPass {
	if c == nil {
		return nil
	}
	return c.MasterCard
}

func (c *CardTypePass) GetVisa() *TierItemPass {
	if c == nil {
		return nil
	}
	return c.Visa
}

func (c *CardTypePass) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardTypePass) UnmarshalJSON(data []byte) error {
	type unmarshaler CardTypePass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardTypePass(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardTypePass) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CardTypes struct {
	Amex       *BasicTemplateElement `json:"amex,omitempty" url:"amex,omitempty"`
	Discover   *BasicTemplateElement `json:"discover,omitempty" url:"discover,omitempty"`
	MasterCard *BasicTemplateElement `json:"masterCard,omitempty" url:"masterCard,omitempty"`
	Visa       *BasicTemplateElement `json:"visa,omitempty" url:"visa,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardTypes) GetAmex() *BasicTemplateElement {
	if c == nil {
		return nil
	}
	return c.Amex
}

func (c *CardTypes) GetDiscover() *BasicTemplateElement {
	if c == nil {
		return nil
	}
	return c.Discover
}

func (c *CardTypes) GetMasterCard() *BasicTemplateElement {
	if c == nil {
		return nil
	}
	return c.MasterCard
}

func (c *CardTypes) GetVisa() *BasicTemplateElement {
	if c == nil {
		return nil
	}
	return c.Visa
}

func (c *CardTypes) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardTypes) UnmarshalJSON(data []byte) error {
	type unmarshaler CardTypes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardTypes(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardTypes) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DocumentSection struct {
	Visble      *Visible     `json:"visble,omitempty" url:"visble,omitempty"`
	SubFooter   *SubFooter   `json:"subFooter,omitempty" url:"subFooter,omitempty"`
	SubHeader   *SubHeader   `json:"subHeader,omitempty" url:"subHeader,omitempty"`
	DepositBank *BankSection `json:"depositBank,omitempty" url:"depositBank,omitempty"`
	// The minimum number of documents the applicant must upload with the application.
	MinimumDocuments *int `json:"minimumDocuments,omitempty" url:"minimumDocuments,omitempty"`
	// When `true`, allows the applicant to upload documents to the application.
	UploadDocuments    *bool                              `json:"uploadDocuments,omitempty" url:"uploadDocuments,omitempty"`
	BankData           *BankSection                       `json:"bankData,omitempty" url:"bankData,omitempty"`
	TermsAndConditions *DocumentSectionTermsAndConditions `json:"termsAndConditions,omitempty" url:"termsAndConditions,omitempty"`
	Signer             *SignerSection                     `json:"signer,omitempty" url:"signer,omitempty"`
	Visible            *Visible                           `json:"visible,omitempty" url:"visible,omitempty"`
	WithdrawalBank     *BankSection                       `json:"withdrawalBank,omitempty" url:"withdrawalBank,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DocumentSection) GetVisble() *Visible {
	if d == nil {
		return nil
	}
	return d.Visble
}

func (d *DocumentSection) GetSubFooter() *SubFooter {
	if d == nil {
		return nil
	}
	return d.SubFooter
}

func (d *DocumentSection) GetSubHeader() *SubHeader {
	if d == nil {
		return nil
	}
	return d.SubHeader
}

func (d *DocumentSection) GetDepositBank() *BankSection {
	if d == nil {
		return nil
	}
	return d.DepositBank
}

func (d *DocumentSection) GetMinimumDocuments() *int {
	if d == nil {
		return nil
	}
	return d.MinimumDocuments
}

func (d *DocumentSection) GetUploadDocuments() *bool {
	if d == nil {
		return nil
	}
	return d.UploadDocuments
}

func (d *DocumentSection) GetBankData() *BankSection {
	if d == nil {
		return nil
	}
	return d.BankData
}

func (d *DocumentSection) GetTermsAndConditions() *DocumentSectionTermsAndConditions {
	if d == nil {
		return nil
	}
	return d.TermsAndConditions
}

func (d *DocumentSection) GetSigner() *SignerSection {
	if d == nil {
		return nil
	}
	return d.Signer
}

func (d *DocumentSection) GetVisible() *Visible {
	if d == nil {
		return nil
	}
	return d.Visible
}

func (d *DocumentSection) GetWithdrawalBank() *BankSection {
	if d == nil {
		return nil
	}
	return d.WithdrawalBank
}

func (d *DocumentSection) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentSection) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentSection) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentSectionTermsAndConditions struct {
	TcLinks []*DocumentSectionTermsAndConditionsTcLinksItem `json:"tcLinks,omitempty" url:"tcLinks,omitempty"`
	Visible *Visible                                        `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DocumentSectionTermsAndConditions) GetTcLinks() []*DocumentSectionTermsAndConditionsTcLinksItem {
	if d == nil {
		return nil
	}
	return d.TcLinks
}

func (d *DocumentSectionTermsAndConditions) GetVisible() *Visible {
	if d == nil {
		return nil
	}
	return d.Visible
}

func (d *DocumentSectionTermsAndConditions) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentSectionTermsAndConditions) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentSectionTermsAndConditions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentSectionTermsAndConditions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentSectionTermsAndConditions) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentSectionTermsAndConditionsTcLinksItem struct {
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) GetValue() *string {
	if d == nil {
		return nil
	}
	return d.Value
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentSectionTermsAndConditionsTcLinksItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentSectionTermsAndConditionsTcLinksItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Information about a business owner.
type OwnersSection struct {
	ContactEmail *TemplateElement `json:"contactEmail,omitempty" url:"contactEmail,omitempty"`
	ContactName  *TemplateElement `json:"contactName,omitempty" url:"contactName,omitempty"`
	ContactPhone *TemplateElement `json:"contactPhone,omitempty" url:"contactPhone,omitempty"`
	ContactTitle *TemplateElement `json:"contactTitle,omitempty" url:"contactTitle,omitempty"`
	// Offer add more contacts
	MultipleContacts *bool `json:"multipleContacts,omitempty" url:"multipleContacts,omitempty"`
	// offer add more owners
	MultipleOwners *bool                          `json:"multipleOwners,omitempty" url:"multipleOwners,omitempty"`
	Oaddress       *TemplateElement               `json:"oaddress,omitempty" url:"oaddress,omitempty"`
	Ocity          *TemplateElement               `json:"ocity,omitempty" url:"ocity,omitempty"`
	Ocountry       *TemplateElement               `json:"ocountry,omitempty" url:"ocountry,omitempty"`
	Odriverstate   *TemplateElement               `json:"odriverstate,omitempty" url:"odriverstate,omitempty"`
	Ostate         *TemplateElement               `json:"ostate,omitempty" url:"ostate,omitempty"`
	Ownerdob       *TemplateElement               `json:"ownerdob,omitempty" url:"ownerdob,omitempty"`
	Ownerdriver    *TemplateElement               `json:"ownerdriver,omitempty" url:"ownerdriver,omitempty"`
	Owneremail     *TemplateElement               `json:"owneremail,omitempty" url:"owneremail,omitempty"`
	Ownername      *TemplateElement               `json:"ownername,omitempty" url:"ownername,omitempty"`
	Ownerpercent   *TemplateElement               `json:"ownerpercent,omitempty" url:"ownerpercent,omitempty"`
	Ownerphone1    *TemplateElement               `json:"ownerphone1,omitempty" url:"ownerphone1,omitempty"`
	Ownerphone2    *TemplateElement               `json:"ownerphone2,omitempty" url:"ownerphone2,omitempty"`
	Ownerssn       *TemplateElement               `json:"ownerssn,omitempty" url:"ownerssn,omitempty"`
	Ownertitle     *TemplateElement               `json:"ownertitle,omitempty" url:"ownertitle,omitempty"`
	Ozip           *TemplateElement               `json:"ozip,omitempty" url:"ozip,omitempty"`
	SubFooter      *SubFooter                     `json:"subFooter,omitempty" url:"subFooter,omitempty"`
	SubHeader      *SubHeader                     `json:"subHeader,omitempty" url:"subHeader,omitempty"`
	Visible        *Visible                       `json:"visible,omitempty" url:"visible,omitempty"`
	AdditionalData *TemplateAdditionalDataSection `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OwnersSection) GetContactEmail() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.ContactEmail
}

func (o *OwnersSection) GetContactName() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.ContactName
}

func (o *OwnersSection) GetContactPhone() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.ContactPhone
}

func (o *OwnersSection) GetContactTitle() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.ContactTitle
}

func (o *OwnersSection) GetMultipleContacts() *bool {
	if o == nil {
		return nil
	}
	return o.MultipleContacts
}

func (o *OwnersSection) GetMultipleOwners() *bool {
	if o == nil {
		return nil
	}
	return o.MultipleOwners
}

func (o *OwnersSection) GetOaddress() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Oaddress
}

func (o *OwnersSection) GetOcity() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ocity
}

func (o *OwnersSection) GetOcountry() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ocountry
}

func (o *OwnersSection) GetOdriverstate() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Odriverstate
}

func (o *OwnersSection) GetOstate() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ostate
}

func (o *OwnersSection) GetOwnerdob() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerdob
}

func (o *OwnersSection) GetOwnerdriver() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerdriver
}

func (o *OwnersSection) GetOwneremail() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Owneremail
}

func (o *OwnersSection) GetOwnername() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownername
}

func (o *OwnersSection) GetOwnerpercent() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerpercent
}

func (o *OwnersSection) GetOwnerphone1() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerphone1
}

func (o *OwnersSection) GetOwnerphone2() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerphone2
}

func (o *OwnersSection) GetOwnerssn() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerssn
}

func (o *OwnersSection) GetOwnertitle() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownertitle
}

func (o *OwnersSection) GetOzip() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ozip
}

func (o *OwnersSection) GetSubFooter() *SubFooter {
	if o == nil {
		return nil
	}
	return o.SubFooter
}

func (o *OwnersSection) GetSubHeader() *SubHeader {
	if o == nil {
		return nil
	}
	return o.SubHeader
}

func (o *OwnersSection) GetVisible() *Visible {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *OwnersSection) GetAdditionalData() *TemplateAdditionalDataSection {
	if o == nil {
		return nil
	}
	return o.AdditionalData
}

func (o *OwnersSection) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OwnersSection) UnmarshalJSON(data []byte) error {
	type unmarshaler OwnersSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OwnersSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OwnersSection) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type PayabliApiResponseTemplateId struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode   `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	// When the operation is successful, contains the template's ID.
	ResponseData *Responsedatanonobject `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText *ResponseText          `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponseTemplateId) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponseTemplateId) GetPageIdentifier() *PageIdentifier {
	if p == nil {
		return nil
	}
	return p.PageIdentifier
}

func (p *PayabliApiResponseTemplateId) GetResponseCode() *Responsecode {
	if p == nil {
		return nil
	}
	return p.ResponseCode
}

func (p *PayabliApiResponseTemplateId) GetResponseData() *Responsedatanonobject {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponseTemplateId) GetResponseText() *ResponseText {
	if p == nil {
		return nil
	}
	return p.ResponseText
}

func (p *PayabliApiResponseTemplateId) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponseTemplateId) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponseTemplateId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponseTemplateId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponseTemplateId) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Used to identify the risk workflow used to review this account. Policy IDs must be created before using automatic underwriting, and is **required** when `method` is `automatic`.
type PolicyId = string

// The element's column position.
type PosCol = *int

// The element's row position.
type PosRow = *int

type ProcessingSection struct {
	Avgmonthly    *TemplateElement `json:"avgmonthly,omitempty" url:"avgmonthly,omitempty"`
	Binperson     *TemplateElement `json:"binperson,omitempty" url:"binperson,omitempty"`
	Binphone      *TemplateElement `json:"binphone,omitempty" url:"binphone,omitempty"`
	Binweb        *TemplateElement `json:"binweb,omitempty" url:"binweb,omitempty"`
	Bsummary      *TemplateElement `json:"bsummary,omitempty" url:"bsummary,omitempty"`
	Highticketamt *TemplateElement `json:"highticketamt,omitempty" url:"highticketamt,omitempty"`
	Mcc           *TemplateElement `json:"mcc,omitempty" url:"mcc,omitempty"`
	SubFooter     *SubFooter       `json:"subFooter,omitempty" url:"subFooter,omitempty"`
	SubHeader     *SubHeader       `json:"subHeader,omitempty" url:"subHeader,omitempty"`
	Ticketamt     *TemplateElement `json:"ticketamt,omitempty" url:"ticketamt,omitempty"`
	Visible       *Visible         `json:"visible,omitempty" url:"visible,omitempty"`
	WhenCharged   *TemplateElement `json:"whenCharged,omitempty" url:"whenCharged,omitempty"`
	WhenDelivered *TemplateElement `json:"whenDelivered,omitempty" url:"whenDelivered,omitempty"`
	WhenProvided  *TemplateElement `json:"whenProvided,omitempty" url:"whenProvided,omitempty"`
	WhenRefunded  *TemplateElement `json:"whenRefunded,omitempty" url:"whenRefunded,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessingSection) GetAvgmonthly() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Avgmonthly
}

func (p *ProcessingSection) GetBinperson() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Binperson
}

func (p *ProcessingSection) GetBinphone() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Binphone
}

func (p *ProcessingSection) GetBinweb() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Binweb
}

func (p *ProcessingSection) GetBsummary() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Bsummary
}

func (p *ProcessingSection) GetHighticketamt() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Highticketamt
}

func (p *ProcessingSection) GetMcc() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Mcc
}

func (p *ProcessingSection) GetSubFooter() *SubFooter {
	if p == nil {
		return nil
	}
	return p.SubFooter
}

func (p *ProcessingSection) GetSubHeader() *SubHeader {
	if p == nil {
		return nil
	}
	return p.SubHeader
}

func (p *ProcessingSection) GetTicketamt() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Ticketamt
}

func (p *ProcessingSection) GetVisible() *Visible {
	if p == nil {
		return nil
	}
	return p.Visible
}

func (p *ProcessingSection) GetWhenCharged() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.WhenCharged
}

func (p *ProcessingSection) GetWhenDelivered() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.WhenDelivered
}

func (p *ProcessingSection) GetWhenProvided() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.WhenProvided
}

func (p *ProcessingSection) GetWhenRefunded() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.WhenRefunded
}

func (p *ProcessingSection) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessingSection) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessingSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessingSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessingSection) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type SalesSection struct {
	SalesCode *SalesCode `json:"salesCode,omitempty" url:"salesCode,omitempty"`
	SalesCrm  *string    `json:"salesCRM,omitempty" url:"salesCRM,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SalesSection) GetSalesCode() *SalesCode {
	if s == nil {
		return nil
	}
	return s.SalesCode
}

func (s *SalesSection) GetSalesCrm() *string {
	if s == nil {
		return nil
	}
	return s.SalesCrm
}

func (s *SalesSection) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SalesSection) UnmarshalJSON(data []byte) error {
	type unmarshaler SalesSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SalesSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SalesSection) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Details about pricing and payment services for a business.
type ServicesSection struct {
	Ach       *AchService  `json:"ach,omitempty" url:"ach,omitempty"`
	Card      *CardService `json:"card,omitempty" url:"card,omitempty"`
	SubFooter *SubFooter   `json:"subFooter,omitempty" url:"subFooter,omitempty"`
	SubHeader *SubHeader   `json:"subHeader,omitempty" url:"subHeader,omitempty"`
	Visible   *Visible     `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ServicesSection) GetAch() *AchService {
	if s == nil {
		return nil
	}
	return s.Ach
}

func (s *ServicesSection) GetCard() *CardService {
	if s == nil {
		return nil
	}
	return s.Card
}

func (s *ServicesSection) GetSubFooter() *SubFooter {
	if s == nil {
		return nil
	}
	return s.SubFooter
}

func (s *ServicesSection) GetSubHeader() *SubHeader {
	if s == nil {
		return nil
	}
	return s.SubHeader
}

func (s *ServicesSection) GetVisible() *Visible {
	if s == nil {
		return nil
	}
	return s.Visible
}

func (s *ServicesSection) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ServicesSection) UnmarshalJSON(data []byte) error {
	type unmarshaler ServicesSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ServicesSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ServicesSection) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SignerSection struct {
	Visible                 *Visible                       `json:"visible,omitempty" url:"visible,omitempty"`
	Name                    *TemplateElement               `json:"name,omitempty" url:"name,omitempty"`
	Ssn                     *TemplateElement               `json:"ssn,omitempty" url:"ssn,omitempty"`
	Dob                     *TemplateElement               `json:"dob,omitempty" url:"dob,omitempty"`
	Phone                   *TemplateElement               `json:"phone,omitempty" url:"phone,omitempty"`
	Email                   *TemplateElement               `json:"email,omitempty" url:"email,omitempty"`
	Address                 *TemplateElement               `json:"address,omitempty" url:"address,omitempty"`
	Address1                *TemplateElement               `json:"address1,omitempty" url:"address1,omitempty"`
	City                    *TemplateElement               `json:"city,omitempty" url:"city,omitempty"`
	Country                 *TemplateElement               `json:"country,omitempty" url:"country,omitempty"`
	State                   *TemplateElement               `json:"state,omitempty" url:"state,omitempty"`
	Zip                     *TemplateElement               `json:"zip,omitempty" url:"zip,omitempty"`
	Acceptance              *TemplateElement               `json:"acceptance,omitempty" url:"acceptance,omitempty"`
	SignedDocumentReference *TemplateElement               `json:"signedDocumentReference,omitempty" url:"signedDocumentReference,omitempty"`
	AdditionalData          *TemplateAdditionalDataSection `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SignerSection) GetVisible() *Visible {
	if s == nil {
		return nil
	}
	return s.Visible
}

func (s *SignerSection) GetName() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SignerSection) GetSsn() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Ssn
}

func (s *SignerSection) GetDob() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Dob
}

func (s *SignerSection) GetPhone() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Phone
}

func (s *SignerSection) GetEmail() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Email
}

func (s *SignerSection) GetAddress() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Address
}

func (s *SignerSection) GetAddress1() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Address1
}

func (s *SignerSection) GetCity() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.City
}

func (s *SignerSection) GetCountry() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Country
}

func (s *SignerSection) GetState() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.State
}

func (s *SignerSection) GetZip() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Zip
}

func (s *SignerSection) GetAcceptance() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Acceptance
}

func (s *SignerSection) GetSignedDocumentReference() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.SignedDocumentReference
}

func (s *SignerSection) GetAdditionalData() *TemplateAdditionalDataSection {
	if s == nil {
		return nil
	}
	return s.AdditionalData
}

func (s *SignerSection) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SignerSection) UnmarshalJSON(data []byte) error {
	type unmarshaler SignerSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SignerSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SignerSection) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubFooter = *string

type SubHeader = *string

type TemplateAdditionalDataField struct {
	Visible  *Visible         `json:"visible,omitempty" url:"visible,omitempty"`
	ReadOnly *ReadOnly        `json:"readOnly,omitempty" url:"readOnly,omitempty"`
	Required *RequiredElement `json:"required,omitempty" url:"required,omitempty"`
	PosRow   *PosRow          `json:"posRow,omitempty" url:"posRow,omitempty"`
	PosCol   *PosCol          `json:"posCol,omitempty" url:"posCol,omitempty"`
	Value    *ValueTemplates  `json:"value,omitempty" url:"value,omitempty"`
	Label    *string          `json:"label,omitempty" url:"label,omitempty"`
	Type     *string          `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateAdditionalDataField) GetVisible() *Visible {
	if t == nil {
		return nil
	}
	return t.Visible
}

func (t *TemplateAdditionalDataField) GetReadOnly() *ReadOnly {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateAdditionalDataField) GetRequired() *RequiredElement {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateAdditionalDataField) GetPosRow() *PosRow {
	if t == nil {
		return nil
	}
	return t.PosRow
}

func (t *TemplateAdditionalDataField) GetPosCol() *PosCol {
	if t == nil {
		return nil
	}
	return t.PosCol
}

func (t *TemplateAdditionalDataField) GetValue() *ValueTemplates {
	if t == nil {
		return nil
	}
	return t.Value
}

func (t *TemplateAdditionalDataField) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateAdditionalDataField) GetType() *string {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *TemplateAdditionalDataField) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateAdditionalDataField) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateAdditionalDataField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateAdditionalDataField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateAdditionalDataField) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplateAdditionalDataSection struct {
	Visible Visible                                 `json:"visible,omitempty" url:"visible,omitempty"`
	Fields  map[string]*TemplateAdditionalDataField `json:"fields" url:"fields"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateAdditionalDataSection) GetVisible() Visible {
	if t == nil {
		return nil
	}
	return t.Visible
}

func (t *TemplateAdditionalDataSection) GetFields() map[string]*TemplateAdditionalDataField {
	if t == nil {
		return nil
	}
	return t.Fields
}

func (t *TemplateAdditionalDataSection) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateAdditionalDataSection) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateAdditionalDataSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateAdditionalDataSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateAdditionalDataSection) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplateContent struct {
	BusinessData     *BusinessSection   `json:"businessData,omitempty" url:"businessData,omitempty"`
	DocumentsData    *DocumentSection   `json:"documentsData,omitempty" url:"documentsData,omitempty"`
	OwnershipData    *OwnersSection     `json:"ownershipData,omitempty" url:"ownershipData,omitempty"`
	ProcessingData   *ProcessingSection `json:"processingData,omitempty" url:"processingData,omitempty"`
	SalesData        *SalesSection      `json:"salesData,omitempty" url:"salesData,omitempty"`
	ServicesData     *ServicesSection   `json:"servicesData,omitempty" url:"servicesData,omitempty"`
	UnderwritingData *UnderwritingData  `json:"underwritingData,omitempty" url:"underwritingData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateContent) GetBusinessData() *BusinessSection {
	if t == nil {
		return nil
	}
	return t.BusinessData
}

func (t *TemplateContent) GetDocumentsData() *DocumentSection {
	if t == nil {
		return nil
	}
	return t.DocumentsData
}

func (t *TemplateContent) GetOwnershipData() *OwnersSection {
	if t == nil {
		return nil
	}
	return t.OwnershipData
}

func (t *TemplateContent) GetProcessingData() *ProcessingSection {
	if t == nil {
		return nil
	}
	return t.ProcessingData
}

func (t *TemplateContent) GetSalesData() *SalesSection {
	if t == nil {
		return nil
	}
	return t.SalesData
}

func (t *TemplateContent) GetServicesData() *ServicesSection {
	if t == nil {
		return nil
	}
	return t.ServicesData
}

func (t *TemplateContent) GetUnderwritingData() *UnderwritingData {
	if t == nil {
		return nil
	}
	return t.UnderwritingData
}

func (t *TemplateContent) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateContent) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateContent) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplateContentResponse struct {
	BusinessData     *BusinessSection          `json:"businessData,omitempty" url:"businessData,omitempty"`
	DocumentsData    *DocumentSection          `json:"documentsData,omitempty" url:"documentsData,omitempty"`
	OwnershipData    *OwnersSection            `json:"ownershipData,omitempty" url:"ownershipData,omitempty"`
	ProcessingData   *ProcessingSection        `json:"processingData,omitempty" url:"processingData,omitempty"`
	SalesData        *SalesSection             `json:"salesData,omitempty" url:"salesData,omitempty"`
	ServicesData     *ServicesSection          `json:"servicesData,omitempty" url:"servicesData,omitempty"`
	UnderwritingData *UnderwritingDataResponse `json:"underwritingData,omitempty" url:"underwritingData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateContentResponse) GetBusinessData() *BusinessSection {
	if t == nil {
		return nil
	}
	return t.BusinessData
}

func (t *TemplateContentResponse) GetDocumentsData() *DocumentSection {
	if t == nil {
		return nil
	}
	return t.DocumentsData
}

func (t *TemplateContentResponse) GetOwnershipData() *OwnersSection {
	if t == nil {
		return nil
	}
	return t.OwnershipData
}

func (t *TemplateContentResponse) GetProcessingData() *ProcessingSection {
	if t == nil {
		return nil
	}
	return t.ProcessingData
}

func (t *TemplateContentResponse) GetSalesData() *SalesSection {
	if t == nil {
		return nil
	}
	return t.SalesData
}

func (t *TemplateContentResponse) GetServicesData() *ServicesSection {
	if t == nil {
		return nil
	}
	return t.ServicesData
}

func (t *TemplateContentResponse) GetUnderwritingData() *UnderwritingDataResponse {
	if t == nil {
		return nil
	}
	return t.UnderwritingData
}

func (t *TemplateContentResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateContentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateContentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateContentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateContentResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Object containing the template's data.
type TemplateData struct {
	// The ID of the organization the template belongs to.
	OrgId           *Orgid           `json:"orgId,omitempty" url:"orgId,omitempty"`
	PricingId       *int64           `json:"pricingId,omitempty" url:"pricingId,omitempty"`
	TemplateCode    *TemplateCode    `json:"templateCode,omitempty" url:"templateCode,omitempty"`
	TemplateContent *TemplateContent `json:"templateContent,omitempty" url:"templateContent,omitempty"`
	// A description for the template.
	TemplateDescription *string       `json:"templateDescription,omitempty" url:"templateDescription,omitempty"`
	TemplateName        *TemplateName `json:"templateName,omitempty" url:"templateName,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateData) GetOrgId() *Orgid {
	if t == nil {
		return nil
	}
	return t.OrgId
}

func (t *TemplateData) GetPricingId() *int64 {
	if t == nil {
		return nil
	}
	return t.PricingId
}

func (t *TemplateData) GetTemplateCode() *TemplateCode {
	if t == nil {
		return nil
	}
	return t.TemplateCode
}

func (t *TemplateData) GetTemplateContent() *TemplateContent {
	if t == nil {
		return nil
	}
	return t.TemplateContent
}

func (t *TemplateData) GetTemplateDescription() *string {
	if t == nil {
		return nil
	}
	return t.TemplateDescription
}

func (t *TemplateData) GetTemplateName() *TemplateName {
	if t == nil {
		return nil
	}
	return t.TemplateName
}

func (t *TemplateData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateData) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateData) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplateElement struct {
	PosCol   *PosCol         `json:"posCol,omitempty" url:"posCol,omitempty"`
	PosRow   *PosRow         `json:"posRow,omitempty" url:"posRow,omitempty"`
	ReadOnly *ReadOnly       `json:"readOnly,omitempty" url:"readOnly,omitempty"`
	Value    *ValueTemplates `json:"value,omitempty" url:"value,omitempty"`
	Visible  *Visible        `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateElement) GetPosCol() *PosCol {
	if t == nil {
		return nil
	}
	return t.PosCol
}

func (t *TemplateElement) GetPosRow() *PosRow {
	if t == nil {
		return nil
	}
	return t.PosRow
}

func (t *TemplateElement) GetReadOnly() *ReadOnly {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateElement) GetValue() *ValueTemplates {
	if t == nil {
		return nil
	}
	return t.Value
}

func (t *TemplateElement) GetVisible() *Visible {
	if t == nil {
		return nil
	}
	return t.Visible
}

func (t *TemplateElement) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateElement) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateElement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateElement(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateElement) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplateQueryRecord struct {
	AddPrice                   *bool                       `json:"addPrice,omitempty" url:"addPrice,omitempty"`
	BoardingLinks              []*BoardingQueryLinks       `json:"boardingLinks,omitempty" url:"boardingLinks,omitempty"`
	CreatedAt                  *CreatedAt                  `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	IdTemplate                 *int64                      `json:"idTemplate,omitempty" url:"idTemplate,omitempty"`
	IsRoot                     *IsRoot                     `json:"isRoot,omitempty" url:"isRoot,omitempty"`
	OrgParentName              *OrgParentName              `json:"orgParentName,omitempty" url:"orgParentName,omitempty"`
	RecipientEmailNotification *RecipientEmailNotification `json:"recipientEmailNotification,omitempty" url:"recipientEmailNotification,omitempty"`
	Resumable                  *Resumable                  `json:"resumable,omitempty" url:"resumable,omitempty"`
	TemplateCode               *TemplateCode               `json:"templateCode,omitempty" url:"templateCode,omitempty"`
	TemplateContent            *TemplateContentResponse    `json:"templateContent,omitempty" url:"templateContent,omitempty"`
	TemplateDescription        *string                     `json:"templateDescription,omitempty" url:"templateDescription,omitempty"`
	TemplateTitle              *string                     `json:"templateTitle,omitempty" url:"templateTitle,omitempty"`
	UsedBy                     *int                        `json:"usedBy,omitempty" url:"usedBy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateQueryRecord) GetAddPrice() *bool {
	if t == nil {
		return nil
	}
	return t.AddPrice
}

func (t *TemplateQueryRecord) GetBoardingLinks() []*BoardingQueryLinks {
	if t == nil {
		return nil
	}
	return t.BoardingLinks
}

func (t *TemplateQueryRecord) GetCreatedAt() *CreatedAt {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TemplateQueryRecord) GetIdTemplate() *int64 {
	if t == nil {
		return nil
	}
	return t.IdTemplate
}

func (t *TemplateQueryRecord) GetIsRoot() *IsRoot {
	if t == nil {
		return nil
	}
	return t.IsRoot
}

func (t *TemplateQueryRecord) GetOrgParentName() *OrgParentName {
	if t == nil {
		return nil
	}
	return t.OrgParentName
}

func (t *TemplateQueryRecord) GetRecipientEmailNotification() *RecipientEmailNotification {
	if t == nil {
		return nil
	}
	return t.RecipientEmailNotification
}

func (t *TemplateQueryRecord) GetResumable() *Resumable {
	if t == nil {
		return nil
	}
	return t.Resumable
}

func (t *TemplateQueryRecord) GetTemplateCode() *TemplateCode {
	if t == nil {
		return nil
	}
	return t.TemplateCode
}

func (t *TemplateQueryRecord) GetTemplateContent() *TemplateContentResponse {
	if t == nil {
		return nil
	}
	return t.TemplateContent
}

func (t *TemplateQueryRecord) GetTemplateDescription() *string {
	if t == nil {
		return nil
	}
	return t.TemplateDescription
}

func (t *TemplateQueryRecord) GetTemplateTitle() *string {
	if t == nil {
		return nil
	}
	return t.TemplateTitle
}

func (t *TemplateQueryRecord) GetUsedBy() *int {
	if t == nil {
		return nil
	}
	return t.UsedBy
}

func (t *TemplateQueryRecord) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateQueryRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateQueryRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateQueryRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateQueryRecord) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplateQueryResponse struct {
	Records []*TemplateQueryRecord `json:"records,omitempty" url:"records,omitempty"`
	Summary *QuerySummary          `json:"summary,omitempty" url:"summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateQueryResponse) GetRecords() []*TemplateQueryRecord {
	if t == nil {
		return nil
	}
	return t.Records
}

func (t *TemplateQueryResponse) GetSummary() *QuerySummary {
	if t == nil {
		return nil
	}
	return t.Summary
}

func (t *TemplateQueryResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateQueryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateQueryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateQueryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateQueryResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TierItem struct {
	AmountxAuth  *float64 `json:"amountxAuth,omitempty" url:"amountxAuth,omitempty"`
	HighPayRange *float64 `json:"highPayRange,omitempty" url:"highPayRange,omitempty"`
	LowPayRange  *float64 `json:"lowPayRange,omitempty" url:"lowPayRange,omitempty"`
	PercentxAuth *float64 `json:"percentxAuth,omitempty" url:"percentxAuth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TierItem) GetAmountxAuth() *float64 {
	if t == nil {
		return nil
	}
	return t.AmountxAuth
}

func (t *TierItem) GetHighPayRange() *float64 {
	if t == nil {
		return nil
	}
	return t.HighPayRange
}

func (t *TierItem) GetLowPayRange() *float64 {
	if t == nil {
		return nil
	}
	return t.LowPayRange
}

func (t *TierItem) GetPercentxAuth() *float64 {
	if t == nil {
		return nil
	}
	return t.PercentxAuth
}

func (t *TierItem) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TierItem) UnmarshalJSON(data []byte) error {
	type unmarshaler TierItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TierItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TierItem) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TierItemPass struct {
	AmountFeeoneTime    *float64 `json:"amountFeeone-time,omitempty" url:"amountFeeone-time,omitempty"`
	AmountFeeRecurring  *float64 `json:"amountFeeRecurring,omitempty" url:"amountFeeRecurring,omitempty"`
	HighPayRange        *float64 `json:"highPayRange,omitempty" url:"highPayRange,omitempty"`
	LowPayRange         *float64 `json:"lowPayRange,omitempty" url:"lowPayRange,omitempty"`
	PercentFeeoneTime   *float64 `json:"percentFeeone-time,omitempty" url:"percentFeeone-time,omitempty"`
	PercentFeeRecurring *float64 `json:"percentFeeRecurring,omitempty" url:"percentFeeRecurring,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TierItemPass) GetAmountFeeoneTime() *float64 {
	if t == nil {
		return nil
	}
	return t.AmountFeeoneTime
}

func (t *TierItemPass) GetAmountFeeRecurring() *float64 {
	if t == nil {
		return nil
	}
	return t.AmountFeeRecurring
}

func (t *TierItemPass) GetHighPayRange() *float64 {
	if t == nil {
		return nil
	}
	return t.HighPayRange
}

func (t *TierItemPass) GetLowPayRange() *float64 {
	if t == nil {
		return nil
	}
	return t.LowPayRange
}

func (t *TierItemPass) GetPercentFeeoneTime() *float64 {
	if t == nil {
		return nil
	}
	return t.PercentFeeoneTime
}

func (t *TierItemPass) GetPercentFeeRecurring() *float64 {
	if t == nil {
		return nil
	}
	return t.PercentFeeRecurring
}

func (t *TierItemPass) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TierItemPass) UnmarshalJSON(data []byte) error {
	type unmarshaler TierItemPass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TierItemPass(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TierItemPass) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// This field controls which method is used to handle risk orchestration.
//   - `automatic`: Sends the application through the automatic underwriting workflow using the provided `policyId`.
//   - `manual`: Puts the application into the pending review status. An analyst must manually change it's final status to approved or declined.
//   - `bypass`: The application won't go through Payabli's review, and proceeds directly to boarding products and services.
type UnderWritingMethod string

const (
	UnderWritingMethodAutomatic UnderWritingMethod = "automatic"
	UnderWritingMethodManual    UnderWritingMethod = "manual"
	UnderWritingMethodBypass    UnderWritingMethod = "bypass"
)

func NewUnderWritingMethodFromString(s string) (UnderWritingMethod, error) {
	switch s {
	case "automatic":
		return UnderWritingMethodAutomatic, nil
	case "manual":
		return UnderWritingMethodManual, nil
	case "bypass":
		return UnderWritingMethodBypass, nil
	}
	var t UnderWritingMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnderWritingMethod) Ptr() *UnderWritingMethod {
	return &u
}

// Underwriting data is used to manage risk orchestration in the boarding application lifecycle.
type UnderwritingData struct {
	Method   UnderWritingMethod `json:"method" url:"method"`
	PolicyId *PolicyId          `json:"policyId,omitempty" url:"policyId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UnderwritingData) GetMethod() UnderWritingMethod {
	if u == nil {
		return ""
	}
	return u.Method
}

func (u *UnderwritingData) GetPolicyId() *PolicyId {
	if u == nil {
		return nil
	}
	return u.PolicyId
}

func (u *UnderwritingData) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UnderwritingData) UnmarshalJSON(data []byte) error {
	type unmarshaler UnderwritingData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnderwritingData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnderwritingData) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Underwriting data is used to manage risk orchestration in the boarding application lifecycle.
type UnderwritingDataResponse struct {
	Method   *UnderWritingMethod `json:"method,omitempty" url:"method,omitempty"`
	PolicyId *PolicyId           `json:"policyId,omitempty" url:"policyId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UnderwritingDataResponse) GetMethod() *UnderWritingMethod {
	if u == nil {
		return nil
	}
	return u.Method
}

func (u *UnderwritingDataResponse) GetPolicyId() *PolicyId {
	if u == nil {
		return nil
	}
	return u.PolicyId
}

func (u *UnderwritingDataResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UnderwritingDataResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UnderwritingDataResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnderwritingDataResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnderwritingDataResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// When `true`, makes the section visible on the application.
type Visible = *bool
