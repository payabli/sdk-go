// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	big "math/big"
)

var (
	listTemplatesRequestFieldFromRecord  = big.NewInt(1 << 0)
	listTemplatesRequestFieldLimitRecord = big.NewInt(1 << 1)
	listTemplatesRequestFieldParameters  = big.NewInt(1 << 2)
	listTemplatesRequestFieldSortBy      = big.NewInt(1 << 3)
)

type ListTemplatesRequest struct {
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `createdAt` (gt, ge, lt, le, eq, ne)
	// - `title` (ct, nct)
	// - `description` (ct, nct)
	// - `code` (ct, nct)
	// - `orgParentname` (ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: title(ct)=hoa return all records with title containing "hoa"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListTemplatesRequest) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesRequest) SetFromRecord(fromRecord *int) {
	l.FromRecord = fromRecord
	l.require(listTemplatesRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesRequest) SetLimitRecord(limitRecord *int) {
	l.LimitRecord = limitRecord
	l.require(listTemplatesRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesRequest) SetParameters(parameters map[string]*string) {
	l.Parameters = parameters
	l.require(listTemplatesRequestFieldParameters)
}

// SetSortBy sets the SortBy field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesRequest) SetSortBy(sortBy *string) {
	l.SortBy = sortBy
	l.require(listTemplatesRequestFieldSortBy)
}

var (
	achAbsorbSectionFieldMultiTier = big.NewInt(1 << 0)
	achAbsorbSectionFieldTiers     = big.NewInt(1 << 1)
	achAbsorbSectionFieldVisible   = big.NewInt(1 << 2)
)

type AchAbsorbSection struct {
	MultiTier *bool            `json:"multiTier,omitempty" url:"multiTier,omitempty"`
	Tiers     []*AchTypesTiers `json:"tiers,omitempty" url:"tiers,omitempty"`
	Visible   *Visible         `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchAbsorbSection) GetMultiTier() *bool {
	if a == nil {
		return nil
	}
	return a.MultiTier
}

func (a *AchAbsorbSection) GetTiers() []*AchTypesTiers {
	if a == nil {
		return nil
	}
	return a.Tiers
}

func (a *AchAbsorbSection) GetVisible() *Visible {
	if a == nil {
		return nil
	}
	return a.Visible
}

func (a *AchAbsorbSection) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchAbsorbSection) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetMultiTier sets the MultiTier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchAbsorbSection) SetMultiTier(multiTier *bool) {
	a.MultiTier = multiTier
	a.require(achAbsorbSectionFieldMultiTier)
}

// SetTiers sets the Tiers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchAbsorbSection) SetTiers(tiers []*AchTypesTiers) {
	a.Tiers = tiers
	a.require(achAbsorbSectionFieldTiers)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchAbsorbSection) SetVisible(visible *Visible) {
	a.Visible = visible
	a.require(achAbsorbSectionFieldVisible)
}

func (a *AchAbsorbSection) UnmarshalJSON(data []byte) error {
	type unmarshaler AchAbsorbSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchAbsorbSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchAbsorbSection) MarshalJSON() ([]byte, error) {
	type embed AchAbsorbSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AchAbsorbSection) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	achAcceptanceElementFieldTypes    = big.NewInt(1 << 0)
	achAcceptanceElementFieldPosCol   = big.NewInt(1 << 1)
	achAcceptanceElementFieldPosRow   = big.NewInt(1 << 2)
	achAcceptanceElementFieldReadOnly = big.NewInt(1 << 3)
	achAcceptanceElementFieldValue    = big.NewInt(1 << 4)
	achAcceptanceElementFieldVisible  = big.NewInt(1 << 5)
)

type AchAcceptanceElement struct {
	Types    *AchTypes       `json:"types,omitempty" url:"types,omitempty"`
	PosCol   *PosCol         `json:"posCol,omitempty" url:"posCol,omitempty"`
	PosRow   *PosRow         `json:"posRow,omitempty" url:"posRow,omitempty"`
	ReadOnly *ReadOnly       `json:"readOnly,omitempty" url:"readOnly,omitempty"`
	Value    *ValueTemplates `json:"value,omitempty" url:"value,omitempty"`
	Visible  *Visible        `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchAcceptanceElement) GetTypes() *AchTypes {
	if a == nil {
		return nil
	}
	return a.Types
}

func (a *AchAcceptanceElement) GetPosCol() *PosCol {
	if a == nil {
		return nil
	}
	return a.PosCol
}

func (a *AchAcceptanceElement) GetPosRow() *PosRow {
	if a == nil {
		return nil
	}
	return a.PosRow
}

func (a *AchAcceptanceElement) GetReadOnly() *ReadOnly {
	if a == nil {
		return nil
	}
	return a.ReadOnly
}

func (a *AchAcceptanceElement) GetValue() *ValueTemplates {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AchAcceptanceElement) GetVisible() *Visible {
	if a == nil {
		return nil
	}
	return a.Visible
}

func (a *AchAcceptanceElement) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchAcceptanceElement) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetTypes sets the Types field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchAcceptanceElement) SetTypes(types *AchTypes) {
	a.Types = types
	a.require(achAcceptanceElementFieldTypes)
}

// SetPosCol sets the PosCol field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchAcceptanceElement) SetPosCol(posCol *PosCol) {
	a.PosCol = posCol
	a.require(achAcceptanceElementFieldPosCol)
}

// SetPosRow sets the PosRow field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchAcceptanceElement) SetPosRow(posRow *PosRow) {
	a.PosRow = posRow
	a.require(achAcceptanceElementFieldPosRow)
}

// SetReadOnly sets the ReadOnly field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchAcceptanceElement) SetReadOnly(readOnly *ReadOnly) {
	a.ReadOnly = readOnly
	a.require(achAcceptanceElementFieldReadOnly)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchAcceptanceElement) SetValue(value *ValueTemplates) {
	a.Value = value
	a.require(achAcceptanceElementFieldValue)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchAcceptanceElement) SetVisible(visible *Visible) {
	a.Visible = visible
	a.require(achAcceptanceElementFieldVisible)
}

func (a *AchAcceptanceElement) UnmarshalJSON(data []byte) error {
	type unmarshaler AchAcceptanceElement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchAcceptanceElement(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchAcceptanceElement) MarshalJSON() ([]byte, error) {
	type embed AchAcceptanceElement
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AchAcceptanceElement) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	achFeeSectionFieldAdvancedSettlementAchFee = big.NewInt(1 << 0)
	achFeeSectionFieldAnnualAchFee             = big.NewInt(1 << 1)
	achFeeSectionFieldChargebackAchFee         = big.NewInt(1 << 2)
	achFeeSectionFieldEarlyTerminationAchFee   = big.NewInt(1 << 3)
	achFeeSectionFieldMonthlyAchFee            = big.NewInt(1 << 4)
	achFeeSectionFieldQuarterlyPciAchFee       = big.NewInt(1 << 5)
	achFeeSectionFieldReturnedAchFee           = big.NewInt(1 << 6)
	achFeeSectionFieldSameDayAchFee            = big.NewInt(1 << 7)
	achFeeSectionFieldSundayOriginationAchFee  = big.NewInt(1 << 8)
	achFeeSectionFieldVerifyBankAchFee         = big.NewInt(1 << 9)
	achFeeSectionFieldVerifyFundAchFee         = big.NewInt(1 << 10)
	achFeeSectionFieldVerifyNegativeAchFee     = big.NewInt(1 << 11)
	achFeeSectionFieldVisible                  = big.NewInt(1 << 12)
)

type AchFeeSection struct {
	AdvancedSettlementAchFee *TemplateElement `json:"advancedSettlementAchFee,omitempty" url:"advancedSettlementAchFee,omitempty"`
	AnnualAchFee             *TemplateElement `json:"annualAchFee,omitempty" url:"annualAchFee,omitempty"`
	ChargebackAchFee         *TemplateElement `json:"chargebackAchFee,omitempty" url:"chargebackAchFee,omitempty"`
	EarlyTerminationAchFee   *TemplateElement `json:"earlyTerminationAchFee,omitempty" url:"earlyTerminationAchFee,omitempty"`
	MonthlyAchFee            *TemplateElement `json:"monthlyAchFee,omitempty" url:"monthlyAchFee,omitempty"`
	QuarterlyPciAchFee       *TemplateElement `json:"quarterlyPCIAchFee,omitempty" url:"quarterlyPCIAchFee,omitempty"`
	ReturnedAchFee           *TemplateElement `json:"returnedAchFee,omitempty" url:"returnedAchFee,omitempty"`
	SameDayAchFee            *TemplateElement `json:"sameDayAchFee,omitempty" url:"sameDayAchFee,omitempty"`
	SundayOriginationAchFee  *TemplateElement `json:"sundayOriginationAchFee,omitempty" url:"sundayOriginationAchFee,omitempty"`
	VerifyBankAchFee         *TemplateElement `json:"verifyBankAchFee,omitempty" url:"verifyBankAchFee,omitempty"`
	VerifyFundAchFee         *TemplateElement `json:"verifyFundAchFee,omitempty" url:"verifyFundAchFee,omitempty"`
	VerifyNegativeAchFee     *TemplateElement `json:"verifyNegativeAchFee,omitempty" url:"verifyNegativeAchFee,omitempty"`
	Visible                  *Visible         `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchFeeSection) GetAdvancedSettlementAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AdvancedSettlementAchFee
}

func (a *AchFeeSection) GetAnnualAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AnnualAchFee
}

func (a *AchFeeSection) GetChargebackAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.ChargebackAchFee
}

func (a *AchFeeSection) GetEarlyTerminationAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.EarlyTerminationAchFee
}

func (a *AchFeeSection) GetMonthlyAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.MonthlyAchFee
}

func (a *AchFeeSection) GetQuarterlyPciAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.QuarterlyPciAchFee
}

func (a *AchFeeSection) GetReturnedAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.ReturnedAchFee
}

func (a *AchFeeSection) GetSameDayAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.SameDayAchFee
}

func (a *AchFeeSection) GetSundayOriginationAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.SundayOriginationAchFee
}

func (a *AchFeeSection) GetVerifyBankAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.VerifyBankAchFee
}

func (a *AchFeeSection) GetVerifyFundAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.VerifyFundAchFee
}

func (a *AchFeeSection) GetVerifyNegativeAchFee() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.VerifyNegativeAchFee
}

func (a *AchFeeSection) GetVisible() *Visible {
	if a == nil {
		return nil
	}
	return a.Visible
}

func (a *AchFeeSection) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchFeeSection) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetAdvancedSettlementAchFee sets the AdvancedSettlementAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetAdvancedSettlementAchFee(advancedSettlementAchFee *TemplateElement) {
	a.AdvancedSettlementAchFee = advancedSettlementAchFee
	a.require(achFeeSectionFieldAdvancedSettlementAchFee)
}

// SetAnnualAchFee sets the AnnualAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetAnnualAchFee(annualAchFee *TemplateElement) {
	a.AnnualAchFee = annualAchFee
	a.require(achFeeSectionFieldAnnualAchFee)
}

// SetChargebackAchFee sets the ChargebackAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetChargebackAchFee(chargebackAchFee *TemplateElement) {
	a.ChargebackAchFee = chargebackAchFee
	a.require(achFeeSectionFieldChargebackAchFee)
}

// SetEarlyTerminationAchFee sets the EarlyTerminationAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetEarlyTerminationAchFee(earlyTerminationAchFee *TemplateElement) {
	a.EarlyTerminationAchFee = earlyTerminationAchFee
	a.require(achFeeSectionFieldEarlyTerminationAchFee)
}

// SetMonthlyAchFee sets the MonthlyAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetMonthlyAchFee(monthlyAchFee *TemplateElement) {
	a.MonthlyAchFee = monthlyAchFee
	a.require(achFeeSectionFieldMonthlyAchFee)
}

// SetQuarterlyPciAchFee sets the QuarterlyPciAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetQuarterlyPciAchFee(quarterlyPciAchFee *TemplateElement) {
	a.QuarterlyPciAchFee = quarterlyPciAchFee
	a.require(achFeeSectionFieldQuarterlyPciAchFee)
}

// SetReturnedAchFee sets the ReturnedAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetReturnedAchFee(returnedAchFee *TemplateElement) {
	a.ReturnedAchFee = returnedAchFee
	a.require(achFeeSectionFieldReturnedAchFee)
}

// SetSameDayAchFee sets the SameDayAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetSameDayAchFee(sameDayAchFee *TemplateElement) {
	a.SameDayAchFee = sameDayAchFee
	a.require(achFeeSectionFieldSameDayAchFee)
}

// SetSundayOriginationAchFee sets the SundayOriginationAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetSundayOriginationAchFee(sundayOriginationAchFee *TemplateElement) {
	a.SundayOriginationAchFee = sundayOriginationAchFee
	a.require(achFeeSectionFieldSundayOriginationAchFee)
}

// SetVerifyBankAchFee sets the VerifyBankAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetVerifyBankAchFee(verifyBankAchFee *TemplateElement) {
	a.VerifyBankAchFee = verifyBankAchFee
	a.require(achFeeSectionFieldVerifyBankAchFee)
}

// SetVerifyFundAchFee sets the VerifyFundAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetVerifyFundAchFee(verifyFundAchFee *TemplateElement) {
	a.VerifyFundAchFee = verifyFundAchFee
	a.require(achFeeSectionFieldVerifyFundAchFee)
}

// SetVerifyNegativeAchFee sets the VerifyNegativeAchFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetVerifyNegativeAchFee(verifyNegativeAchFee *TemplateElement) {
	a.VerifyNegativeAchFee = verifyNegativeAchFee
	a.require(achFeeSectionFieldVerifyNegativeAchFee)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchFeeSection) SetVisible(visible *Visible) {
	a.Visible = visible
	a.require(achFeeSectionFieldVisible)
}

func (a *AchFeeSection) UnmarshalJSON(data []byte) error {
	type unmarshaler AchFeeSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchFeeSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchFeeSection) MarshalJSON() ([]byte, error) {
	type embed AchFeeSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AchFeeSection) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	achPassThroughSectionFieldMultiTier = big.NewInt(1 << 0)
	achPassThroughSectionFieldTiers     = big.NewInt(1 << 1)
	achPassThroughSectionFieldVisible   = big.NewInt(1 << 2)
)

type AchPassThroughSection struct {
	MultiTier *bool           `json:"multiTier,omitempty" url:"multiTier,omitempty"`
	Tiers     []*AchTypesPass `json:"tiers,omitempty" url:"tiers,omitempty"`
	Visible   *Visible        `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchPassThroughSection) GetMultiTier() *bool {
	if a == nil {
		return nil
	}
	return a.MultiTier
}

func (a *AchPassThroughSection) GetTiers() []*AchTypesPass {
	if a == nil {
		return nil
	}
	return a.Tiers
}

func (a *AchPassThroughSection) GetVisible() *Visible {
	if a == nil {
		return nil
	}
	return a.Visible
}

func (a *AchPassThroughSection) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchPassThroughSection) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetMultiTier sets the MultiTier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchPassThroughSection) SetMultiTier(multiTier *bool) {
	a.MultiTier = multiTier
	a.require(achPassThroughSectionFieldMultiTier)
}

// SetTiers sets the Tiers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchPassThroughSection) SetTiers(tiers []*AchTypesPass) {
	a.Tiers = tiers
	a.require(achPassThroughSectionFieldTiers)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchPassThroughSection) SetVisible(visible *Visible) {
	a.Visible = visible
	a.require(achPassThroughSectionFieldVisible)
}

func (a *AchPassThroughSection) UnmarshalJSON(data []byte) error {
	type unmarshaler AchPassThroughSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchPassThroughSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchPassThroughSection) MarshalJSON() ([]byte, error) {
	type embed AchPassThroughSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AchPassThroughSection) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	achServiceFieldAchAbsorb             = big.NewInt(1 << 0)
	achServiceFieldAchAbsorbHighPayRange = big.NewInt(1 << 1)
	achServiceFieldAchAbsorbLowPayRange  = big.NewInt(1 << 2)
	achServiceFieldAchAcceptance         = big.NewInt(1 << 3)
	achServiceFieldAchFees               = big.NewInt(1 << 4)
	achServiceFieldAchPassHighPayRange   = big.NewInt(1 << 5)
	achServiceFieldAchPassLowPayRange    = big.NewInt(1 << 6)
	achServiceFieldAchPassThrough        = big.NewInt(1 << 7)
	achServiceFieldBatchCutoffTime       = big.NewInt(1 << 8)
	achServiceFieldDiscountFrequency     = big.NewInt(1 << 9)
	achServiceFieldFundingRollup         = big.NewInt(1 << 10)
	achServiceFieldGateway               = big.NewInt(1 << 11)
	achServiceFieldPdfTemplateId         = big.NewInt(1 << 12)
	achServiceFieldPricingPlan           = big.NewInt(1 << 13)
	achServiceFieldPricingType           = big.NewInt(1 << 14)
	achServiceFieldProcessor             = big.NewInt(1 << 15)
	achServiceFieldProvider              = big.NewInt(1 << 16)
	achServiceFieldTierName              = big.NewInt(1 << 17)
	achServiceFieldVisible               = big.NewInt(1 << 18)
)

type AchService struct {
	AchAbsorb             *AchAbsorbSection      `json:"achAbsorb,omitempty" url:"achAbsorb,omitempty"`
	AchAbsorbHighPayRange *TemplateElement       `json:"achAbsorb_highPayRange,omitempty" url:"achAbsorb_highPayRange,omitempty"`
	AchAbsorbLowPayRange  *TemplateElement       `json:"achAbsorb_lowPayRange,omitempty" url:"achAbsorb_lowPayRange,omitempty"`
	AchAcceptance         *AchAcceptanceElement  `json:"achAcceptance,omitempty" url:"achAcceptance,omitempty"`
	AchFees               *AchFeeSection         `json:"achFees,omitempty" url:"achFees,omitempty"`
	AchPassHighPayRange   *TemplateElement       `json:"achPass_highPayRange,omitempty" url:"achPass_highPayRange,omitempty"`
	AchPassLowPayRange    *TemplateElement       `json:"achPass_lowPayRange,omitempty" url:"achPass_lowPayRange,omitempty"`
	AchPassThrough        *AchPassThroughSection `json:"achPassThrough,omitempty" url:"achPassThrough,omitempty"`
	// Controls how to present the `batchCutoffTime` field on the application. If this field isn't sent, batch cut off time defaults to 5 ET.
	BatchCutoffTime   *TemplateElement `json:"batchCutoffTime,omitempty" url:"batchCutoffTime,omitempty"`
	DiscountFrequency *TemplateElement `json:"discountFrequency,omitempty" url:"discountFrequency,omitempty"`
	FundingRollup     *TemplateElement `json:"fundingRollup,omitempty" url:"fundingRollup,omitempty"`
	Gateway           *TemplateElement `json:"gateway,omitempty" url:"gateway,omitempty"`
	PdfTemplateId     *TemplateElement `json:"pdfTemplateId,omitempty" url:"pdfTemplateId,omitempty"`
	PricingPlan       *int64           `json:"pricingPlan,omitempty" url:"pricingPlan,omitempty"`
	PricingType       *TemplateElement `json:"pricingType,omitempty" url:"pricingType,omitempty"`
	Processor         *TemplateElement `json:"processor,omitempty" url:"processor,omitempty"`
	Provider          *TemplateElement `json:"provider,omitempty" url:"provider,omitempty"`
	TierName          *TemplateElement `json:"tierName,omitempty" url:"tierName,omitempty"`
	Visible           *Visible         `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchService) GetAchAbsorb() *AchAbsorbSection {
	if a == nil {
		return nil
	}
	return a.AchAbsorb
}

func (a *AchService) GetAchAbsorbHighPayRange() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AchAbsorbHighPayRange
}

func (a *AchService) GetAchAbsorbLowPayRange() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AchAbsorbLowPayRange
}

func (a *AchService) GetAchAcceptance() *AchAcceptanceElement {
	if a == nil {
		return nil
	}
	return a.AchAcceptance
}

func (a *AchService) GetAchFees() *AchFeeSection {
	if a == nil {
		return nil
	}
	return a.AchFees
}

func (a *AchService) GetAchPassHighPayRange() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AchPassHighPayRange
}

func (a *AchService) GetAchPassLowPayRange() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.AchPassLowPayRange
}

func (a *AchService) GetAchPassThrough() *AchPassThroughSection {
	if a == nil {
		return nil
	}
	return a.AchPassThrough
}

func (a *AchService) GetBatchCutoffTime() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.BatchCutoffTime
}

func (a *AchService) GetDiscountFrequency() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.DiscountFrequency
}

func (a *AchService) GetFundingRollup() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.FundingRollup
}

func (a *AchService) GetGateway() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.Gateway
}

func (a *AchService) GetPdfTemplateId() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.PdfTemplateId
}

func (a *AchService) GetPricingPlan() *int64 {
	if a == nil {
		return nil
	}
	return a.PricingPlan
}

func (a *AchService) GetPricingType() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.PricingType
}

func (a *AchService) GetProcessor() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.Processor
}

func (a *AchService) GetProvider() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.Provider
}

func (a *AchService) GetTierName() *TemplateElement {
	if a == nil {
		return nil
	}
	return a.TierName
}

func (a *AchService) GetVisible() *Visible {
	if a == nil {
		return nil
	}
	return a.Visible
}

func (a *AchService) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchService) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetAchAbsorb sets the AchAbsorb field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetAchAbsorb(achAbsorb *AchAbsorbSection) {
	a.AchAbsorb = achAbsorb
	a.require(achServiceFieldAchAbsorb)
}

// SetAchAbsorbHighPayRange sets the AchAbsorbHighPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetAchAbsorbHighPayRange(achAbsorbHighPayRange *TemplateElement) {
	a.AchAbsorbHighPayRange = achAbsorbHighPayRange
	a.require(achServiceFieldAchAbsorbHighPayRange)
}

// SetAchAbsorbLowPayRange sets the AchAbsorbLowPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetAchAbsorbLowPayRange(achAbsorbLowPayRange *TemplateElement) {
	a.AchAbsorbLowPayRange = achAbsorbLowPayRange
	a.require(achServiceFieldAchAbsorbLowPayRange)
}

// SetAchAcceptance sets the AchAcceptance field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetAchAcceptance(achAcceptance *AchAcceptanceElement) {
	a.AchAcceptance = achAcceptance
	a.require(achServiceFieldAchAcceptance)
}

// SetAchFees sets the AchFees field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetAchFees(achFees *AchFeeSection) {
	a.AchFees = achFees
	a.require(achServiceFieldAchFees)
}

// SetAchPassHighPayRange sets the AchPassHighPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetAchPassHighPayRange(achPassHighPayRange *TemplateElement) {
	a.AchPassHighPayRange = achPassHighPayRange
	a.require(achServiceFieldAchPassHighPayRange)
}

// SetAchPassLowPayRange sets the AchPassLowPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetAchPassLowPayRange(achPassLowPayRange *TemplateElement) {
	a.AchPassLowPayRange = achPassLowPayRange
	a.require(achServiceFieldAchPassLowPayRange)
}

// SetAchPassThrough sets the AchPassThrough field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetAchPassThrough(achPassThrough *AchPassThroughSection) {
	a.AchPassThrough = achPassThrough
	a.require(achServiceFieldAchPassThrough)
}

// SetBatchCutoffTime sets the BatchCutoffTime field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetBatchCutoffTime(batchCutoffTime *TemplateElement) {
	a.BatchCutoffTime = batchCutoffTime
	a.require(achServiceFieldBatchCutoffTime)
}

// SetDiscountFrequency sets the DiscountFrequency field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetDiscountFrequency(discountFrequency *TemplateElement) {
	a.DiscountFrequency = discountFrequency
	a.require(achServiceFieldDiscountFrequency)
}

// SetFundingRollup sets the FundingRollup field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetFundingRollup(fundingRollup *TemplateElement) {
	a.FundingRollup = fundingRollup
	a.require(achServiceFieldFundingRollup)
}

// SetGateway sets the Gateway field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetGateway(gateway *TemplateElement) {
	a.Gateway = gateway
	a.require(achServiceFieldGateway)
}

// SetPdfTemplateId sets the PdfTemplateId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetPdfTemplateId(pdfTemplateId *TemplateElement) {
	a.PdfTemplateId = pdfTemplateId
	a.require(achServiceFieldPdfTemplateId)
}

// SetPricingPlan sets the PricingPlan field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetPricingPlan(pricingPlan *int64) {
	a.PricingPlan = pricingPlan
	a.require(achServiceFieldPricingPlan)
}

// SetPricingType sets the PricingType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetPricingType(pricingType *TemplateElement) {
	a.PricingType = pricingType
	a.require(achServiceFieldPricingType)
}

// SetProcessor sets the Processor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetProcessor(processor *TemplateElement) {
	a.Processor = processor
	a.require(achServiceFieldProcessor)
}

// SetProvider sets the Provider field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetProvider(provider *TemplateElement) {
	a.Provider = provider
	a.require(achServiceFieldProvider)
}

// SetTierName sets the TierName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetTierName(tierName *TemplateElement) {
	a.TierName = tierName
	a.require(achServiceFieldTierName)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchService) SetVisible(visible *Visible) {
	a.Visible = visible
	a.require(achServiceFieldVisible)
}

func (a *AchService) UnmarshalJSON(data []byte) error {
	type unmarshaler AchService
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchService(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchService) MarshalJSON() ([]byte, error) {
	type embed AchService
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AchService) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	achTypesFieldCcd = big.NewInt(1 << 0)
	achTypesFieldPpd = big.NewInt(1 << 1)
	achTypesFieldWeb = big.NewInt(1 << 2)
)

type AchTypes struct {
	Ccd *BasicTemplateElement `json:"ccd,omitempty" url:"ccd,omitempty"`
	Ppd *BasicTemplateElement `json:"ppd,omitempty" url:"ppd,omitempty"`
	Web *BasicTemplateElement `json:"web,omitempty" url:"web,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchTypes) GetCcd() *BasicTemplateElement {
	if a == nil {
		return nil
	}
	return a.Ccd
}

func (a *AchTypes) GetPpd() *BasicTemplateElement {
	if a == nil {
		return nil
	}
	return a.Ppd
}

func (a *AchTypes) GetWeb() *BasicTemplateElement {
	if a == nil {
		return nil
	}
	return a.Web
}

func (a *AchTypes) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchTypes) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetCcd sets the Ccd field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchTypes) SetCcd(ccd *BasicTemplateElement) {
	a.Ccd = ccd
	a.require(achTypesFieldCcd)
}

// SetPpd sets the Ppd field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchTypes) SetPpd(ppd *BasicTemplateElement) {
	a.Ppd = ppd
	a.require(achTypesFieldPpd)
}

// SetWeb sets the Web field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchTypes) SetWeb(web *BasicTemplateElement) {
	a.Web = web
	a.require(achTypesFieldWeb)
}

func (a *AchTypes) UnmarshalJSON(data []byte) error {
	type unmarshaler AchTypes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchTypes(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchTypes) MarshalJSON() ([]byte, error) {
	type embed AchTypes
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AchTypes) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	achTypesPassFieldCcd = big.NewInt(1 << 0)
	achTypesPassFieldPpd = big.NewInt(1 << 1)
	achTypesPassFieldWeb = big.NewInt(1 << 2)
)

type AchTypesPass struct {
	Ccd *TierItemPass `json:"ccd,omitempty" url:"ccd,omitempty"`
	Ppd *TierItemPass `json:"ppd,omitempty" url:"ppd,omitempty"`
	Web *TierItemPass `json:"web,omitempty" url:"web,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchTypesPass) GetCcd() *TierItemPass {
	if a == nil {
		return nil
	}
	return a.Ccd
}

func (a *AchTypesPass) GetPpd() *TierItemPass {
	if a == nil {
		return nil
	}
	return a.Ppd
}

func (a *AchTypesPass) GetWeb() *TierItemPass {
	if a == nil {
		return nil
	}
	return a.Web
}

func (a *AchTypesPass) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchTypesPass) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetCcd sets the Ccd field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchTypesPass) SetCcd(ccd *TierItemPass) {
	a.Ccd = ccd
	a.require(achTypesPassFieldCcd)
}

// SetPpd sets the Ppd field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchTypesPass) SetPpd(ppd *TierItemPass) {
	a.Ppd = ppd
	a.require(achTypesPassFieldPpd)
}

// SetWeb sets the Web field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchTypesPass) SetWeb(web *TierItemPass) {
	a.Web = web
	a.require(achTypesPassFieldWeb)
}

func (a *AchTypesPass) UnmarshalJSON(data []byte) error {
	type unmarshaler AchTypesPass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchTypesPass(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchTypesPass) MarshalJSON() ([]byte, error) {
	type embed AchTypesPass
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AchTypesPass) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	achTypesTiersFieldCcd = big.NewInt(1 << 0)
	achTypesTiersFieldPpd = big.NewInt(1 << 1)
	achTypesTiersFieldWeb = big.NewInt(1 << 2)
)

type AchTypesTiers struct {
	Ccd *TierItem `json:"ccd,omitempty" url:"ccd,omitempty"`
	Ppd *TierItem `json:"ppd,omitempty" url:"ppd,omitempty"`
	Web *TierItem `json:"web,omitempty" url:"web,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchTypesTiers) GetCcd() *TierItem {
	if a == nil {
		return nil
	}
	return a.Ccd
}

func (a *AchTypesTiers) GetPpd() *TierItem {
	if a == nil {
		return nil
	}
	return a.Ppd
}

func (a *AchTypesTiers) GetWeb() *TierItem {
	if a == nil {
		return nil
	}
	return a.Web
}

func (a *AchTypesTiers) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchTypesTiers) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetCcd sets the Ccd field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchTypesTiers) SetCcd(ccd *TierItem) {
	a.Ccd = ccd
	a.require(achTypesTiersFieldCcd)
}

// SetPpd sets the Ppd field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchTypesTiers) SetPpd(ppd *TierItem) {
	a.Ppd = ppd
	a.require(achTypesTiersFieldPpd)
}

// SetWeb sets the Web field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AchTypesTiers) SetWeb(web *TierItem) {
	a.Web = web
	a.require(achTypesTiersFieldWeb)
}

func (a *AchTypesTiers) UnmarshalJSON(data []byte) error {
	type unmarshaler AchTypesTiers
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchTypesTiers(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchTypesTiers) MarshalJSON() ([]byte, error) {
	type embed AchTypesTiers
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AchTypesTiers) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Details about a bank account.
var (
	bankSectionFieldVisible       = big.NewInt(1 << 0)
	bankSectionFieldAccountNumber = big.NewInt(1 << 1)
	bankSectionFieldAccountType   = big.NewInt(1 << 2)
	bankSectionFieldBankName      = big.NewInt(1 << 3)
	bankSectionFieldRoutingNumber = big.NewInt(1 << 4)
)

type BankSection struct {
	Visible       *Visible         `json:"visible,omitempty" url:"visible,omitempty"`
	AccountNumber *TemplateElement `json:"accountNumber,omitempty" url:"accountNumber,omitempty"`
	AccountType   *TemplateElement `json:"accountType,omitempty" url:"accountType,omitempty"`
	BankName      *TemplateElement `json:"bankName,omitempty" url:"bankName,omitempty"`
	RoutingNumber *TemplateElement `json:"routingNumber,omitempty" url:"routingNumber,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankSection) GetVisible() *Visible {
	if b == nil {
		return nil
	}
	return b.Visible
}

func (b *BankSection) GetAccountNumber() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.AccountNumber
}

func (b *BankSection) GetAccountType() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.AccountType
}

func (b *BankSection) GetBankName() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.BankName
}

func (b *BankSection) GetRoutingNumber() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.RoutingNumber
}

func (b *BankSection) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankSection) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BankSection) SetVisible(visible *Visible) {
	b.Visible = visible
	b.require(bankSectionFieldVisible)
}

// SetAccountNumber sets the AccountNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BankSection) SetAccountNumber(accountNumber *TemplateElement) {
	b.AccountNumber = accountNumber
	b.require(bankSectionFieldAccountNumber)
}

// SetAccountType sets the AccountType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BankSection) SetAccountType(accountType *TemplateElement) {
	b.AccountType = accountType
	b.require(bankSectionFieldAccountType)
}

// SetBankName sets the BankName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BankSection) SetBankName(bankName *TemplateElement) {
	b.BankName = bankName
	b.require(bankSectionFieldBankName)
}

// SetRoutingNumber sets the RoutingNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BankSection) SetRoutingNumber(routingNumber *TemplateElement) {
	b.RoutingNumber = routingNumber
	b.require(bankSectionFieldRoutingNumber)
}

func (b *BankSection) UnmarshalJSON(data []byte) error {
	type unmarshaler BankSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BankSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankSection) MarshalJSON() ([]byte, error) {
	type embed BankSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BankSection) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	basicTemplateElementFieldReadOnly = big.NewInt(1 << 0)
	basicTemplateElementFieldRequired = big.NewInt(1 << 1)
	basicTemplateElementFieldVisible  = big.NewInt(1 << 2)
)

type BasicTemplateElement struct {
	ReadOnly *ReadOnly        `json:"readOnly,omitempty" url:"readOnly,omitempty"`
	Required *RequiredElement `json:"required,omitempty" url:"required,omitempty"`
	Visible  *Visible         `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BasicTemplateElement) GetReadOnly() *ReadOnly {
	if b == nil {
		return nil
	}
	return b.ReadOnly
}

func (b *BasicTemplateElement) GetRequired() *RequiredElement {
	if b == nil {
		return nil
	}
	return b.Required
}

func (b *BasicTemplateElement) GetVisible() *Visible {
	if b == nil {
		return nil
	}
	return b.Visible
}

func (b *BasicTemplateElement) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicTemplateElement) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetReadOnly sets the ReadOnly field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicTemplateElement) SetReadOnly(readOnly *ReadOnly) {
	b.ReadOnly = readOnly
	b.require(basicTemplateElementFieldReadOnly)
}

// SetRequired sets the Required field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicTemplateElement) SetRequired(required *RequiredElement) {
	b.Required = required
	b.require(basicTemplateElementFieldRequired)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicTemplateElement) SetVisible(visible *Visible) {
	b.Visible = visible
	b.require(basicTemplateElementFieldVisible)
}

func (b *BasicTemplateElement) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicTemplateElement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicTemplateElement(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicTemplateElement) MarshalJSON() ([]byte, error) {
	type embed BasicTemplateElement
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BasicTemplateElement) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	boardingLinkApiResponseFieldResponseData = big.NewInt(1 << 0)
	boardingLinkApiResponseFieldResponseText = big.NewInt(1 << 1)
)

type BoardingLinkApiResponse struct {
	// Reference name for boarding link (if responseText = Success) or
	// List of empty fields separated by comma (if responseText = Fail)
	ResponseData *string      `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText ResponseText `json:"responseText" url:"responseText"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BoardingLinkApiResponse) GetResponseData() *string {
	if b == nil {
		return nil
	}
	return b.ResponseData
}

func (b *BoardingLinkApiResponse) GetResponseText() ResponseText {
	if b == nil {
		return ""
	}
	return b.ResponseText
}

func (b *BoardingLinkApiResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BoardingLinkApiResponse) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetResponseData sets the ResponseData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingLinkApiResponse) SetResponseData(responseData *string) {
	b.ResponseData = responseData
	b.require(boardingLinkApiResponseFieldResponseData)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingLinkApiResponse) SetResponseText(responseText ResponseText) {
	b.ResponseText = responseText
	b.require(boardingLinkApiResponseFieldResponseText)
}

func (b *BoardingLinkApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BoardingLinkApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BoardingLinkApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BoardingLinkApiResponse) MarshalJSON() ([]byte, error) {
	type embed BoardingLinkApiResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BoardingLinkApiResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	boardingQueryLinksFieldAcceptOauth         = big.NewInt(1 << 0)
	boardingQueryLinksFieldAcceptRegister      = big.NewInt(1 << 1)
	boardingQueryLinksFieldEntryAttributes     = big.NewInt(1 << 2)
	boardingQueryLinksFieldId                  = big.NewInt(1 << 3)
	boardingQueryLinksFieldLastUpdated         = big.NewInt(1 << 4)
	boardingQueryLinksFieldOrgParentName       = big.NewInt(1 << 5)
	boardingQueryLinksFieldReferenceName       = big.NewInt(1 << 6)
	boardingQueryLinksFieldReferenceTemplateId = big.NewInt(1 << 7)
	boardingQueryLinksFieldTemplateCode        = big.NewInt(1 << 8)
	boardingQueryLinksFieldTemplateName        = big.NewInt(1 << 9)
)

type BoardingQueryLinks struct {
	AcceptOauth         *AcceptOauth         `json:"acceptOauth,omitempty" url:"acceptOauth,omitempty"`
	AcceptRegister      *AcceptRegister      `json:"acceptRegister,omitempty" url:"acceptRegister,omitempty"`
	EntryAttributes     *EntryAttributes     `json:"entryAttributes,omitempty" url:"entryAttributes,omitempty"`
	Id                  *BoardingLinkId      `json:"id,omitempty" url:"id,omitempty"`
	LastUpdated         *LastModified        `json:"lastUpdated,omitempty" url:"lastUpdated,omitempty"`
	OrgParentName       *OrgParentName       `json:"orgParentName,omitempty" url:"orgParentName,omitempty"`
	ReferenceName       *ReferenceName       `json:"referenceName,omitempty" url:"referenceName,omitempty"`
	ReferenceTemplateId *ReferenceTemplateId `json:"referenceTemplateId,omitempty" url:"referenceTemplateId,omitempty"`
	TemplateCode        *TemplateCode        `json:"templateCode,omitempty" url:"templateCode,omitempty"`
	TemplateName        *TemplateName        `json:"templateName,omitempty" url:"templateName,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BoardingQueryLinks) GetAcceptOauth() *AcceptOauth {
	if b == nil {
		return nil
	}
	return b.AcceptOauth
}

func (b *BoardingQueryLinks) GetAcceptRegister() *AcceptRegister {
	if b == nil {
		return nil
	}
	return b.AcceptRegister
}

func (b *BoardingQueryLinks) GetEntryAttributes() *EntryAttributes {
	if b == nil {
		return nil
	}
	return b.EntryAttributes
}

func (b *BoardingQueryLinks) GetId() *BoardingLinkId {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *BoardingQueryLinks) GetLastUpdated() *LastModified {
	if b == nil {
		return nil
	}
	return b.LastUpdated
}

func (b *BoardingQueryLinks) GetOrgParentName() *OrgParentName {
	if b == nil {
		return nil
	}
	return b.OrgParentName
}

func (b *BoardingQueryLinks) GetReferenceName() *ReferenceName {
	if b == nil {
		return nil
	}
	return b.ReferenceName
}

func (b *BoardingQueryLinks) GetReferenceTemplateId() *ReferenceTemplateId {
	if b == nil {
		return nil
	}
	return b.ReferenceTemplateId
}

func (b *BoardingQueryLinks) GetTemplateCode() *TemplateCode {
	if b == nil {
		return nil
	}
	return b.TemplateCode
}

func (b *BoardingQueryLinks) GetTemplateName() *TemplateName {
	if b == nil {
		return nil
	}
	return b.TemplateName
}

func (b *BoardingQueryLinks) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BoardingQueryLinks) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetAcceptOauth sets the AcceptOauth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingQueryLinks) SetAcceptOauth(acceptOauth *AcceptOauth) {
	b.AcceptOauth = acceptOauth
	b.require(boardingQueryLinksFieldAcceptOauth)
}

// SetAcceptRegister sets the AcceptRegister field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingQueryLinks) SetAcceptRegister(acceptRegister *AcceptRegister) {
	b.AcceptRegister = acceptRegister
	b.require(boardingQueryLinksFieldAcceptRegister)
}

// SetEntryAttributes sets the EntryAttributes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingQueryLinks) SetEntryAttributes(entryAttributes *EntryAttributes) {
	b.EntryAttributes = entryAttributes
	b.require(boardingQueryLinksFieldEntryAttributes)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingQueryLinks) SetId(id *BoardingLinkId) {
	b.Id = id
	b.require(boardingQueryLinksFieldId)
}

// SetLastUpdated sets the LastUpdated field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingQueryLinks) SetLastUpdated(lastUpdated *LastModified) {
	b.LastUpdated = lastUpdated
	b.require(boardingQueryLinksFieldLastUpdated)
}

// SetOrgParentName sets the OrgParentName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingQueryLinks) SetOrgParentName(orgParentName *OrgParentName) {
	b.OrgParentName = orgParentName
	b.require(boardingQueryLinksFieldOrgParentName)
}

// SetReferenceName sets the ReferenceName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingQueryLinks) SetReferenceName(referenceName *ReferenceName) {
	b.ReferenceName = referenceName
	b.require(boardingQueryLinksFieldReferenceName)
}

// SetReferenceTemplateId sets the ReferenceTemplateId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingQueryLinks) SetReferenceTemplateId(referenceTemplateId *ReferenceTemplateId) {
	b.ReferenceTemplateId = referenceTemplateId
	b.require(boardingQueryLinksFieldReferenceTemplateId)
}

// SetTemplateCode sets the TemplateCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingQueryLinks) SetTemplateCode(templateCode *TemplateCode) {
	b.TemplateCode = templateCode
	b.require(boardingQueryLinksFieldTemplateCode)
}

// SetTemplateName sets the TemplateName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BoardingQueryLinks) SetTemplateName(templateName *TemplateName) {
	b.TemplateName = templateName
	b.require(boardingQueryLinksFieldTemplateName)
}

func (b *BoardingQueryLinks) UnmarshalJSON(data []byte) error {
	type unmarshaler BoardingQueryLinks
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BoardingQueryLinks(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BoardingQueryLinks) MarshalJSON() ([]byte, error) {
	type embed BoardingQueryLinks
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BoardingQueryLinks) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Details about a business.
var (
	businessSectionFieldBaddress       = big.NewInt(1 << 0)
	businessSectionFieldBaddress1      = big.NewInt(1 << 1)
	businessSectionFieldBcity          = big.NewInt(1 << 2)
	businessSectionFieldBcountry       = big.NewInt(1 << 3)
	businessSectionFieldBstate         = big.NewInt(1 << 4)
	businessSectionFieldBtype          = big.NewInt(1 << 5)
	businessSectionFieldBzip           = big.NewInt(1 << 6)
	businessSectionFieldDbaname        = big.NewInt(1 << 7)
	businessSectionFieldEin            = big.NewInt(1 << 8)
	businessSectionFieldFaxnumber      = big.NewInt(1 << 9)
	businessSectionFieldLegalname      = big.NewInt(1 << 10)
	businessSectionFieldLicense        = big.NewInt(1 << 11)
	businessSectionFieldLicstate       = big.NewInt(1 << 12)
	businessSectionFieldMaddress       = big.NewInt(1 << 13)
	businessSectionFieldMaddress1      = big.NewInt(1 << 14)
	businessSectionFieldMcity          = big.NewInt(1 << 15)
	businessSectionFieldMcountry       = big.NewInt(1 << 16)
	businessSectionFieldMstate         = big.NewInt(1 << 17)
	businessSectionFieldMzip           = big.NewInt(1 << 18)
	businessSectionFieldPhonenumber    = big.NewInt(1 << 19)
	businessSectionFieldStartdate      = big.NewInt(1 << 20)
	businessSectionFieldTaxfillname    = big.NewInt(1 << 21)
	businessSectionFieldVisible        = big.NewInt(1 << 22)
	businessSectionFieldWebsite        = big.NewInt(1 << 23)
	businessSectionFieldAdditionalData = big.NewInt(1 << 24)
)

type BusinessSection struct {
	Baddress       *TemplateElement               `json:"baddress,omitempty" url:"baddress,omitempty"`
	Baddress1      *TemplateElement               `json:"baddress1,omitempty" url:"baddress1,omitempty"`
	Bcity          *TemplateElement               `json:"bcity,omitempty" url:"bcity,omitempty"`
	Bcountry       *TemplateElement               `json:"bcountry,omitempty" url:"bcountry,omitempty"`
	Bstate         *TemplateElement               `json:"bstate,omitempty" url:"bstate,omitempty"`
	Btype          *TemplateElement               `json:"btype,omitempty" url:"btype,omitempty"`
	Bzip           *TemplateElement               `json:"bzip,omitempty" url:"bzip,omitempty"`
	Dbaname        *TemplateElement               `json:"dbaname,omitempty" url:"dbaname,omitempty"`
	Ein            *TemplateElement               `json:"ein,omitempty" url:"ein,omitempty"`
	Faxnumber      *TemplateElement               `json:"faxnumber,omitempty" url:"faxnumber,omitempty"`
	Legalname      *TemplateElement               `json:"legalname,omitempty" url:"legalname,omitempty"`
	License        *TemplateElement               `json:"license,omitempty" url:"license,omitempty"`
	Licstate       *TemplateElement               `json:"licstate,omitempty" url:"licstate,omitempty"`
	Maddress       *TemplateElement               `json:"maddress,omitempty" url:"maddress,omitempty"`
	Maddress1      *TemplateElement               `json:"maddress1,omitempty" url:"maddress1,omitempty"`
	Mcity          *TemplateElement               `json:"mcity,omitempty" url:"mcity,omitempty"`
	Mcountry       *TemplateElement               `json:"mcountry,omitempty" url:"mcountry,omitempty"`
	Mstate         *TemplateElement               `json:"mstate,omitempty" url:"mstate,omitempty"`
	Mzip           *TemplateElement               `json:"mzip,omitempty" url:"mzip,omitempty"`
	Phonenumber    *TemplateElement               `json:"phonenumber,omitempty" url:"phonenumber,omitempty"`
	Startdate      *TemplateElement               `json:"startdate,omitempty" url:"startdate,omitempty"`
	Taxfillname    *TemplateElement               `json:"taxfillname,omitempty" url:"taxfillname,omitempty"`
	Visible        *Visible                       `json:"visible,omitempty" url:"visible,omitempty"`
	Website        *TemplateElement               `json:"website,omitempty" url:"website,omitempty"`
	AdditionalData *TemplateAdditionalDataSection `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BusinessSection) GetBaddress() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Baddress
}

func (b *BusinessSection) GetBaddress1() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Baddress1
}

func (b *BusinessSection) GetBcity() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Bcity
}

func (b *BusinessSection) GetBcountry() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Bcountry
}

func (b *BusinessSection) GetBstate() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Bstate
}

func (b *BusinessSection) GetBtype() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Btype
}

func (b *BusinessSection) GetBzip() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Bzip
}

func (b *BusinessSection) GetDbaname() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Dbaname
}

func (b *BusinessSection) GetEin() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Ein
}

func (b *BusinessSection) GetFaxnumber() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Faxnumber
}

func (b *BusinessSection) GetLegalname() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Legalname
}

func (b *BusinessSection) GetLicense() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.License
}

func (b *BusinessSection) GetLicstate() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Licstate
}

func (b *BusinessSection) GetMaddress() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Maddress
}

func (b *BusinessSection) GetMaddress1() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Maddress1
}

func (b *BusinessSection) GetMcity() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Mcity
}

func (b *BusinessSection) GetMcountry() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Mcountry
}

func (b *BusinessSection) GetMstate() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Mstate
}

func (b *BusinessSection) GetMzip() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Mzip
}

func (b *BusinessSection) GetPhonenumber() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Phonenumber
}

func (b *BusinessSection) GetStartdate() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Startdate
}

func (b *BusinessSection) GetTaxfillname() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Taxfillname
}

func (b *BusinessSection) GetVisible() *Visible {
	if b == nil {
		return nil
	}
	return b.Visible
}

func (b *BusinessSection) GetWebsite() *TemplateElement {
	if b == nil {
		return nil
	}
	return b.Website
}

func (b *BusinessSection) GetAdditionalData() *TemplateAdditionalDataSection {
	if b == nil {
		return nil
	}
	return b.AdditionalData
}

func (b *BusinessSection) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BusinessSection) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetBaddress sets the Baddress field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetBaddress(baddress *TemplateElement) {
	b.Baddress = baddress
	b.require(businessSectionFieldBaddress)
}

// SetBaddress1 sets the Baddress1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetBaddress1(baddress1 *TemplateElement) {
	b.Baddress1 = baddress1
	b.require(businessSectionFieldBaddress1)
}

// SetBcity sets the Bcity field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetBcity(bcity *TemplateElement) {
	b.Bcity = bcity
	b.require(businessSectionFieldBcity)
}

// SetBcountry sets the Bcountry field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetBcountry(bcountry *TemplateElement) {
	b.Bcountry = bcountry
	b.require(businessSectionFieldBcountry)
}

// SetBstate sets the Bstate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetBstate(bstate *TemplateElement) {
	b.Bstate = bstate
	b.require(businessSectionFieldBstate)
}

// SetBtype sets the Btype field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetBtype(btype *TemplateElement) {
	b.Btype = btype
	b.require(businessSectionFieldBtype)
}

// SetBzip sets the Bzip field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetBzip(bzip *TemplateElement) {
	b.Bzip = bzip
	b.require(businessSectionFieldBzip)
}

// SetDbaname sets the Dbaname field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetDbaname(dbaname *TemplateElement) {
	b.Dbaname = dbaname
	b.require(businessSectionFieldDbaname)
}

// SetEin sets the Ein field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetEin(ein *TemplateElement) {
	b.Ein = ein
	b.require(businessSectionFieldEin)
}

// SetFaxnumber sets the Faxnumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetFaxnumber(faxnumber *TemplateElement) {
	b.Faxnumber = faxnumber
	b.require(businessSectionFieldFaxnumber)
}

// SetLegalname sets the Legalname field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetLegalname(legalname *TemplateElement) {
	b.Legalname = legalname
	b.require(businessSectionFieldLegalname)
}

// SetLicense sets the License field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetLicense(license *TemplateElement) {
	b.License = license
	b.require(businessSectionFieldLicense)
}

// SetLicstate sets the Licstate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetLicstate(licstate *TemplateElement) {
	b.Licstate = licstate
	b.require(businessSectionFieldLicstate)
}

// SetMaddress sets the Maddress field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetMaddress(maddress *TemplateElement) {
	b.Maddress = maddress
	b.require(businessSectionFieldMaddress)
}

// SetMaddress1 sets the Maddress1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetMaddress1(maddress1 *TemplateElement) {
	b.Maddress1 = maddress1
	b.require(businessSectionFieldMaddress1)
}

// SetMcity sets the Mcity field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetMcity(mcity *TemplateElement) {
	b.Mcity = mcity
	b.require(businessSectionFieldMcity)
}

// SetMcountry sets the Mcountry field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetMcountry(mcountry *TemplateElement) {
	b.Mcountry = mcountry
	b.require(businessSectionFieldMcountry)
}

// SetMstate sets the Mstate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetMstate(mstate *TemplateElement) {
	b.Mstate = mstate
	b.require(businessSectionFieldMstate)
}

// SetMzip sets the Mzip field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetMzip(mzip *TemplateElement) {
	b.Mzip = mzip
	b.require(businessSectionFieldMzip)
}

// SetPhonenumber sets the Phonenumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetPhonenumber(phonenumber *TemplateElement) {
	b.Phonenumber = phonenumber
	b.require(businessSectionFieldPhonenumber)
}

// SetStartdate sets the Startdate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetStartdate(startdate *TemplateElement) {
	b.Startdate = startdate
	b.require(businessSectionFieldStartdate)
}

// SetTaxfillname sets the Taxfillname field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetTaxfillname(taxfillname *TemplateElement) {
	b.Taxfillname = taxfillname
	b.require(businessSectionFieldTaxfillname)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetVisible(visible *Visible) {
	b.Visible = visible
	b.require(businessSectionFieldVisible)
}

// SetWebsite sets the Website field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetWebsite(website *TemplateElement) {
	b.Website = website
	b.require(businessSectionFieldWebsite)
}

// SetAdditionalData sets the AdditionalData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BusinessSection) SetAdditionalData(additionalData *TemplateAdditionalDataSection) {
	b.AdditionalData = additionalData
	b.require(businessSectionFieldAdditionalData)
}

func (b *BusinessSection) UnmarshalJSON(data []byte) error {
	type unmarshaler BusinessSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BusinessSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BusinessSection) MarshalJSON() ([]byte, error) {
	type embed BusinessSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BusinessSection) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	cardAcceptanceElementFieldTypes    = big.NewInt(1 << 0)
	cardAcceptanceElementFieldPosCol   = big.NewInt(1 << 1)
	cardAcceptanceElementFieldPosRow   = big.NewInt(1 << 2)
	cardAcceptanceElementFieldReadOnly = big.NewInt(1 << 3)
	cardAcceptanceElementFieldValue    = big.NewInt(1 << 4)
	cardAcceptanceElementFieldVisible  = big.NewInt(1 << 5)
)

type CardAcceptanceElement struct {
	Types    *CardTypes `json:"types,omitempty" url:"types,omitempty"`
	PosCol   *PosCol    `json:"posCol,omitempty" url:"posCol,omitempty"`
	PosRow   *PosRow    `json:"posRow,omitempty" url:"posRow,omitempty"`
	ReadOnly *ReadOnly  `json:"readOnly,omitempty" url:"readOnly,omitempty"`
	Value    *string    `json:"value,omitempty" url:"value,omitempty"`
	Visible  *Visible   `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardAcceptanceElement) GetTypes() *CardTypes {
	if c == nil {
		return nil
	}
	return c.Types
}

func (c *CardAcceptanceElement) GetPosCol() *PosCol {
	if c == nil {
		return nil
	}
	return c.PosCol
}

func (c *CardAcceptanceElement) GetPosRow() *PosRow {
	if c == nil {
		return nil
	}
	return c.PosRow
}

func (c *CardAcceptanceElement) GetReadOnly() *ReadOnly {
	if c == nil {
		return nil
	}
	return c.ReadOnly
}

func (c *CardAcceptanceElement) GetValue() *string {
	if c == nil {
		return nil
	}
	return c.Value
}

func (c *CardAcceptanceElement) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardAcceptanceElement) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardAcceptanceElement) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetTypes sets the Types field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardAcceptanceElement) SetTypes(types *CardTypes) {
	c.Types = types
	c.require(cardAcceptanceElementFieldTypes)
}

// SetPosCol sets the PosCol field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardAcceptanceElement) SetPosCol(posCol *PosCol) {
	c.PosCol = posCol
	c.require(cardAcceptanceElementFieldPosCol)
}

// SetPosRow sets the PosRow field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardAcceptanceElement) SetPosRow(posRow *PosRow) {
	c.PosRow = posRow
	c.require(cardAcceptanceElementFieldPosRow)
}

// SetReadOnly sets the ReadOnly field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardAcceptanceElement) SetReadOnly(readOnly *ReadOnly) {
	c.ReadOnly = readOnly
	c.require(cardAcceptanceElementFieldReadOnly)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardAcceptanceElement) SetValue(value *string) {
	c.Value = value
	c.require(cardAcceptanceElementFieldValue)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardAcceptanceElement) SetVisible(visible *Visible) {
	c.Visible = visible
	c.require(cardAcceptanceElementFieldVisible)
}

func (c *CardAcceptanceElement) UnmarshalJSON(data []byte) error {
	type unmarshaler CardAcceptanceElement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardAcceptanceElement(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardAcceptanceElement) MarshalJSON() ([]byte, error) {
	type embed CardAcceptanceElement
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CardAcceptanceElement) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	cardFeeSectionFieldAchBatchCardFee          = big.NewInt(1 << 0)
	cardFeeSectionFieldAnnualCardFee            = big.NewInt(1 << 1)
	cardFeeSectionFieldAvsCardFee               = big.NewInt(1 << 2)
	cardFeeSectionFieldChargebackCardFee        = big.NewInt(1 << 3)
	cardFeeSectionFieldDdaRejectsCardFee        = big.NewInt(1 << 4)
	cardFeeSectionFieldEarlyTerminationCardFee  = big.NewInt(1 << 5)
	cardFeeSectionFieldMinimumProcessingCardFee = big.NewInt(1 << 6)
	cardFeeSectionFieldMonthlyPciCardFee        = big.NewInt(1 << 7)
	cardFeeSectionFieldMontlyPlatformCardFee    = big.NewInt(1 << 8)
	cardFeeSectionFieldRetrievalCardFee         = big.NewInt(1 << 9)
	cardFeeSectionFieldTransactionCardFee       = big.NewInt(1 << 10)
	cardFeeSectionFieldVisible                  = big.NewInt(1 << 11)
)

type CardFeeSection struct {
	AchBatchCardFee          *TemplateElement `json:"achBatchCardFee,omitempty" url:"achBatchCardFee,omitempty"`
	AnnualCardFee            *TemplateElement `json:"annualCardFee,omitempty" url:"annualCardFee,omitempty"`
	AvsCardFee               *TemplateElement `json:"avsCardFee,omitempty" url:"avsCardFee,omitempty"`
	ChargebackCardFee        *TemplateElement `json:"chargebackCardFee,omitempty" url:"chargebackCardFee,omitempty"`
	DdaRejectsCardFee        *TemplateElement `json:"ddaRejectsCardFee,omitempty" url:"ddaRejectsCardFee,omitempty"`
	EarlyTerminationCardFee  *TemplateElement `json:"earlyTerminationCardFee,omitempty" url:"earlyTerminationCardFee,omitempty"`
	MinimumProcessingCardFee *TemplateElement `json:"minimumProcessingCardFee,omitempty" url:"minimumProcessingCardFee,omitempty"`
	MonthlyPciCardFee        *TemplateElement `json:"monthlyPCICardFee,omitempty" url:"monthlyPCICardFee,omitempty"`
	MontlyPlatformCardFee    *TemplateElement `json:"montlyPlatformCardFee,omitempty" url:"montlyPlatformCardFee,omitempty"`
	RetrievalCardFee         *TemplateElement `json:"retrievalCardFee,omitempty" url:"retrievalCardFee,omitempty"`
	TransactionCardFee       *TemplateElement `json:"transactionCardFee,omitempty" url:"transactionCardFee,omitempty"`
	Visible                  *Visible         `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardFeeSection) GetAchBatchCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.AchBatchCardFee
}

func (c *CardFeeSection) GetAnnualCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.AnnualCardFee
}

func (c *CardFeeSection) GetAvsCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.AvsCardFee
}

func (c *CardFeeSection) GetChargebackCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.ChargebackCardFee
}

func (c *CardFeeSection) GetDdaRejectsCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.DdaRejectsCardFee
}

func (c *CardFeeSection) GetEarlyTerminationCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.EarlyTerminationCardFee
}

func (c *CardFeeSection) GetMinimumProcessingCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.MinimumProcessingCardFee
}

func (c *CardFeeSection) GetMonthlyPciCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.MonthlyPciCardFee
}

func (c *CardFeeSection) GetMontlyPlatformCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.MontlyPlatformCardFee
}

func (c *CardFeeSection) GetRetrievalCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.RetrievalCardFee
}

func (c *CardFeeSection) GetTransactionCardFee() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.TransactionCardFee
}

func (c *CardFeeSection) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardFeeSection) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardFeeSection) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetAchBatchCardFee sets the AchBatchCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetAchBatchCardFee(achBatchCardFee *TemplateElement) {
	c.AchBatchCardFee = achBatchCardFee
	c.require(cardFeeSectionFieldAchBatchCardFee)
}

// SetAnnualCardFee sets the AnnualCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetAnnualCardFee(annualCardFee *TemplateElement) {
	c.AnnualCardFee = annualCardFee
	c.require(cardFeeSectionFieldAnnualCardFee)
}

// SetAvsCardFee sets the AvsCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetAvsCardFee(avsCardFee *TemplateElement) {
	c.AvsCardFee = avsCardFee
	c.require(cardFeeSectionFieldAvsCardFee)
}

// SetChargebackCardFee sets the ChargebackCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetChargebackCardFee(chargebackCardFee *TemplateElement) {
	c.ChargebackCardFee = chargebackCardFee
	c.require(cardFeeSectionFieldChargebackCardFee)
}

// SetDdaRejectsCardFee sets the DdaRejectsCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetDdaRejectsCardFee(ddaRejectsCardFee *TemplateElement) {
	c.DdaRejectsCardFee = ddaRejectsCardFee
	c.require(cardFeeSectionFieldDdaRejectsCardFee)
}

// SetEarlyTerminationCardFee sets the EarlyTerminationCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetEarlyTerminationCardFee(earlyTerminationCardFee *TemplateElement) {
	c.EarlyTerminationCardFee = earlyTerminationCardFee
	c.require(cardFeeSectionFieldEarlyTerminationCardFee)
}

// SetMinimumProcessingCardFee sets the MinimumProcessingCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetMinimumProcessingCardFee(minimumProcessingCardFee *TemplateElement) {
	c.MinimumProcessingCardFee = minimumProcessingCardFee
	c.require(cardFeeSectionFieldMinimumProcessingCardFee)
}

// SetMonthlyPciCardFee sets the MonthlyPciCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetMonthlyPciCardFee(monthlyPciCardFee *TemplateElement) {
	c.MonthlyPciCardFee = monthlyPciCardFee
	c.require(cardFeeSectionFieldMonthlyPciCardFee)
}

// SetMontlyPlatformCardFee sets the MontlyPlatformCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetMontlyPlatformCardFee(montlyPlatformCardFee *TemplateElement) {
	c.MontlyPlatformCardFee = montlyPlatformCardFee
	c.require(cardFeeSectionFieldMontlyPlatformCardFee)
}

// SetRetrievalCardFee sets the RetrievalCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetRetrievalCardFee(retrievalCardFee *TemplateElement) {
	c.RetrievalCardFee = retrievalCardFee
	c.require(cardFeeSectionFieldRetrievalCardFee)
}

// SetTransactionCardFee sets the TransactionCardFee field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetTransactionCardFee(transactionCardFee *TemplateElement) {
	c.TransactionCardFee = transactionCardFee
	c.require(cardFeeSectionFieldTransactionCardFee)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFeeSection) SetVisible(visible *Visible) {
	c.Visible = visible
	c.require(cardFeeSectionFieldVisible)
}

func (c *CardFeeSection) UnmarshalJSON(data []byte) error {
	type unmarshaler CardFeeSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardFeeSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardFeeSection) MarshalJSON() ([]byte, error) {
	type embed CardFeeSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CardFeeSection) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	cardFlatSectionFieldTiers   = big.NewInt(1 << 0)
	cardFlatSectionFieldVisible = big.NewInt(1 << 1)
)

type CardFlatSection struct {
	Tiers   []*CardType `json:"tiers,omitempty" url:"tiers,omitempty"`
	Visible *Visible    `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardFlatSection) GetTiers() []*CardType {
	if c == nil {
		return nil
	}
	return c.Tiers
}

func (c *CardFlatSection) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardFlatSection) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardFlatSection) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetTiers sets the Tiers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFlatSection) SetTiers(tiers []*CardType) {
	c.Tiers = tiers
	c.require(cardFlatSectionFieldTiers)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardFlatSection) SetVisible(visible *Visible) {
	c.Visible = visible
	c.require(cardFlatSectionFieldVisible)
}

func (c *CardFlatSection) UnmarshalJSON(data []byte) error {
	type unmarshaler CardFlatSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardFlatSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardFlatSection) MarshalJSON() ([]byte, error) {
	type embed CardFlatSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CardFlatSection) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	cardIcpSectionFieldTiers   = big.NewInt(1 << 0)
	cardIcpSectionFieldVisible = big.NewInt(1 << 1)
)

type CardIcpSection struct {
	Tiers   []*CardType `json:"tiers,omitempty" url:"tiers,omitempty"`
	Visible *Visible    `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardIcpSection) GetTiers() []*CardType {
	if c == nil {
		return nil
	}
	return c.Tiers
}

func (c *CardIcpSection) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardIcpSection) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardIcpSection) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetTiers sets the Tiers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardIcpSection) SetTiers(tiers []*CardType) {
	c.Tiers = tiers
	c.require(cardIcpSectionFieldTiers)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardIcpSection) SetVisible(visible *Visible) {
	c.Visible = visible
	c.require(cardIcpSectionFieldVisible)
}

func (c *CardIcpSection) UnmarshalJSON(data []byte) error {
	type unmarshaler CardIcpSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardIcpSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardIcpSection) MarshalJSON() ([]byte, error) {
	type embed CardIcpSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CardIcpSection) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	cardPassThroughSectionFieldMultiTier = big.NewInt(1 << 0)
	cardPassThroughSectionFieldTiers     = big.NewInt(1 << 1)
	cardPassThroughSectionFieldVisible   = big.NewInt(1 << 2)
)

type CardPassThroughSection struct {
	MultiTier *bool           `json:"multiTier,omitempty" url:"multiTier,omitempty"`
	Tiers     []*CardTypePass `json:"tiers,omitempty" url:"tiers,omitempty"`
	Visible   *Visible        `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardPassThroughSection) GetMultiTier() *bool {
	if c == nil {
		return nil
	}
	return c.MultiTier
}

func (c *CardPassThroughSection) GetTiers() []*CardTypePass {
	if c == nil {
		return nil
	}
	return c.Tiers
}

func (c *CardPassThroughSection) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardPassThroughSection) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardPassThroughSection) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetMultiTier sets the MultiTier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardPassThroughSection) SetMultiTier(multiTier *bool) {
	c.MultiTier = multiTier
	c.require(cardPassThroughSectionFieldMultiTier)
}

// SetTiers sets the Tiers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardPassThroughSection) SetTiers(tiers []*CardTypePass) {
	c.Tiers = tiers
	c.require(cardPassThroughSectionFieldTiers)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardPassThroughSection) SetVisible(visible *Visible) {
	c.Visible = visible
	c.require(cardPassThroughSectionFieldVisible)
}

func (c *CardPassThroughSection) UnmarshalJSON(data []byte) error {
	type unmarshaler CardPassThroughSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardPassThroughSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardPassThroughSection) MarshalJSON() ([]byte, error) {
	type embed CardPassThroughSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CardPassThroughSection) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	cardServiceFieldBatchCutoffTime                 = big.NewInt(1 << 0)
	cardServiceFieldCardAcceptance                  = big.NewInt(1 << 1)
	cardServiceFieldCardFees                        = big.NewInt(1 << 2)
	cardServiceFieldCardFlat                        = big.NewInt(1 << 3)
	cardServiceFieldCardFlatAmountxAuth             = big.NewInt(1 << 4)
	cardServiceFieldCardFlatHighPayRange            = big.NewInt(1 << 5)
	cardServiceFieldCardFlatLowPayRange             = big.NewInt(1 << 6)
	cardServiceFieldCardFlatPercentxAuth            = big.NewInt(1 << 7)
	cardServiceFieldCardIcp                         = big.NewInt(1 << 8)
	cardServiceFieldCardIcpAmountxAuth              = big.NewInt(1 << 9)
	cardServiceFieldCardIcpHighPayRange             = big.NewInt(1 << 10)
	cardServiceFieldCardIcpLowPayRange              = big.NewInt(1 << 11)
	cardServiceFieldCardIcpPercentxAuth             = big.NewInt(1 << 12)
	cardServiceFieldCardPassThrough                 = big.NewInt(1 << 13)
	cardServiceFieldCardPassThroughAmountRecurring  = big.NewInt(1 << 14)
	cardServiceFieldCardPassThroughAmountxAuth      = big.NewInt(1 << 15)
	cardServiceFieldCardPassThroughHighPayRange     = big.NewInt(1 << 16)
	cardServiceFieldCardPassThroughLowPayRange      = big.NewInt(1 << 17)
	cardServiceFieldCardPassThroughPercentRecurring = big.NewInt(1 << 18)
	cardServiceFieldCardPassThroughPercentxAuth     = big.NewInt(1 << 19)
	cardServiceFieldDiscountFrequency               = big.NewInt(1 << 20)
	cardServiceFieldFundingRollup                   = big.NewInt(1 << 21)
	cardServiceFieldGateway                         = big.NewInt(1 << 22)
	cardServiceFieldPassThroughCost                 = big.NewInt(1 << 23)
	cardServiceFieldPdfTemplateId                   = big.NewInt(1 << 24)
	cardServiceFieldPricingPlan                     = big.NewInt(1 << 25)
	cardServiceFieldPricingType                     = big.NewInt(1 << 26)
	cardServiceFieldProcessor                       = big.NewInt(1 << 27)
	cardServiceFieldProvider                        = big.NewInt(1 << 28)
	cardServiceFieldTierName                        = big.NewInt(1 << 29)
	cardServiceFieldVisible                         = big.NewInt(1 << 30)
)

type CardService struct {
	// Controls how to present the `batchCutoffTime` field on the application. If this field isn't sent, batch cut off time defaults to 5 ET.
	BatchCutoffTime                 *TemplateElement        `json:"batchCutoffTime,omitempty" url:"batchCutoffTime,omitempty"`
	CardAcceptance                  *CardAcceptanceElement  `json:"cardAcceptance,omitempty" url:"cardAcceptance,omitempty"`
	CardFees                        *CardFeeSection         `json:"cardFees,omitempty" url:"cardFees,omitempty"`
	CardFlat                        *CardFlatSection        `json:"cardFlat,omitempty" url:"cardFlat,omitempty"`
	CardFlatAmountxAuth             *TemplateElement        `json:"cardFlat_amountxAuth,omitempty" url:"cardFlat_amountxAuth,omitempty"`
	CardFlatHighPayRange            *TemplateElement        `json:"cardFlat_highPayRange,omitempty" url:"cardFlat_highPayRange,omitempty"`
	CardFlatLowPayRange             *TemplateElement        `json:"cardFlat_lowPayRange,omitempty" url:"cardFlat_lowPayRange,omitempty"`
	CardFlatPercentxAuth            *TemplateElement        `json:"cardFlat_percentxAuth,omitempty" url:"cardFlat_percentxAuth,omitempty"`
	CardIcp                         *CardIcpSection         `json:"cardICP,omitempty" url:"cardICP,omitempty"`
	CardIcpAmountxAuth              *TemplateElement        `json:"cardICP_amountxAuth,omitempty" url:"cardICP_amountxAuth,omitempty"`
	CardIcpHighPayRange             *TemplateElement        `json:"cardICP_highPayRange,omitempty" url:"cardICP_highPayRange,omitempty"`
	CardIcpLowPayRange              *TemplateElement        `json:"cardICP_lowPayRange,omitempty" url:"cardICP_lowPayRange,omitempty"`
	CardIcpPercentxAuth             *TemplateElement        `json:"cardICP_percentxAuth,omitempty" url:"cardICP_percentxAuth,omitempty"`
	CardPassThrough                 *CardPassThroughSection `json:"cardPassThrough,omitempty" url:"cardPassThrough,omitempty"`
	CardPassThroughAmountRecurring  *TemplateElement        `json:"cardPassThrough_amountRecurring,omitempty" url:"cardPassThrough_amountRecurring,omitempty"`
	CardPassThroughAmountxAuth      *TemplateElement        `json:"cardPassThrough_amountxAuth,omitempty" url:"cardPassThrough_amountxAuth,omitempty"`
	CardPassThroughHighPayRange     *TemplateElement        `json:"cardPassThrough_highPayRange,omitempty" url:"cardPassThrough_highPayRange,omitempty"`
	CardPassThroughLowPayRange      *TemplateElement        `json:"cardPassThrough_lowPayRange,omitempty" url:"cardPassThrough_lowPayRange,omitempty"`
	CardPassThroughPercentRecurring *TemplateElement        `json:"cardPassThrough_percentRecurring,omitempty" url:"cardPassThrough_percentRecurring,omitempty"`
	CardPassThroughPercentxAuth     *TemplateElement        `json:"cardPassThrough_percentxAuth,omitempty" url:"cardPassThrough_percentxAuth,omitempty"`
	DiscountFrequency               *TemplateElement        `json:"discountFrequency,omitempty" url:"discountFrequency,omitempty"`
	FundingRollup                   *TemplateElement        `json:"fundingRollup,omitempty" url:"fundingRollup,omitempty"`
	Gateway                         *TemplateElement        `json:"gateway,omitempty" url:"gateway,omitempty"`
	PassThroughCost                 *TemplateElement        `json:"passThroughCost,omitempty" url:"passThroughCost,omitempty"`
	PdfTemplateId                   *TemplateElement        `json:"pdfTemplateId,omitempty" url:"pdfTemplateId,omitempty"`
	PricingPlan                     *int64                  `json:"pricingPlan,omitempty" url:"pricingPlan,omitempty"`
	PricingType                     *TemplateElement        `json:"pricingType,omitempty" url:"pricingType,omitempty"`
	Processor                       *TemplateElement        `json:"processor,omitempty" url:"processor,omitempty"`
	Provider                        *TemplateElement        `json:"provider,omitempty" url:"provider,omitempty"`
	TierName                        *TemplateElement        `json:"tierName,omitempty" url:"tierName,omitempty"`
	Visible                         *Visible                `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardService) GetBatchCutoffTime() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.BatchCutoffTime
}

func (c *CardService) GetCardAcceptance() *CardAcceptanceElement {
	if c == nil {
		return nil
	}
	return c.CardAcceptance
}

func (c *CardService) GetCardFees() *CardFeeSection {
	if c == nil {
		return nil
	}
	return c.CardFees
}

func (c *CardService) GetCardFlat() *CardFlatSection {
	if c == nil {
		return nil
	}
	return c.CardFlat
}

func (c *CardService) GetCardFlatAmountxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardFlatAmountxAuth
}

func (c *CardService) GetCardFlatHighPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardFlatHighPayRange
}

func (c *CardService) GetCardFlatLowPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardFlatLowPayRange
}

func (c *CardService) GetCardFlatPercentxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardFlatPercentxAuth
}

func (c *CardService) GetCardIcp() *CardIcpSection {
	if c == nil {
		return nil
	}
	return c.CardIcp
}

func (c *CardService) GetCardIcpAmountxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardIcpAmountxAuth
}

func (c *CardService) GetCardIcpHighPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardIcpHighPayRange
}

func (c *CardService) GetCardIcpLowPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardIcpLowPayRange
}

func (c *CardService) GetCardIcpPercentxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardIcpPercentxAuth
}

func (c *CardService) GetCardPassThrough() *CardPassThroughSection {
	if c == nil {
		return nil
	}
	return c.CardPassThrough
}

func (c *CardService) GetCardPassThroughAmountRecurring() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughAmountRecurring
}

func (c *CardService) GetCardPassThroughAmountxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughAmountxAuth
}

func (c *CardService) GetCardPassThroughHighPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughHighPayRange
}

func (c *CardService) GetCardPassThroughLowPayRange() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughLowPayRange
}

func (c *CardService) GetCardPassThroughPercentRecurring() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughPercentRecurring
}

func (c *CardService) GetCardPassThroughPercentxAuth() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.CardPassThroughPercentxAuth
}

func (c *CardService) GetDiscountFrequency() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.DiscountFrequency
}

func (c *CardService) GetFundingRollup() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.FundingRollup
}

func (c *CardService) GetGateway() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.Gateway
}

func (c *CardService) GetPassThroughCost() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.PassThroughCost
}

func (c *CardService) GetPdfTemplateId() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.PdfTemplateId
}

func (c *CardService) GetPricingPlan() *int64 {
	if c == nil {
		return nil
	}
	return c.PricingPlan
}

func (c *CardService) GetPricingType() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.PricingType
}

func (c *CardService) GetProcessor() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.Processor
}

func (c *CardService) GetProvider() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.Provider
}

func (c *CardService) GetTierName() *TemplateElement {
	if c == nil {
		return nil
	}
	return c.TierName
}

func (c *CardService) GetVisible() *Visible {
	if c == nil {
		return nil
	}
	return c.Visible
}

func (c *CardService) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardService) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetBatchCutoffTime sets the BatchCutoffTime field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetBatchCutoffTime(batchCutoffTime *TemplateElement) {
	c.BatchCutoffTime = batchCutoffTime
	c.require(cardServiceFieldBatchCutoffTime)
}

// SetCardAcceptance sets the CardAcceptance field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardAcceptance(cardAcceptance *CardAcceptanceElement) {
	c.CardAcceptance = cardAcceptance
	c.require(cardServiceFieldCardAcceptance)
}

// SetCardFees sets the CardFees field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardFees(cardFees *CardFeeSection) {
	c.CardFees = cardFees
	c.require(cardServiceFieldCardFees)
}

// SetCardFlat sets the CardFlat field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardFlat(cardFlat *CardFlatSection) {
	c.CardFlat = cardFlat
	c.require(cardServiceFieldCardFlat)
}

// SetCardFlatAmountxAuth sets the CardFlatAmountxAuth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardFlatAmountxAuth(cardFlatAmountxAuth *TemplateElement) {
	c.CardFlatAmountxAuth = cardFlatAmountxAuth
	c.require(cardServiceFieldCardFlatAmountxAuth)
}

// SetCardFlatHighPayRange sets the CardFlatHighPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardFlatHighPayRange(cardFlatHighPayRange *TemplateElement) {
	c.CardFlatHighPayRange = cardFlatHighPayRange
	c.require(cardServiceFieldCardFlatHighPayRange)
}

// SetCardFlatLowPayRange sets the CardFlatLowPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardFlatLowPayRange(cardFlatLowPayRange *TemplateElement) {
	c.CardFlatLowPayRange = cardFlatLowPayRange
	c.require(cardServiceFieldCardFlatLowPayRange)
}

// SetCardFlatPercentxAuth sets the CardFlatPercentxAuth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardFlatPercentxAuth(cardFlatPercentxAuth *TemplateElement) {
	c.CardFlatPercentxAuth = cardFlatPercentxAuth
	c.require(cardServiceFieldCardFlatPercentxAuth)
}

// SetCardIcp sets the CardIcp field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardIcp(cardIcp *CardIcpSection) {
	c.CardIcp = cardIcp
	c.require(cardServiceFieldCardIcp)
}

// SetCardIcpAmountxAuth sets the CardIcpAmountxAuth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardIcpAmountxAuth(cardIcpAmountxAuth *TemplateElement) {
	c.CardIcpAmountxAuth = cardIcpAmountxAuth
	c.require(cardServiceFieldCardIcpAmountxAuth)
}

// SetCardIcpHighPayRange sets the CardIcpHighPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardIcpHighPayRange(cardIcpHighPayRange *TemplateElement) {
	c.CardIcpHighPayRange = cardIcpHighPayRange
	c.require(cardServiceFieldCardIcpHighPayRange)
}

// SetCardIcpLowPayRange sets the CardIcpLowPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardIcpLowPayRange(cardIcpLowPayRange *TemplateElement) {
	c.CardIcpLowPayRange = cardIcpLowPayRange
	c.require(cardServiceFieldCardIcpLowPayRange)
}

// SetCardIcpPercentxAuth sets the CardIcpPercentxAuth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardIcpPercentxAuth(cardIcpPercentxAuth *TemplateElement) {
	c.CardIcpPercentxAuth = cardIcpPercentxAuth
	c.require(cardServiceFieldCardIcpPercentxAuth)
}

// SetCardPassThrough sets the CardPassThrough field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardPassThrough(cardPassThrough *CardPassThroughSection) {
	c.CardPassThrough = cardPassThrough
	c.require(cardServiceFieldCardPassThrough)
}

// SetCardPassThroughAmountRecurring sets the CardPassThroughAmountRecurring field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardPassThroughAmountRecurring(cardPassThroughAmountRecurring *TemplateElement) {
	c.CardPassThroughAmountRecurring = cardPassThroughAmountRecurring
	c.require(cardServiceFieldCardPassThroughAmountRecurring)
}

// SetCardPassThroughAmountxAuth sets the CardPassThroughAmountxAuth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardPassThroughAmountxAuth(cardPassThroughAmountxAuth *TemplateElement) {
	c.CardPassThroughAmountxAuth = cardPassThroughAmountxAuth
	c.require(cardServiceFieldCardPassThroughAmountxAuth)
}

// SetCardPassThroughHighPayRange sets the CardPassThroughHighPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardPassThroughHighPayRange(cardPassThroughHighPayRange *TemplateElement) {
	c.CardPassThroughHighPayRange = cardPassThroughHighPayRange
	c.require(cardServiceFieldCardPassThroughHighPayRange)
}

// SetCardPassThroughLowPayRange sets the CardPassThroughLowPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardPassThroughLowPayRange(cardPassThroughLowPayRange *TemplateElement) {
	c.CardPassThroughLowPayRange = cardPassThroughLowPayRange
	c.require(cardServiceFieldCardPassThroughLowPayRange)
}

// SetCardPassThroughPercentRecurring sets the CardPassThroughPercentRecurring field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardPassThroughPercentRecurring(cardPassThroughPercentRecurring *TemplateElement) {
	c.CardPassThroughPercentRecurring = cardPassThroughPercentRecurring
	c.require(cardServiceFieldCardPassThroughPercentRecurring)
}

// SetCardPassThroughPercentxAuth sets the CardPassThroughPercentxAuth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetCardPassThroughPercentxAuth(cardPassThroughPercentxAuth *TemplateElement) {
	c.CardPassThroughPercentxAuth = cardPassThroughPercentxAuth
	c.require(cardServiceFieldCardPassThroughPercentxAuth)
}

// SetDiscountFrequency sets the DiscountFrequency field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetDiscountFrequency(discountFrequency *TemplateElement) {
	c.DiscountFrequency = discountFrequency
	c.require(cardServiceFieldDiscountFrequency)
}

// SetFundingRollup sets the FundingRollup field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetFundingRollup(fundingRollup *TemplateElement) {
	c.FundingRollup = fundingRollup
	c.require(cardServiceFieldFundingRollup)
}

// SetGateway sets the Gateway field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetGateway(gateway *TemplateElement) {
	c.Gateway = gateway
	c.require(cardServiceFieldGateway)
}

// SetPassThroughCost sets the PassThroughCost field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetPassThroughCost(passThroughCost *TemplateElement) {
	c.PassThroughCost = passThroughCost
	c.require(cardServiceFieldPassThroughCost)
}

// SetPdfTemplateId sets the PdfTemplateId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetPdfTemplateId(pdfTemplateId *TemplateElement) {
	c.PdfTemplateId = pdfTemplateId
	c.require(cardServiceFieldPdfTemplateId)
}

// SetPricingPlan sets the PricingPlan field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetPricingPlan(pricingPlan *int64) {
	c.PricingPlan = pricingPlan
	c.require(cardServiceFieldPricingPlan)
}

// SetPricingType sets the PricingType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetPricingType(pricingType *TemplateElement) {
	c.PricingType = pricingType
	c.require(cardServiceFieldPricingType)
}

// SetProcessor sets the Processor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetProcessor(processor *TemplateElement) {
	c.Processor = processor
	c.require(cardServiceFieldProcessor)
}

// SetProvider sets the Provider field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetProvider(provider *TemplateElement) {
	c.Provider = provider
	c.require(cardServiceFieldProvider)
}

// SetTierName sets the TierName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetTierName(tierName *TemplateElement) {
	c.TierName = tierName
	c.require(cardServiceFieldTierName)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardService) SetVisible(visible *Visible) {
	c.Visible = visible
	c.require(cardServiceFieldVisible)
}

func (c *CardService) UnmarshalJSON(data []byte) error {
	type unmarshaler CardService
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardService(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardService) MarshalJSON() ([]byte, error) {
	type embed CardService
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CardService) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	cardTypeFieldAmex       = big.NewInt(1 << 0)
	cardTypeFieldDiscover   = big.NewInt(1 << 1)
	cardTypeFieldMasterCard = big.NewInt(1 << 2)
	cardTypeFieldVisa       = big.NewInt(1 << 3)
)

type CardType struct {
	Amex       *TierItem `json:"amex,omitempty" url:"amex,omitempty"`
	Discover   *TierItem `json:"discover,omitempty" url:"discover,omitempty"`
	MasterCard *TierItem `json:"masterCard,omitempty" url:"masterCard,omitempty"`
	Visa       *TierItem `json:"visa,omitempty" url:"visa,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardType) GetAmex() *TierItem {
	if c == nil {
		return nil
	}
	return c.Amex
}

func (c *CardType) GetDiscover() *TierItem {
	if c == nil {
		return nil
	}
	return c.Discover
}

func (c *CardType) GetMasterCard() *TierItem {
	if c == nil {
		return nil
	}
	return c.MasterCard
}

func (c *CardType) GetVisa() *TierItem {
	if c == nil {
		return nil
	}
	return c.Visa
}

func (c *CardType) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardType) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetAmex sets the Amex field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardType) SetAmex(amex *TierItem) {
	c.Amex = amex
	c.require(cardTypeFieldAmex)
}

// SetDiscover sets the Discover field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardType) SetDiscover(discover *TierItem) {
	c.Discover = discover
	c.require(cardTypeFieldDiscover)
}

// SetMasterCard sets the MasterCard field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardType) SetMasterCard(masterCard *TierItem) {
	c.MasterCard = masterCard
	c.require(cardTypeFieldMasterCard)
}

// SetVisa sets the Visa field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardType) SetVisa(visa *TierItem) {
	c.Visa = visa
	c.require(cardTypeFieldVisa)
}

func (c *CardType) UnmarshalJSON(data []byte) error {
	type unmarshaler CardType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardType) MarshalJSON() ([]byte, error) {
	type embed CardType
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CardType) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	cardTypePassFieldAmex       = big.NewInt(1 << 0)
	cardTypePassFieldDiscover   = big.NewInt(1 << 1)
	cardTypePassFieldMasterCard = big.NewInt(1 << 2)
	cardTypePassFieldVisa       = big.NewInt(1 << 3)
)

type CardTypePass struct {
	Amex       *TierItemPass `json:"amex,omitempty" url:"amex,omitempty"`
	Discover   *TierItemPass `json:"discover,omitempty" url:"discover,omitempty"`
	MasterCard *TierItemPass `json:"masterCard,omitempty" url:"masterCard,omitempty"`
	Visa       *TierItemPass `json:"visa,omitempty" url:"visa,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardTypePass) GetAmex() *TierItemPass {
	if c == nil {
		return nil
	}
	return c.Amex
}

func (c *CardTypePass) GetDiscover() *TierItemPass {
	if c == nil {
		return nil
	}
	return c.Discover
}

func (c *CardTypePass) GetMasterCard() *TierItemPass {
	if c == nil {
		return nil
	}
	return c.MasterCard
}

func (c *CardTypePass) GetVisa() *TierItemPass {
	if c == nil {
		return nil
	}
	return c.Visa
}

func (c *CardTypePass) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardTypePass) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetAmex sets the Amex field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardTypePass) SetAmex(amex *TierItemPass) {
	c.Amex = amex
	c.require(cardTypePassFieldAmex)
}

// SetDiscover sets the Discover field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardTypePass) SetDiscover(discover *TierItemPass) {
	c.Discover = discover
	c.require(cardTypePassFieldDiscover)
}

// SetMasterCard sets the MasterCard field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardTypePass) SetMasterCard(masterCard *TierItemPass) {
	c.MasterCard = masterCard
	c.require(cardTypePassFieldMasterCard)
}

// SetVisa sets the Visa field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardTypePass) SetVisa(visa *TierItemPass) {
	c.Visa = visa
	c.require(cardTypePassFieldVisa)
}

func (c *CardTypePass) UnmarshalJSON(data []byte) error {
	type unmarshaler CardTypePass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardTypePass(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardTypePass) MarshalJSON() ([]byte, error) {
	type embed CardTypePass
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CardTypePass) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	cardTypesFieldAmex       = big.NewInt(1 << 0)
	cardTypesFieldDiscover   = big.NewInt(1 << 1)
	cardTypesFieldMasterCard = big.NewInt(1 << 2)
	cardTypesFieldVisa       = big.NewInt(1 << 3)
)

type CardTypes struct {
	Amex       *BasicTemplateElement `json:"amex,omitempty" url:"amex,omitempty"`
	Discover   *BasicTemplateElement `json:"discover,omitempty" url:"discover,omitempty"`
	MasterCard *BasicTemplateElement `json:"masterCard,omitempty" url:"masterCard,omitempty"`
	Visa       *BasicTemplateElement `json:"visa,omitempty" url:"visa,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardTypes) GetAmex() *BasicTemplateElement {
	if c == nil {
		return nil
	}
	return c.Amex
}

func (c *CardTypes) GetDiscover() *BasicTemplateElement {
	if c == nil {
		return nil
	}
	return c.Discover
}

func (c *CardTypes) GetMasterCard() *BasicTemplateElement {
	if c == nil {
		return nil
	}
	return c.MasterCard
}

func (c *CardTypes) GetVisa() *BasicTemplateElement {
	if c == nil {
		return nil
	}
	return c.Visa
}

func (c *CardTypes) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardTypes) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetAmex sets the Amex field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardTypes) SetAmex(amex *BasicTemplateElement) {
	c.Amex = amex
	c.require(cardTypesFieldAmex)
}

// SetDiscover sets the Discover field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardTypes) SetDiscover(discover *BasicTemplateElement) {
	c.Discover = discover
	c.require(cardTypesFieldDiscover)
}

// SetMasterCard sets the MasterCard field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardTypes) SetMasterCard(masterCard *BasicTemplateElement) {
	c.MasterCard = masterCard
	c.require(cardTypesFieldMasterCard)
}

// SetVisa sets the Visa field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CardTypes) SetVisa(visa *BasicTemplateElement) {
	c.Visa = visa
	c.require(cardTypesFieldVisa)
}

func (c *CardTypes) UnmarshalJSON(data []byte) error {
	type unmarshaler CardTypes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardTypes(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardTypes) MarshalJSON() ([]byte, error) {
	type embed CardTypes
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CardTypes) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	documentSectionFieldVisble             = big.NewInt(1 << 0)
	documentSectionFieldSubFooter          = big.NewInt(1 << 1)
	documentSectionFieldSubHeader          = big.NewInt(1 << 2)
	documentSectionFieldDepositBank        = big.NewInt(1 << 3)
	documentSectionFieldMinimumDocuments   = big.NewInt(1 << 4)
	documentSectionFieldUploadDocuments    = big.NewInt(1 << 5)
	documentSectionFieldBankData           = big.NewInt(1 << 6)
	documentSectionFieldTermsAndConditions = big.NewInt(1 << 7)
	documentSectionFieldSigner             = big.NewInt(1 << 8)
	documentSectionFieldVisible            = big.NewInt(1 << 9)
	documentSectionFieldWithdrawalBank     = big.NewInt(1 << 10)
)

type DocumentSection struct {
	Visble      *Visible     `json:"visble,omitempty" url:"visble,omitempty"`
	SubFooter   *SubFooter   `json:"subFooter,omitempty" url:"subFooter,omitempty"`
	SubHeader   *SubHeader   `json:"subHeader,omitempty" url:"subHeader,omitempty"`
	DepositBank *BankSection `json:"depositBank,omitempty" url:"depositBank,omitempty"`
	// The minimum number of documents the applicant must upload with the application.
	MinimumDocuments *int `json:"minimumDocuments,omitempty" url:"minimumDocuments,omitempty"`
	// When `true`, allows the applicant to upload documents to the application.
	UploadDocuments    *bool                              `json:"uploadDocuments,omitempty" url:"uploadDocuments,omitempty"`
	BankData           *BankSection                       `json:"bankData,omitempty" url:"bankData,omitempty"`
	TermsAndConditions *DocumentSectionTermsAndConditions `json:"termsAndConditions,omitempty" url:"termsAndConditions,omitempty"`
	Signer             *SignerSection                     `json:"signer,omitempty" url:"signer,omitempty"`
	Visible            *Visible                           `json:"visible,omitempty" url:"visible,omitempty"`
	WithdrawalBank     *BankSection                       `json:"withdrawalBank,omitempty" url:"withdrawalBank,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DocumentSection) GetVisble() *Visible {
	if d == nil {
		return nil
	}
	return d.Visble
}

func (d *DocumentSection) GetSubFooter() *SubFooter {
	if d == nil {
		return nil
	}
	return d.SubFooter
}

func (d *DocumentSection) GetSubHeader() *SubHeader {
	if d == nil {
		return nil
	}
	return d.SubHeader
}

func (d *DocumentSection) GetDepositBank() *BankSection {
	if d == nil {
		return nil
	}
	return d.DepositBank
}

func (d *DocumentSection) GetMinimumDocuments() *int {
	if d == nil {
		return nil
	}
	return d.MinimumDocuments
}

func (d *DocumentSection) GetUploadDocuments() *bool {
	if d == nil {
		return nil
	}
	return d.UploadDocuments
}

func (d *DocumentSection) GetBankData() *BankSection {
	if d == nil {
		return nil
	}
	return d.BankData
}

func (d *DocumentSection) GetTermsAndConditions() *DocumentSectionTermsAndConditions {
	if d == nil {
		return nil
	}
	return d.TermsAndConditions
}

func (d *DocumentSection) GetSigner() *SignerSection {
	if d == nil {
		return nil
	}
	return d.Signer
}

func (d *DocumentSection) GetVisible() *Visible {
	if d == nil {
		return nil
	}
	return d.Visible
}

func (d *DocumentSection) GetWithdrawalBank() *BankSection {
	if d == nil {
		return nil
	}
	return d.WithdrawalBank
}

func (d *DocumentSection) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentSection) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetVisble sets the Visble field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetVisble(visble *Visible) {
	d.Visble = visble
	d.require(documentSectionFieldVisble)
}

// SetSubFooter sets the SubFooter field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetSubFooter(subFooter *SubFooter) {
	d.SubFooter = subFooter
	d.require(documentSectionFieldSubFooter)
}

// SetSubHeader sets the SubHeader field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetSubHeader(subHeader *SubHeader) {
	d.SubHeader = subHeader
	d.require(documentSectionFieldSubHeader)
}

// SetDepositBank sets the DepositBank field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetDepositBank(depositBank *BankSection) {
	d.DepositBank = depositBank
	d.require(documentSectionFieldDepositBank)
}

// SetMinimumDocuments sets the MinimumDocuments field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetMinimumDocuments(minimumDocuments *int) {
	d.MinimumDocuments = minimumDocuments
	d.require(documentSectionFieldMinimumDocuments)
}

// SetUploadDocuments sets the UploadDocuments field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetUploadDocuments(uploadDocuments *bool) {
	d.UploadDocuments = uploadDocuments
	d.require(documentSectionFieldUploadDocuments)
}

// SetBankData sets the BankData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetBankData(bankData *BankSection) {
	d.BankData = bankData
	d.require(documentSectionFieldBankData)
}

// SetTermsAndConditions sets the TermsAndConditions field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetTermsAndConditions(termsAndConditions *DocumentSectionTermsAndConditions) {
	d.TermsAndConditions = termsAndConditions
	d.require(documentSectionFieldTermsAndConditions)
}

// SetSigner sets the Signer field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetSigner(signer *SignerSection) {
	d.Signer = signer
	d.require(documentSectionFieldSigner)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetVisible(visible *Visible) {
	d.Visible = visible
	d.require(documentSectionFieldVisible)
}

// SetWithdrawalBank sets the WithdrawalBank field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSection) SetWithdrawalBank(withdrawalBank *BankSection) {
	d.WithdrawalBank = withdrawalBank
	d.require(documentSectionFieldWithdrawalBank)
}

func (d *DocumentSection) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentSection) MarshalJSON() ([]byte, error) {
	type embed DocumentSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DocumentSection) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	documentSectionTermsAndConditionsFieldTcLinks = big.NewInt(1 << 0)
	documentSectionTermsAndConditionsFieldVisible = big.NewInt(1 << 1)
)

type DocumentSectionTermsAndConditions struct {
	TcLinks []*DocumentSectionTermsAndConditionsTcLinksItem `json:"tcLinks,omitempty" url:"tcLinks,omitempty"`
	Visible *Visible                                        `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DocumentSectionTermsAndConditions) GetTcLinks() []*DocumentSectionTermsAndConditionsTcLinksItem {
	if d == nil {
		return nil
	}
	return d.TcLinks
}

func (d *DocumentSectionTermsAndConditions) GetVisible() *Visible {
	if d == nil {
		return nil
	}
	return d.Visible
}

func (d *DocumentSectionTermsAndConditions) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentSectionTermsAndConditions) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetTcLinks sets the TcLinks field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSectionTermsAndConditions) SetTcLinks(tcLinks []*DocumentSectionTermsAndConditionsTcLinksItem) {
	d.TcLinks = tcLinks
	d.require(documentSectionTermsAndConditionsFieldTcLinks)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSectionTermsAndConditions) SetVisible(visible *Visible) {
	d.Visible = visible
	d.require(documentSectionTermsAndConditionsFieldVisible)
}

func (d *DocumentSectionTermsAndConditions) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentSectionTermsAndConditions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentSectionTermsAndConditions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentSectionTermsAndConditions) MarshalJSON() ([]byte, error) {
	type embed DocumentSectionTermsAndConditions
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DocumentSectionTermsAndConditions) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	documentSectionTermsAndConditionsTcLinksItemFieldLabel = big.NewInt(1 << 0)
	documentSectionTermsAndConditionsTcLinksItemFieldValue = big.NewInt(1 << 1)
)

type DocumentSectionTermsAndConditionsTcLinksItem struct {
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) GetValue() *string {
	if d == nil {
		return nil
	}
	return d.Value
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetLabel sets the Label field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSectionTermsAndConditionsTcLinksItem) SetLabel(label *string) {
	d.Label = label
	d.require(documentSectionTermsAndConditionsTcLinksItemFieldLabel)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DocumentSectionTermsAndConditionsTcLinksItem) SetValue(value *string) {
	d.Value = value
	d.require(documentSectionTermsAndConditionsTcLinksItemFieldValue)
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentSectionTermsAndConditionsTcLinksItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentSectionTermsAndConditionsTcLinksItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) MarshalJSON() ([]byte, error) {
	type embed DocumentSectionTermsAndConditionsTcLinksItem
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DocumentSectionTermsAndConditionsTcLinksItem) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Information about a business owner.
var (
	ownersSectionFieldContactEmail     = big.NewInt(1 << 0)
	ownersSectionFieldContactName      = big.NewInt(1 << 1)
	ownersSectionFieldContactPhone     = big.NewInt(1 << 2)
	ownersSectionFieldContactTitle     = big.NewInt(1 << 3)
	ownersSectionFieldMultipleContacts = big.NewInt(1 << 4)
	ownersSectionFieldMultipleOwners   = big.NewInt(1 << 5)
	ownersSectionFieldOaddress         = big.NewInt(1 << 6)
	ownersSectionFieldOcity            = big.NewInt(1 << 7)
	ownersSectionFieldOcountry         = big.NewInt(1 << 8)
	ownersSectionFieldOdriverstate     = big.NewInt(1 << 9)
	ownersSectionFieldOstate           = big.NewInt(1 << 10)
	ownersSectionFieldOwnerdob         = big.NewInt(1 << 11)
	ownersSectionFieldOwnerdriver      = big.NewInt(1 << 12)
	ownersSectionFieldOwneremail       = big.NewInt(1 << 13)
	ownersSectionFieldOwnername        = big.NewInt(1 << 14)
	ownersSectionFieldOwnerpercent     = big.NewInt(1 << 15)
	ownersSectionFieldOwnerphone1      = big.NewInt(1 << 16)
	ownersSectionFieldOwnerphone2      = big.NewInt(1 << 17)
	ownersSectionFieldOwnerssn         = big.NewInt(1 << 18)
	ownersSectionFieldOwnertitle       = big.NewInt(1 << 19)
	ownersSectionFieldOzip             = big.NewInt(1 << 20)
	ownersSectionFieldSubFooter        = big.NewInt(1 << 21)
	ownersSectionFieldSubHeader        = big.NewInt(1 << 22)
	ownersSectionFieldVisible          = big.NewInt(1 << 23)
	ownersSectionFieldAdditionalData   = big.NewInt(1 << 24)
)

type OwnersSection struct {
	ContactEmail *TemplateElement `json:"contactEmail,omitempty" url:"contactEmail,omitempty"`
	ContactName  *TemplateElement `json:"contactName,omitempty" url:"contactName,omitempty"`
	ContactPhone *TemplateElement `json:"contactPhone,omitempty" url:"contactPhone,omitempty"`
	ContactTitle *TemplateElement `json:"contactTitle,omitempty" url:"contactTitle,omitempty"`
	// Offer add more contacts
	MultipleContacts *bool `json:"multipleContacts,omitempty" url:"multipleContacts,omitempty"`
	// offer add more owners
	MultipleOwners *bool                          `json:"multipleOwners,omitempty" url:"multipleOwners,omitempty"`
	Oaddress       *TemplateElement               `json:"oaddress,omitempty" url:"oaddress,omitempty"`
	Ocity          *TemplateElement               `json:"ocity,omitempty" url:"ocity,omitempty"`
	Ocountry       *TemplateElement               `json:"ocountry,omitempty" url:"ocountry,omitempty"`
	Odriverstate   *TemplateElement               `json:"odriverstate,omitempty" url:"odriverstate,omitempty"`
	Ostate         *TemplateElement               `json:"ostate,omitempty" url:"ostate,omitempty"`
	Ownerdob       *TemplateElement               `json:"ownerdob,omitempty" url:"ownerdob,omitempty"`
	Ownerdriver    *TemplateElement               `json:"ownerdriver,omitempty" url:"ownerdriver,omitempty"`
	Owneremail     *TemplateElement               `json:"owneremail,omitempty" url:"owneremail,omitempty"`
	Ownername      *TemplateElement               `json:"ownername,omitempty" url:"ownername,omitempty"`
	Ownerpercent   *TemplateElement               `json:"ownerpercent,omitempty" url:"ownerpercent,omitempty"`
	Ownerphone1    *TemplateElement               `json:"ownerphone1,omitempty" url:"ownerphone1,omitempty"`
	Ownerphone2    *TemplateElement               `json:"ownerphone2,omitempty" url:"ownerphone2,omitempty"`
	Ownerssn       *TemplateElement               `json:"ownerssn,omitempty" url:"ownerssn,omitempty"`
	Ownertitle     *TemplateElement               `json:"ownertitle,omitempty" url:"ownertitle,omitempty"`
	Ozip           *TemplateElement               `json:"ozip,omitempty" url:"ozip,omitempty"`
	SubFooter      *SubFooter                     `json:"subFooter,omitempty" url:"subFooter,omitempty"`
	SubHeader      *SubHeader                     `json:"subHeader,omitempty" url:"subHeader,omitempty"`
	Visible        *Visible                       `json:"visible,omitempty" url:"visible,omitempty"`
	AdditionalData *TemplateAdditionalDataSection `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OwnersSection) GetContactEmail() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.ContactEmail
}

func (o *OwnersSection) GetContactName() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.ContactName
}

func (o *OwnersSection) GetContactPhone() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.ContactPhone
}

func (o *OwnersSection) GetContactTitle() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.ContactTitle
}

func (o *OwnersSection) GetMultipleContacts() *bool {
	if o == nil {
		return nil
	}
	return o.MultipleContacts
}

func (o *OwnersSection) GetMultipleOwners() *bool {
	if o == nil {
		return nil
	}
	return o.MultipleOwners
}

func (o *OwnersSection) GetOaddress() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Oaddress
}

func (o *OwnersSection) GetOcity() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ocity
}

func (o *OwnersSection) GetOcountry() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ocountry
}

func (o *OwnersSection) GetOdriverstate() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Odriverstate
}

func (o *OwnersSection) GetOstate() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ostate
}

func (o *OwnersSection) GetOwnerdob() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerdob
}

func (o *OwnersSection) GetOwnerdriver() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerdriver
}

func (o *OwnersSection) GetOwneremail() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Owneremail
}

func (o *OwnersSection) GetOwnername() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownername
}

func (o *OwnersSection) GetOwnerpercent() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerpercent
}

func (o *OwnersSection) GetOwnerphone1() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerphone1
}

func (o *OwnersSection) GetOwnerphone2() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerphone2
}

func (o *OwnersSection) GetOwnerssn() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownerssn
}

func (o *OwnersSection) GetOwnertitle() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ownertitle
}

func (o *OwnersSection) GetOzip() *TemplateElement {
	if o == nil {
		return nil
	}
	return o.Ozip
}

func (o *OwnersSection) GetSubFooter() *SubFooter {
	if o == nil {
		return nil
	}
	return o.SubFooter
}

func (o *OwnersSection) GetSubHeader() *SubHeader {
	if o == nil {
		return nil
	}
	return o.SubHeader
}

func (o *OwnersSection) GetVisible() *Visible {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *OwnersSection) GetAdditionalData() *TemplateAdditionalDataSection {
	if o == nil {
		return nil
	}
	return o.AdditionalData
}

func (o *OwnersSection) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OwnersSection) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetContactEmail sets the ContactEmail field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetContactEmail(contactEmail *TemplateElement) {
	o.ContactEmail = contactEmail
	o.require(ownersSectionFieldContactEmail)
}

// SetContactName sets the ContactName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetContactName(contactName *TemplateElement) {
	o.ContactName = contactName
	o.require(ownersSectionFieldContactName)
}

// SetContactPhone sets the ContactPhone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetContactPhone(contactPhone *TemplateElement) {
	o.ContactPhone = contactPhone
	o.require(ownersSectionFieldContactPhone)
}

// SetContactTitle sets the ContactTitle field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetContactTitle(contactTitle *TemplateElement) {
	o.ContactTitle = contactTitle
	o.require(ownersSectionFieldContactTitle)
}

// SetMultipleContacts sets the MultipleContacts field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetMultipleContacts(multipleContacts *bool) {
	o.MultipleContacts = multipleContacts
	o.require(ownersSectionFieldMultipleContacts)
}

// SetMultipleOwners sets the MultipleOwners field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetMultipleOwners(multipleOwners *bool) {
	o.MultipleOwners = multipleOwners
	o.require(ownersSectionFieldMultipleOwners)
}

// SetOaddress sets the Oaddress field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOaddress(oaddress *TemplateElement) {
	o.Oaddress = oaddress
	o.require(ownersSectionFieldOaddress)
}

// SetOcity sets the Ocity field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOcity(ocity *TemplateElement) {
	o.Ocity = ocity
	o.require(ownersSectionFieldOcity)
}

// SetOcountry sets the Ocountry field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOcountry(ocountry *TemplateElement) {
	o.Ocountry = ocountry
	o.require(ownersSectionFieldOcountry)
}

// SetOdriverstate sets the Odriverstate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOdriverstate(odriverstate *TemplateElement) {
	o.Odriverstate = odriverstate
	o.require(ownersSectionFieldOdriverstate)
}

// SetOstate sets the Ostate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOstate(ostate *TemplateElement) {
	o.Ostate = ostate
	o.require(ownersSectionFieldOstate)
}

// SetOwnerdob sets the Ownerdob field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOwnerdob(ownerdob *TemplateElement) {
	o.Ownerdob = ownerdob
	o.require(ownersSectionFieldOwnerdob)
}

// SetOwnerdriver sets the Ownerdriver field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOwnerdriver(ownerdriver *TemplateElement) {
	o.Ownerdriver = ownerdriver
	o.require(ownersSectionFieldOwnerdriver)
}

// SetOwneremail sets the Owneremail field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOwneremail(owneremail *TemplateElement) {
	o.Owneremail = owneremail
	o.require(ownersSectionFieldOwneremail)
}

// SetOwnername sets the Ownername field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOwnername(ownername *TemplateElement) {
	o.Ownername = ownername
	o.require(ownersSectionFieldOwnername)
}

// SetOwnerpercent sets the Ownerpercent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOwnerpercent(ownerpercent *TemplateElement) {
	o.Ownerpercent = ownerpercent
	o.require(ownersSectionFieldOwnerpercent)
}

// SetOwnerphone1 sets the Ownerphone1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOwnerphone1(ownerphone1 *TemplateElement) {
	o.Ownerphone1 = ownerphone1
	o.require(ownersSectionFieldOwnerphone1)
}

// SetOwnerphone2 sets the Ownerphone2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOwnerphone2(ownerphone2 *TemplateElement) {
	o.Ownerphone2 = ownerphone2
	o.require(ownersSectionFieldOwnerphone2)
}

// SetOwnerssn sets the Ownerssn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOwnerssn(ownerssn *TemplateElement) {
	o.Ownerssn = ownerssn
	o.require(ownersSectionFieldOwnerssn)
}

// SetOwnertitle sets the Ownertitle field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOwnertitle(ownertitle *TemplateElement) {
	o.Ownertitle = ownertitle
	o.require(ownersSectionFieldOwnertitle)
}

// SetOzip sets the Ozip field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetOzip(ozip *TemplateElement) {
	o.Ozip = ozip
	o.require(ownersSectionFieldOzip)
}

// SetSubFooter sets the SubFooter field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetSubFooter(subFooter *SubFooter) {
	o.SubFooter = subFooter
	o.require(ownersSectionFieldSubFooter)
}

// SetSubHeader sets the SubHeader field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetSubHeader(subHeader *SubHeader) {
	o.SubHeader = subHeader
	o.require(ownersSectionFieldSubHeader)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetVisible(visible *Visible) {
	o.Visible = visible
	o.require(ownersSectionFieldVisible)
}

// SetAdditionalData sets the AdditionalData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OwnersSection) SetAdditionalData(additionalData *TemplateAdditionalDataSection) {
	o.AdditionalData = additionalData
	o.require(ownersSectionFieldAdditionalData)
}

func (o *OwnersSection) UnmarshalJSON(data []byte) error {
	type unmarshaler OwnersSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OwnersSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OwnersSection) MarshalJSON() ([]byte, error) {
	type embed OwnersSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OwnersSection) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	payabliApiResponseTemplateIdFieldIsSuccess      = big.NewInt(1 << 0)
	payabliApiResponseTemplateIdFieldPageIdentifier = big.NewInt(1 << 1)
	payabliApiResponseTemplateIdFieldResponseCode   = big.NewInt(1 << 2)
	payabliApiResponseTemplateIdFieldResponseData   = big.NewInt(1 << 3)
	payabliApiResponseTemplateIdFieldResponseText   = big.NewInt(1 << 4)
)

type PayabliApiResponseTemplateId struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode   `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	// When the operation is successful, contains the template's ID.
	ResponseData *Responsedatanonobject `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText ResponseText           `json:"responseText" url:"responseText"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponseTemplateId) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponseTemplateId) GetPageIdentifier() *PageIdentifier {
	if p == nil {
		return nil
	}
	return p.PageIdentifier
}

func (p *PayabliApiResponseTemplateId) GetResponseCode() *Responsecode {
	if p == nil {
		return nil
	}
	return p.ResponseCode
}

func (p *PayabliApiResponseTemplateId) GetResponseData() *Responsedatanonobject {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponseTemplateId) GetResponseText() ResponseText {
	if p == nil {
		return ""
	}
	return p.ResponseText
}

func (p *PayabliApiResponseTemplateId) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponseTemplateId) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetIsSuccess sets the IsSuccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponseTemplateId) SetIsSuccess(isSuccess *IsSuccess) {
	p.IsSuccess = isSuccess
	p.require(payabliApiResponseTemplateIdFieldIsSuccess)
}

// SetPageIdentifier sets the PageIdentifier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponseTemplateId) SetPageIdentifier(pageIdentifier *PageIdentifier) {
	p.PageIdentifier = pageIdentifier
	p.require(payabliApiResponseTemplateIdFieldPageIdentifier)
}

// SetResponseCode sets the ResponseCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponseTemplateId) SetResponseCode(responseCode *Responsecode) {
	p.ResponseCode = responseCode
	p.require(payabliApiResponseTemplateIdFieldResponseCode)
}

// SetResponseData sets the ResponseData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponseTemplateId) SetResponseData(responseData *Responsedatanonobject) {
	p.ResponseData = responseData
	p.require(payabliApiResponseTemplateIdFieldResponseData)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponseTemplateId) SetResponseText(responseText ResponseText) {
	p.ResponseText = responseText
	p.require(payabliApiResponseTemplateIdFieldResponseText)
}

func (p *PayabliApiResponseTemplateId) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponseTemplateId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponseTemplateId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponseTemplateId) MarshalJSON() ([]byte, error) {
	type embed PayabliApiResponseTemplateId
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PayabliApiResponseTemplateId) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Used to identify the risk workflow used to review this account. Policy IDs must be created before using automatic underwriting, and is **required** when `method` is `automatic`.
type PolicyId = string

// The element's column position.
type PosCol = int

// The element's row position.
type PosRow = int

var (
	processingSectionFieldAvgmonthly    = big.NewInt(1 << 0)
	processingSectionFieldBinperson     = big.NewInt(1 << 1)
	processingSectionFieldBinphone      = big.NewInt(1 << 2)
	processingSectionFieldBinweb        = big.NewInt(1 << 3)
	processingSectionFieldBsummary      = big.NewInt(1 << 4)
	processingSectionFieldHighticketamt = big.NewInt(1 << 5)
	processingSectionFieldMcc           = big.NewInt(1 << 6)
	processingSectionFieldSubFooter     = big.NewInt(1 << 7)
	processingSectionFieldSubHeader     = big.NewInt(1 << 8)
	processingSectionFieldTicketamt     = big.NewInt(1 << 9)
	processingSectionFieldVisible       = big.NewInt(1 << 10)
	processingSectionFieldWhenCharged   = big.NewInt(1 << 11)
	processingSectionFieldWhenDelivered = big.NewInt(1 << 12)
	processingSectionFieldWhenProvided  = big.NewInt(1 << 13)
	processingSectionFieldWhenRefunded  = big.NewInt(1 << 14)
)

type ProcessingSection struct {
	Avgmonthly    *TemplateElement `json:"avgmonthly,omitempty" url:"avgmonthly,omitempty"`
	Binperson     *TemplateElement `json:"binperson,omitempty" url:"binperson,omitempty"`
	Binphone      *TemplateElement `json:"binphone,omitempty" url:"binphone,omitempty"`
	Binweb        *TemplateElement `json:"binweb,omitempty" url:"binweb,omitempty"`
	Bsummary      *TemplateElement `json:"bsummary,omitempty" url:"bsummary,omitempty"`
	Highticketamt *TemplateElement `json:"highticketamt,omitempty" url:"highticketamt,omitempty"`
	Mcc           *TemplateElement `json:"mcc,omitempty" url:"mcc,omitempty"`
	SubFooter     *SubFooter       `json:"subFooter,omitempty" url:"subFooter,omitempty"`
	SubHeader     *SubHeader       `json:"subHeader,omitempty" url:"subHeader,omitempty"`
	Ticketamt     *TemplateElement `json:"ticketamt,omitempty" url:"ticketamt,omitempty"`
	Visible       *Visible         `json:"visible,omitempty" url:"visible,omitempty"`
	WhenCharged   *TemplateElement `json:"whenCharged,omitempty" url:"whenCharged,omitempty"`
	WhenDelivered *TemplateElement `json:"whenDelivered,omitempty" url:"whenDelivered,omitempty"`
	WhenProvided  *TemplateElement `json:"whenProvided,omitempty" url:"whenProvided,omitempty"`
	WhenRefunded  *TemplateElement `json:"whenRefunded,omitempty" url:"whenRefunded,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessingSection) GetAvgmonthly() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Avgmonthly
}

func (p *ProcessingSection) GetBinperson() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Binperson
}

func (p *ProcessingSection) GetBinphone() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Binphone
}

func (p *ProcessingSection) GetBinweb() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Binweb
}

func (p *ProcessingSection) GetBsummary() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Bsummary
}

func (p *ProcessingSection) GetHighticketamt() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Highticketamt
}

func (p *ProcessingSection) GetMcc() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Mcc
}

func (p *ProcessingSection) GetSubFooter() *SubFooter {
	if p == nil {
		return nil
	}
	return p.SubFooter
}

func (p *ProcessingSection) GetSubHeader() *SubHeader {
	if p == nil {
		return nil
	}
	return p.SubHeader
}

func (p *ProcessingSection) GetTicketamt() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.Ticketamt
}

func (p *ProcessingSection) GetVisible() *Visible {
	if p == nil {
		return nil
	}
	return p.Visible
}

func (p *ProcessingSection) GetWhenCharged() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.WhenCharged
}

func (p *ProcessingSection) GetWhenDelivered() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.WhenDelivered
}

func (p *ProcessingSection) GetWhenProvided() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.WhenProvided
}

func (p *ProcessingSection) GetWhenRefunded() *TemplateElement {
	if p == nil {
		return nil
	}
	return p.WhenRefunded
}

func (p *ProcessingSection) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessingSection) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetAvgmonthly sets the Avgmonthly field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetAvgmonthly(avgmonthly *TemplateElement) {
	p.Avgmonthly = avgmonthly
	p.require(processingSectionFieldAvgmonthly)
}

// SetBinperson sets the Binperson field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetBinperson(binperson *TemplateElement) {
	p.Binperson = binperson
	p.require(processingSectionFieldBinperson)
}

// SetBinphone sets the Binphone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetBinphone(binphone *TemplateElement) {
	p.Binphone = binphone
	p.require(processingSectionFieldBinphone)
}

// SetBinweb sets the Binweb field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetBinweb(binweb *TemplateElement) {
	p.Binweb = binweb
	p.require(processingSectionFieldBinweb)
}

// SetBsummary sets the Bsummary field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetBsummary(bsummary *TemplateElement) {
	p.Bsummary = bsummary
	p.require(processingSectionFieldBsummary)
}

// SetHighticketamt sets the Highticketamt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetHighticketamt(highticketamt *TemplateElement) {
	p.Highticketamt = highticketamt
	p.require(processingSectionFieldHighticketamt)
}

// SetMcc sets the Mcc field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetMcc(mcc *TemplateElement) {
	p.Mcc = mcc
	p.require(processingSectionFieldMcc)
}

// SetSubFooter sets the SubFooter field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetSubFooter(subFooter *SubFooter) {
	p.SubFooter = subFooter
	p.require(processingSectionFieldSubFooter)
}

// SetSubHeader sets the SubHeader field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetSubHeader(subHeader *SubHeader) {
	p.SubHeader = subHeader
	p.require(processingSectionFieldSubHeader)
}

// SetTicketamt sets the Ticketamt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetTicketamt(ticketamt *TemplateElement) {
	p.Ticketamt = ticketamt
	p.require(processingSectionFieldTicketamt)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetVisible(visible *Visible) {
	p.Visible = visible
	p.require(processingSectionFieldVisible)
}

// SetWhenCharged sets the WhenCharged field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetWhenCharged(whenCharged *TemplateElement) {
	p.WhenCharged = whenCharged
	p.require(processingSectionFieldWhenCharged)
}

// SetWhenDelivered sets the WhenDelivered field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetWhenDelivered(whenDelivered *TemplateElement) {
	p.WhenDelivered = whenDelivered
	p.require(processingSectionFieldWhenDelivered)
}

// SetWhenProvided sets the WhenProvided field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetWhenProvided(whenProvided *TemplateElement) {
	p.WhenProvided = whenProvided
	p.require(processingSectionFieldWhenProvided)
}

// SetWhenRefunded sets the WhenRefunded field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProcessingSection) SetWhenRefunded(whenRefunded *TemplateElement) {
	p.WhenRefunded = whenRefunded
	p.require(processingSectionFieldWhenRefunded)
}

func (p *ProcessingSection) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessingSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessingSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessingSection) MarshalJSON() ([]byte, error) {
	type embed ProcessingSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *ProcessingSection) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	salesSectionFieldSalesCode = big.NewInt(1 << 0)
	salesSectionFieldSalesCrm  = big.NewInt(1 << 1)
)

type SalesSection struct {
	SalesCode *SalesCode `json:"salesCode,omitempty" url:"salesCode,omitempty"`
	SalesCrm  *string    `json:"salesCRM,omitempty" url:"salesCRM,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SalesSection) GetSalesCode() *SalesCode {
	if s == nil {
		return nil
	}
	return s.SalesCode
}

func (s *SalesSection) GetSalesCrm() *string {
	if s == nil {
		return nil
	}
	return s.SalesCrm
}

func (s *SalesSection) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SalesSection) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetSalesCode sets the SalesCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SalesSection) SetSalesCode(salesCode *SalesCode) {
	s.SalesCode = salesCode
	s.require(salesSectionFieldSalesCode)
}

// SetSalesCrm sets the SalesCrm field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SalesSection) SetSalesCrm(salesCrm *string) {
	s.SalesCrm = salesCrm
	s.require(salesSectionFieldSalesCrm)
}

func (s *SalesSection) UnmarshalJSON(data []byte) error {
	type unmarshaler SalesSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SalesSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SalesSection) MarshalJSON() ([]byte, error) {
	type embed SalesSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SalesSection) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Details about pricing and payment services for a business.
var (
	servicesSectionFieldAch       = big.NewInt(1 << 0)
	servicesSectionFieldCard      = big.NewInt(1 << 1)
	servicesSectionFieldSubFooter = big.NewInt(1 << 2)
	servicesSectionFieldSubHeader = big.NewInt(1 << 3)
	servicesSectionFieldVisible   = big.NewInt(1 << 4)
)

type ServicesSection struct {
	Ach       *AchService  `json:"ach,omitempty" url:"ach,omitempty"`
	Card      *CardService `json:"card,omitempty" url:"card,omitempty"`
	SubFooter *SubFooter   `json:"subFooter,omitempty" url:"subFooter,omitempty"`
	SubHeader *SubHeader   `json:"subHeader,omitempty" url:"subHeader,omitempty"`
	Visible   *Visible     `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ServicesSection) GetAch() *AchService {
	if s == nil {
		return nil
	}
	return s.Ach
}

func (s *ServicesSection) GetCard() *CardService {
	if s == nil {
		return nil
	}
	return s.Card
}

func (s *ServicesSection) GetSubFooter() *SubFooter {
	if s == nil {
		return nil
	}
	return s.SubFooter
}

func (s *ServicesSection) GetSubHeader() *SubHeader {
	if s == nil {
		return nil
	}
	return s.SubHeader
}

func (s *ServicesSection) GetVisible() *Visible {
	if s == nil {
		return nil
	}
	return s.Visible
}

func (s *ServicesSection) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ServicesSection) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetAch sets the Ach field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *ServicesSection) SetAch(ach *AchService) {
	s.Ach = ach
	s.require(servicesSectionFieldAch)
}

// SetCard sets the Card field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *ServicesSection) SetCard(card *CardService) {
	s.Card = card
	s.require(servicesSectionFieldCard)
}

// SetSubFooter sets the SubFooter field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *ServicesSection) SetSubFooter(subFooter *SubFooter) {
	s.SubFooter = subFooter
	s.require(servicesSectionFieldSubFooter)
}

// SetSubHeader sets the SubHeader field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *ServicesSection) SetSubHeader(subHeader *SubHeader) {
	s.SubHeader = subHeader
	s.require(servicesSectionFieldSubHeader)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *ServicesSection) SetVisible(visible *Visible) {
	s.Visible = visible
	s.require(servicesSectionFieldVisible)
}

func (s *ServicesSection) UnmarshalJSON(data []byte) error {
	type unmarshaler ServicesSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ServicesSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ServicesSection) MarshalJSON() ([]byte, error) {
	type embed ServicesSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *ServicesSection) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	signerSectionFieldVisible                 = big.NewInt(1 << 0)
	signerSectionFieldName                    = big.NewInt(1 << 1)
	signerSectionFieldSsn                     = big.NewInt(1 << 2)
	signerSectionFieldDob                     = big.NewInt(1 << 3)
	signerSectionFieldPhone                   = big.NewInt(1 << 4)
	signerSectionFieldEmail                   = big.NewInt(1 << 5)
	signerSectionFieldAddress                 = big.NewInt(1 << 6)
	signerSectionFieldAddress1                = big.NewInt(1 << 7)
	signerSectionFieldCity                    = big.NewInt(1 << 8)
	signerSectionFieldCountry                 = big.NewInt(1 << 9)
	signerSectionFieldState                   = big.NewInt(1 << 10)
	signerSectionFieldZip                     = big.NewInt(1 << 11)
	signerSectionFieldAcceptance              = big.NewInt(1 << 12)
	signerSectionFieldSignedDocumentReference = big.NewInt(1 << 13)
	signerSectionFieldAdditionalData          = big.NewInt(1 << 14)
)

type SignerSection struct {
	Visible                 *Visible                       `json:"visible,omitempty" url:"visible,omitempty"`
	Name                    *TemplateElement               `json:"name,omitempty" url:"name,omitempty"`
	Ssn                     *TemplateElement               `json:"ssn,omitempty" url:"ssn,omitempty"`
	Dob                     *TemplateElement               `json:"dob,omitempty" url:"dob,omitempty"`
	Phone                   *TemplateElement               `json:"phone,omitempty" url:"phone,omitempty"`
	Email                   *TemplateElement               `json:"email,omitempty" url:"email,omitempty"`
	Address                 *TemplateElement               `json:"address,omitempty" url:"address,omitempty"`
	Address1                *TemplateElement               `json:"address1,omitempty" url:"address1,omitempty"`
	City                    *TemplateElement               `json:"city,omitempty" url:"city,omitempty"`
	Country                 *TemplateElement               `json:"country,omitempty" url:"country,omitempty"`
	State                   *TemplateElement               `json:"state,omitempty" url:"state,omitempty"`
	Zip                     *TemplateElement               `json:"zip,omitempty" url:"zip,omitempty"`
	Acceptance              *TemplateElement               `json:"acceptance,omitempty" url:"acceptance,omitempty"`
	SignedDocumentReference *TemplateElement               `json:"signedDocumentReference,omitempty" url:"signedDocumentReference,omitempty"`
	AdditionalData          *TemplateAdditionalDataSection `json:"additionalData,omitempty" url:"additionalData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SignerSection) GetVisible() *Visible {
	if s == nil {
		return nil
	}
	return s.Visible
}

func (s *SignerSection) GetName() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SignerSection) GetSsn() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Ssn
}

func (s *SignerSection) GetDob() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Dob
}

func (s *SignerSection) GetPhone() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Phone
}

func (s *SignerSection) GetEmail() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Email
}

func (s *SignerSection) GetAddress() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Address
}

func (s *SignerSection) GetAddress1() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Address1
}

func (s *SignerSection) GetCity() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.City
}

func (s *SignerSection) GetCountry() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Country
}

func (s *SignerSection) GetState() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.State
}

func (s *SignerSection) GetZip() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Zip
}

func (s *SignerSection) GetAcceptance() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.Acceptance
}

func (s *SignerSection) GetSignedDocumentReference() *TemplateElement {
	if s == nil {
		return nil
	}
	return s.SignedDocumentReference
}

func (s *SignerSection) GetAdditionalData() *TemplateAdditionalDataSection {
	if s == nil {
		return nil
	}
	return s.AdditionalData
}

func (s *SignerSection) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SignerSection) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetVisible(visible *Visible) {
	s.Visible = visible
	s.require(signerSectionFieldVisible)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetName(name *TemplateElement) {
	s.Name = name
	s.require(signerSectionFieldName)
}

// SetSsn sets the Ssn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetSsn(ssn *TemplateElement) {
	s.Ssn = ssn
	s.require(signerSectionFieldSsn)
}

// SetDob sets the Dob field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetDob(dob *TemplateElement) {
	s.Dob = dob
	s.require(signerSectionFieldDob)
}

// SetPhone sets the Phone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetPhone(phone *TemplateElement) {
	s.Phone = phone
	s.require(signerSectionFieldPhone)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetEmail(email *TemplateElement) {
	s.Email = email
	s.require(signerSectionFieldEmail)
}

// SetAddress sets the Address field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetAddress(address *TemplateElement) {
	s.Address = address
	s.require(signerSectionFieldAddress)
}

// SetAddress1 sets the Address1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetAddress1(address1 *TemplateElement) {
	s.Address1 = address1
	s.require(signerSectionFieldAddress1)
}

// SetCity sets the City field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetCity(city *TemplateElement) {
	s.City = city
	s.require(signerSectionFieldCity)
}

// SetCountry sets the Country field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetCountry(country *TemplateElement) {
	s.Country = country
	s.require(signerSectionFieldCountry)
}

// SetState sets the State field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetState(state *TemplateElement) {
	s.State = state
	s.require(signerSectionFieldState)
}

// SetZip sets the Zip field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetZip(zip *TemplateElement) {
	s.Zip = zip
	s.require(signerSectionFieldZip)
}

// SetAcceptance sets the Acceptance field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetAcceptance(acceptance *TemplateElement) {
	s.Acceptance = acceptance
	s.require(signerSectionFieldAcceptance)
}

// SetSignedDocumentReference sets the SignedDocumentReference field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetSignedDocumentReference(signedDocumentReference *TemplateElement) {
	s.SignedDocumentReference = signedDocumentReference
	s.require(signerSectionFieldSignedDocumentReference)
}

// SetAdditionalData sets the AdditionalData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SignerSection) SetAdditionalData(additionalData *TemplateAdditionalDataSection) {
	s.AdditionalData = additionalData
	s.require(signerSectionFieldAdditionalData)
}

func (s *SignerSection) UnmarshalJSON(data []byte) error {
	type unmarshaler SignerSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SignerSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SignerSection) MarshalJSON() ([]byte, error) {
	type embed SignerSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SignerSection) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubFooter = string

type SubHeader = string

var (
	templateAdditionalDataFieldFieldVisible  = big.NewInt(1 << 0)
	templateAdditionalDataFieldFieldReadOnly = big.NewInt(1 << 1)
	templateAdditionalDataFieldFieldRequired = big.NewInt(1 << 2)
	templateAdditionalDataFieldFieldPosRow   = big.NewInt(1 << 3)
	templateAdditionalDataFieldFieldPosCol   = big.NewInt(1 << 4)
	templateAdditionalDataFieldFieldValue    = big.NewInt(1 << 5)
	templateAdditionalDataFieldFieldLabel    = big.NewInt(1 << 6)
	templateAdditionalDataFieldFieldType     = big.NewInt(1 << 7)
)

type TemplateAdditionalDataField struct {
	Visible  *Visible         `json:"visible,omitempty" url:"visible,omitempty"`
	ReadOnly *ReadOnly        `json:"readOnly,omitempty" url:"readOnly,omitempty"`
	Required *RequiredElement `json:"required,omitempty" url:"required,omitempty"`
	PosRow   *PosRow          `json:"posRow,omitempty" url:"posRow,omitempty"`
	PosCol   *PosCol          `json:"posCol,omitempty" url:"posCol,omitempty"`
	Value    *ValueTemplates  `json:"value,omitempty" url:"value,omitempty"`
	Label    *string          `json:"label,omitempty" url:"label,omitempty"`
	Type     *string          `json:"type,omitempty" url:"type,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateAdditionalDataField) GetVisible() *Visible {
	if t == nil {
		return nil
	}
	return t.Visible
}

func (t *TemplateAdditionalDataField) GetReadOnly() *ReadOnly {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateAdditionalDataField) GetRequired() *RequiredElement {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateAdditionalDataField) GetPosRow() *PosRow {
	if t == nil {
		return nil
	}
	return t.PosRow
}

func (t *TemplateAdditionalDataField) GetPosCol() *PosCol {
	if t == nil {
		return nil
	}
	return t.PosCol
}

func (t *TemplateAdditionalDataField) GetValue() *ValueTemplates {
	if t == nil {
		return nil
	}
	return t.Value
}

func (t *TemplateAdditionalDataField) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateAdditionalDataField) GetType() *string {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *TemplateAdditionalDataField) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateAdditionalDataField) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateAdditionalDataField) SetVisible(visible *Visible) {
	t.Visible = visible
	t.require(templateAdditionalDataFieldFieldVisible)
}

// SetReadOnly sets the ReadOnly field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateAdditionalDataField) SetReadOnly(readOnly *ReadOnly) {
	t.ReadOnly = readOnly
	t.require(templateAdditionalDataFieldFieldReadOnly)
}

// SetRequired sets the Required field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateAdditionalDataField) SetRequired(required *RequiredElement) {
	t.Required = required
	t.require(templateAdditionalDataFieldFieldRequired)
}

// SetPosRow sets the PosRow field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateAdditionalDataField) SetPosRow(posRow *PosRow) {
	t.PosRow = posRow
	t.require(templateAdditionalDataFieldFieldPosRow)
}

// SetPosCol sets the PosCol field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateAdditionalDataField) SetPosCol(posCol *PosCol) {
	t.PosCol = posCol
	t.require(templateAdditionalDataFieldFieldPosCol)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateAdditionalDataField) SetValue(value *ValueTemplates) {
	t.Value = value
	t.require(templateAdditionalDataFieldFieldValue)
}

// SetLabel sets the Label field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateAdditionalDataField) SetLabel(label *string) {
	t.Label = label
	t.require(templateAdditionalDataFieldFieldLabel)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateAdditionalDataField) SetType(type_ *string) {
	t.Type = type_
	t.require(templateAdditionalDataFieldFieldType)
}

func (t *TemplateAdditionalDataField) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateAdditionalDataField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateAdditionalDataField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateAdditionalDataField) MarshalJSON() ([]byte, error) {
	type embed TemplateAdditionalDataField
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TemplateAdditionalDataField) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	templateAdditionalDataSectionFieldVisible = big.NewInt(1 << 0)
	templateAdditionalDataSectionFieldFields  = big.NewInt(1 << 1)
)

type TemplateAdditionalDataSection struct {
	Visible Visible                                 `json:"visible,omitempty" url:"visible,omitempty"`
	Fields  map[string]*TemplateAdditionalDataField `json:"fields" url:"fields"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateAdditionalDataSection) GetVisible() Visible {
	if t == nil {
		return nil
	}
	return t.Visible
}

func (t *TemplateAdditionalDataSection) GetFields() map[string]*TemplateAdditionalDataField {
	if t == nil {
		return nil
	}
	return t.Fields
}

func (t *TemplateAdditionalDataSection) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateAdditionalDataSection) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateAdditionalDataSection) SetVisible(visible Visible) {
	t.Visible = visible
	t.require(templateAdditionalDataSectionFieldVisible)
}

// SetFields sets the Fields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateAdditionalDataSection) SetFields(fields map[string]*TemplateAdditionalDataField) {
	t.Fields = fields
	t.require(templateAdditionalDataSectionFieldFields)
}

func (t *TemplateAdditionalDataSection) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateAdditionalDataSection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateAdditionalDataSection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateAdditionalDataSection) MarshalJSON() ([]byte, error) {
	type embed TemplateAdditionalDataSection
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TemplateAdditionalDataSection) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	templateContentFieldBusinessData     = big.NewInt(1 << 0)
	templateContentFieldDocumentsData    = big.NewInt(1 << 1)
	templateContentFieldOwnershipData    = big.NewInt(1 << 2)
	templateContentFieldProcessingData   = big.NewInt(1 << 3)
	templateContentFieldSalesData        = big.NewInt(1 << 4)
	templateContentFieldServicesData     = big.NewInt(1 << 5)
	templateContentFieldUnderwritingData = big.NewInt(1 << 6)
)

type TemplateContent struct {
	BusinessData     *BusinessSection   `json:"businessData,omitempty" url:"businessData,omitempty"`
	DocumentsData    *DocumentSection   `json:"documentsData,omitempty" url:"documentsData,omitempty"`
	OwnershipData    *OwnersSection     `json:"ownershipData,omitempty" url:"ownershipData,omitempty"`
	ProcessingData   *ProcessingSection `json:"processingData,omitempty" url:"processingData,omitempty"`
	SalesData        *SalesSection      `json:"salesData,omitempty" url:"salesData,omitempty"`
	ServicesData     *ServicesSection   `json:"servicesData,omitempty" url:"servicesData,omitempty"`
	UnderwritingData *UnderwritingData  `json:"underwritingData,omitempty" url:"underwritingData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateContent) GetBusinessData() *BusinessSection {
	if t == nil {
		return nil
	}
	return t.BusinessData
}

func (t *TemplateContent) GetDocumentsData() *DocumentSection {
	if t == nil {
		return nil
	}
	return t.DocumentsData
}

func (t *TemplateContent) GetOwnershipData() *OwnersSection {
	if t == nil {
		return nil
	}
	return t.OwnershipData
}

func (t *TemplateContent) GetProcessingData() *ProcessingSection {
	if t == nil {
		return nil
	}
	return t.ProcessingData
}

func (t *TemplateContent) GetSalesData() *SalesSection {
	if t == nil {
		return nil
	}
	return t.SalesData
}

func (t *TemplateContent) GetServicesData() *ServicesSection {
	if t == nil {
		return nil
	}
	return t.ServicesData
}

func (t *TemplateContent) GetUnderwritingData() *UnderwritingData {
	if t == nil {
		return nil
	}
	return t.UnderwritingData
}

func (t *TemplateContent) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateContent) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetBusinessData sets the BusinessData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContent) SetBusinessData(businessData *BusinessSection) {
	t.BusinessData = businessData
	t.require(templateContentFieldBusinessData)
}

// SetDocumentsData sets the DocumentsData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContent) SetDocumentsData(documentsData *DocumentSection) {
	t.DocumentsData = documentsData
	t.require(templateContentFieldDocumentsData)
}

// SetOwnershipData sets the OwnershipData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContent) SetOwnershipData(ownershipData *OwnersSection) {
	t.OwnershipData = ownershipData
	t.require(templateContentFieldOwnershipData)
}

// SetProcessingData sets the ProcessingData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContent) SetProcessingData(processingData *ProcessingSection) {
	t.ProcessingData = processingData
	t.require(templateContentFieldProcessingData)
}

// SetSalesData sets the SalesData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContent) SetSalesData(salesData *SalesSection) {
	t.SalesData = salesData
	t.require(templateContentFieldSalesData)
}

// SetServicesData sets the ServicesData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContent) SetServicesData(servicesData *ServicesSection) {
	t.ServicesData = servicesData
	t.require(templateContentFieldServicesData)
}

// SetUnderwritingData sets the UnderwritingData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContent) SetUnderwritingData(underwritingData *UnderwritingData) {
	t.UnderwritingData = underwritingData
	t.require(templateContentFieldUnderwritingData)
}

func (t *TemplateContent) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateContent) MarshalJSON() ([]byte, error) {
	type embed TemplateContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TemplateContent) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	templateContentResponseFieldBusinessData     = big.NewInt(1 << 0)
	templateContentResponseFieldDocumentsData    = big.NewInt(1 << 1)
	templateContentResponseFieldOwnershipData    = big.NewInt(1 << 2)
	templateContentResponseFieldProcessingData   = big.NewInt(1 << 3)
	templateContentResponseFieldSalesData        = big.NewInt(1 << 4)
	templateContentResponseFieldServicesData     = big.NewInt(1 << 5)
	templateContentResponseFieldUnderwritingData = big.NewInt(1 << 6)
)

type TemplateContentResponse struct {
	BusinessData     *BusinessSection          `json:"businessData,omitempty" url:"businessData,omitempty"`
	DocumentsData    *DocumentSection          `json:"documentsData,omitempty" url:"documentsData,omitempty"`
	OwnershipData    *OwnersSection            `json:"ownershipData,omitempty" url:"ownershipData,omitempty"`
	ProcessingData   *ProcessingSection        `json:"processingData,omitempty" url:"processingData,omitempty"`
	SalesData        *SalesSection             `json:"salesData,omitempty" url:"salesData,omitempty"`
	ServicesData     *ServicesSection          `json:"servicesData,omitempty" url:"servicesData,omitempty"`
	UnderwritingData *UnderwritingDataResponse `json:"underwritingData,omitempty" url:"underwritingData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateContentResponse) GetBusinessData() *BusinessSection {
	if t == nil {
		return nil
	}
	return t.BusinessData
}

func (t *TemplateContentResponse) GetDocumentsData() *DocumentSection {
	if t == nil {
		return nil
	}
	return t.DocumentsData
}

func (t *TemplateContentResponse) GetOwnershipData() *OwnersSection {
	if t == nil {
		return nil
	}
	return t.OwnershipData
}

func (t *TemplateContentResponse) GetProcessingData() *ProcessingSection {
	if t == nil {
		return nil
	}
	return t.ProcessingData
}

func (t *TemplateContentResponse) GetSalesData() *SalesSection {
	if t == nil {
		return nil
	}
	return t.SalesData
}

func (t *TemplateContentResponse) GetServicesData() *ServicesSection {
	if t == nil {
		return nil
	}
	return t.ServicesData
}

func (t *TemplateContentResponse) GetUnderwritingData() *UnderwritingDataResponse {
	if t == nil {
		return nil
	}
	return t.UnderwritingData
}

func (t *TemplateContentResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateContentResponse) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetBusinessData sets the BusinessData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContentResponse) SetBusinessData(businessData *BusinessSection) {
	t.BusinessData = businessData
	t.require(templateContentResponseFieldBusinessData)
}

// SetDocumentsData sets the DocumentsData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContentResponse) SetDocumentsData(documentsData *DocumentSection) {
	t.DocumentsData = documentsData
	t.require(templateContentResponseFieldDocumentsData)
}

// SetOwnershipData sets the OwnershipData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContentResponse) SetOwnershipData(ownershipData *OwnersSection) {
	t.OwnershipData = ownershipData
	t.require(templateContentResponseFieldOwnershipData)
}

// SetProcessingData sets the ProcessingData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContentResponse) SetProcessingData(processingData *ProcessingSection) {
	t.ProcessingData = processingData
	t.require(templateContentResponseFieldProcessingData)
}

// SetSalesData sets the SalesData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContentResponse) SetSalesData(salesData *SalesSection) {
	t.SalesData = salesData
	t.require(templateContentResponseFieldSalesData)
}

// SetServicesData sets the ServicesData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContentResponse) SetServicesData(servicesData *ServicesSection) {
	t.ServicesData = servicesData
	t.require(templateContentResponseFieldServicesData)
}

// SetUnderwritingData sets the UnderwritingData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateContentResponse) SetUnderwritingData(underwritingData *UnderwritingDataResponse) {
	t.UnderwritingData = underwritingData
	t.require(templateContentResponseFieldUnderwritingData)
}

func (t *TemplateContentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateContentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateContentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateContentResponse) MarshalJSON() ([]byte, error) {
	type embed TemplateContentResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TemplateContentResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Object containing the template's data.
var (
	templateDataFieldOrgId               = big.NewInt(1 << 0)
	templateDataFieldPricingId           = big.NewInt(1 << 1)
	templateDataFieldTemplateCode        = big.NewInt(1 << 2)
	templateDataFieldTemplateContent     = big.NewInt(1 << 3)
	templateDataFieldTemplateDescription = big.NewInt(1 << 4)
	templateDataFieldTemplateName        = big.NewInt(1 << 5)
)

type TemplateData struct {
	// The ID of the organization the template belongs to.
	OrgId           *Orgid           `json:"orgId,omitempty" url:"orgId,omitempty"`
	PricingId       *int64           `json:"pricingId,omitempty" url:"pricingId,omitempty"`
	TemplateCode    *TemplateCode    `json:"templateCode,omitempty" url:"templateCode,omitempty"`
	TemplateContent *TemplateContent `json:"templateContent,omitempty" url:"templateContent,omitempty"`
	// A description for the template.
	TemplateDescription *string       `json:"templateDescription,omitempty" url:"templateDescription,omitempty"`
	TemplateName        *TemplateName `json:"templateName,omitempty" url:"templateName,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateData) GetOrgId() *Orgid {
	if t == nil {
		return nil
	}
	return t.OrgId
}

func (t *TemplateData) GetPricingId() *int64 {
	if t == nil {
		return nil
	}
	return t.PricingId
}

func (t *TemplateData) GetTemplateCode() *TemplateCode {
	if t == nil {
		return nil
	}
	return t.TemplateCode
}

func (t *TemplateData) GetTemplateContent() *TemplateContent {
	if t == nil {
		return nil
	}
	return t.TemplateContent
}

func (t *TemplateData) GetTemplateDescription() *string {
	if t == nil {
		return nil
	}
	return t.TemplateDescription
}

func (t *TemplateData) GetTemplateName() *TemplateName {
	if t == nil {
		return nil
	}
	return t.TemplateName
}

func (t *TemplateData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateData) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetOrgId sets the OrgId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateData) SetOrgId(orgId *Orgid) {
	t.OrgId = orgId
	t.require(templateDataFieldOrgId)
}

// SetPricingId sets the PricingId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateData) SetPricingId(pricingId *int64) {
	t.PricingId = pricingId
	t.require(templateDataFieldPricingId)
}

// SetTemplateCode sets the TemplateCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateData) SetTemplateCode(templateCode *TemplateCode) {
	t.TemplateCode = templateCode
	t.require(templateDataFieldTemplateCode)
}

// SetTemplateContent sets the TemplateContent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateData) SetTemplateContent(templateContent *TemplateContent) {
	t.TemplateContent = templateContent
	t.require(templateDataFieldTemplateContent)
}

// SetTemplateDescription sets the TemplateDescription field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateData) SetTemplateDescription(templateDescription *string) {
	t.TemplateDescription = templateDescription
	t.require(templateDataFieldTemplateDescription)
}

// SetTemplateName sets the TemplateName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateData) SetTemplateName(templateName *TemplateName) {
	t.TemplateName = templateName
	t.require(templateDataFieldTemplateName)
}

func (t *TemplateData) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateData) MarshalJSON() ([]byte, error) {
	type embed TemplateData
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TemplateData) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	templateElementFieldPosCol   = big.NewInt(1 << 0)
	templateElementFieldPosRow   = big.NewInt(1 << 1)
	templateElementFieldReadOnly = big.NewInt(1 << 2)
	templateElementFieldValue    = big.NewInt(1 << 3)
	templateElementFieldVisible  = big.NewInt(1 << 4)
)

type TemplateElement struct {
	PosCol   *PosCol         `json:"posCol,omitempty" url:"posCol,omitempty"`
	PosRow   *PosRow         `json:"posRow,omitempty" url:"posRow,omitempty"`
	ReadOnly *ReadOnly       `json:"readOnly,omitempty" url:"readOnly,omitempty"`
	Value    *ValueTemplates `json:"value,omitempty" url:"value,omitempty"`
	Visible  *Visible        `json:"visible,omitempty" url:"visible,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateElement) GetPosCol() *PosCol {
	if t == nil {
		return nil
	}
	return t.PosCol
}

func (t *TemplateElement) GetPosRow() *PosRow {
	if t == nil {
		return nil
	}
	return t.PosRow
}

func (t *TemplateElement) GetReadOnly() *ReadOnly {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateElement) GetValue() *ValueTemplates {
	if t == nil {
		return nil
	}
	return t.Value
}

func (t *TemplateElement) GetVisible() *Visible {
	if t == nil {
		return nil
	}
	return t.Visible
}

func (t *TemplateElement) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateElement) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetPosCol sets the PosCol field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateElement) SetPosCol(posCol *PosCol) {
	t.PosCol = posCol
	t.require(templateElementFieldPosCol)
}

// SetPosRow sets the PosRow field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateElement) SetPosRow(posRow *PosRow) {
	t.PosRow = posRow
	t.require(templateElementFieldPosRow)
}

// SetReadOnly sets the ReadOnly field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateElement) SetReadOnly(readOnly *ReadOnly) {
	t.ReadOnly = readOnly
	t.require(templateElementFieldReadOnly)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateElement) SetValue(value *ValueTemplates) {
	t.Value = value
	t.require(templateElementFieldValue)
}

// SetVisible sets the Visible field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateElement) SetVisible(visible *Visible) {
	t.Visible = visible
	t.require(templateElementFieldVisible)
}

func (t *TemplateElement) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateElement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateElement(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateElement) MarshalJSON() ([]byte, error) {
	type embed TemplateElement
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TemplateElement) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	templateQueryRecordFieldAddPrice                   = big.NewInt(1 << 0)
	templateQueryRecordFieldBoardingLinks              = big.NewInt(1 << 1)
	templateQueryRecordFieldCreatedAt                  = big.NewInt(1 << 2)
	templateQueryRecordFieldIdTemplate                 = big.NewInt(1 << 3)
	templateQueryRecordFieldIsRoot                     = big.NewInt(1 << 4)
	templateQueryRecordFieldOrgParentName              = big.NewInt(1 << 5)
	templateQueryRecordFieldRecipientEmailNotification = big.NewInt(1 << 6)
	templateQueryRecordFieldResumable                  = big.NewInt(1 << 7)
	templateQueryRecordFieldTemplateCode               = big.NewInt(1 << 8)
	templateQueryRecordFieldTemplateContent            = big.NewInt(1 << 9)
	templateQueryRecordFieldTemplateDescription        = big.NewInt(1 << 10)
	templateQueryRecordFieldTemplateTitle              = big.NewInt(1 << 11)
	templateQueryRecordFieldUsedBy                     = big.NewInt(1 << 12)
)

type TemplateQueryRecord struct {
	AddPrice                   *bool                       `json:"addPrice,omitempty" url:"addPrice,omitempty"`
	BoardingLinks              []*BoardingQueryLinks       `json:"boardingLinks,omitempty" url:"boardingLinks,omitempty"`
	CreatedAt                  *CreatedAt                  `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	IdTemplate                 *int64                      `json:"idTemplate,omitempty" url:"idTemplate,omitempty"`
	IsRoot                     *IsRoot                     `json:"isRoot,omitempty" url:"isRoot,omitempty"`
	OrgParentName              *OrgParentName              `json:"orgParentName,omitempty" url:"orgParentName,omitempty"`
	RecipientEmailNotification *RecipientEmailNotification `json:"recipientEmailNotification,omitempty" url:"recipientEmailNotification,omitempty"`
	Resumable                  *Resumable                  `json:"resumable,omitempty" url:"resumable,omitempty"`
	TemplateCode               *TemplateCode               `json:"templateCode,omitempty" url:"templateCode,omitempty"`
	TemplateContent            *TemplateContentResponse    `json:"templateContent,omitempty" url:"templateContent,omitempty"`
	TemplateDescription        *string                     `json:"templateDescription,omitempty" url:"templateDescription,omitempty"`
	TemplateTitle              *string                     `json:"templateTitle,omitempty" url:"templateTitle,omitempty"`
	UsedBy                     *int                        `json:"usedBy,omitempty" url:"usedBy,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateQueryRecord) GetAddPrice() *bool {
	if t == nil {
		return nil
	}
	return t.AddPrice
}

func (t *TemplateQueryRecord) GetBoardingLinks() []*BoardingQueryLinks {
	if t == nil {
		return nil
	}
	return t.BoardingLinks
}

func (t *TemplateQueryRecord) GetCreatedAt() *CreatedAt {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TemplateQueryRecord) GetIdTemplate() *int64 {
	if t == nil {
		return nil
	}
	return t.IdTemplate
}

func (t *TemplateQueryRecord) GetIsRoot() *IsRoot {
	if t == nil {
		return nil
	}
	return t.IsRoot
}

func (t *TemplateQueryRecord) GetOrgParentName() *OrgParentName {
	if t == nil {
		return nil
	}
	return t.OrgParentName
}

func (t *TemplateQueryRecord) GetRecipientEmailNotification() *RecipientEmailNotification {
	if t == nil {
		return nil
	}
	return t.RecipientEmailNotification
}

func (t *TemplateQueryRecord) GetResumable() *Resumable {
	if t == nil {
		return nil
	}
	return t.Resumable
}

func (t *TemplateQueryRecord) GetTemplateCode() *TemplateCode {
	if t == nil {
		return nil
	}
	return t.TemplateCode
}

func (t *TemplateQueryRecord) GetTemplateContent() *TemplateContentResponse {
	if t == nil {
		return nil
	}
	return t.TemplateContent
}

func (t *TemplateQueryRecord) GetTemplateDescription() *string {
	if t == nil {
		return nil
	}
	return t.TemplateDescription
}

func (t *TemplateQueryRecord) GetTemplateTitle() *string {
	if t == nil {
		return nil
	}
	return t.TemplateTitle
}

func (t *TemplateQueryRecord) GetUsedBy() *int {
	if t == nil {
		return nil
	}
	return t.UsedBy
}

func (t *TemplateQueryRecord) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateQueryRecord) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetAddPrice sets the AddPrice field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetAddPrice(addPrice *bool) {
	t.AddPrice = addPrice
	t.require(templateQueryRecordFieldAddPrice)
}

// SetBoardingLinks sets the BoardingLinks field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetBoardingLinks(boardingLinks []*BoardingQueryLinks) {
	t.BoardingLinks = boardingLinks
	t.require(templateQueryRecordFieldBoardingLinks)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetCreatedAt(createdAt *CreatedAt) {
	t.CreatedAt = createdAt
	t.require(templateQueryRecordFieldCreatedAt)
}

// SetIdTemplate sets the IdTemplate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetIdTemplate(idTemplate *int64) {
	t.IdTemplate = idTemplate
	t.require(templateQueryRecordFieldIdTemplate)
}

// SetIsRoot sets the IsRoot field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetIsRoot(isRoot *IsRoot) {
	t.IsRoot = isRoot
	t.require(templateQueryRecordFieldIsRoot)
}

// SetOrgParentName sets the OrgParentName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetOrgParentName(orgParentName *OrgParentName) {
	t.OrgParentName = orgParentName
	t.require(templateQueryRecordFieldOrgParentName)
}

// SetRecipientEmailNotification sets the RecipientEmailNotification field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetRecipientEmailNotification(recipientEmailNotification *RecipientEmailNotification) {
	t.RecipientEmailNotification = recipientEmailNotification
	t.require(templateQueryRecordFieldRecipientEmailNotification)
}

// SetResumable sets the Resumable field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetResumable(resumable *Resumable) {
	t.Resumable = resumable
	t.require(templateQueryRecordFieldResumable)
}

// SetTemplateCode sets the TemplateCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetTemplateCode(templateCode *TemplateCode) {
	t.TemplateCode = templateCode
	t.require(templateQueryRecordFieldTemplateCode)
}

// SetTemplateContent sets the TemplateContent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetTemplateContent(templateContent *TemplateContentResponse) {
	t.TemplateContent = templateContent
	t.require(templateQueryRecordFieldTemplateContent)
}

// SetTemplateDescription sets the TemplateDescription field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetTemplateDescription(templateDescription *string) {
	t.TemplateDescription = templateDescription
	t.require(templateQueryRecordFieldTemplateDescription)
}

// SetTemplateTitle sets the TemplateTitle field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetTemplateTitle(templateTitle *string) {
	t.TemplateTitle = templateTitle
	t.require(templateQueryRecordFieldTemplateTitle)
}

// SetUsedBy sets the UsedBy field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryRecord) SetUsedBy(usedBy *int) {
	t.UsedBy = usedBy
	t.require(templateQueryRecordFieldUsedBy)
}

func (t *TemplateQueryRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateQueryRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateQueryRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateQueryRecord) MarshalJSON() ([]byte, error) {
	type embed TemplateQueryRecord
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TemplateQueryRecord) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	templateQueryResponseFieldRecords = big.NewInt(1 << 0)
	templateQueryResponseFieldSummary = big.NewInt(1 << 1)
)

type TemplateQueryResponse struct {
	Records []*TemplateQueryRecord `json:"records,omitempty" url:"records,omitempty"`
	Summary *QuerySummary          `json:"summary,omitempty" url:"summary,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateQueryResponse) GetRecords() []*TemplateQueryRecord {
	if t == nil {
		return nil
	}
	return t.Records
}

func (t *TemplateQueryResponse) GetSummary() *QuerySummary {
	if t == nil {
		return nil
	}
	return t.Summary
}

func (t *TemplateQueryResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateQueryResponse) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetRecords sets the Records field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryResponse) SetRecords(records []*TemplateQueryRecord) {
	t.Records = records
	t.require(templateQueryResponseFieldRecords)
}

// SetSummary sets the Summary field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateQueryResponse) SetSummary(summary *QuerySummary) {
	t.Summary = summary
	t.require(templateQueryResponseFieldSummary)
}

func (t *TemplateQueryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateQueryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateQueryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateQueryResponse) MarshalJSON() ([]byte, error) {
	type embed TemplateQueryResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TemplateQueryResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	tierItemFieldAmountxAuth  = big.NewInt(1 << 0)
	tierItemFieldHighPayRange = big.NewInt(1 << 1)
	tierItemFieldLowPayRange  = big.NewInt(1 << 2)
	tierItemFieldPercentxAuth = big.NewInt(1 << 3)
)

type TierItem struct {
	AmountxAuth  *float64 `json:"amountxAuth,omitempty" url:"amountxAuth,omitempty"`
	HighPayRange *float64 `json:"highPayRange,omitempty" url:"highPayRange,omitempty"`
	LowPayRange  *float64 `json:"lowPayRange,omitempty" url:"lowPayRange,omitempty"`
	PercentxAuth *float64 `json:"percentxAuth,omitempty" url:"percentxAuth,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TierItem) GetAmountxAuth() *float64 {
	if t == nil {
		return nil
	}
	return t.AmountxAuth
}

func (t *TierItem) GetHighPayRange() *float64 {
	if t == nil {
		return nil
	}
	return t.HighPayRange
}

func (t *TierItem) GetLowPayRange() *float64 {
	if t == nil {
		return nil
	}
	return t.LowPayRange
}

func (t *TierItem) GetPercentxAuth() *float64 {
	if t == nil {
		return nil
	}
	return t.PercentxAuth
}

func (t *TierItem) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TierItem) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetAmountxAuth sets the AmountxAuth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TierItem) SetAmountxAuth(amountxAuth *float64) {
	t.AmountxAuth = amountxAuth
	t.require(tierItemFieldAmountxAuth)
}

// SetHighPayRange sets the HighPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TierItem) SetHighPayRange(highPayRange *float64) {
	t.HighPayRange = highPayRange
	t.require(tierItemFieldHighPayRange)
}

// SetLowPayRange sets the LowPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TierItem) SetLowPayRange(lowPayRange *float64) {
	t.LowPayRange = lowPayRange
	t.require(tierItemFieldLowPayRange)
}

// SetPercentxAuth sets the PercentxAuth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TierItem) SetPercentxAuth(percentxAuth *float64) {
	t.PercentxAuth = percentxAuth
	t.require(tierItemFieldPercentxAuth)
}

func (t *TierItem) UnmarshalJSON(data []byte) error {
	type unmarshaler TierItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TierItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TierItem) MarshalJSON() ([]byte, error) {
	type embed TierItem
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TierItem) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	tierItemPassFieldAmountFeeoneTime    = big.NewInt(1 << 0)
	tierItemPassFieldAmountFeeRecurring  = big.NewInt(1 << 1)
	tierItemPassFieldHighPayRange        = big.NewInt(1 << 2)
	tierItemPassFieldLowPayRange         = big.NewInt(1 << 3)
	tierItemPassFieldPercentFeeoneTime   = big.NewInt(1 << 4)
	tierItemPassFieldPercentFeeRecurring = big.NewInt(1 << 5)
)

type TierItemPass struct {
	AmountFeeoneTime    *float64 `json:"amountFeeone-time,omitempty" url:"amountFeeone-time,omitempty"`
	AmountFeeRecurring  *float64 `json:"amountFeeRecurring,omitempty" url:"amountFeeRecurring,omitempty"`
	HighPayRange        *float64 `json:"highPayRange,omitempty" url:"highPayRange,omitempty"`
	LowPayRange         *float64 `json:"lowPayRange,omitempty" url:"lowPayRange,omitempty"`
	PercentFeeoneTime   *float64 `json:"percentFeeone-time,omitempty" url:"percentFeeone-time,omitempty"`
	PercentFeeRecurring *float64 `json:"percentFeeRecurring,omitempty" url:"percentFeeRecurring,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TierItemPass) GetAmountFeeoneTime() *float64 {
	if t == nil {
		return nil
	}
	return t.AmountFeeoneTime
}

func (t *TierItemPass) GetAmountFeeRecurring() *float64 {
	if t == nil {
		return nil
	}
	return t.AmountFeeRecurring
}

func (t *TierItemPass) GetHighPayRange() *float64 {
	if t == nil {
		return nil
	}
	return t.HighPayRange
}

func (t *TierItemPass) GetLowPayRange() *float64 {
	if t == nil {
		return nil
	}
	return t.LowPayRange
}

func (t *TierItemPass) GetPercentFeeoneTime() *float64 {
	if t == nil {
		return nil
	}
	return t.PercentFeeoneTime
}

func (t *TierItemPass) GetPercentFeeRecurring() *float64 {
	if t == nil {
		return nil
	}
	return t.PercentFeeRecurring
}

func (t *TierItemPass) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TierItemPass) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetAmountFeeoneTime sets the AmountFeeoneTime field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TierItemPass) SetAmountFeeoneTime(amountFeeoneTime *float64) {
	t.AmountFeeoneTime = amountFeeoneTime
	t.require(tierItemPassFieldAmountFeeoneTime)
}

// SetAmountFeeRecurring sets the AmountFeeRecurring field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TierItemPass) SetAmountFeeRecurring(amountFeeRecurring *float64) {
	t.AmountFeeRecurring = amountFeeRecurring
	t.require(tierItemPassFieldAmountFeeRecurring)
}

// SetHighPayRange sets the HighPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TierItemPass) SetHighPayRange(highPayRange *float64) {
	t.HighPayRange = highPayRange
	t.require(tierItemPassFieldHighPayRange)
}

// SetLowPayRange sets the LowPayRange field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TierItemPass) SetLowPayRange(lowPayRange *float64) {
	t.LowPayRange = lowPayRange
	t.require(tierItemPassFieldLowPayRange)
}

// SetPercentFeeoneTime sets the PercentFeeoneTime field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TierItemPass) SetPercentFeeoneTime(percentFeeoneTime *float64) {
	t.PercentFeeoneTime = percentFeeoneTime
	t.require(tierItemPassFieldPercentFeeoneTime)
}

// SetPercentFeeRecurring sets the PercentFeeRecurring field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TierItemPass) SetPercentFeeRecurring(percentFeeRecurring *float64) {
	t.PercentFeeRecurring = percentFeeRecurring
	t.require(tierItemPassFieldPercentFeeRecurring)
}

func (t *TierItemPass) UnmarshalJSON(data []byte) error {
	type unmarshaler TierItemPass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TierItemPass(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TierItemPass) MarshalJSON() ([]byte, error) {
	type embed TierItemPass
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TierItemPass) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// This field controls which method is used to handle risk orchestration.
//   - `automatic`: Sends the application through the automatic underwriting workflow using the provided `policyId`.
//   - `manual`: Puts the application into the pending review status. An analyst must manually change it's final status to approved or declined.
//   - `bypass`: The application won't go through Payabli's review, and proceeds directly to boarding products and services.
type UnderWritingMethod string

const (
	UnderWritingMethodAutomatic UnderWritingMethod = "automatic"
	UnderWritingMethodManual    UnderWritingMethod = "manual"
	UnderWritingMethodBypass    UnderWritingMethod = "bypass"
)

func NewUnderWritingMethodFromString(s string) (UnderWritingMethod, error) {
	switch s {
	case "automatic":
		return UnderWritingMethodAutomatic, nil
	case "manual":
		return UnderWritingMethodManual, nil
	case "bypass":
		return UnderWritingMethodBypass, nil
	}
	var t UnderWritingMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnderWritingMethod) Ptr() *UnderWritingMethod {
	return &u
}

// Underwriting data is used to manage risk orchestration in the boarding application lifecycle.
var (
	underwritingDataFieldMethod   = big.NewInt(1 << 0)
	underwritingDataFieldPolicyId = big.NewInt(1 << 1)
)

type UnderwritingData struct {
	Method   UnderWritingMethod `json:"method" url:"method"`
	PolicyId *PolicyId          `json:"policyId,omitempty" url:"policyId,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UnderwritingData) GetMethod() UnderWritingMethod {
	if u == nil {
		return ""
	}
	return u.Method
}

func (u *UnderwritingData) GetPolicyId() *PolicyId {
	if u == nil {
		return nil
	}
	return u.PolicyId
}

func (u *UnderwritingData) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UnderwritingData) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UnderwritingData) SetMethod(method UnderWritingMethod) {
	u.Method = method
	u.require(underwritingDataFieldMethod)
}

// SetPolicyId sets the PolicyId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UnderwritingData) SetPolicyId(policyId *PolicyId) {
	u.PolicyId = policyId
	u.require(underwritingDataFieldPolicyId)
}

func (u *UnderwritingData) UnmarshalJSON(data []byte) error {
	type unmarshaler UnderwritingData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnderwritingData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnderwritingData) MarshalJSON() ([]byte, error) {
	type embed UnderwritingData
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UnderwritingData) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Underwriting data is used to manage risk orchestration in the boarding application lifecycle.
var (
	underwritingDataResponseFieldMethod   = big.NewInt(1 << 0)
	underwritingDataResponseFieldPolicyId = big.NewInt(1 << 1)
)

type UnderwritingDataResponse struct {
	Method   *UnderWritingMethod `json:"method,omitempty" url:"method,omitempty"`
	PolicyId *PolicyId           `json:"policyId,omitempty" url:"policyId,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UnderwritingDataResponse) GetMethod() *UnderWritingMethod {
	if u == nil {
		return nil
	}
	return u.Method
}

func (u *UnderwritingDataResponse) GetPolicyId() *PolicyId {
	if u == nil {
		return nil
	}
	return u.PolicyId
}

func (u *UnderwritingDataResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UnderwritingDataResponse) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UnderwritingDataResponse) SetMethod(method *UnderWritingMethod) {
	u.Method = method
	u.require(underwritingDataResponseFieldMethod)
}

// SetPolicyId sets the PolicyId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UnderwritingDataResponse) SetPolicyId(policyId *PolicyId) {
	u.PolicyId = policyId
	u.require(underwritingDataResponseFieldPolicyId)
}

func (u *UnderwritingDataResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UnderwritingDataResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnderwritingDataResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnderwritingDataResponse) MarshalJSON() ([]byte, error) {
	type embed UnderwritingDataResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UnderwritingDataResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// When `true`, makes the section visible on the application.
type Visible = *bool
