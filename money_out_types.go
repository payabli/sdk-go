// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
)

type AuthCapturePayoutResponse struct {
	ResponseCode   Responsecode                   `json:"responseCode" url:"responseCode"`
	PageIdentifier *PageIdentifier                `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	RoomId         RoomIdNotInUse                 `json:"roomId" url:"roomId"`
	IsSuccess      IsSuccess                      `json:"isSuccess" url:"isSuccess"`
	ResponseText   ResponseText                   `json:"responseText" url:"responseText"`
	ResponseData   *AuthCapturePayoutResponseData `json:"responseData" url:"responseData"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthCapturePayoutResponse) GetResponseCode() Responsecode {
	if a == nil {
		return 0
	}
	return a.ResponseCode
}

func (a *AuthCapturePayoutResponse) GetPageIdentifier() *PageIdentifier {
	if a == nil {
		return nil
	}
	return a.PageIdentifier
}

func (a *AuthCapturePayoutResponse) GetRoomId() RoomIdNotInUse {
	if a == nil {
		return 0
	}
	return a.RoomId
}

func (a *AuthCapturePayoutResponse) GetIsSuccess() IsSuccess {
	if a == nil {
		return false
	}
	return a.IsSuccess
}

func (a *AuthCapturePayoutResponse) GetResponseText() ResponseText {
	if a == nil {
		return ""
	}
	return a.ResponseText
}

func (a *AuthCapturePayoutResponse) GetResponseData() *AuthCapturePayoutResponseData {
	if a == nil {
		return nil
	}
	return a.ResponseData
}

func (a *AuthCapturePayoutResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthCapturePayoutResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthCapturePayoutResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthCapturePayoutResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthCapturePayoutResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthCapturePayoutResponseData struct {
	AuthCode          *Authcode          `json:"authCode,omitempty" url:"authCode,omitempty"`
	ReferenceId       Referenceidtrans   `json:"referenceId" url:"referenceId"`
	ResultCode        ResultCode         `json:"resultCode" url:"resultCode"`
	ResultText        Resulttext         `json:"resultText" url:"resultText"`
	AvsResponseText   *Avsresponsetext   `json:"avsResponseText,omitempty" url:"avsResponseText,omitempty"`
	CvvResponseText   *Cvvresponsetext   `json:"cvvResponseText,omitempty" url:"cvvResponseText,omitempty"`
	CustomerId        Customeridtrans    `json:"customerId" url:"customerId"`
	MethodReferenceId *MethodReferenceId `json:"methodReferenceId,omitempty" url:"methodReferenceId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthCapturePayoutResponseData) GetAuthCode() *Authcode {
	if a == nil {
		return nil
	}
	return a.AuthCode
}

func (a *AuthCapturePayoutResponseData) GetReferenceId() Referenceidtrans {
	if a == nil {
		return ""
	}
	return a.ReferenceId
}

func (a *AuthCapturePayoutResponseData) GetResultCode() ResultCode {
	if a == nil {
		return 0
	}
	return a.ResultCode
}

func (a *AuthCapturePayoutResponseData) GetResultText() Resulttext {
	if a == nil {
		return ""
	}
	return a.ResultText
}

func (a *AuthCapturePayoutResponseData) GetAvsResponseText() *Avsresponsetext {
	if a == nil {
		return nil
	}
	return a.AvsResponseText
}

func (a *AuthCapturePayoutResponseData) GetCvvResponseText() *Cvvresponsetext {
	if a == nil {
		return nil
	}
	return a.CvvResponseText
}

func (a *AuthCapturePayoutResponseData) GetCustomerId() Customeridtrans {
	if a == nil {
		return 0
	}
	return a.CustomerId
}

func (a *AuthCapturePayoutResponseData) GetMethodReferenceId() *MethodReferenceId {
	if a == nil {
		return nil
	}
	return a.MethodReferenceId
}

func (a *AuthCapturePayoutResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthCapturePayoutResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthCapturePayoutResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthCapturePayoutResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthCapturePayoutResponseData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Payment method object for vendor payouts.
// - `{ method: "managed" }` - Managed payment method
// - `{ method: "vcard" }` - Virtual card payment method
// - `{ method: "check" }` - Check payment method
// - `{ method: "ach", achHolder: "...", achRouting: "...", achAccount: "...", achAccountType: "..." }` - ACH payment method with bank details
// - `{ method: "ach", storedMethodId: "..." }` - ACH payment method using stored method ID
type AuthorizePaymentMethod struct {
	// Payment method type - "managed", "vcard", "check", or "ach"
	Method string `json:"method" url:"method"`
	// Account holder name for ACH payments. Required when method is "ach" and not using `storedMethodId`.
	AchHolder *string `json:"achHolder,omitempty" url:"achHolder,omitempty"`
	// Bank routing number for ACH payments. Required when method is "ach" and not using `storedMethodId`.
	AchRouting *string `json:"achRouting,omitempty" url:"achRouting,omitempty"`
	// Bank account number for ACH payments. Required when method is "ach" and not using `storedMethodId`.
	AchAccount *string `json:"achAccount,omitempty" url:"achAccount,omitempty"`
	// Account type for ACH payments ("checking" or "savings"). Required when method is "ach" and not using `storedMethodId`.
	AchAccountType *string        `json:"achAccountType,omitempty" url:"achAccountType,omitempty"`
	AchCode        *AchSecCode    `json:"achCode,omitempty" url:"achCode,omitempty"`
	AchHolderType  *AchHolderType `json:"achHolderType,omitempty" url:"achHolderType,omitempty"`
	// ID of the stored ACH payment method. Only applicable when method is `ach`. Use this to reference a previously saved ACH method instead of providing bank details directly.
	StoredMethodId        *string                `json:"storedMethodId,omitempty" url:"storedMethodId,omitempty"`
	Initiator             *Initiator             `json:"initiator,omitempty" url:"initiator,omitempty"`
	StoredMethodUsageType *StoredMethodUsageType `json:"storedMethodUsageType,omitempty" url:"storedMethodUsageType,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthorizePaymentMethod) GetMethod() string {
	if a == nil {
		return ""
	}
	return a.Method
}

func (a *AuthorizePaymentMethod) GetAchHolder() *string {
	if a == nil {
		return nil
	}
	return a.AchHolder
}

func (a *AuthorizePaymentMethod) GetAchRouting() *string {
	if a == nil {
		return nil
	}
	return a.AchRouting
}

func (a *AuthorizePaymentMethod) GetAchAccount() *string {
	if a == nil {
		return nil
	}
	return a.AchAccount
}

func (a *AuthorizePaymentMethod) GetAchAccountType() *string {
	if a == nil {
		return nil
	}
	return a.AchAccountType
}

func (a *AuthorizePaymentMethod) GetAchCode() *AchSecCode {
	if a == nil {
		return nil
	}
	return a.AchCode
}

func (a *AuthorizePaymentMethod) GetAchHolderType() *AchHolderType {
	if a == nil {
		return nil
	}
	return a.AchHolderType
}

func (a *AuthorizePaymentMethod) GetStoredMethodId() *string {
	if a == nil {
		return nil
	}
	return a.StoredMethodId
}

func (a *AuthorizePaymentMethod) GetInitiator() *Initiator {
	if a == nil {
		return nil
	}
	return a.Initiator
}

func (a *AuthorizePaymentMethod) GetStoredMethodUsageType() *StoredMethodUsageType {
	if a == nil {
		return nil
	}
	return a.StoredMethodUsageType
}

func (a *AuthorizePaymentMethod) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthorizePaymentMethod) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthorizePaymentMethod
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthorizePaymentMethod(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthorizePaymentMethod) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthorizePayoutBody struct {
	EntryPoint       Entrypointfield         `json:"entryPoint" url:"entryPoint"`
	Source           *Source                 `json:"source,omitempty" url:"source,omitempty"`
	OrderId          *OrderId                `json:"orderId,omitempty" url:"orderId,omitempty"`
	OrderDescription *Orderdescription       `json:"orderDescription,omitempty" url:"orderDescription,omitempty"`
	PaymentMethod    *AuthorizePaymentMethod `json:"paymentMethod" url:"paymentMethod"`
	// Object containing payment details.
	PaymentDetails *RequestOutAuthorizePaymentDetails `json:"paymentDetails" url:"paymentDetails"`
	// Object containing vendor data.
	VendorData *RequestOutAuthorizeVendorData `json:"vendorData" url:"vendorData"`
	// Array of bills associated to the transaction
	InvoiceData    []*RequestOutAuthorizeInvoiceData `json:"invoiceData" url:"invoiceData"`
	AccountId      *Accountid                        `json:"accountId,omitempty" url:"accountId,omitempty"`
	Subdomain      *Subdomain                        `json:"subdomain,omitempty" url:"subdomain,omitempty"`
	SubscriptionId *Subscriptionid                   `json:"subscriptionId,omitempty" url:"subscriptionId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthorizePayoutBody) GetEntryPoint() Entrypointfield {
	if a == nil {
		return ""
	}
	return a.EntryPoint
}

func (a *AuthorizePayoutBody) GetSource() *Source {
	if a == nil {
		return nil
	}
	return a.Source
}

func (a *AuthorizePayoutBody) GetOrderId() *OrderId {
	if a == nil {
		return nil
	}
	return a.OrderId
}

func (a *AuthorizePayoutBody) GetOrderDescription() *Orderdescription {
	if a == nil {
		return nil
	}
	return a.OrderDescription
}

func (a *AuthorizePayoutBody) GetPaymentMethod() *AuthorizePaymentMethod {
	if a == nil {
		return nil
	}
	return a.PaymentMethod
}

func (a *AuthorizePayoutBody) GetPaymentDetails() *RequestOutAuthorizePaymentDetails {
	if a == nil {
		return nil
	}
	return a.PaymentDetails
}

func (a *AuthorizePayoutBody) GetVendorData() *RequestOutAuthorizeVendorData {
	if a == nil {
		return nil
	}
	return a.VendorData
}

func (a *AuthorizePayoutBody) GetInvoiceData() []*RequestOutAuthorizeInvoiceData {
	if a == nil {
		return nil
	}
	return a.InvoiceData
}

func (a *AuthorizePayoutBody) GetAccountId() *Accountid {
	if a == nil {
		return nil
	}
	return a.AccountId
}

func (a *AuthorizePayoutBody) GetSubdomain() *Subdomain {
	if a == nil {
		return nil
	}
	return a.Subdomain
}

func (a *AuthorizePayoutBody) GetSubscriptionId() *Subscriptionid {
	if a == nil {
		return nil
	}
	return a.SubscriptionId
}

func (a *AuthorizePayoutBody) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthorizePayoutBody) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthorizePayoutBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthorizePayoutBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthorizePayoutBody) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CaptureAllOutResponse struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode   `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	// Array of objects describing the transactions.
	ResponseData []*CaptureAllOutResponseResponseDataItem `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText ResponseText                             `json:"responseText" url:"responseText"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CaptureAllOutResponse) GetIsSuccess() *IsSuccess {
	if c == nil {
		return nil
	}
	return c.IsSuccess
}

func (c *CaptureAllOutResponse) GetPageIdentifier() *PageIdentifier {
	if c == nil {
		return nil
	}
	return c.PageIdentifier
}

func (c *CaptureAllOutResponse) GetResponseCode() *Responsecode {
	if c == nil {
		return nil
	}
	return c.ResponseCode
}

func (c *CaptureAllOutResponse) GetResponseData() []*CaptureAllOutResponseResponseDataItem {
	if c == nil {
		return nil
	}
	return c.ResponseData
}

func (c *CaptureAllOutResponse) GetResponseText() ResponseText {
	if c == nil {
		return ""
	}
	return c.ResponseText
}

func (c *CaptureAllOutResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CaptureAllOutResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CaptureAllOutResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CaptureAllOutResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CaptureAllOutResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CaptureAllOutResponseResponseDataItem struct {
	// Internal unique Id of vendor owner of transaction. Returns `0` if the transaction wasn't assigned to an existing vendor or no vendor was created.
	CustomerId  *Customeridtrans  `json:"CustomerId,omitempty" url:"CustomerId,omitempty"`
	ReferenceId *Referenceidtrans `json:"ReferenceId,omitempty" url:"ReferenceId,omitempty"`
	ResultCode  *ResultCode       `json:"ResultCode,omitempty" url:"ResultCode,omitempty"`
	// Text describing the result.
	// If `ResultCode“ = 1, returns 'Authorized'.
	// If `ResultCode` = 2 or 3, this contains the cause of the decline.
	ResultText *Resulttext `json:"ResultText,omitempty" url:"ResultText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CaptureAllOutResponseResponseDataItem) GetCustomerId() *Customeridtrans {
	if c == nil {
		return nil
	}
	return c.CustomerId
}

func (c *CaptureAllOutResponseResponseDataItem) GetReferenceId() *Referenceidtrans {
	if c == nil {
		return nil
	}
	return c.ReferenceId
}

func (c *CaptureAllOutResponseResponseDataItem) GetResultCode() *ResultCode {
	if c == nil {
		return nil
	}
	return c.ResultCode
}

func (c *CaptureAllOutResponseResponseDataItem) GetResultText() *Resulttext {
	if c == nil {
		return nil
	}
	return c.ResultText
}

func (c *CaptureAllOutResponseResponseDataItem) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CaptureAllOutResponseResponseDataItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CaptureAllOutResponseResponseDataItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CaptureAllOutResponseResponseDataItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CaptureAllOutResponseResponseDataItem) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Lot number associated with the bill.
type LotNumber = string

type OperationResult struct {
	// Message describing the result. If the virtual card link was sent successfully, this contains the email address to which the link was sent.
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Indicates whether the operation was successful.
	Success bool `json:"success" url:"success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OperationResult) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *OperationResult) GetSuccess() bool {
	if o == nil {
		return false
	}
	return o.Success
}

func (o *OperationResult) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OperationResult) UnmarshalJSON(data []byte) error {
	type unmarshaler OperationResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OperationResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OperationResult) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type RequestOutAuthorizeInvoiceData struct {
	InvoiceNumber *InvoiceNumber   `json:"invoiceNumber,omitempty" url:"invoiceNumber,omitempty"`
	NetAmount     *NetAmountstring `json:"netAmount,omitempty" url:"netAmount,omitempty"`
	// Invoice date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
	InvoiceDate *Datenullable `json:"invoiceDate,omitempty" url:"invoiceDate,omitempty"`
	// Invoice due date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
	DueDate          *Datenullable         `json:"dueDate,omitempty" url:"dueDate,omitempty"`
	Comments         *Comments             `json:"comments,omitempty" url:"comments,omitempty"`
	LotNumber        *LotNumber            `json:"lotNumber,omitempty" url:"lotNumber,omitempty"`
	BillId           *BillId               `json:"billId,omitempty" url:"billId,omitempty"`
	Discount         *Discount             `json:"discount,omitempty" url:"discount,omitempty"`
	Terms            *Terms                `json:"terms,omitempty" url:"terms,omitempty"`
	AccountingField1 *AccountingField      `json:"accountingField1,omitempty" url:"accountingField1,omitempty"`
	AccountingField2 *AccountingField      `json:"accountingField2,omitempty" url:"accountingField2,omitempty"`
	AdditionalData   *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	Attachments      *Attachments          `json:"attachments,omitempty" url:"attachments,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestOutAuthorizeInvoiceData) GetInvoiceNumber() *InvoiceNumber {
	if r == nil {
		return nil
	}
	return r.InvoiceNumber
}

func (r *RequestOutAuthorizeInvoiceData) GetNetAmount() *NetAmountstring {
	if r == nil {
		return nil
	}
	return r.NetAmount
}

func (r *RequestOutAuthorizeInvoiceData) GetInvoiceDate() *Datenullable {
	if r == nil {
		return nil
	}
	return r.InvoiceDate
}

func (r *RequestOutAuthorizeInvoiceData) GetDueDate() *Datenullable {
	if r == nil {
		return nil
	}
	return r.DueDate
}

func (r *RequestOutAuthorizeInvoiceData) GetComments() *Comments {
	if r == nil {
		return nil
	}
	return r.Comments
}

func (r *RequestOutAuthorizeInvoiceData) GetLotNumber() *LotNumber {
	if r == nil {
		return nil
	}
	return r.LotNumber
}

func (r *RequestOutAuthorizeInvoiceData) GetBillId() *BillId {
	if r == nil {
		return nil
	}
	return r.BillId
}

func (r *RequestOutAuthorizeInvoiceData) GetDiscount() *Discount {
	if r == nil {
		return nil
	}
	return r.Discount
}

func (r *RequestOutAuthorizeInvoiceData) GetTerms() *Terms {
	if r == nil {
		return nil
	}
	return r.Terms
}

func (r *RequestOutAuthorizeInvoiceData) GetAccountingField1() *AccountingField {
	if r == nil {
		return nil
	}
	return r.AccountingField1
}

func (r *RequestOutAuthorizeInvoiceData) GetAccountingField2() *AccountingField {
	if r == nil {
		return nil
	}
	return r.AccountingField2
}

func (r *RequestOutAuthorizeInvoiceData) GetAdditionalData() *AdditionalDataString {
	if r == nil {
		return nil
	}
	return r.AdditionalData
}

func (r *RequestOutAuthorizeInvoiceData) GetAttachments() *Attachments {
	if r == nil {
		return nil
	}
	return r.Attachments
}

func (r *RequestOutAuthorizeInvoiceData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestOutAuthorizeInvoiceData) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestOutAuthorizeInvoiceData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestOutAuthorizeInvoiceData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestOutAuthorizeInvoiceData) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Object containing payment details.
type RequestOutAuthorizePaymentDetails struct {
	CheckNumber *VendorCheckNumber `json:"checkNumber,omitempty" url:"checkNumber,omitempty"`
	// Currency code ISO-4217. If not code is provided the currency in the paypoint setting is taken. Default is **USD**.
	Currency *string `json:"currency,omitempty" url:"currency,omitempty"`
	// Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.
	ServiceFee *float64 `json:"serviceFee,omitempty" url:"serviceFee,omitempty"`
	// Total amount to be charged. If a service fee is included, then this amount should include the service fee.
	TotalAmount *float64 `json:"totalAmount,omitempty" url:"totalAmount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestOutAuthorizePaymentDetails) GetCheckNumber() *VendorCheckNumber {
	if r == nil {
		return nil
	}
	return r.CheckNumber
}

func (r *RequestOutAuthorizePaymentDetails) GetCurrency() *string {
	if r == nil {
		return nil
	}
	return r.Currency
}

func (r *RequestOutAuthorizePaymentDetails) GetServiceFee() *float64 {
	if r == nil {
		return nil
	}
	return r.ServiceFee
}

func (r *RequestOutAuthorizePaymentDetails) GetTotalAmount() *float64 {
	if r == nil {
		return nil
	}
	return r.TotalAmount
}

func (r *RequestOutAuthorizePaymentDetails) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestOutAuthorizePaymentDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestOutAuthorizePaymentDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestOutAuthorizePaymentDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestOutAuthorizePaymentDetails) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Object containing vendor's bank information. This object is deprecated for this endpoint. Use the `paymentMethod` object in payout authorize requests instead.
type RequestOutAuthorizeVendorBillingData struct {
	BankName              *BankName              `json:"bankName,omitempty" url:"bankName,omitempty"`
	RoutingAccount        *RoutingAccount        `json:"routingAccount,omitempty" url:"routingAccount,omitempty"`
	AccountNumber         *AccountNumber         `json:"accountNumber,omitempty" url:"accountNumber,omitempty"`
	TypeAccount           *TypeAccount           `json:"typeAccount,omitempty" url:"typeAccount,omitempty"`
	BankAccountHolderName *BankAccountHolderName `json:"bankAccountHolderName,omitempty" url:"bankAccountHolderName,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestOutAuthorizeVendorBillingData) GetBankName() *BankName {
	if r == nil {
		return nil
	}
	return r.BankName
}

func (r *RequestOutAuthorizeVendorBillingData) GetRoutingAccount() *RoutingAccount {
	if r == nil {
		return nil
	}
	return r.RoutingAccount
}

func (r *RequestOutAuthorizeVendorBillingData) GetAccountNumber() *AccountNumber {
	if r == nil {
		return nil
	}
	return r.AccountNumber
}

func (r *RequestOutAuthorizeVendorBillingData) GetTypeAccount() *TypeAccount {
	if r == nil {
		return nil
	}
	return r.TypeAccount
}

func (r *RequestOutAuthorizeVendorBillingData) GetBankAccountHolderName() *BankAccountHolderName {
	if r == nil {
		return nil
	}
	return r.BankAccountHolderName
}

func (r *RequestOutAuthorizeVendorBillingData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestOutAuthorizeVendorBillingData) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestOutAuthorizeVendorBillingData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestOutAuthorizeVendorBillingData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestOutAuthorizeVendorBillingData) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Object containing vendor data.
type RequestOutAuthorizeVendorData struct {
	VendorNumber          *VendorNumber                         `json:"vendorNumber,omitempty" url:"vendorNumber,omitempty"`
	Name1                 *VendorName1                          `json:"name1,omitempty" url:"name1,omitempty"`
	Name2                 *VendorName2                          `json:"name2,omitempty" url:"name2,omitempty"`
	Ein                   *VendorEin                            `json:"ein,omitempty" url:"ein,omitempty"`
	Phone                 *VendorPhone                          `json:"phone,omitempty" url:"phone,omitempty"`
	Email                 *Email                                `json:"email,omitempty" url:"email,omitempty"`
	Address1              *AddressNullable                      `json:"address1,omitempty" url:"address1,omitempty"`
	City                  *string                               `json:"city,omitempty" url:"city,omitempty"`
	State                 *string                               `json:"state,omitempty" url:"state,omitempty"`
	Zip                   *string                               `json:"zip,omitempty" url:"zip,omitempty"`
	Country               *string                               `json:"country,omitempty" url:"country,omitempty"`
	Mcc                   *Mcc                                  `json:"mcc,omitempty" url:"mcc,omitempty"`
	Contacts              *ContactsField                        `json:"contacts,omitempty" url:"contacts,omitempty"`
	BillingData           *RequestOutAuthorizeVendorBillingData `json:"billingData,omitempty" url:"billingData,omitempty"`
	VendorStatus          *Vendorstatus                         `json:"vendorStatus,omitempty" url:"vendorStatus,omitempty"`
	RemitAddress1         *Remitaddress1                        `json:"remitAddress1,omitempty" url:"remitAddress1,omitempty"`
	RemitAddress2         *Remitaddress2                        `json:"remitAddress2,omitempty" url:"remitAddress2,omitempty"`
	RemitCity             *Remitcity                            `json:"remitCity,omitempty" url:"remitCity,omitempty"`
	RemitState            *Remitstate                           `json:"remitState,omitempty" url:"remitState,omitempty"`
	RemitZip              *Remitzip                             `json:"remitZip,omitempty" url:"remitZip,omitempty"`
	RemitCountry          *Remitcountry                         `json:"remitCountry,omitempty" url:"remitCountry,omitempty"`
	CustomerVendorAccount *string                               `json:"customerVendorAccount,omitempty" url:"customerVendorAccount,omitempty"`
	CustomField1          *string                               `json:"customField1,omitempty" url:"customField1,omitempty"`
	CustomField2          *string                               `json:"customField2,omitempty" url:"customField2,omitempty"`
	AdditionalData        *AdditionalData                       `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	Address2              *AddressAddtlNullable                 `json:"address2,omitempty" url:"address2,omitempty"`
	InternalReferenceId   *int64                                `json:"internalReferenceId,omitempty" url:"internalReferenceId,omitempty"`
	LocationCode          *LocationCode                         `json:"locationCode,omitempty" url:"locationCode,omitempty"`
	PayeeName1            *PayeeName                            `json:"payeeName1,omitempty" url:"payeeName1,omitempty"`
	PayeeName2            *PayeeName                            `json:"payeeName2,omitempty" url:"payeeName2,omitempty"`
	PaymentMethod         *VendorPaymentMethod                  `json:"paymentMethod,omitempty" url:"paymentMethod,omitempty"`
	VendorId              *Vendorid                             `json:"vendorId,omitempty" url:"vendorId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestOutAuthorizeVendorData) GetVendorNumber() *VendorNumber {
	if r == nil {
		return nil
	}
	return r.VendorNumber
}

func (r *RequestOutAuthorizeVendorData) GetName1() *VendorName1 {
	if r == nil {
		return nil
	}
	return r.Name1
}

func (r *RequestOutAuthorizeVendorData) GetName2() *VendorName2 {
	if r == nil {
		return nil
	}
	return r.Name2
}

func (r *RequestOutAuthorizeVendorData) GetEin() *VendorEin {
	if r == nil {
		return nil
	}
	return r.Ein
}

func (r *RequestOutAuthorizeVendorData) GetPhone() *VendorPhone {
	if r == nil {
		return nil
	}
	return r.Phone
}

func (r *RequestOutAuthorizeVendorData) GetEmail() *Email {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *RequestOutAuthorizeVendorData) GetAddress1() *AddressNullable {
	if r == nil {
		return nil
	}
	return r.Address1
}

func (r *RequestOutAuthorizeVendorData) GetCity() *string {
	if r == nil {
		return nil
	}
	return r.City
}

func (r *RequestOutAuthorizeVendorData) GetState() *string {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *RequestOutAuthorizeVendorData) GetZip() *string {
	if r == nil {
		return nil
	}
	return r.Zip
}

func (r *RequestOutAuthorizeVendorData) GetCountry() *string {
	if r == nil {
		return nil
	}
	return r.Country
}

func (r *RequestOutAuthorizeVendorData) GetMcc() *Mcc {
	if r == nil {
		return nil
	}
	return r.Mcc
}

func (r *RequestOutAuthorizeVendorData) GetContacts() *ContactsField {
	if r == nil {
		return nil
	}
	return r.Contacts
}

func (r *RequestOutAuthorizeVendorData) GetBillingData() *RequestOutAuthorizeVendorBillingData {
	if r == nil {
		return nil
	}
	return r.BillingData
}

func (r *RequestOutAuthorizeVendorData) GetVendorStatus() *Vendorstatus {
	if r == nil {
		return nil
	}
	return r.VendorStatus
}

func (r *RequestOutAuthorizeVendorData) GetRemitAddress1() *Remitaddress1 {
	if r == nil {
		return nil
	}
	return r.RemitAddress1
}

func (r *RequestOutAuthorizeVendorData) GetRemitAddress2() *Remitaddress2 {
	if r == nil {
		return nil
	}
	return r.RemitAddress2
}

func (r *RequestOutAuthorizeVendorData) GetRemitCity() *Remitcity {
	if r == nil {
		return nil
	}
	return r.RemitCity
}

func (r *RequestOutAuthorizeVendorData) GetRemitState() *Remitstate {
	if r == nil {
		return nil
	}
	return r.RemitState
}

func (r *RequestOutAuthorizeVendorData) GetRemitZip() *Remitzip {
	if r == nil {
		return nil
	}
	return r.RemitZip
}

func (r *RequestOutAuthorizeVendorData) GetRemitCountry() *Remitcountry {
	if r == nil {
		return nil
	}
	return r.RemitCountry
}

func (r *RequestOutAuthorizeVendorData) GetCustomerVendorAccount() *string {
	if r == nil {
		return nil
	}
	return r.CustomerVendorAccount
}

func (r *RequestOutAuthorizeVendorData) GetCustomField1() *string {
	if r == nil {
		return nil
	}
	return r.CustomField1
}

func (r *RequestOutAuthorizeVendorData) GetCustomField2() *string {
	if r == nil {
		return nil
	}
	return r.CustomField2
}

func (r *RequestOutAuthorizeVendorData) GetAdditionalData() *AdditionalData {
	if r == nil {
		return nil
	}
	return r.AdditionalData
}

func (r *RequestOutAuthorizeVendorData) GetAddress2() *AddressAddtlNullable {
	if r == nil {
		return nil
	}
	return r.Address2
}

func (r *RequestOutAuthorizeVendorData) GetInternalReferenceId() *int64 {
	if r == nil {
		return nil
	}
	return r.InternalReferenceId
}

func (r *RequestOutAuthorizeVendorData) GetLocationCode() *LocationCode {
	if r == nil {
		return nil
	}
	return r.LocationCode
}

func (r *RequestOutAuthorizeVendorData) GetPayeeName1() *PayeeName {
	if r == nil {
		return nil
	}
	return r.PayeeName1
}

func (r *RequestOutAuthorizeVendorData) GetPayeeName2() *PayeeName {
	if r == nil {
		return nil
	}
	return r.PayeeName2
}

func (r *RequestOutAuthorizeVendorData) GetPaymentMethod() *VendorPaymentMethod {
	if r == nil {
		return nil
	}
	return r.PaymentMethod
}

func (r *RequestOutAuthorizeVendorData) GetVendorId() *Vendorid {
	if r == nil {
		return nil
	}
	return r.VendorId
}

func (r *RequestOutAuthorizeVendorData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestOutAuthorizeVendorData) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestOutAuthorizeVendorData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestOutAuthorizeVendorData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestOutAuthorizeVendorData) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Object containing vendor data.
type RequestOutAuthorizeVendorDataOld struct {
	AdditionalData *AdditionalData `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	// Vendor's address
	Address1 *AddressNullable `json:"address1,omitempty" url:"address1,omitempty"`
	// Additional line for vendor's address.
	Address2 *AddressAddtlNullable `json:"address2,omitempty" url:"address2,omitempty"`
	// Object containing vendor's bank information.
	BillingData *BillingData `json:"billingData,omitempty" url:"billingData,omitempty"`
	// Vendor's city.
	City *string `json:"city,omitempty" url:"city,omitempty"`
	// Array of objects describing the vendor's contacts.
	Contacts *ContactsField `json:"contacts,omitempty" url:"contacts,omitempty"`
	// Vendor's country.
	Country *string `json:"country,omitempty" url:"country,omitempty"`
	// Account number of paypoint in the vendor side.
	CustomerVendorAccount *string    `json:"customerVendorAccount,omitempty" url:"customerVendorAccount,omitempty"`
	CustomField1          *string    `json:"customField1,omitempty" url:"customField1,omitempty"`
	CustomField2          *string    `json:"customField2,omitempty" url:"customField2,omitempty"`
	Ein                   *VendorEin `json:"ein,omitempty" url:"ein,omitempty"`
	// Vendor's email address. Required for vCard.
	Email *Email `json:"email,omitempty" url:"email,omitempty"`
	// Internal identifier for global vendor account.
	InternalReferenceId *int64               `json:"internalReferenceId,omitempty" url:"internalReferenceId,omitempty"`
	LocationCode        *LocationCode        `json:"locationCode,omitempty" url:"locationCode,omitempty"`
	Mcc                 *Mcc                 `json:"mcc,omitempty" url:"mcc,omitempty"`
	Name1               *VendorName1         `json:"name1,omitempty" url:"name1,omitempty"`
	Name2               *VendorName2         `json:"name2,omitempty" url:"name2,omitempty"`
	PayeeName1          *PayeeName           `json:"payeeName1,omitempty" url:"payeeName1,omitempty"`
	PayeeName2          *PayeeName           `json:"payeeName2,omitempty" url:"payeeName2,omitempty"`
	PaymentMethod       *VendorPaymentMethod `json:"paymentMethod,omitempty" url:"paymentMethod,omitempty"`
	Phone               *VendorPhone         `json:"phone,omitempty" url:"phone,omitempty"`
	RemitAddress1       *Remitaddress1       `json:"remitAddress1,omitempty" url:"remitAddress1,omitempty"`
	RemitAddress2       *Remitaddress2       `json:"remitAddress2,omitempty" url:"remitAddress2,omitempty"`
	RemitCity           *Remitcity           `json:"remitCity,omitempty" url:"remitCity,omitempty"`
	RemitCountry        *Remitcountry        `json:"remitCountry,omitempty" url:"remitCountry,omitempty"`
	RemitState          *Remitstate          `json:"remitState,omitempty" url:"remitState,omitempty"`
	RemitZip            *Remitzip            `json:"remitZip,omitempty" url:"remitZip,omitempty"`
	// Vendor's state. Must be a 2 character state code.
	State *string `json:"state,omitempty" url:"state,omitempty"`
	// Payabli identifier for vendor record. Required when `vendorNumber` isn't included.
	VendorId     *Vendorid     `json:"vendorId,omitempty" url:"vendorId,omitempty"`
	VendorNumber *VendorNumber `json:"vendorNumber,omitempty" url:"vendorNumber,omitempty"`
	VendorStatus *Vendorstatus `json:"vendorStatus,omitempty" url:"vendorStatus,omitempty"`
	// Vendor's postal code.
	Zip *string `json:"zip,omitempty" url:"zip,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestOutAuthorizeVendorDataOld) GetAdditionalData() *AdditionalData {
	if r == nil {
		return nil
	}
	return r.AdditionalData
}

func (r *RequestOutAuthorizeVendorDataOld) GetAddress1() *AddressNullable {
	if r == nil {
		return nil
	}
	return r.Address1
}

func (r *RequestOutAuthorizeVendorDataOld) GetAddress2() *AddressAddtlNullable {
	if r == nil {
		return nil
	}
	return r.Address2
}

func (r *RequestOutAuthorizeVendorDataOld) GetBillingData() *BillingData {
	if r == nil {
		return nil
	}
	return r.BillingData
}

func (r *RequestOutAuthorizeVendorDataOld) GetCity() *string {
	if r == nil {
		return nil
	}
	return r.City
}

func (r *RequestOutAuthorizeVendorDataOld) GetContacts() *ContactsField {
	if r == nil {
		return nil
	}
	return r.Contacts
}

func (r *RequestOutAuthorizeVendorDataOld) GetCountry() *string {
	if r == nil {
		return nil
	}
	return r.Country
}

func (r *RequestOutAuthorizeVendorDataOld) GetCustomerVendorAccount() *string {
	if r == nil {
		return nil
	}
	return r.CustomerVendorAccount
}

func (r *RequestOutAuthorizeVendorDataOld) GetCustomField1() *string {
	if r == nil {
		return nil
	}
	return r.CustomField1
}

func (r *RequestOutAuthorizeVendorDataOld) GetCustomField2() *string {
	if r == nil {
		return nil
	}
	return r.CustomField2
}

func (r *RequestOutAuthorizeVendorDataOld) GetEin() *VendorEin {
	if r == nil {
		return nil
	}
	return r.Ein
}

func (r *RequestOutAuthorizeVendorDataOld) GetEmail() *Email {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *RequestOutAuthorizeVendorDataOld) GetInternalReferenceId() *int64 {
	if r == nil {
		return nil
	}
	return r.InternalReferenceId
}

func (r *RequestOutAuthorizeVendorDataOld) GetLocationCode() *LocationCode {
	if r == nil {
		return nil
	}
	return r.LocationCode
}

func (r *RequestOutAuthorizeVendorDataOld) GetMcc() *Mcc {
	if r == nil {
		return nil
	}
	return r.Mcc
}

func (r *RequestOutAuthorizeVendorDataOld) GetName1() *VendorName1 {
	if r == nil {
		return nil
	}
	return r.Name1
}

func (r *RequestOutAuthorizeVendorDataOld) GetName2() *VendorName2 {
	if r == nil {
		return nil
	}
	return r.Name2
}

func (r *RequestOutAuthorizeVendorDataOld) GetPayeeName1() *PayeeName {
	if r == nil {
		return nil
	}
	return r.PayeeName1
}

func (r *RequestOutAuthorizeVendorDataOld) GetPayeeName2() *PayeeName {
	if r == nil {
		return nil
	}
	return r.PayeeName2
}

func (r *RequestOutAuthorizeVendorDataOld) GetPaymentMethod() *VendorPaymentMethod {
	if r == nil {
		return nil
	}
	return r.PaymentMethod
}

func (r *RequestOutAuthorizeVendorDataOld) GetPhone() *VendorPhone {
	if r == nil {
		return nil
	}
	return r.Phone
}

func (r *RequestOutAuthorizeVendorDataOld) GetRemitAddress1() *Remitaddress1 {
	if r == nil {
		return nil
	}
	return r.RemitAddress1
}

func (r *RequestOutAuthorizeVendorDataOld) GetRemitAddress2() *Remitaddress2 {
	if r == nil {
		return nil
	}
	return r.RemitAddress2
}

func (r *RequestOutAuthorizeVendorDataOld) GetRemitCity() *Remitcity {
	if r == nil {
		return nil
	}
	return r.RemitCity
}

func (r *RequestOutAuthorizeVendorDataOld) GetRemitCountry() *Remitcountry {
	if r == nil {
		return nil
	}
	return r.RemitCountry
}

func (r *RequestOutAuthorizeVendorDataOld) GetRemitState() *Remitstate {
	if r == nil {
		return nil
	}
	return r.RemitState
}

func (r *RequestOutAuthorizeVendorDataOld) GetRemitZip() *Remitzip {
	if r == nil {
		return nil
	}
	return r.RemitZip
}

func (r *RequestOutAuthorizeVendorDataOld) GetState() *string {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *RequestOutAuthorizeVendorDataOld) GetVendorId() *Vendorid {
	if r == nil {
		return nil
	}
	return r.VendorId
}

func (r *RequestOutAuthorizeVendorDataOld) GetVendorNumber() *VendorNumber {
	if r == nil {
		return nil
	}
	return r.VendorNumber
}

func (r *RequestOutAuthorizeVendorDataOld) GetVendorStatus() *Vendorstatus {
	if r == nil {
		return nil
	}
	return r.VendorStatus
}

func (r *RequestOutAuthorizeVendorDataOld) GetZip() *string {
	if r == nil {
		return nil
	}
	return r.Zip
}

func (r *RequestOutAuthorizeVendorDataOld) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestOutAuthorizeVendorDataOld) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestOutAuthorizeVendorDataOld
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestOutAuthorizeVendorDataOld(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestOutAuthorizeVendorDataOld) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type VCardGetResponse struct {
	// Indicates if the virtual card was sent.
	VcardSent *bool `json:"vcardSent,omitempty" url:"vcardSent,omitempty"`
	// A unique token identifier for the card.
	CardToken *string `json:"cardToken,omitempty" url:"cardToken,omitempty"`
	// The masked number of the card.
	CardNumber *string `json:"cardNumber,omitempty" url:"cardNumber,omitempty"`
	// Masked Card Verification Code.
	Cvc *string `json:"cvc,omitempty" url:"cvc,omitempty"`
	// The expiration date of the card.
	ExpirationDate *string `json:"expirationDate,omitempty" url:"expirationDate,omitempty"`
	// The current status of the card.
	Status *string `json:"status,omitempty" url:"status,omitempty"`
	// The initial amount loaded on the card.
	Amount *float64 `json:"amount,omitempty" url:"amount,omitempty"`
	// The current balance available on the card.
	CurrentBalance *float64 `json:"currentBalance,omitempty" url:"currentBalance,omitempty"`
	// The set limit for expenses.
	ExpenseLimit *float64 `json:"expenseLimit,omitempty" url:"expenseLimit,omitempty"`
	// The period for the expense limit.
	ExpenseLimitPeriod *string `json:"expenseLimitPeriod,omitempty" url:"expenseLimitPeriod,omitempty"`
	// Maximum number of uses allowed for the card.
	MaxNumberOfUses *int `json:"maxNumberOfUses,omitempty" url:"maxNumberOfUses,omitempty"`
	// The current number of times the card has been used.
	CurrentNumberOfUses *int `json:"currentNumberOfUses,omitempty" url:"currentNumberOfUses,omitempty"`
	// Indicates if only the exact amount is allowed for transactions.
	ExactAmount *bool `json:"exactAmount,omitempty" url:"exactAmount,omitempty"`
	// Merchant Category Code, if applicable.
	Mcc *string `json:"mcc,omitempty" url:"mcc,omitempty"`
	// Transaction Category Code, if applicable.
	Tcc *string `json:"tcc,omitempty" url:"tcc,omitempty"`
	// A miscellaneous field for additional information.
	Misc1 *string `json:"misc1,omitempty" url:"misc1,omitempty"`
	// Another miscellaneous field for extra information.
	Misc2 *string `json:"misc2,omitempty" url:"misc2,omitempty"`
	// The creation date of the record.
	DateCreated *string `json:"dateCreated,omitempty" url:"dateCreated,omitempty"`
	// The last modified date of the record.
	DateModified *string `json:"dateModified,omitempty" url:"dateModified,omitempty"`
	// Information about the associated vendor.
	AssociatedVendor *VCardGetResponseAssociatedVendor `json:"associatedVendor,omitempty" url:"associatedVendor,omitempty"`
	// Information about the associated customer, if applicable.
	AssociatedCustomer *string `json:"associatedCustomer,omitempty" url:"associatedCustomer,omitempty"`
	// Name of the parent organization.
	ParentOrgName *string `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	// The 'Doing Business As' name of the Paypoint.
	PaypointDbaname *string `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// The legal name of the Paypoint.
	PaypointLegalname *string `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// Entry name for the Paypoint, if applicable.
	PaypointEntryname  *string             `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// The unique identifier for the paypoint.
	PaypointId *int `json:"paypointId,omitempty" url:"paypointId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardGetResponse) GetVcardSent() *bool {
	if v == nil {
		return nil
	}
	return v.VcardSent
}

func (v *VCardGetResponse) GetCardToken() *string {
	if v == nil {
		return nil
	}
	return v.CardToken
}

func (v *VCardGetResponse) GetCardNumber() *string {
	if v == nil {
		return nil
	}
	return v.CardNumber
}

func (v *VCardGetResponse) GetCvc() *string {
	if v == nil {
		return nil
	}
	return v.Cvc
}

func (v *VCardGetResponse) GetExpirationDate() *string {
	if v == nil {
		return nil
	}
	return v.ExpirationDate
}

func (v *VCardGetResponse) GetStatus() *string {
	if v == nil {
		return nil
	}
	return v.Status
}

func (v *VCardGetResponse) GetAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.Amount
}

func (v *VCardGetResponse) GetCurrentBalance() *float64 {
	if v == nil {
		return nil
	}
	return v.CurrentBalance
}

func (v *VCardGetResponse) GetExpenseLimit() *float64 {
	if v == nil {
		return nil
	}
	return v.ExpenseLimit
}

func (v *VCardGetResponse) GetExpenseLimitPeriod() *string {
	if v == nil {
		return nil
	}
	return v.ExpenseLimitPeriod
}

func (v *VCardGetResponse) GetMaxNumberOfUses() *int {
	if v == nil {
		return nil
	}
	return v.MaxNumberOfUses
}

func (v *VCardGetResponse) GetCurrentNumberOfUses() *int {
	if v == nil {
		return nil
	}
	return v.CurrentNumberOfUses
}

func (v *VCardGetResponse) GetExactAmount() *bool {
	if v == nil {
		return nil
	}
	return v.ExactAmount
}

func (v *VCardGetResponse) GetMcc() *string {
	if v == nil {
		return nil
	}
	return v.Mcc
}

func (v *VCardGetResponse) GetTcc() *string {
	if v == nil {
		return nil
	}
	return v.Tcc
}

func (v *VCardGetResponse) GetMisc1() *string {
	if v == nil {
		return nil
	}
	return v.Misc1
}

func (v *VCardGetResponse) GetMisc2() *string {
	if v == nil {
		return nil
	}
	return v.Misc2
}

func (v *VCardGetResponse) GetDateCreated() *string {
	if v == nil {
		return nil
	}
	return v.DateCreated
}

func (v *VCardGetResponse) GetDateModified() *string {
	if v == nil {
		return nil
	}
	return v.DateModified
}

func (v *VCardGetResponse) GetAssociatedVendor() *VCardGetResponseAssociatedVendor {
	if v == nil {
		return nil
	}
	return v.AssociatedVendor
}

func (v *VCardGetResponse) GetAssociatedCustomer() *string {
	if v == nil {
		return nil
	}
	return v.AssociatedCustomer
}

func (v *VCardGetResponse) GetParentOrgName() *string {
	if v == nil {
		return nil
	}
	return v.ParentOrgName
}

func (v *VCardGetResponse) GetPaypointDbaname() *string {
	if v == nil {
		return nil
	}
	return v.PaypointDbaname
}

func (v *VCardGetResponse) GetPaypointLegalname() *string {
	if v == nil {
		return nil
	}
	return v.PaypointLegalname
}

func (v *VCardGetResponse) GetPaypointEntryname() *string {
	if v == nil {
		return nil
	}
	return v.PaypointEntryname
}

func (v *VCardGetResponse) GetExternalPaypointId() *ExternalPaypointId {
	if v == nil {
		return nil
	}
	return v.ExternalPaypointId
}

func (v *VCardGetResponse) GetPaypointId() *int {
	if v == nil {
		return nil
	}
	return v.PaypointId
}

func (v *VCardGetResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardGetResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardGetResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Information about the associated vendor.
type VCardGetResponseAssociatedVendor struct {
	// Unique code identifying the vendor.
	VendorNumber *string `json:"VendorNumber,omitempty" url:"VendorNumber,omitempty"`
	// The primary name associated with the vendor.
	Name1 *string `json:"Name1,omitempty" url:"Name1,omitempty"`
	// Additional name information for the vendor.
	Name2 *string `json:"Name2,omitempty" url:"Name2,omitempty"`
	// Employer Identification Number of the vendor.
	Ein *string `json:"EIN,omitempty" url:"EIN,omitempty"`
	// Contact phone number of the vendor.
	Phone *string `json:"Phone,omitempty" url:"Phone,omitempty"`
	// Contact email address of the vendor.
	Email *string `json:"Email,omitempty" url:"Email,omitempty"`
	// Email address for remittance.
	RemitEmail *string `json:"RemitEmail,omitempty" url:"RemitEmail,omitempty"`
	// Primary address line of the vendor.
	Address1 *string `json:"Address1,omitempty" url:"Address1,omitempty"`
	// Secondary address line of the vendor.
	Address2 *string `json:"Address2,omitempty" url:"Address2,omitempty"`
	// City where the vendor is located.
	City *string `json:"City,omitempty" url:"City,omitempty"`
	// State where the vendor is located.
	State *string `json:"State,omitempty" url:"State,omitempty"`
	// ZIP code for the vendor's location.
	Zip *string `json:"Zip,omitempty" url:"Zip,omitempty"`
	// Country where the vendor is located.
	Country *string `json:"Country,omitempty" url:"Country,omitempty"`
	// Merchant Category Code for the vendor.
	Mcc          *string       `json:"Mcc,omitempty" url:"Mcc,omitempty"`
	LocationCode *LocationCode `json:"LocationCode,omitempty" url:"LocationCode,omitempty"`
	// Array of objects describing the vendor's contacts.
	Contacts []*VCardGetResponseContact `json:"Contacts,omitempty" url:"Contacts,omitempty"`
	// Billing data for the vendor.
	BillingData *VCardGetResponseAssociatedVendorBillingData `json:"BillingData,omitempty" url:"BillingData,omitempty"`
	// Preferred payment method for vendor.
	PaymentMethod *string `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	// Status of the vendor.
	VendorStatus *int `json:"VendorStatus,omitempty" url:"VendorStatus,omitempty"`
	// Unique identifier for the vendor.
	VendorId *int `json:"VendorId,omitempty" url:"VendorId,omitempty"`
	// Enrollment status of the vendor.
	EnrollmentStatus *string `json:"EnrollmentStatus,omitempty" url:"EnrollmentStatus,omitempty"`
	// Summary of vendor's billing and transaction status.
	Summary *VCardGetResponseAssociatedVendorSummary `json:"Summary,omitempty" url:"Summary,omitempty"`
	// Legal name of the paypoint.
	PaypointLegalname *Legalname `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// DBA name of the paypoint.
	PaypointDbaname *Dbaname `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// Entryname of the paypoint.
	PaypointEntryname *string        `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	ParentOrgName     *OrgParentName `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	// ID of the parent organization.
	ParentOrgId *int `json:"ParentOrgId,omitempty" url:"ParentOrgId,omitempty"`
	// Date when the vendor record was created.
	CreatedDate *string `json:"CreatedDate,omitempty" url:"CreatedDate,omitempty"`
	// Date when the vendor's information was last updated.
	LastUpdated   *string        `json:"LastUpdated,omitempty" url:"LastUpdated,omitempty"`
	RemitAddress1 *Remitaddress1 `json:"remitAddress1,omitempty" url:"remitAddress1,omitempty"`
	RemitAddress2 *Remitaddress2 `json:"remitAddress2,omitempty" url:"remitAddress2,omitempty"`
	RemitCity     *Remitcity     `json:"remitCity,omitempty" url:"remitCity,omitempty"`
	RemitState    *Remitstate    `json:"remitState,omitempty" url:"remitState,omitempty"`
	RemitZip      *Remitzip      `json:"remitZip,omitempty" url:"remitZip,omitempty"`
	RemitCountry  *Remitcountry  `json:"remitCountry,omitempty" url:"remitCountry,omitempty"`
	// Primary name of the payee.
	PayeeName1 *string `json:"payeeName1,omitempty" url:"payeeName1,omitempty"`
	// Secondary name of the payee.
	PayeeName2 *string `json:"payeeName2,omitempty" url:"payeeName2,omitempty"`
	// A custom field for additional data.
	CustomField1 *string `json:"customField1,omitempty" url:"customField1,omitempty"`
	// Another custom field for extra data.
	CustomField2 *string `json:"customField2,omitempty" url:"customField2,omitempty"`
	// Account number of paypoint in the vendor side.
	CustomerVendorAccount *string `json:"customerVendorAccount,omitempty" url:"customerVendorAccount,omitempty"`
	// Internal reference ID used within the system.
	InternalReferenceId *int `json:"InternalReferenceId,omitempty" url:"InternalReferenceId,omitempty"`
	// Field for additional data, if any.
	AdditionalData     *string             `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// Stored payment methods for the vendor.
	StoredMethods *string `json:"StoredMethods,omitempty" url:"StoredMethods,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardGetResponseAssociatedVendor) GetVendorNumber() *string {
	if v == nil {
		return nil
	}
	return v.VendorNumber
}

func (v *VCardGetResponseAssociatedVendor) GetName1() *string {
	if v == nil {
		return nil
	}
	return v.Name1
}

func (v *VCardGetResponseAssociatedVendor) GetName2() *string {
	if v == nil {
		return nil
	}
	return v.Name2
}

func (v *VCardGetResponseAssociatedVendor) GetEin() *string {
	if v == nil {
		return nil
	}
	return v.Ein
}

func (v *VCardGetResponseAssociatedVendor) GetPhone() *string {
	if v == nil {
		return nil
	}
	return v.Phone
}

func (v *VCardGetResponseAssociatedVendor) GetEmail() *string {
	if v == nil {
		return nil
	}
	return v.Email
}

func (v *VCardGetResponseAssociatedVendor) GetRemitEmail() *string {
	if v == nil {
		return nil
	}
	return v.RemitEmail
}

func (v *VCardGetResponseAssociatedVendor) GetAddress1() *string {
	if v == nil {
		return nil
	}
	return v.Address1
}

func (v *VCardGetResponseAssociatedVendor) GetAddress2() *string {
	if v == nil {
		return nil
	}
	return v.Address2
}

func (v *VCardGetResponseAssociatedVendor) GetCity() *string {
	if v == nil {
		return nil
	}
	return v.City
}

func (v *VCardGetResponseAssociatedVendor) GetState() *string {
	if v == nil {
		return nil
	}
	return v.State
}

func (v *VCardGetResponseAssociatedVendor) GetZip() *string {
	if v == nil {
		return nil
	}
	return v.Zip
}

func (v *VCardGetResponseAssociatedVendor) GetCountry() *string {
	if v == nil {
		return nil
	}
	return v.Country
}

func (v *VCardGetResponseAssociatedVendor) GetMcc() *string {
	if v == nil {
		return nil
	}
	return v.Mcc
}

func (v *VCardGetResponseAssociatedVendor) GetLocationCode() *LocationCode {
	if v == nil {
		return nil
	}
	return v.LocationCode
}

func (v *VCardGetResponseAssociatedVendor) GetContacts() []*VCardGetResponseContact {
	if v == nil {
		return nil
	}
	return v.Contacts
}

func (v *VCardGetResponseAssociatedVendor) GetBillingData() *VCardGetResponseAssociatedVendorBillingData {
	if v == nil {
		return nil
	}
	return v.BillingData
}

func (v *VCardGetResponseAssociatedVendor) GetPaymentMethod() *string {
	if v == nil {
		return nil
	}
	return v.PaymentMethod
}

func (v *VCardGetResponseAssociatedVendor) GetVendorStatus() *int {
	if v == nil {
		return nil
	}
	return v.VendorStatus
}

func (v *VCardGetResponseAssociatedVendor) GetVendorId() *int {
	if v == nil {
		return nil
	}
	return v.VendorId
}

func (v *VCardGetResponseAssociatedVendor) GetEnrollmentStatus() *string {
	if v == nil {
		return nil
	}
	return v.EnrollmentStatus
}

func (v *VCardGetResponseAssociatedVendor) GetSummary() *VCardGetResponseAssociatedVendorSummary {
	if v == nil {
		return nil
	}
	return v.Summary
}

func (v *VCardGetResponseAssociatedVendor) GetPaypointLegalname() *Legalname {
	if v == nil {
		return nil
	}
	return v.PaypointLegalname
}

func (v *VCardGetResponseAssociatedVendor) GetPaypointDbaname() *Dbaname {
	if v == nil {
		return nil
	}
	return v.PaypointDbaname
}

func (v *VCardGetResponseAssociatedVendor) GetPaypointEntryname() *string {
	if v == nil {
		return nil
	}
	return v.PaypointEntryname
}

func (v *VCardGetResponseAssociatedVendor) GetParentOrgName() *OrgParentName {
	if v == nil {
		return nil
	}
	return v.ParentOrgName
}

func (v *VCardGetResponseAssociatedVendor) GetParentOrgId() *int {
	if v == nil {
		return nil
	}
	return v.ParentOrgId
}

func (v *VCardGetResponseAssociatedVendor) GetCreatedDate() *string {
	if v == nil {
		return nil
	}
	return v.CreatedDate
}

func (v *VCardGetResponseAssociatedVendor) GetLastUpdated() *string {
	if v == nil {
		return nil
	}
	return v.LastUpdated
}

func (v *VCardGetResponseAssociatedVendor) GetRemitAddress1() *Remitaddress1 {
	if v == nil {
		return nil
	}
	return v.RemitAddress1
}

func (v *VCardGetResponseAssociatedVendor) GetRemitAddress2() *Remitaddress2 {
	if v == nil {
		return nil
	}
	return v.RemitAddress2
}

func (v *VCardGetResponseAssociatedVendor) GetRemitCity() *Remitcity {
	if v == nil {
		return nil
	}
	return v.RemitCity
}

func (v *VCardGetResponseAssociatedVendor) GetRemitState() *Remitstate {
	if v == nil {
		return nil
	}
	return v.RemitState
}

func (v *VCardGetResponseAssociatedVendor) GetRemitZip() *Remitzip {
	if v == nil {
		return nil
	}
	return v.RemitZip
}

func (v *VCardGetResponseAssociatedVendor) GetRemitCountry() *Remitcountry {
	if v == nil {
		return nil
	}
	return v.RemitCountry
}

func (v *VCardGetResponseAssociatedVendor) GetPayeeName1() *string {
	if v == nil {
		return nil
	}
	return v.PayeeName1
}

func (v *VCardGetResponseAssociatedVendor) GetPayeeName2() *string {
	if v == nil {
		return nil
	}
	return v.PayeeName2
}

func (v *VCardGetResponseAssociatedVendor) GetCustomField1() *string {
	if v == nil {
		return nil
	}
	return v.CustomField1
}

func (v *VCardGetResponseAssociatedVendor) GetCustomField2() *string {
	if v == nil {
		return nil
	}
	return v.CustomField2
}

func (v *VCardGetResponseAssociatedVendor) GetCustomerVendorAccount() *string {
	if v == nil {
		return nil
	}
	return v.CustomerVendorAccount
}

func (v *VCardGetResponseAssociatedVendor) GetInternalReferenceId() *int {
	if v == nil {
		return nil
	}
	return v.InternalReferenceId
}

func (v *VCardGetResponseAssociatedVendor) GetAdditionalData() *string {
	if v == nil {
		return nil
	}
	return v.AdditionalData
}

func (v *VCardGetResponseAssociatedVendor) GetExternalPaypointId() *ExternalPaypointId {
	if v == nil {
		return nil
	}
	return v.ExternalPaypointId
}

func (v *VCardGetResponseAssociatedVendor) GetStoredMethods() *string {
	if v == nil {
		return nil
	}
	return v.StoredMethods
}

func (v *VCardGetResponseAssociatedVendor) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardGetResponseAssociatedVendor) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardGetResponseAssociatedVendor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardGetResponseAssociatedVendor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardGetResponseAssociatedVendor) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Billing data for the vendor.
type VCardGetResponseAssociatedVendorBillingData struct {
	// Unique identifier for billing data.
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Account identifier.
	AccountId *string `json:"accountId,omitempty" url:"accountId,omitempty"`
	// Nickname for the account.
	Nickname *string `json:"nickname,omitempty" url:"nickname,omitempty"`
	// Name of the bank used for transactions.
	BankName *string `json:"bankName,omitempty" url:"bankName,omitempty"`
	// Routing number for the bank account.
	RoutingAccount *string `json:"routingAccount,omitempty" url:"routingAccount,omitempty"`
	// Masked account number for transactions.
	AccountNumber *string `json:"accountNumber,omitempty" url:"accountNumber,omitempty"`
	// Type of the bank account.
	TypeAccount *string `json:"typeAccount,omitempty" url:"typeAccount,omitempty"`
	// Name of the bank account holder.
	BankAccountHolderName *string `json:"bankAccountHolderName,omitempty" url:"bankAccountHolderName,omitempty"`
	// Type of bank account holder.
	BankAccountHolderType *string `json:"bankAccountHolderType,omitempty" url:"bankAccountHolderType,omitempty"`
	// Function of the bank account.
	BankAccountFunction *int `json:"bankAccountFunction,omitempty" url:"bankAccountFunction,omitempty"`
	// Indicates if the account is verified.
	Verified *bool `json:"verified,omitempty" url:"verified,omitempty"`
	// Status of the billing data.
	Status *int `json:"status,omitempty" url:"status,omitempty"`
	// Services associated with the account.
	Services []interface{} `json:"services,omitempty" url:"services,omitempty"`
	// Indicates if this is the default billing account.
	Default *bool `json:"default,omitempty" url:"default,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetId() *int {
	if v == nil {
		return nil
	}
	return v.Id
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetAccountId() *string {
	if v == nil {
		return nil
	}
	return v.AccountId
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetNickname() *string {
	if v == nil {
		return nil
	}
	return v.Nickname
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetBankName() *string {
	if v == nil {
		return nil
	}
	return v.BankName
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetRoutingAccount() *string {
	if v == nil {
		return nil
	}
	return v.RoutingAccount
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetAccountNumber() *string {
	if v == nil {
		return nil
	}
	return v.AccountNumber
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetTypeAccount() *string {
	if v == nil {
		return nil
	}
	return v.TypeAccount
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetBankAccountHolderName() *string {
	if v == nil {
		return nil
	}
	return v.BankAccountHolderName
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetBankAccountHolderType() *string {
	if v == nil {
		return nil
	}
	return v.BankAccountHolderType
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetBankAccountFunction() *int {
	if v == nil {
		return nil
	}
	return v.BankAccountFunction
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetVerified() *bool {
	if v == nil {
		return nil
	}
	return v.Verified
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetStatus() *int {
	if v == nil {
		return nil
	}
	return v.Status
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetServices() []interface{} {
	if v == nil {
		return nil
	}
	return v.Services
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetDefault() *bool {
	if v == nil {
		return nil
	}
	return v.Default
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardGetResponseAssociatedVendorBillingData) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardGetResponseAssociatedVendorBillingData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardGetResponseAssociatedVendorBillingData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardGetResponseAssociatedVendorBillingData) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Summary of vendor's billing and transaction status.
type VCardGetResponseAssociatedVendorSummary struct {
	// Number of active bills.
	ActiveBills *int `json:"ActiveBills,omitempty" url:"ActiveBills,omitempty"`
	// Number of bills pending approval or payment.
	PendingBills *int `json:"PendingBills,omitempty" url:"PendingBills,omitempty"`
	// Number of bills in transit.
	InTransitBills *int `json:"InTransitBills,omitempty" url:"InTransitBills,omitempty"`
	// Number of bills that have been paid.
	PaidBills *int `json:"PaidBills,omitempty" url:"PaidBills,omitempty"`
	// Number of bills that are overdue.
	OverdueBills *int `json:"OverdueBills,omitempty" url:"OverdueBills,omitempty"`
	// Number of bills that have been approved.
	ApprovedBills *int `json:"ApprovedBills,omitempty" url:"ApprovedBills,omitempty"`
	// Number of bills that have been disapproved.
	DisapprovedBills *int `json:"DisapprovedBills,omitempty" url:"DisapprovedBills,omitempty"`
	// Total number of bills.
	TotalBills *int `json:"TotalBills,omitempty" url:"TotalBills,omitempty"`
	// Total amount of active bills.
	ActiveBillsAmount *float64 `json:"ActiveBillsAmount,omitempty" url:"ActiveBillsAmount,omitempty"`
	// Total amount of pending bills.
	PendingBillsAmount *float64 `json:"PendingBillsAmount,omitempty" url:"PendingBillsAmount,omitempty"`
	// Total amount of bills in transit.
	InTransitBillsAmount *float64 `json:"InTransitBillsAmount,omitempty" url:"InTransitBillsAmount,omitempty"`
	// Total amount of paid bills.
	PaidBillsAmount *float64 `json:"PaidBillsAmount,omitempty" url:"PaidBillsAmount,omitempty"`
	// Total amount of overdue bills.
	OverdueBillsAmount *float64 `json:"OverdueBillsAmount,omitempty" url:"OverdueBillsAmount,omitempty"`
	// Total amount of approved bills.
	ApprovedBillsAmount *float64 `json:"ApprovedBillsAmount,omitempty" url:"ApprovedBillsAmount,omitempty"`
	// Total amount of rejected bills.
	DisapprovedBillsAmount *float64 `json:"DisapprovedBillsAmount,omitempty" url:"DisapprovedBillsAmount,omitempty"`
	// Total amount of all bills.
	TotalBillsAmount *float64 `json:"TotalBillsAmount,omitempty" url:"TotalBillsAmount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardGetResponseAssociatedVendorSummary) GetActiveBills() *int {
	if v == nil {
		return nil
	}
	return v.ActiveBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetPendingBills() *int {
	if v == nil {
		return nil
	}
	return v.PendingBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetInTransitBills() *int {
	if v == nil {
		return nil
	}
	return v.InTransitBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetPaidBills() *int {
	if v == nil {
		return nil
	}
	return v.PaidBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetOverdueBills() *int {
	if v == nil {
		return nil
	}
	return v.OverdueBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetApprovedBills() *int {
	if v == nil {
		return nil
	}
	return v.ApprovedBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetDisapprovedBills() *int {
	if v == nil {
		return nil
	}
	return v.DisapprovedBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetTotalBills() *int {
	if v == nil {
		return nil
	}
	return v.TotalBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetActiveBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.ActiveBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetPendingBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.PendingBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetInTransitBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.InTransitBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetPaidBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.PaidBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetOverdueBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.OverdueBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetApprovedBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.ApprovedBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetDisapprovedBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.DisapprovedBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetTotalBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.TotalBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardGetResponseAssociatedVendorSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardGetResponseAssociatedVendorSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardGetResponseAssociatedVendorSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardGetResponseAssociatedVendorSummary) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Contact information structure.
type VCardGetResponseContact struct {
	// Name of the contact.
	ContactName *string `json:"ContactName,omitempty" url:"ContactName,omitempty"`
	// Email of the contact.
	ContactEmail *string `json:"ContactEmail,omitempty" url:"ContactEmail,omitempty"`
	// Title of the contact.
	ContactTitle *string `json:"ContactTitle,omitempty" url:"ContactTitle,omitempty"`
	// Phone number of the contact.
	ContactPhone *string `json:"ContactPhone,omitempty" url:"ContactPhone,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardGetResponseContact) GetContactName() *string {
	if v == nil {
		return nil
	}
	return v.ContactName
}

func (v *VCardGetResponseContact) GetContactEmail() *string {
	if v == nil {
		return nil
	}
	return v.ContactEmail
}

func (v *VCardGetResponseContact) GetContactTitle() *string {
	if v == nil {
		return nil
	}
	return v.ContactTitle
}

func (v *VCardGetResponseContact) GetContactPhone() *string {
	if v == nil {
		return nil
	}
	return v.ContactPhone
}

func (v *VCardGetResponseContact) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardGetResponseContact) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardGetResponseContact
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardGetResponseContact(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardGetResponseContact) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
