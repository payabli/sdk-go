// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
)

type MoneyOutTypesRequestOutAuthorize struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	// When `true`, the authorization bypasses the requirement for unique bills, identified by vendor invoice number. This allows you to make more than one payout authorization for a bill, like a split payment.
	AllowDuplicatedBills *bool `json:"-" url:"allowDuplicatedBills,omitempty"`
	// When `true`, Payabli won't automatically create a bill for this payout transaction.
	DoNotCreateBills *bool `json:"-" url:"doNotCreateBills,omitempty"`
	// When `true`, the request creates a new vendor record, regardless of whether the vendor already exists.
	ForceVendorCreation *bool                `json:"-" url:"forceVendorCreation,omitempty"`
	Body                *AuthorizePayoutBody `json:"-" url:"-"`
}

func (m *MoneyOutTypesRequestOutAuthorize) UnmarshalJSON(data []byte) error {
	body := new(AuthorizePayoutBody)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	m.Body = body
	return nil
}

func (m *MoneyOutTypesRequestOutAuthorize) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.Body)
}

type CaptureAllOutRequest struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	Body           []string        `json:"-" url:"-"`
}

func (c *CaptureAllOutRequest) UnmarshalJSON(data []byte) error {
	var body []string
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	c.Body = body
	return nil
}

func (c *CaptureAllOutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Body)
}

type CaptureOutRequest struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
}

type SendVCardLinkRequest struct {
	// The transaction ID of the virtual card payout. The ID is returned as `ReferenceId` in the response when you authorize a payout with POST /MoneyOut/authorize.
	TransId string `json:"transId" url:"-"`
}

type BillDetailResponse struct {
	// Events associated to this transaction.
	Bills []*BillDetailsResponse `json:"Bills,omitempty" url:"Bills,omitempty"`
	// Object referencing to paper check image.
	CheckData *FileContent `json:"CheckData,omitempty" url:"CheckData,omitempty"`
	// Paper check number related to payout transaction.
	CheckNumber *string `json:"CheckNumber,omitempty" url:"CheckNumber,omitempty"`
	// Any comment or description for payout transaction.
	Comments *Comments `json:"Comments,omitempty" url:"Comments,omitempty"`
	// Timestamp when the payment was created, in UTC.
	CreatedDate *CreatedAt `json:"CreatedDate,omitempty" url:"CreatedDate,omitempty"`
	CreatedAt   *CreatedAt `json:"CreatedAt,omitempty" url:"CreatedAt,omitempty"`
	// Events associated to this transaction.
	Events    []*QueryTransactionEvents `json:"Events,omitempty" url:"Events,omitempty"`
	FeeAmount *FeeAmount                `json:"FeeAmount,omitempty" url:"FeeAmount,omitempty"`
	Gateway   *Gatewayfield             `json:"Gateway,omitempty" url:"Gateway,omitempty"`
	// Identifier of payout transaction.
	IdOut *int64 `json:"IdOut,omitempty" url:"IdOut,omitempty"`
	// Timestamp when payment record was updated, in UTC.
	LastUpdated   *LastModified      `json:"LastUpdated,omitempty" url:"LastUpdated,omitempty"`
	NetAmount     *Netamountnullable `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	ParentOrgName *OrgParentName     `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	ParentOrgId   *OrgParentId       `json:"ParentOrgId,omitempty" url:"ParentOrgId,omitempty"`
	PaymentData   *QueryPaymentData  `json:"PaymentData,omitempty" url:"PaymentData,omitempty"`
	// Unique identifier for group or batch containing the transaction.
	PaymentGroup *string          `json:"PaymentGroup,omitempty" url:"PaymentGroup,omitempty"`
	PaymentId    *PaymentIdString `json:"PaymentId,omitempty" url:"PaymentId,omitempty"`
	// Method of payment applied to the transaction.
	PaymentMethod *string `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	// Status of payout transaction.
	PaymentStatus   *string  `json:"PaymentStatus,omitempty" url:"PaymentStatus,omitempty"`
	PaypointDbaname *Dbaname `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// Paypoint legal name.
	PaypointLegalname *Legalname `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	Source            *Source    `json:"Source,omitempty" url:"Source,omitempty"`
	// Internal status of transaction.
	Status *int `json:"Status,omitempty" url:"Status,omitempty"`
	// Status of payout transaction.
	StatusText *string `json:"StatusText,omitempty" url:"StatusText,omitempty"`
	// Transaction total amount (including service fee or sub-charge).
	TotalAmount *float64 `json:"TotalAmount,omitempty" url:"TotalAmount,omitempty"`
	// Vendor related to the payout transaction.
	Vendor             *VendorQueryRecord  `json:"Vendor,omitempty" url:"Vendor,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	EntryName          *Entry              `json:"EntryName,omitempty" url:"EntryName,omitempty"`
	// Identifier for the batch in which this transaction was processed. Used to track and reconcile batch-level operations.
	BatchId              *string               `json:"BatchId,omitempty" url:"BatchId,omitempty"`
	HasVcardTransactions *HasVcardTransactions `json:"HasVcardTransactions,omitempty" url:"HasVcardTransactions,omitempty"`
	IsSameDayAch         *IsSameDayAch         `json:"IsSameDayACH,omitempty" url:"IsSameDayACH,omitempty"`
	ScheduleId           *ScheduleId           `json:"ScheduleId,omitempty" url:"ScheduleId,omitempty"`
	SettlementStatus     *SettlementStatus     `json:"SettlementStatus,omitempty" url:"SettlementStatus,omitempty"`
	RiskFlagged          *RiskFlagged          `json:"RiskFlagged,omitempty" url:"RiskFlagged,omitempty"`
	RiskFlaggedOn        *RiskFlaggedOn        `json:"RiskFlaggedOn,omitempty" url:"RiskFlaggedOn,omitempty"`
	RiskStatus           *RiskStatus           `json:"RiskStatus,omitempty" url:"RiskStatus,omitempty"`
	RiskReason           *RiskReason           `json:"RiskReason,omitempty" url:"RiskReason,omitempty"`
	RiskAction           *RiskAction           `json:"RiskAction,omitempty" url:"RiskAction,omitempty"`
	RiskActionCode       *RiskActionCode       `json:"RiskActionCode,omitempty" url:"RiskActionCode,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillDetailResponse) GetBills() []*BillDetailsResponse {
	if b == nil {
		return nil
	}
	return b.Bills
}

func (b *BillDetailResponse) GetCheckData() *FileContent {
	if b == nil {
		return nil
	}
	return b.CheckData
}

func (b *BillDetailResponse) GetCheckNumber() *string {
	if b == nil {
		return nil
	}
	return b.CheckNumber
}

func (b *BillDetailResponse) GetComments() *Comments {
	if b == nil {
		return nil
	}
	return b.Comments
}

func (b *BillDetailResponse) GetCreatedDate() *CreatedAt {
	if b == nil {
		return nil
	}
	return b.CreatedDate
}

func (b *BillDetailResponse) GetCreatedAt() *CreatedAt {
	if b == nil {
		return nil
	}
	return b.CreatedAt
}

func (b *BillDetailResponse) GetEvents() []*QueryTransactionEvents {
	if b == nil {
		return nil
	}
	return b.Events
}

func (b *BillDetailResponse) GetFeeAmount() *FeeAmount {
	if b == nil {
		return nil
	}
	return b.FeeAmount
}

func (b *BillDetailResponse) GetGateway() *Gatewayfield {
	if b == nil {
		return nil
	}
	return b.Gateway
}

func (b *BillDetailResponse) GetIdOut() *int64 {
	if b == nil {
		return nil
	}
	return b.IdOut
}

func (b *BillDetailResponse) GetLastUpdated() *LastModified {
	if b == nil {
		return nil
	}
	return b.LastUpdated
}

func (b *BillDetailResponse) GetNetAmount() *Netamountnullable {
	if b == nil {
		return nil
	}
	return b.NetAmount
}

func (b *BillDetailResponse) GetParentOrgName() *OrgParentName {
	if b == nil {
		return nil
	}
	return b.ParentOrgName
}

func (b *BillDetailResponse) GetParentOrgId() *OrgParentId {
	if b == nil {
		return nil
	}
	return b.ParentOrgId
}

func (b *BillDetailResponse) GetPaymentData() *QueryPaymentData {
	if b == nil {
		return nil
	}
	return b.PaymentData
}

func (b *BillDetailResponse) GetPaymentGroup() *string {
	if b == nil {
		return nil
	}
	return b.PaymentGroup
}

func (b *BillDetailResponse) GetPaymentId() *PaymentIdString {
	if b == nil {
		return nil
	}
	return b.PaymentId
}

func (b *BillDetailResponse) GetPaymentMethod() *string {
	if b == nil {
		return nil
	}
	return b.PaymentMethod
}

func (b *BillDetailResponse) GetPaymentStatus() *string {
	if b == nil {
		return nil
	}
	return b.PaymentStatus
}

func (b *BillDetailResponse) GetPaypointDbaname() *Dbaname {
	if b == nil {
		return nil
	}
	return b.PaypointDbaname
}

func (b *BillDetailResponse) GetPaypointLegalname() *Legalname {
	if b == nil {
		return nil
	}
	return b.PaypointLegalname
}

func (b *BillDetailResponse) GetSource() *Source {
	if b == nil {
		return nil
	}
	return b.Source
}

func (b *BillDetailResponse) GetStatus() *int {
	if b == nil {
		return nil
	}
	return b.Status
}

func (b *BillDetailResponse) GetStatusText() *string {
	if b == nil {
		return nil
	}
	return b.StatusText
}

func (b *BillDetailResponse) GetTotalAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.TotalAmount
}

func (b *BillDetailResponse) GetVendor() *VendorQueryRecord {
	if b == nil {
		return nil
	}
	return b.Vendor
}

func (b *BillDetailResponse) GetExternalPaypointId() *ExternalPaypointId {
	if b == nil {
		return nil
	}
	return b.ExternalPaypointId
}

func (b *BillDetailResponse) GetEntryName() *Entry {
	if b == nil {
		return nil
	}
	return b.EntryName
}

func (b *BillDetailResponse) GetBatchId() *string {
	if b == nil {
		return nil
	}
	return b.BatchId
}

func (b *BillDetailResponse) GetHasVcardTransactions() *HasVcardTransactions {
	if b == nil {
		return nil
	}
	return b.HasVcardTransactions
}

func (b *BillDetailResponse) GetIsSameDayAch() *IsSameDayAch {
	if b == nil {
		return nil
	}
	return b.IsSameDayAch
}

func (b *BillDetailResponse) GetScheduleId() *ScheduleId {
	if b == nil {
		return nil
	}
	return b.ScheduleId
}

func (b *BillDetailResponse) GetSettlementStatus() *SettlementStatus {
	if b == nil {
		return nil
	}
	return b.SettlementStatus
}

func (b *BillDetailResponse) GetRiskFlagged() *RiskFlagged {
	if b == nil {
		return nil
	}
	return b.RiskFlagged
}

func (b *BillDetailResponse) GetRiskFlaggedOn() *RiskFlaggedOn {
	if b == nil {
		return nil
	}
	return b.RiskFlaggedOn
}

func (b *BillDetailResponse) GetRiskStatus() *RiskStatus {
	if b == nil {
		return nil
	}
	return b.RiskStatus
}

func (b *BillDetailResponse) GetRiskReason() *RiskReason {
	if b == nil {
		return nil
	}
	return b.RiskReason
}

func (b *BillDetailResponse) GetRiskAction() *RiskAction {
	if b == nil {
		return nil
	}
	return b.RiskAction
}

func (b *BillDetailResponse) GetRiskActionCode() *RiskActionCode {
	if b == nil {
		return nil
	}
	return b.RiskActionCode
}

func (b *BillDetailResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillDetailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BillDetailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillDetailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillDetailResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Response object for bill details. Contains basic information about a bill.
type BillDetailsResponse struct {
	BillId *BillId `json:"billId,omitempty" url:"billId,omitempty"`
	// Lot number of the bill.
	LotNumber *string `json:"lotNumber,omitempty" url:"lotNumber,omitempty"`
	// Custom number identifying the bill.
	InvoiceNumber *InvoiceNumber `json:"invoiceNumber,omitempty" url:"invoiceNumber,omitempty"`
	// Net Amount owed in bill. Required when adding a bill.
	NetAmount *NetAmountstring `json:"netAmount,omitempty" url:"netAmount,omitempty"`
	// Bill discount amount.
	Discount *string `json:"discount,omitempty" url:"discount,omitempty"`
	// Bill due date in format YYYY-MM-DD or MM/DD/YYYY.
	DueDate *Datenullable `json:"dueDate,omitempty" url:"dueDate,omitempty"`
	// Bill date in format YYYY-MM-DD or MM/DD/YYYY.
	InvoiceDate *Datenullable `json:"invoiceDate,omitempty" url:"invoiceDate,omitempty"`
	// Any comments about bill. **For managed payouts, this field has a limit of 100 characters**.
	Comments *Comments `json:"comments,omitempty" url:"comments,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillDetailsResponse) GetBillId() *BillId {
	if b == nil {
		return nil
	}
	return b.BillId
}

func (b *BillDetailsResponse) GetLotNumber() *string {
	if b == nil {
		return nil
	}
	return b.LotNumber
}

func (b *BillDetailsResponse) GetInvoiceNumber() *InvoiceNumber {
	if b == nil {
		return nil
	}
	return b.InvoiceNumber
}

func (b *BillDetailsResponse) GetNetAmount() *NetAmountstring {
	if b == nil {
		return nil
	}
	return b.NetAmount
}

func (b *BillDetailsResponse) GetDiscount() *string {
	if b == nil {
		return nil
	}
	return b.Discount
}

func (b *BillDetailsResponse) GetDueDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.DueDate
}

func (b *BillDetailsResponse) GetInvoiceDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.InvoiceDate
}

func (b *BillDetailsResponse) GetComments() *Comments {
	if b == nil {
		return nil
	}
	return b.Comments
}

func (b *BillDetailsResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillDetailsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BillDetailsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillDetailsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillDetailsResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The response for canceling a single payout transaction.
type PayabliApiResponse0000 struct {
	IsSuccess      *IsSuccess                       `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText   ResponseText                     `json:"responseText" url:"responseText"`
	PageIdentifier *PageIdentifier                  `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode                    `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	ResponseData   *PayabliApiResponse0ResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponse0000) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponse0000) GetResponseText() ResponseText {
	if p == nil {
		return ""
	}
	return p.ResponseText
}

func (p *PayabliApiResponse0000) GetPageIdentifier() *PageIdentifier {
	if p == nil {
		return nil
	}
	return p.PageIdentifier
}

func (p *PayabliApiResponse0000) GetResponseCode() *Responsecode {
	if p == nil {
		return nil
	}
	return p.ResponseCode
}

func (p *PayabliApiResponse0000) GetResponseData() *PayabliApiResponse0ResponseData {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponse0000) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponse0000) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponse0000
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponse0000(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponse0000) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A check number, between 1 and 9999, passed as a string. This value can be used for fraud prevention with the positive pay service.
type VendorCheckNumber = string
