// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
)

type RequestOutAuthorize struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	// When `true`, the authorization bypasses the requirement for unique bills, identified by vendor invoice number. This allows you to make more than one payout authorization for a bill, like a split payment.
	AllowDuplicatedBills *bool `json:"-" url:"allowDuplicatedBills,omitempty"`
	// When `true`, Payabli won't automatically create a bill for this payout transaction.
	DoNotCreateBills *bool `json:"-" url:"doNotCreateBills,omitempty"`
	// When `true`, the request creates a new vendor record, regardless of whether the vendor already exists.
	ForceVendorCreation *bool                `json:"-" url:"forceVendorCreation,omitempty"`
	Body                *AuthorizePayoutBody `json:"-" url:"-"`
}

func (r *RequestOutAuthorize) UnmarshalJSON(data []byte) error {
	body := new(AuthorizePayoutBody)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	r.Body = body
	return nil
}

func (r *RequestOutAuthorize) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.Body)
}

type CaptureAllOutRequest struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	Body           []string        `json:"-" url:"-"`
}

func (c *CaptureAllOutRequest) UnmarshalJSON(data []byte) error {
	var body []string
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	c.Body = body
	return nil
}

func (c *CaptureAllOutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Body)
}

type CaptureOutRequest struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
}

type SendVCardLinkRequest struct {
	// The transaction ID of the virtual card payout. The ID is returned as `ReferenceId` in the response when you authorize a payout with POST /MoneyOut/authorize.
	TransId string `json:"transId" url:"-"`
}

type BillDetailResponse struct {
	// Events associated to this transaction.
	Bills []*BillDetailsResponse `json:"Bills,omitempty" url:"Bills,omitempty"`
	// Object referencing to paper check image.
	CheckData *FileContent `json:"CheckData,omitempty" url:"CheckData,omitempty"`
	// Paper check number related to payout transaction.
	CheckNumber *string `json:"CheckNumber,omitempty" url:"CheckNumber,omitempty"`
	// Any comment or description for payout transaction.
	Comments *Comments `json:"Comments,omitempty" url:"Comments,omitempty"`
	// Timestamp when the payment was created, in UTC.
	CreatedDate *CreatedAt `json:"CreatedDate,omitempty" url:"CreatedDate,omitempty"`
	CreatedAt   *CreatedAt `json:"CreatedAt,omitempty" url:"CreatedAt,omitempty"`
	// Events associated to this transaction.
	Events    []*QueryTransactionEvents `json:"Events,omitempty" url:"Events,omitempty"`
	FeeAmount *FeeAmount                `json:"FeeAmount,omitempty" url:"FeeAmount,omitempty"`
	Gateway   *Gatewayfield             `json:"Gateway,omitempty" url:"Gateway,omitempty"`
	// Identifier of payout transaction.
	IdOut *int64 `json:"IdOut,omitempty" url:"IdOut,omitempty"`
	// Timestamp when payment record was updated, in UTC.
	LastUpdated   *LastModified      `json:"LastUpdated,omitempty" url:"LastUpdated,omitempty"`
	NetAmount     *Netamountnullable `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	ParentOrgName *OrgParentName     `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	ParentOrgId   *OrgParentId       `json:"ParentOrgId,omitempty" url:"ParentOrgId,omitempty"`
	PaymentData   *QueryPaymentData  `json:"PaymentData,omitempty" url:"PaymentData,omitempty"`
	// Unique identifier for group or batch containing the transaction.
	PaymentGroup *string    `json:"PaymentGroup,omitempty" url:"PaymentGroup,omitempty"`
	PaymentId    *Paymentid `json:"PaymentId,omitempty" url:"PaymentId,omitempty"`
	// Method of payment applied to the transaction.
	PaymentMethod *string `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	// Status of payout transaction.
	PaymentStatus   *string  `json:"PaymentStatus,omitempty" url:"PaymentStatus,omitempty"`
	PaypointDbaname *Dbaname `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// Paypoint legal name.
	PaypointLegalname *Legalname `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	Source            *Source    `json:"Source,omitempty" url:"Source,omitempty"`
	// Internal status of transaction.
	Status *int `json:"Status,omitempty" url:"Status,omitempty"`
	// Status of payout transaction.
	StatusText *string `json:"StatusText,omitempty" url:"StatusText,omitempty"`
	// Transaction total amount (including service fee or sub-charge).
	TotalAmount *float64 `json:"TotalAmount,omitempty" url:"TotalAmount,omitempty"`
	// Vendor related to the payout transaction.
	Vendor             *VendorQueryRecord  `json:"Vendor,omitempty" url:"Vendor,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	EntryName          *Entry              `json:"EntryName,omitempty" url:"EntryName,omitempty"`
	// Identifier for the batch in which this transaction was processed. Used to track and reconcile batch-level operations.
	BatchId              *string               `json:"BatchId,omitempty" url:"BatchId,omitempty"`
	HasVcardTransactions *HasVcardTransactions `json:"HasVcardTransactions,omitempty" url:"HasVcardTransactions,omitempty"`
	IsSameDayAch         *IsSameDayAch         `json:"IsSameDayACH,omitempty" url:"IsSameDayACH,omitempty"`
	ScheduleId           *ScheduleId           `json:"ScheduleId,omitempty" url:"ScheduleId,omitempty"`
	SettlementStatus     *SettlementStatus     `json:"SettlementStatus,omitempty" url:"SettlementStatus,omitempty"`
	RiskFlagged          *RiskFlagged          `json:"RiskFlagged,omitempty" url:"RiskFlagged,omitempty"`
	RiskFlaggedOn        *RiskFlaggedOn        `json:"RiskFlaggedOn,omitempty" url:"RiskFlaggedOn,omitempty"`
	RiskStatus           *RiskStatus           `json:"RiskStatus,omitempty" url:"RiskStatus,omitempty"`
	RiskReason           *RiskReason           `json:"RiskReason,omitempty" url:"RiskReason,omitempty"`
	RiskAction           *RiskAction           `json:"RiskAction,omitempty" url:"RiskAction,omitempty"`
	RiskActionCode       *RiskActionCode       `json:"RiskActionCode,omitempty" url:"RiskActionCode,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillDetailResponse) GetBills() []*BillDetailsResponse {
	if b == nil {
		return nil
	}
	return b.Bills
}

func (b *BillDetailResponse) GetCheckData() *FileContent {
	if b == nil {
		return nil
	}
	return b.CheckData
}

func (b *BillDetailResponse) GetCheckNumber() *string {
	if b == nil {
		return nil
	}
	return b.CheckNumber
}

func (b *BillDetailResponse) GetComments() *Comments {
	if b == nil {
		return nil
	}
	return b.Comments
}

func (b *BillDetailResponse) GetCreatedDate() *CreatedAt {
	if b == nil {
		return nil
	}
	return b.CreatedDate
}

func (b *BillDetailResponse) GetCreatedAt() *CreatedAt {
	if b == nil {
		return nil
	}
	return b.CreatedAt
}

func (b *BillDetailResponse) GetEvents() []*QueryTransactionEvents {
	if b == nil {
		return nil
	}
	return b.Events
}

func (b *BillDetailResponse) GetFeeAmount() *FeeAmount {
	if b == nil {
		return nil
	}
	return b.FeeAmount
}

func (b *BillDetailResponse) GetGateway() *Gatewayfield {
	if b == nil {
		return nil
	}
	return b.Gateway
}

func (b *BillDetailResponse) GetIdOut() *int64 {
	if b == nil {
		return nil
	}
	return b.IdOut
}

func (b *BillDetailResponse) GetLastUpdated() *LastModified {
	if b == nil {
		return nil
	}
	return b.LastUpdated
}

func (b *BillDetailResponse) GetNetAmount() *Netamountnullable {
	if b == nil {
		return nil
	}
	return b.NetAmount
}

func (b *BillDetailResponse) GetParentOrgName() *OrgParentName {
	if b == nil {
		return nil
	}
	return b.ParentOrgName
}

func (b *BillDetailResponse) GetParentOrgId() *OrgParentId {
	if b == nil {
		return nil
	}
	return b.ParentOrgId
}

func (b *BillDetailResponse) GetPaymentData() *QueryPaymentData {
	if b == nil {
		return nil
	}
	return b.PaymentData
}

func (b *BillDetailResponse) GetPaymentGroup() *string {
	if b == nil {
		return nil
	}
	return b.PaymentGroup
}

func (b *BillDetailResponse) GetPaymentId() *Paymentid {
	if b == nil {
		return nil
	}
	return b.PaymentId
}

func (b *BillDetailResponse) GetPaymentMethod() *string {
	if b == nil {
		return nil
	}
	return b.PaymentMethod
}

func (b *BillDetailResponse) GetPaymentStatus() *string {
	if b == nil {
		return nil
	}
	return b.PaymentStatus
}

func (b *BillDetailResponse) GetPaypointDbaname() *Dbaname {
	if b == nil {
		return nil
	}
	return b.PaypointDbaname
}

func (b *BillDetailResponse) GetPaypointLegalname() *Legalname {
	if b == nil {
		return nil
	}
	return b.PaypointLegalname
}

func (b *BillDetailResponse) GetSource() *Source {
	if b == nil {
		return nil
	}
	return b.Source
}

func (b *BillDetailResponse) GetStatus() *int {
	if b == nil {
		return nil
	}
	return b.Status
}

func (b *BillDetailResponse) GetStatusText() *string {
	if b == nil {
		return nil
	}
	return b.StatusText
}

func (b *BillDetailResponse) GetTotalAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.TotalAmount
}

func (b *BillDetailResponse) GetVendor() *VendorQueryRecord {
	if b == nil {
		return nil
	}
	return b.Vendor
}

func (b *BillDetailResponse) GetExternalPaypointId() *ExternalPaypointId {
	if b == nil {
		return nil
	}
	return b.ExternalPaypointId
}

func (b *BillDetailResponse) GetEntryName() *Entry {
	if b == nil {
		return nil
	}
	return b.EntryName
}

func (b *BillDetailResponse) GetBatchId() *string {
	if b == nil {
		return nil
	}
	return b.BatchId
}

func (b *BillDetailResponse) GetHasVcardTransactions() *HasVcardTransactions {
	if b == nil {
		return nil
	}
	return b.HasVcardTransactions
}

func (b *BillDetailResponse) GetIsSameDayAch() *IsSameDayAch {
	if b == nil {
		return nil
	}
	return b.IsSameDayAch
}

func (b *BillDetailResponse) GetScheduleId() *ScheduleId {
	if b == nil {
		return nil
	}
	return b.ScheduleId
}

func (b *BillDetailResponse) GetSettlementStatus() *SettlementStatus {
	if b == nil {
		return nil
	}
	return b.SettlementStatus
}

func (b *BillDetailResponse) GetRiskFlagged() *RiskFlagged {
	if b == nil {
		return nil
	}
	return b.RiskFlagged
}

func (b *BillDetailResponse) GetRiskFlaggedOn() *RiskFlaggedOn {
	if b == nil {
		return nil
	}
	return b.RiskFlaggedOn
}

func (b *BillDetailResponse) GetRiskStatus() *RiskStatus {
	if b == nil {
		return nil
	}
	return b.RiskStatus
}

func (b *BillDetailResponse) GetRiskReason() *RiskReason {
	if b == nil {
		return nil
	}
	return b.RiskReason
}

func (b *BillDetailResponse) GetRiskAction() *RiskAction {
	if b == nil {
		return nil
	}
	return b.RiskAction
}

func (b *BillDetailResponse) GetRiskActionCode() *RiskActionCode {
	if b == nil {
		return nil
	}
	return b.RiskActionCode
}

func (b *BillDetailResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillDetailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BillDetailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillDetailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillDetailResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Response object for bill details. Contains basic information about a bill.
type BillDetailsResponse struct {
	BillId *BillId `json:"billId,omitempty" url:"billId,omitempty"`
	// Lot number of the bill.
	LotNumber *string `json:"lotNumber,omitempty" url:"lotNumber,omitempty"`
	// Custom number identifying the bill.
	InvoiceNumber *Invoicenumber `json:"invoiceNumber,omitempty" url:"invoiceNumber,omitempty"`
	// Net Amount owed in bill. Required when adding a bill.
	NetAmount *NetAmountstring `json:"netAmount,omitempty" url:"netAmount,omitempty"`
	// Bill discount amount.
	Discount *string `json:"discount,omitempty" url:"discount,omitempty"`
	// Bill due date in format YYYY-MM-DD or MM/DD/YYYY.
	DueDate *Datenullable `json:"dueDate,omitempty" url:"dueDate,omitempty"`
	// Bill date in format YYYY-MM-DD or MM/DD/YYYY.
	InvoiceDate *Datenullable `json:"invoiceDate,omitempty" url:"invoiceDate,omitempty"`
	// Any comments about bill. **For managed payouts, this field has a limit of 100 characters**.
	Comments *Comments `json:"comments,omitempty" url:"comments,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillDetailsResponse) GetBillId() *BillId {
	if b == nil {
		return nil
	}
	return b.BillId
}

func (b *BillDetailsResponse) GetLotNumber() *string {
	if b == nil {
		return nil
	}
	return b.LotNumber
}

func (b *BillDetailsResponse) GetInvoiceNumber() *Invoicenumber {
	if b == nil {
		return nil
	}
	return b.InvoiceNumber
}

func (b *BillDetailsResponse) GetNetAmount() *NetAmountstring {
	if b == nil {
		return nil
	}
	return b.NetAmount
}

func (b *BillDetailsResponse) GetDiscount() *string {
	if b == nil {
		return nil
	}
	return b.Discount
}

func (b *BillDetailsResponse) GetDueDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.DueDate
}

func (b *BillDetailsResponse) GetInvoiceDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.InvoiceDate
}

func (b *BillDetailsResponse) GetComments() *Comments {
	if b == nil {
		return nil
	}
	return b.Comments
}

func (b *BillDetailsResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillDetailsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BillDetailsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillDetailsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillDetailsResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillPayOutDataRequest struct {
	// Bill ID in Payabli.
	BillId *int64 `json:"billId,omitempty" url:"billId,omitempty"`
	// Any comments about bill. **For managed payouts, this field has a limit of 100 characters**.
	Comments *Comments `json:"comments,omitempty" url:"comments,omitempty"`
	// Bill due date in format YYYY-MM-DD or MM/DD/YYYY.
	DueDate *Datenullable `json:"dueDate,omitempty" url:"dueDate,omitempty"`
	// Bill date in format YYYY-MM-DD or MM/DD/YYYY.
	InvoiceDate *Datenullable `json:"invoiceDate,omitempty" url:"invoiceDate,omitempty"`
	// Custom number identifying the bill. Must be unique in paypoint. **Required** for new bill and when `billId` isn't provided.
	InvoiceNumber *Invoicenumber `json:"invoiceNumber,omitempty" url:"invoiceNumber,omitempty"`
	// Net Amount owed in bill. Required when adding a bill.
	NetAmount *NetAmountstring `json:"netAmount,omitempty" url:"netAmount,omitempty"`
	// Bill discount amount.
	Discount *string `json:"discount,omitempty" url:"discount,omitempty"`
	// Description of payment terms.
	Terms            *Terms                `json:"terms,omitempty" url:"terms,omitempty"`
	AccountingField1 *AccountingField      `json:"accountingField1,omitempty" url:"accountingField1,omitempty"`
	AccountingField2 *AccountingField      `json:"accountingField2,omitempty" url:"accountingField2,omitempty"`
	AdditionalData   *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	// Bill image attachment. Send the bill image as Base64-encoded string, or as a publicly accessible link. For full details on using this field with a payout authorization, see [the documentation](/developers/developer-guides/pay-out-manage-payouts).
	Attachments *Attachments `json:"attachments,omitempty" url:"attachments,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillPayOutDataRequest) GetBillId() *int64 {
	if b == nil {
		return nil
	}
	return b.BillId
}

func (b *BillPayOutDataRequest) GetComments() *Comments {
	if b == nil {
		return nil
	}
	return b.Comments
}

func (b *BillPayOutDataRequest) GetDueDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.DueDate
}

func (b *BillPayOutDataRequest) GetInvoiceDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.InvoiceDate
}

func (b *BillPayOutDataRequest) GetInvoiceNumber() *Invoicenumber {
	if b == nil {
		return nil
	}
	return b.InvoiceNumber
}

func (b *BillPayOutDataRequest) GetNetAmount() *NetAmountstring {
	if b == nil {
		return nil
	}
	return b.NetAmount
}

func (b *BillPayOutDataRequest) GetDiscount() *string {
	if b == nil {
		return nil
	}
	return b.Discount
}

func (b *BillPayOutDataRequest) GetTerms() *Terms {
	if b == nil {
		return nil
	}
	return b.Terms
}

func (b *BillPayOutDataRequest) GetAccountingField1() *AccountingField {
	if b == nil {
		return nil
	}
	return b.AccountingField1
}

func (b *BillPayOutDataRequest) GetAccountingField2() *AccountingField {
	if b == nil {
		return nil
	}
	return b.AccountingField2
}

func (b *BillPayOutDataRequest) GetAdditionalData() *AdditionalDataString {
	if b == nil {
		return nil
	}
	return b.AdditionalData
}

func (b *BillPayOutDataRequest) GetAttachments() *Attachments {
	if b == nil {
		return nil
	}
	return b.Attachments
}

func (b *BillPayOutDataRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillPayOutDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler BillPayOutDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillPayOutDataRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillPayOutDataRequest) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The response for canceling a single payout transaction.
type PayabliApiResponse0000 struct {
	IsSuccess      *IsSuccess                       `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText   *ResponseText                    `json:"responseText,omitempty" url:"responseText,omitempty"`
	PageIdentifier *PageIdentifier                  `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode                    `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	ResponseData   *PayabliApiResponse0ResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponse0000) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponse0000) GetResponseText() *ResponseText {
	if p == nil {
		return nil
	}
	return p.ResponseText
}

func (p *PayabliApiResponse0000) GetPageIdentifier() *PageIdentifier {
	if p == nil {
		return nil
	}
	return p.PageIdentifier
}

func (p *PayabliApiResponse0000) GetResponseCode() *Responsecode {
	if p == nil {
		return nil
	}
	return p.ResponseCode
}

func (p *PayabliApiResponse0000) GetResponseData() *PayabliApiResponse0ResponseData {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponse0000) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponse0000) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponse0000
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponse0000(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponse0000) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayabliApiResponse11 struct {
	IsSuccess      *IsSuccess                        `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier                   `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseData   *PayabliApiResponse11ResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText   *ResponseText                     `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponse11) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponse11) GetPageIdentifier() *PageIdentifier {
	if p == nil {
		return nil
	}
	return p.PageIdentifier
}

func (p *PayabliApiResponse11) GetResponseData() *PayabliApiResponse11ResponseData {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponse11) GetResponseText() *ResponseText {
	if p == nil {
		return nil
	}
	return p.ResponseText
}

func (p *PayabliApiResponse11) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponse11) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponse11
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponse11(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponse11) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayabliApiResponse11ResponseData struct {
	// Payabli-generated unique ID of vendor owner of transaction. It will return `0“ if the transaction wasn't assigned to an existing vendor or no vendor was created.
	CustomerId  *CustomerId       `json:"CustomerId,omitempty" url:"CustomerId,omitempty"`
	ReferenceId *Referenceidtrans `json:"ReferenceId,omitempty" url:"ReferenceId,omitempty"`
	ResultCode  *ResultCode       `json:"ResultCode,omitempty" url:"ResultCode,omitempty"`
	// Text describing the result. If **ResultCode** = 1, will return 'Authorized'. If **ResultCode** = 2 or 3, will contain the reason for the decline.
	ResultText *Resulttext `json:"ResultText,omitempty" url:"ResultText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponse11ResponseData) GetCustomerId() *CustomerId {
	if p == nil {
		return nil
	}
	return p.CustomerId
}

func (p *PayabliApiResponse11ResponseData) GetReferenceId() *Referenceidtrans {
	if p == nil {
		return nil
	}
	return p.ReferenceId
}

func (p *PayabliApiResponse11ResponseData) GetResultCode() *ResultCode {
	if p == nil {
		return nil
	}
	return p.ResultCode
}

func (p *PayabliApiResponse11ResponseData) GetResultText() *Resulttext {
	if p == nil {
		return nil
	}
	return p.ResultText
}

func (p *PayabliApiResponse11ResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponse11ResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponse11ResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponse11ResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponse11ResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A check number, between 1 and 9999, passed as a string. This value can be used for fraud prevention with the positive pay service.
type VendorCheckNumber = string

type AuthorizePayoutBody struct {
	AccountId  *Accountid      `json:"accountId,omitempty" url:"accountId,omitempty"`
	EntryPoint Entrypointfield `json:"entryPoint" url:"entryPoint"`
	// Array of bills associated to the transaction
	InvoiceData      []*BillPayOutDataRequest `json:"invoiceData,omitempty" url:"invoiceData,omitempty"`
	OrderDescription *Orderdescription        `json:"orderDescription,omitempty" url:"orderDescription,omitempty"`
	OrderId          *Orderid                 `json:"orderId,omitempty" url:"orderId,omitempty"`
	// Object containing payment details.
	PaymentDetails *RequestOutAuthorizePaymentDetails `json:"paymentDetails" url:"paymentDetails"`
	PaymentMethod  *VendorPaymentMethod               `json:"paymentMethod,omitempty" url:"paymentMethod,omitempty"`
	Source         *Source                            `json:"source,omitempty" url:"source,omitempty"`
	Subdomain      *Subdomain                         `json:"subdomain,omitempty" url:"subdomain,omitempty"`
	SubscriptionId *Subscriptionid                    `json:"subscriptionId,omitempty" url:"subscriptionId,omitempty"`
	// Object containing vendor data.
	VendorData *RequestOutAuthorizeVendorData `json:"vendorData" url:"vendorData"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthorizePayoutBody) GetAccountId() *Accountid {
	if a == nil {
		return nil
	}
	return a.AccountId
}

func (a *AuthorizePayoutBody) GetEntryPoint() Entrypointfield {
	if a == nil {
		return ""
	}
	return a.EntryPoint
}

func (a *AuthorizePayoutBody) GetInvoiceData() []*BillPayOutDataRequest {
	if a == nil {
		return nil
	}
	return a.InvoiceData
}

func (a *AuthorizePayoutBody) GetOrderDescription() *Orderdescription {
	if a == nil {
		return nil
	}
	return a.OrderDescription
}

func (a *AuthorizePayoutBody) GetOrderId() *Orderid {
	if a == nil {
		return nil
	}
	return a.OrderId
}

func (a *AuthorizePayoutBody) GetPaymentDetails() *RequestOutAuthorizePaymentDetails {
	if a == nil {
		return nil
	}
	return a.PaymentDetails
}

func (a *AuthorizePayoutBody) GetPaymentMethod() *VendorPaymentMethod {
	if a == nil {
		return nil
	}
	return a.PaymentMethod
}

func (a *AuthorizePayoutBody) GetSource() *Source {
	if a == nil {
		return nil
	}
	return a.Source
}

func (a *AuthorizePayoutBody) GetSubdomain() *Subdomain {
	if a == nil {
		return nil
	}
	return a.Subdomain
}

func (a *AuthorizePayoutBody) GetSubscriptionId() *Subscriptionid {
	if a == nil {
		return nil
	}
	return a.SubscriptionId
}

func (a *AuthorizePayoutBody) GetVendorData() *RequestOutAuthorizeVendorData {
	if a == nil {
		return nil
	}
	return a.VendorData
}

func (a *AuthorizePayoutBody) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthorizePayoutBody) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthorizePayoutBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthorizePayoutBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthorizePayoutBody) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CaptureAllOutResponse struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode   `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	// Array of objects describing the transactions.
	ResponseData []*CaptureAllOutResponseResponseDataItem `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText *ResponseText                            `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CaptureAllOutResponse) GetIsSuccess() *IsSuccess {
	if c == nil {
		return nil
	}
	return c.IsSuccess
}

func (c *CaptureAllOutResponse) GetPageIdentifier() *PageIdentifier {
	if c == nil {
		return nil
	}
	return c.PageIdentifier
}

func (c *CaptureAllOutResponse) GetResponseCode() *Responsecode {
	if c == nil {
		return nil
	}
	return c.ResponseCode
}

func (c *CaptureAllOutResponse) GetResponseData() []*CaptureAllOutResponseResponseDataItem {
	if c == nil {
		return nil
	}
	return c.ResponseData
}

func (c *CaptureAllOutResponse) GetResponseText() *ResponseText {
	if c == nil {
		return nil
	}
	return c.ResponseText
}

func (c *CaptureAllOutResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CaptureAllOutResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CaptureAllOutResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CaptureAllOutResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CaptureAllOutResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CaptureAllOutResponseResponseDataItem struct {
	// Internal unique Id of vendor owner of transaction. Returns `0` if the transaction wasn't assigned to an existing vendor or no vendor was created.
	CustomerId  *Customeridtrans  `json:"CustomerId,omitempty" url:"CustomerId,omitempty"`
	ReferenceId *Referenceidtrans `json:"ReferenceId,omitempty" url:"ReferenceId,omitempty"`
	ResultCode  *ResultCode       `json:"ResultCode,omitempty" url:"ResultCode,omitempty"`
	// Text describing the result.
	// If `ResultCode“ = 1, returns 'Authorized'.
	// If `ResultCode` = 2 or 3, this contains the cause of the decline.
	ResultText *Resulttext `json:"ResultText,omitempty" url:"ResultText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CaptureAllOutResponseResponseDataItem) GetCustomerId() *Customeridtrans {
	if c == nil {
		return nil
	}
	return c.CustomerId
}

func (c *CaptureAllOutResponseResponseDataItem) GetReferenceId() *Referenceidtrans {
	if c == nil {
		return nil
	}
	return c.ReferenceId
}

func (c *CaptureAllOutResponseResponseDataItem) GetResultCode() *ResultCode {
	if c == nil {
		return nil
	}
	return c.ResultCode
}

func (c *CaptureAllOutResponseResponseDataItem) GetResultText() *Resulttext {
	if c == nil {
		return nil
	}
	return c.ResultText
}

func (c *CaptureAllOutResponseResponseDataItem) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CaptureAllOutResponseResponseDataItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CaptureAllOutResponseResponseDataItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CaptureAllOutResponseResponseDataItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CaptureAllOutResponseResponseDataItem) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type OperationResult struct {
	// Message describing the result. If the virtual card link was sent successfully, this contains the email address to which the link was sent.
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Indicates whether the operation was successful.
	Success bool `json:"success" url:"success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OperationResult) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *OperationResult) GetSuccess() bool {
	if o == nil {
		return false
	}
	return o.Success
}

func (o *OperationResult) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OperationResult) UnmarshalJSON(data []byte) error {
	type unmarshaler OperationResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OperationResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OperationResult) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// Object containing payment details.
type RequestOutAuthorizePaymentDetails struct {
	CheckNumber *VendorCheckNumber `json:"checkNumber,omitempty" url:"checkNumber,omitempty"`
	// Currency code ISO-4217. If not code is provided the currency in the paypoint setting is taken. Default is **USD**.
	Currency *string `json:"currency,omitempty" url:"currency,omitempty"`
	// Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.
	ServiceFee *float64 `json:"serviceFee,omitempty" url:"serviceFee,omitempty"`
	// Total amount to be charged. If a service fee is included, then this amount should include the service fee.
	TotalAmount *float64 `json:"totalAmount,omitempty" url:"totalAmount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestOutAuthorizePaymentDetails) GetCheckNumber() *VendorCheckNumber {
	if r == nil {
		return nil
	}
	return r.CheckNumber
}

func (r *RequestOutAuthorizePaymentDetails) GetCurrency() *string {
	if r == nil {
		return nil
	}
	return r.Currency
}

func (r *RequestOutAuthorizePaymentDetails) GetServiceFee() *float64 {
	if r == nil {
		return nil
	}
	return r.ServiceFee
}

func (r *RequestOutAuthorizePaymentDetails) GetTotalAmount() *float64 {
	if r == nil {
		return nil
	}
	return r.TotalAmount
}

func (r *RequestOutAuthorizePaymentDetails) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestOutAuthorizePaymentDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestOutAuthorizePaymentDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestOutAuthorizePaymentDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestOutAuthorizePaymentDetails) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Object containing vendor data.
type RequestOutAuthorizeVendorData struct {
	AdditionalData *AdditionalData `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	// Vendor's address
	Address1 *AddressNullable `json:"address1,omitempty" url:"address1,omitempty"`
	// Additional line for vendor's address.
	Address2 *AddressAddtlNullable `json:"address2,omitempty" url:"address2,omitempty"`
	// Object containing vendor's bank information.
	BillingData *BillingData `json:"billingData,omitempty" url:"billingData,omitempty"`
	// Vendor's city.
	City *string `json:"city,omitempty" url:"city,omitempty"`
	// Array of objects describing the vendor's contacts.
	Contacts *ContactsField `json:"contacts,omitempty" url:"contacts,omitempty"`
	// Vendor's country.
	Country *string `json:"country,omitempty" url:"country,omitempty"`
	// Account number of paypoint in the vendor side.
	CustomerVendorAccount *string    `json:"customerVendorAccount,omitempty" url:"customerVendorAccount,omitempty"`
	CustomField1          *string    `json:"customField1,omitempty" url:"customField1,omitempty"`
	CustomField2          *string    `json:"customField2,omitempty" url:"customField2,omitempty"`
	Ein                   *VendorEin `json:"ein,omitempty" url:"ein,omitempty"`
	// Vendor's email address. Required for vCard.
	Email *Email `json:"email,omitempty" url:"email,omitempty"`
	// Internal identifier for global vendor account.
	InternalReferenceId *int64               `json:"internalReferenceId,omitempty" url:"internalReferenceId,omitempty"`
	LocationCode        *LocationCode        `json:"locationCode,omitempty" url:"locationCode,omitempty"`
	Mcc                 *Mcc                 `json:"mcc,omitempty" url:"mcc,omitempty"`
	Name1               *VendorName1         `json:"name1,omitempty" url:"name1,omitempty"`
	Name2               *VendorName2         `json:"name2,omitempty" url:"name2,omitempty"`
	PayeeName1          *PayeeName           `json:"payeeName1,omitempty" url:"payeeName1,omitempty"`
	PayeeName2          *PayeeName           `json:"payeeName2,omitempty" url:"payeeName2,omitempty"`
	PaymentMethod       *VendorPaymentMethod `json:"paymentMethod,omitempty" url:"paymentMethod,omitempty"`
	Phone               *VendorPhone         `json:"phone,omitempty" url:"phone,omitempty"`
	RemitAddress1       *Remitaddress1       `json:"remitAddress1,omitempty" url:"remitAddress1,omitempty"`
	RemitAddress2       *Remitaddress2       `json:"remitAddress2,omitempty" url:"remitAddress2,omitempty"`
	RemitCity           *Remitcity           `json:"remitCity,omitempty" url:"remitCity,omitempty"`
	RemitCountry        *Remitcountry        `json:"remitCountry,omitempty" url:"remitCountry,omitempty"`
	RemitState          *Remitstate          `json:"remitState,omitempty" url:"remitState,omitempty"`
	RemitZip            *Remitzip            `json:"remitZip,omitempty" url:"remitZip,omitempty"`
	// Vendor's state. Must be a 2 character state code.
	State *string `json:"state,omitempty" url:"state,omitempty"`
	// Payabli identifier for vendor record. Required when `vendorNumber` isn't included.
	VendorId     *Vendorid     `json:"vendorId,omitempty" url:"vendorId,omitempty"`
	VendorNumber *VendorNumber `json:"vendorNumber,omitempty" url:"vendorNumber,omitempty"`
	VendorStatus *Vendorstatus `json:"vendorStatus,omitempty" url:"vendorStatus,omitempty"`
	// Vendor's postal code.
	Zip *string `json:"zip,omitempty" url:"zip,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestOutAuthorizeVendorData) GetAdditionalData() *AdditionalData {
	if r == nil {
		return nil
	}
	return r.AdditionalData
}

func (r *RequestOutAuthorizeVendorData) GetAddress1() *AddressNullable {
	if r == nil {
		return nil
	}
	return r.Address1
}

func (r *RequestOutAuthorizeVendorData) GetAddress2() *AddressAddtlNullable {
	if r == nil {
		return nil
	}
	return r.Address2
}

func (r *RequestOutAuthorizeVendorData) GetBillingData() *BillingData {
	if r == nil {
		return nil
	}
	return r.BillingData
}

func (r *RequestOutAuthorizeVendorData) GetCity() *string {
	if r == nil {
		return nil
	}
	return r.City
}

func (r *RequestOutAuthorizeVendorData) GetContacts() *ContactsField {
	if r == nil {
		return nil
	}
	return r.Contacts
}

func (r *RequestOutAuthorizeVendorData) GetCountry() *string {
	if r == nil {
		return nil
	}
	return r.Country
}

func (r *RequestOutAuthorizeVendorData) GetCustomerVendorAccount() *string {
	if r == nil {
		return nil
	}
	return r.CustomerVendorAccount
}

func (r *RequestOutAuthorizeVendorData) GetCustomField1() *string {
	if r == nil {
		return nil
	}
	return r.CustomField1
}

func (r *RequestOutAuthorizeVendorData) GetCustomField2() *string {
	if r == nil {
		return nil
	}
	return r.CustomField2
}

func (r *RequestOutAuthorizeVendorData) GetEin() *VendorEin {
	if r == nil {
		return nil
	}
	return r.Ein
}

func (r *RequestOutAuthorizeVendorData) GetEmail() *Email {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *RequestOutAuthorizeVendorData) GetInternalReferenceId() *int64 {
	if r == nil {
		return nil
	}
	return r.InternalReferenceId
}

func (r *RequestOutAuthorizeVendorData) GetLocationCode() *LocationCode {
	if r == nil {
		return nil
	}
	return r.LocationCode
}

func (r *RequestOutAuthorizeVendorData) GetMcc() *Mcc {
	if r == nil {
		return nil
	}
	return r.Mcc
}

func (r *RequestOutAuthorizeVendorData) GetName1() *VendorName1 {
	if r == nil {
		return nil
	}
	return r.Name1
}

func (r *RequestOutAuthorizeVendorData) GetName2() *VendorName2 {
	if r == nil {
		return nil
	}
	return r.Name2
}

func (r *RequestOutAuthorizeVendorData) GetPayeeName1() *PayeeName {
	if r == nil {
		return nil
	}
	return r.PayeeName1
}

func (r *RequestOutAuthorizeVendorData) GetPayeeName2() *PayeeName {
	if r == nil {
		return nil
	}
	return r.PayeeName2
}

func (r *RequestOutAuthorizeVendorData) GetPaymentMethod() *VendorPaymentMethod {
	if r == nil {
		return nil
	}
	return r.PaymentMethod
}

func (r *RequestOutAuthorizeVendorData) GetPhone() *VendorPhone {
	if r == nil {
		return nil
	}
	return r.Phone
}

func (r *RequestOutAuthorizeVendorData) GetRemitAddress1() *Remitaddress1 {
	if r == nil {
		return nil
	}
	return r.RemitAddress1
}

func (r *RequestOutAuthorizeVendorData) GetRemitAddress2() *Remitaddress2 {
	if r == nil {
		return nil
	}
	return r.RemitAddress2
}

func (r *RequestOutAuthorizeVendorData) GetRemitCity() *Remitcity {
	if r == nil {
		return nil
	}
	return r.RemitCity
}

func (r *RequestOutAuthorizeVendorData) GetRemitCountry() *Remitcountry {
	if r == nil {
		return nil
	}
	return r.RemitCountry
}

func (r *RequestOutAuthorizeVendorData) GetRemitState() *Remitstate {
	if r == nil {
		return nil
	}
	return r.RemitState
}

func (r *RequestOutAuthorizeVendorData) GetRemitZip() *Remitzip {
	if r == nil {
		return nil
	}
	return r.RemitZip
}

func (r *RequestOutAuthorizeVendorData) GetState() *string {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *RequestOutAuthorizeVendorData) GetVendorId() *Vendorid {
	if r == nil {
		return nil
	}
	return r.VendorId
}

func (r *RequestOutAuthorizeVendorData) GetVendorNumber() *VendorNumber {
	if r == nil {
		return nil
	}
	return r.VendorNumber
}

func (r *RequestOutAuthorizeVendorData) GetVendorStatus() *Vendorstatus {
	if r == nil {
		return nil
	}
	return r.VendorStatus
}

func (r *RequestOutAuthorizeVendorData) GetZip() *string {
	if r == nil {
		return nil
	}
	return r.Zip
}

func (r *RequestOutAuthorizeVendorData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestOutAuthorizeVendorData) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestOutAuthorizeVendorData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestOutAuthorizeVendorData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestOutAuthorizeVendorData) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type VCardGetResponse struct {
	// The initial amount loaded on the card.
	Amount *float64 `json:"amount,omitempty" url:"amount,omitempty"`
	// Information about the associated customer, if applicable.
	AssociatedCustomer *string `json:"associatedCustomer,omitempty" url:"associatedCustomer,omitempty"`
	// Information about the associated vendor.
	AssociatedVendor *VCardGetResponseAssociatedVendor `json:"associatedVendor,omitempty" url:"associatedVendor,omitempty"`
	// The masked number of the card.
	CardNumber *string `json:"cardNumber,omitempty" url:"cardNumber,omitempty"`
	// A unique token identifier for the card.
	CardToken *string `json:"cardToken,omitempty" url:"cardToken,omitempty"`
	// The current balance available on the card.
	CurrentBalance *float64 `json:"currentBalance,omitempty" url:"currentBalance,omitempty"`
	// The current number of times the card has been used.
	CurrentNumberOfUses *int `json:"currentNumberOfUses,omitempty" url:"currentNumberOfUses,omitempty"`
	// Masked Card Verification Code.
	Cvc *string `json:"cvc,omitempty" url:"cvc,omitempty"`
	// The creation date of the record.
	DateCreated *string `json:"dateCreated,omitempty" url:"dateCreated,omitempty"`
	// The last modified date of the record.
	DateModified *string `json:"dateModified,omitempty" url:"dateModified,omitempty"`
	// Indicates if only the exact amount is allowed for transactions.
	ExactAmount *bool `json:"exactAmount,omitempty" url:"exactAmount,omitempty"`
	// The set limit for expenses.
	ExpenseLimit *float64 `json:"expenseLimit,omitempty" url:"expenseLimit,omitempty"`
	// The period for the expense limit.
	ExpenseLimitPeriod *string `json:"expenseLimitPeriod,omitempty" url:"expenseLimitPeriod,omitempty"`
	// The expiration date of the card.
	ExpirationDate     *string             `json:"expirationDate,omitempty" url:"expirationDate,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// Maximum number of uses allowed for the card.
	MaxNumberOfUses *int `json:"maxNumberOfUses,omitempty" url:"maxNumberOfUses,omitempty"`
	// Merchant Category Code, if applicable.
	Mcc *string `json:"mcc,omitempty" url:"mcc,omitempty"`
	// A miscellaneous field for additional information.
	Misc1 *string `json:"misc1,omitempty" url:"misc1,omitempty"`
	// Another miscellaneous field for extra information.
	Misc2 *string `json:"misc2,omitempty" url:"misc2,omitempty"`
	// Name of the parent organization.
	ParentOrgName *string `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	// The 'Doing Business As' name of the Paypoint.
	PaypointDbaname *string `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// Entry name for the Paypoint, if applicable.
	PaypointEntryname *string `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	// The legal name of the Paypoint.
	PaypointLegalname *string `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// The current status of the card.
	Status *string `json:"status,omitempty" url:"status,omitempty"`
	// Transaction Category Code, if applicable.
	Tcc *string `json:"tcc,omitempty" url:"tcc,omitempty"`
	// Indicates if the virtual card was sent.
	VcardSent *bool `json:"vcardSent,omitempty" url:"vcardSent,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardGetResponse) GetAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.Amount
}

func (v *VCardGetResponse) GetAssociatedCustomer() *string {
	if v == nil {
		return nil
	}
	return v.AssociatedCustomer
}

func (v *VCardGetResponse) GetAssociatedVendor() *VCardGetResponseAssociatedVendor {
	if v == nil {
		return nil
	}
	return v.AssociatedVendor
}

func (v *VCardGetResponse) GetCardNumber() *string {
	if v == nil {
		return nil
	}
	return v.CardNumber
}

func (v *VCardGetResponse) GetCardToken() *string {
	if v == nil {
		return nil
	}
	return v.CardToken
}

func (v *VCardGetResponse) GetCurrentBalance() *float64 {
	if v == nil {
		return nil
	}
	return v.CurrentBalance
}

func (v *VCardGetResponse) GetCurrentNumberOfUses() *int {
	if v == nil {
		return nil
	}
	return v.CurrentNumberOfUses
}

func (v *VCardGetResponse) GetCvc() *string {
	if v == nil {
		return nil
	}
	return v.Cvc
}

func (v *VCardGetResponse) GetDateCreated() *string {
	if v == nil {
		return nil
	}
	return v.DateCreated
}

func (v *VCardGetResponse) GetDateModified() *string {
	if v == nil {
		return nil
	}
	return v.DateModified
}

func (v *VCardGetResponse) GetExactAmount() *bool {
	if v == nil {
		return nil
	}
	return v.ExactAmount
}

func (v *VCardGetResponse) GetExpenseLimit() *float64 {
	if v == nil {
		return nil
	}
	return v.ExpenseLimit
}

func (v *VCardGetResponse) GetExpenseLimitPeriod() *string {
	if v == nil {
		return nil
	}
	return v.ExpenseLimitPeriod
}

func (v *VCardGetResponse) GetExpirationDate() *string {
	if v == nil {
		return nil
	}
	return v.ExpirationDate
}

func (v *VCardGetResponse) GetExternalPaypointId() *ExternalPaypointId {
	if v == nil {
		return nil
	}
	return v.ExternalPaypointId
}

func (v *VCardGetResponse) GetMaxNumberOfUses() *int {
	if v == nil {
		return nil
	}
	return v.MaxNumberOfUses
}

func (v *VCardGetResponse) GetMcc() *string {
	if v == nil {
		return nil
	}
	return v.Mcc
}

func (v *VCardGetResponse) GetMisc1() *string {
	if v == nil {
		return nil
	}
	return v.Misc1
}

func (v *VCardGetResponse) GetMisc2() *string {
	if v == nil {
		return nil
	}
	return v.Misc2
}

func (v *VCardGetResponse) GetParentOrgName() *string {
	if v == nil {
		return nil
	}
	return v.ParentOrgName
}

func (v *VCardGetResponse) GetPaypointDbaname() *string {
	if v == nil {
		return nil
	}
	return v.PaypointDbaname
}

func (v *VCardGetResponse) GetPaypointEntryname() *string {
	if v == nil {
		return nil
	}
	return v.PaypointEntryname
}

func (v *VCardGetResponse) GetPaypointLegalname() *string {
	if v == nil {
		return nil
	}
	return v.PaypointLegalname
}

func (v *VCardGetResponse) GetStatus() *string {
	if v == nil {
		return nil
	}
	return v.Status
}

func (v *VCardGetResponse) GetTcc() *string {
	if v == nil {
		return nil
	}
	return v.Tcc
}

func (v *VCardGetResponse) GetVcardSent() *bool {
	if v == nil {
		return nil
	}
	return v.VcardSent
}

func (v *VCardGetResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardGetResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardGetResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Information about the associated vendor.
type VCardGetResponseAssociatedVendor struct {
	// Field for additional data, if any.
	AdditionalData *string `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	// Primary address line of the vendor.
	Address1 *string `json:"Address1,omitempty" url:"Address1,omitempty"`
	// Secondary address line of the vendor.
	Address2 *string `json:"Address2,omitempty" url:"Address2,omitempty"`
	// Billing data for the vendor.
	BillingData *VCardGetResponseAssociatedVendorBillingData `json:"BillingData,omitempty" url:"BillingData,omitempty"`
	// City where the vendor is located.
	City     *string   `json:"City,omitempty" url:"City,omitempty"`
	Contacts *Contacts `json:"Contacts,omitempty" url:"Contacts,omitempty"`
	// Country where the vendor is located.
	Country *string `json:"Country,omitempty" url:"Country,omitempty"`
	// Date when the vendor record was created.
	CreatedDate *CreatedAt `json:"CreatedDate,omitempty" url:"CreatedDate,omitempty"`
	// Account number of paypoint in the vendor side.
	CustomerVendorAccount *string `json:"customerVendorAccount,omitempty" url:"customerVendorAccount,omitempty"`
	// A custom field for additional data.
	CustomField1 *string `json:"customField1,omitempty" url:"customField1,omitempty"`
	// Another custom field for extra data.
	CustomField2 *string `json:"customField2,omitempty" url:"customField2,omitempty"`
	// Employer Identification Number of the vendor.
	Ein *string `json:"EIN,omitempty" url:"EIN,omitempty"`
	// Contact email address of the vendor.
	Email *string `json:"Email,omitempty" url:"Email,omitempty"`
	// Enrollment status of the vendor.
	EnrollmentStatus   *string             `json:"EnrollmentStatus,omitempty" url:"EnrollmentStatus,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// Internal reference ID used within the system.
	InternalReferenceId *int `json:"InternalReferenceId,omitempty" url:"InternalReferenceId,omitempty"`
	// Date when the vendor's information was last updated.
	LastUpdated *LastModified `json:"LastUpdated,omitempty" url:"LastUpdated,omitempty"`
	// Unique location code for the vendor.
	LocationCode *string `json:"LocationCode,omitempty" url:"LocationCode,omitempty"`
	// Merchant Category Code for the vendor.
	Mcc *string `json:"Mcc,omitempty" url:"Mcc,omitempty"`
	// The primary name associated with the vendor.
	Name1 *string `json:"Name1,omitempty" url:"Name1,omitempty"`
	// Additional name information for the vendor.
	Name2         *string        `json:"Name2,omitempty" url:"Name2,omitempty"`
	ParentOrgName *OrgParentName `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	// Primary name of the payee.
	PayeeName1 *string `json:"payeeName1,omitempty" url:"payeeName1,omitempty"`
	// Secondary name of the payee.
	PayeeName2    *string              `json:"payeeName2,omitempty" url:"payeeName2,omitempty"`
	PaymentMethod *VendorPaymentMethod `json:"paymentMethod,omitempty" url:"paymentMethod,omitempty"`
	// DBA name of the paypoint.
	PaypointDbaname *Dbaname `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// Entryname of the paypoint.
	PaypointEntryname *string `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	// Legal name of the paypoint.
	PaypointLegalname *Legalname `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// Contact phone number of the vendor.
	Phone         *string        `json:"Phone,omitempty" url:"Phone,omitempty"`
	RemitAddress1 *Remitaddress1 `json:"remitAddress1,omitempty" url:"remitAddress1,omitempty"`
	RemitAddress2 *Remitaddress2 `json:"remitAddress2,omitempty" url:"remitAddress2,omitempty"`
	RemitCity     *Remitcity     `json:"remitCity,omitempty" url:"remitCity,omitempty"`
	RemitCountry  *Remitcountry  `json:"remitCountry,omitempty" url:"remitCountry,omitempty"`
	RemitState    *Remitstate    `json:"remitState,omitempty" url:"remitState,omitempty"`
	RemitZip      *Remitzip      `json:"remitZip,omitempty" url:"remitZip,omitempty"`
	// State where the vendor is located.
	State *string `json:"State,omitempty" url:"State,omitempty"`
	// Summary of vendor's billing and transaction status.
	Summary *VCardGetResponseAssociatedVendorSummary `json:"Summary,omitempty" url:"Summary,omitempty"`
	// Unique identifier for the vendor.
	VendorId *int `json:"VendorId,omitempty" url:"VendorId,omitempty"`
	// Unique code identifying the vendor.
	VendorNumber *string `json:"VendorNumber,omitempty" url:"VendorNumber,omitempty"`
	// Status of the vendor.
	VendorStatus *int `json:"VendorStatus,omitempty" url:"VendorStatus,omitempty"`
	// ZIP code for the vendor's location.
	Zip *string `json:"Zip,omitempty" url:"Zip,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardGetResponseAssociatedVendor) GetAdditionalData() *string {
	if v == nil {
		return nil
	}
	return v.AdditionalData
}

func (v *VCardGetResponseAssociatedVendor) GetAddress1() *string {
	if v == nil {
		return nil
	}
	return v.Address1
}

func (v *VCardGetResponseAssociatedVendor) GetAddress2() *string {
	if v == nil {
		return nil
	}
	return v.Address2
}

func (v *VCardGetResponseAssociatedVendor) GetBillingData() *VCardGetResponseAssociatedVendorBillingData {
	if v == nil {
		return nil
	}
	return v.BillingData
}

func (v *VCardGetResponseAssociatedVendor) GetCity() *string {
	if v == nil {
		return nil
	}
	return v.City
}

func (v *VCardGetResponseAssociatedVendor) GetContacts() *Contacts {
	if v == nil {
		return nil
	}
	return v.Contacts
}

func (v *VCardGetResponseAssociatedVendor) GetCountry() *string {
	if v == nil {
		return nil
	}
	return v.Country
}

func (v *VCardGetResponseAssociatedVendor) GetCreatedDate() *CreatedAt {
	if v == nil {
		return nil
	}
	return v.CreatedDate
}

func (v *VCardGetResponseAssociatedVendor) GetCustomerVendorAccount() *string {
	if v == nil {
		return nil
	}
	return v.CustomerVendorAccount
}

func (v *VCardGetResponseAssociatedVendor) GetCustomField1() *string {
	if v == nil {
		return nil
	}
	return v.CustomField1
}

func (v *VCardGetResponseAssociatedVendor) GetCustomField2() *string {
	if v == nil {
		return nil
	}
	return v.CustomField2
}

func (v *VCardGetResponseAssociatedVendor) GetEin() *string {
	if v == nil {
		return nil
	}
	return v.Ein
}

func (v *VCardGetResponseAssociatedVendor) GetEmail() *string {
	if v == nil {
		return nil
	}
	return v.Email
}

func (v *VCardGetResponseAssociatedVendor) GetEnrollmentStatus() *string {
	if v == nil {
		return nil
	}
	return v.EnrollmentStatus
}

func (v *VCardGetResponseAssociatedVendor) GetExternalPaypointId() *ExternalPaypointId {
	if v == nil {
		return nil
	}
	return v.ExternalPaypointId
}

func (v *VCardGetResponseAssociatedVendor) GetInternalReferenceId() *int {
	if v == nil {
		return nil
	}
	return v.InternalReferenceId
}

func (v *VCardGetResponseAssociatedVendor) GetLastUpdated() *LastModified {
	if v == nil {
		return nil
	}
	return v.LastUpdated
}

func (v *VCardGetResponseAssociatedVendor) GetLocationCode() *string {
	if v == nil {
		return nil
	}
	return v.LocationCode
}

func (v *VCardGetResponseAssociatedVendor) GetMcc() *string {
	if v == nil {
		return nil
	}
	return v.Mcc
}

func (v *VCardGetResponseAssociatedVendor) GetName1() *string {
	if v == nil {
		return nil
	}
	return v.Name1
}

func (v *VCardGetResponseAssociatedVendor) GetName2() *string {
	if v == nil {
		return nil
	}
	return v.Name2
}

func (v *VCardGetResponseAssociatedVendor) GetParentOrgName() *OrgParentName {
	if v == nil {
		return nil
	}
	return v.ParentOrgName
}

func (v *VCardGetResponseAssociatedVendor) GetPayeeName1() *string {
	if v == nil {
		return nil
	}
	return v.PayeeName1
}

func (v *VCardGetResponseAssociatedVendor) GetPayeeName2() *string {
	if v == nil {
		return nil
	}
	return v.PayeeName2
}

func (v *VCardGetResponseAssociatedVendor) GetPaymentMethod() *VendorPaymentMethod {
	if v == nil {
		return nil
	}
	return v.PaymentMethod
}

func (v *VCardGetResponseAssociatedVendor) GetPaypointDbaname() *Dbaname {
	if v == nil {
		return nil
	}
	return v.PaypointDbaname
}

func (v *VCardGetResponseAssociatedVendor) GetPaypointEntryname() *string {
	if v == nil {
		return nil
	}
	return v.PaypointEntryname
}

func (v *VCardGetResponseAssociatedVendor) GetPaypointLegalname() *Legalname {
	if v == nil {
		return nil
	}
	return v.PaypointLegalname
}

func (v *VCardGetResponseAssociatedVendor) GetPhone() *string {
	if v == nil {
		return nil
	}
	return v.Phone
}

func (v *VCardGetResponseAssociatedVendor) GetRemitAddress1() *Remitaddress1 {
	if v == nil {
		return nil
	}
	return v.RemitAddress1
}

func (v *VCardGetResponseAssociatedVendor) GetRemitAddress2() *Remitaddress2 {
	if v == nil {
		return nil
	}
	return v.RemitAddress2
}

func (v *VCardGetResponseAssociatedVendor) GetRemitCity() *Remitcity {
	if v == nil {
		return nil
	}
	return v.RemitCity
}

func (v *VCardGetResponseAssociatedVendor) GetRemitCountry() *Remitcountry {
	if v == nil {
		return nil
	}
	return v.RemitCountry
}

func (v *VCardGetResponseAssociatedVendor) GetRemitState() *Remitstate {
	if v == nil {
		return nil
	}
	return v.RemitState
}

func (v *VCardGetResponseAssociatedVendor) GetRemitZip() *Remitzip {
	if v == nil {
		return nil
	}
	return v.RemitZip
}

func (v *VCardGetResponseAssociatedVendor) GetState() *string {
	if v == nil {
		return nil
	}
	return v.State
}

func (v *VCardGetResponseAssociatedVendor) GetSummary() *VCardGetResponseAssociatedVendorSummary {
	if v == nil {
		return nil
	}
	return v.Summary
}

func (v *VCardGetResponseAssociatedVendor) GetVendorId() *int {
	if v == nil {
		return nil
	}
	return v.VendorId
}

func (v *VCardGetResponseAssociatedVendor) GetVendorNumber() *string {
	if v == nil {
		return nil
	}
	return v.VendorNumber
}

func (v *VCardGetResponseAssociatedVendor) GetVendorStatus() *int {
	if v == nil {
		return nil
	}
	return v.VendorStatus
}

func (v *VCardGetResponseAssociatedVendor) GetZip() *string {
	if v == nil {
		return nil
	}
	return v.Zip
}

func (v *VCardGetResponseAssociatedVendor) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardGetResponseAssociatedVendor) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardGetResponseAssociatedVendor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardGetResponseAssociatedVendor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardGetResponseAssociatedVendor) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Billing data for the vendor.
type VCardGetResponseAssociatedVendorBillingData struct {
	// Masked account number for transactions.
	AccountNumber *string `json:"accountNumber,omitempty" url:"accountNumber,omitempty"`
	// Function of the bank account.
	BankAccountFunction *int `json:"bankAccountFunction,omitempty" url:"bankAccountFunction,omitempty"`
	// Name of the bank account holder.
	BankAccountHolderName *string `json:"bankAccountHolderName,omitempty" url:"bankAccountHolderName,omitempty"`
	// Type of bank account holder.
	BankAccountHolderType *string `json:"bankAccountHolderType,omitempty" url:"bankAccountHolderType,omitempty"`
	// Name of the bank used for transactions.
	BankName *string `json:"bankName,omitempty" url:"bankName,omitempty"`
	// Unique identifier for billing data.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// Routing number for the bank account.
	RoutingAccount *string `json:"routingAccount,omitempty" url:"routingAccount,omitempty"`
	// Type of the bank account.
	TypeAccount *string `json:"typeAccount,omitempty" url:"typeAccount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetAccountNumber() *string {
	if v == nil {
		return nil
	}
	return v.AccountNumber
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetBankAccountFunction() *int {
	if v == nil {
		return nil
	}
	return v.BankAccountFunction
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetBankAccountHolderName() *string {
	if v == nil {
		return nil
	}
	return v.BankAccountHolderName
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetBankAccountHolderType() *string {
	if v == nil {
		return nil
	}
	return v.BankAccountHolderType
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetBankName() *string {
	if v == nil {
		return nil
	}
	return v.BankName
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetId() *string {
	if v == nil {
		return nil
	}
	return v.Id
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetRoutingAccount() *string {
	if v == nil {
		return nil
	}
	return v.RoutingAccount
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetTypeAccount() *string {
	if v == nil {
		return nil
	}
	return v.TypeAccount
}

func (v *VCardGetResponseAssociatedVendorBillingData) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardGetResponseAssociatedVendorBillingData) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardGetResponseAssociatedVendorBillingData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardGetResponseAssociatedVendorBillingData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardGetResponseAssociatedVendorBillingData) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Summary of vendor's billing and transaction status.
type VCardGetResponseAssociatedVendorSummary struct {
	// Number of active bills.
	ActiveBills *int `json:"ActiveBills,omitempty" url:"ActiveBills,omitempty"`
	// Total amount of active bills.
	ActiveBillsAmount *float64 `json:"ActiveBillsAmount,omitempty" url:"ActiveBillsAmount,omitempty"`
	// Number of bills that have been approved.
	ApprovedBills *int `json:"ApprovedBills,omitempty" url:"ApprovedBills,omitempty"`
	// Total amount of approved bills.
	ApprovedBillsAmount *float64 `json:"ApprovedBillsAmount,omitempty" url:"ApprovedBillsAmount,omitempty"`
	// Number of bills that have been disapproved.
	DisapprovedBills *int `json:"DisapprovedBills,omitempty" url:"DisapprovedBills,omitempty"`
	// Total amount of rejected bills.
	DisapprovedBillsAmount *float64 `json:"DisapprovedBillsAmount,omitempty" url:"DisapprovedBillsAmount,omitempty"`
	// Number of bills in transit.
	InTransitBills *int `json:"InTransitBills,omitempty" url:"InTransitBills,omitempty"`
	// Total amount of bills in transit.
	InTransitBillsAmount *float64 `json:"InTransitBillsAmount,omitempty" url:"InTransitBillsAmount,omitempty"`
	// Number of bills that are overdue.
	OverdueBills *int `json:"OverdueBills,omitempty" url:"OverdueBills,omitempty"`
	// Total amount of overdue bills.
	OverdueBillsAmount *float64 `json:"OverdueBillsAmount,omitempty" url:"OverdueBillsAmount,omitempty"`
	// Number of bills that have been paid.
	PaidBills *int `json:"PaidBills,omitempty" url:"PaidBills,omitempty"`
	// Total amount of paid bills.
	PaidBillsAmount *float64 `json:"PaidBillsAmount,omitempty" url:"PaidBillsAmount,omitempty"`
	// Number of bills pending approval or payment.
	PendingBills *int `json:"PendingBills,omitempty" url:"PendingBills,omitempty"`
	// Total amount of pending bills.
	PendingBillsAmount *float64 `json:"PendingBillsAmount,omitempty" url:"PendingBillsAmount,omitempty"`
	// Total number of bills.
	TotalBills *int `json:"TotalBills,omitempty" url:"TotalBills,omitempty"`
	// Total amount of all bills.
	TotalBillsAmount *float64 `json:"TotalBillsAmount,omitempty" url:"TotalBillsAmount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardGetResponseAssociatedVendorSummary) GetActiveBills() *int {
	if v == nil {
		return nil
	}
	return v.ActiveBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetActiveBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.ActiveBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetApprovedBills() *int {
	if v == nil {
		return nil
	}
	return v.ApprovedBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetApprovedBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.ApprovedBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetDisapprovedBills() *int {
	if v == nil {
		return nil
	}
	return v.DisapprovedBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetDisapprovedBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.DisapprovedBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetInTransitBills() *int {
	if v == nil {
		return nil
	}
	return v.InTransitBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetInTransitBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.InTransitBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetOverdueBills() *int {
	if v == nil {
		return nil
	}
	return v.OverdueBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetOverdueBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.OverdueBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetPaidBills() *int {
	if v == nil {
		return nil
	}
	return v.PaidBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetPaidBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.PaidBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetPendingBills() *int {
	if v == nil {
		return nil
	}
	return v.PendingBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetPendingBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.PendingBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetTotalBills() *int {
	if v == nil {
		return nil
	}
	return v.TotalBills
}

func (v *VCardGetResponseAssociatedVendorSummary) GetTotalBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.TotalBillsAmount
}

func (v *VCardGetResponseAssociatedVendorSummary) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardGetResponseAssociatedVendorSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardGetResponseAssociatedVendorSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardGetResponseAssociatedVendorSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardGetResponseAssociatedVendorSummary) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
