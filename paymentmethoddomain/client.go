// Code generated by Fern. DO NOT EDIT.

package paymentmethoddomain

import (
	context "context"
	sdkgo "github.com/payabli/sdk-go"
	core "github.com/payabli/sdk-go/core"
	internal "github.com/payabli/sdk-go/internal"
	option "github.com/payabli/sdk-go/option"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Add a payment method domain to an organization or paypoint.
func (c *Client) AddPaymentMethodDomain(
	ctx context.Context,
	request *sdkgo.AddPaymentMethodDomainRequest,
	opts ...option.RequestOption,
) (*sdkgo.AddPaymentMethodDomainApiResponse, error) {
	response, err := c.WithRawResponse.AddPaymentMethodDomain(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Cascades a payment method domain to all child entities. All paypoints and suborganization under this parent will inherit this domain and its settings.
func (c *Client) CascadePaymentMethodDomain(
	ctx context.Context,
	// The payment method domain's ID in Payabli.
	domainId string,
	opts ...option.RequestOption,
) (*sdkgo.PaymentMethodDomainGeneralResponse, error) {
	response, err := c.WithRawResponse.CascadePaymentMethodDomain(
		ctx,
		domainId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Delete a payment method domain. You can't delete an inherited domain, you must delete a domain at the organization level.
func (c *Client) DeletePaymentMethodDomain(
	ctx context.Context,
	// The payment method domain's ID in Payabli.
	domainId string,
	opts ...option.RequestOption,
) (*sdkgo.DeletePaymentMethodDomainResponse, error) {
	response, err := c.WithRawResponse.DeletePaymentMethodDomain(
		ctx,
		domainId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get the details for a payment method domain.
func (c *Client) GetPaymentMethodDomain(
	ctx context.Context,
	// The payment method domain's ID in Payabli.
	domainId string,
	opts ...option.RequestOption,
) (*sdkgo.PaymentMethodDomainApiResponse, error) {
	response, err := c.WithRawResponse.GetPaymentMethodDomain(
		ctx,
		domainId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get a list of payment method domains that belong to a PSP, organization, or paypoint.
func (c *Client) ListPaymentMethodDomains(
	ctx context.Context,
	request *sdkgo.ListPaymentMethodDomainsRequest,
	opts ...option.RequestOption,
) (*sdkgo.ListPaymentMethodDomainsResponse, error) {
	response, err := c.WithRawResponse.ListPaymentMethodDomains(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Update a payment method domain's configuration values.
func (c *Client) UpdatePaymentMethodDomain(
	ctx context.Context,
	// The payment method domain's ID in Payabli.
	domainId string,
	request *sdkgo.UpdatePaymentMethodDomainRequest,
	opts ...option.RequestOption,
) (*sdkgo.PaymentMethodDomainGeneralResponse, error) {
	response, err := c.WithRawResponse.UpdatePaymentMethodDomain(
		ctx,
		domainId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Verify a new payment method domain. If verification is successful, Apple Pay is automatically activated for the domain.
func (c *Client) VerifyPaymentMethodDomain(
	ctx context.Context,
	// The payment method domain's ID in Payabli.
	domainId string,
	opts ...option.RequestOption,
) (*sdkgo.PaymentMethodDomainGeneralResponse, error) {
	response, err := c.WithRawResponse.VerifyPaymentMethodDomain(
		ctx,
		domainId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
