// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	fmt "fmt"
	big "math/big"
)

var (
	exportApplicationsRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportApplicationsRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportApplicationsRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportApplicationsRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportApplicationsRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `createdAt` (gt, ge, lt, le, eq, ne)
	// - `startDate` (gt, ge, lt, le, eq, ne)
	// - `dbaname`  (ct, nct)
	// - `legalname`  (ct, nct)
	// - `ein`  (ct, nct)
	// - `address`  (ct, nct)
	// - `city`  (ct, nct)
	// - `state`  (ct, nct)
	// - `phone`  (ct, nct)
	// - `mcc`  (ct, nct)
	// - `owntype`  (ct, nct)
	// - `ownerName`  (ct, nct)
	// - `contactName`  (ct, nct)
	// - `status`  (eq, ne)
	// - `orgParentname`  (ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - `limitRecord` : max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord` : initial record in query
	//
	// Example: `dbaname(ct)=hoa` returns all records with a `dbaname` containing "hoa"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportApplicationsRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportApplicationsRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportApplicationsRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportApplicationsRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportApplicationsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportApplicationsRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportApplicationsRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportApplicationsRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportApplicationsRequestFieldParameters)
}

var (
	exportBatchDetailsRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportBatchDetailsRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportBatchDetailsRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportBatchDetailsRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportBatchDetailsRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// **List of field names accepted:**
	//
	//   - `settlementDate` (gt, ge, lt, le, eq, ne)
	//   - `depositDate` (gt, ge, lt, le, eq, ne)
	//   - `transId`  (ne, eq, ct, nct)
	//   - `gatewayTransId`  (ne, eq, ct, nct)
	//   - `method`   (in, nin, eq, ne)
	//   - `settledAmount`  (gt, ge, lt, le, eq, ne)
	//   - `operation`    (in, nin, eq, ne)
	//   - `source`   (in, nin, eq, ne)
	//   - `batchNumber`  (ct, nct, eq, ne)
	//   - `payaccountLastfour`   (nct, ct)
	//   - `payaccountType`   (ne, eq, in, nin)
	//   - `customerFirstname`   (ct, nct, eq, ne)
	//   - `customerLastname`    (ct, nct, eq, ne)
	//   - `customerName`   (ct, nct)
	//   - `customerId`  (eq, ne)
	//   - `customerNumber`  (ct, nct, eq, ne)
	//   - `customerCompanyname`    (ct, nct, eq, ne)
	//   - `customerAddress` (ct, nct, eq, ne)
	//   - `customerCity`    (ct, nct, eq, ne)
	//   - `customerZip` (ct, nct, eq, ne)
	//   - `customerState` (ct, nct, eq, ne)
	//   - `customerCountry` (ct, nct, eq, ne)
	//   - `customerPhone` (ct, nct, eq, ne)
	//   - `customerEmail` (ct, nct, eq, ne)
	//   - `customerShippingAddress` (ct, nct, eq, ne)
	//   - `customerShippingCity`    (ct, nct, eq, ne)
	//   - `customerShippingZip` (ct, nct, eq, ne)
	//   - `customerShippingState` (ct, nct, eq, ne)
	//   - `customerShippingCountry` (ct, nct, eq, ne)
	//   - `orgId`  (eq) *mandatory when entry=org*
	//   - `isHold` (eq, ne)
	//   - `paypointId`  (ne, eq)
	//   - `paypointLegal`  (ne, eq, ct, nct)
	//   - `paypointDba`  (ne, eq, ct, nct)
	//   - `orgName`  (ne, eq, ct, nct)
	//   - `batchId` (ct, nct, eq, neq)
	//   - `additional-xxx`  (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of parameters accepted:
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// Example: `amount(gt)=20` return all records with amount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportBatchDetailsRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchDetailsRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportBatchDetailsRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchDetailsRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportBatchDetailsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchDetailsRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportBatchDetailsRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchDetailsRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportBatchDetailsRequestFieldParameters)
}

var (
	exportBatchDetailsOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportBatchDetailsOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportBatchDetailsOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportBatchDetailsOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportBatchDetailsOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// **List of field names accepted:**
	//
	//   - `settlementDate` (gt, ge, lt, le, eq, ne)
	//   - `depositDate` (gt, ge, lt, le, eq, ne)
	//   - `transId`  (ne, eq, ct, nct)
	//   - `gatewayTransId`  (ne, eq, ct, nct)
	//   - `method`   (in, nin, eq, ne)
	//   - `settledAmount`  (gt, ge, lt, le, eq, ne)
	//   - `operation`    (in, nin, eq, ne)
	//   - `source`   (in, nin, eq, ne)
	//   - `batchNumber`  (ct, nct, eq, ne)
	//   - `payaccountLastfour`   (nct, ct)
	//   - `payaccountType`   (ne, eq, in, nin)
	//   - `customerFirstname`   (ct, nct, eq, ne)
	//   - `customerLastname`    (ct, nct, eq, ne)
	//   - `customerName`   (ct, nct)
	//   - `customerId`  (eq, ne)
	//   - `customerNumber`  (ct, nct, eq, ne)
	//   - `customerCompanyname`    (ct, nct, eq, ne)
	//   - `customerAddress` (ct, nct, eq, ne)
	//   - `customerCity`    (ct, nct, eq, ne)
	//   - `customerZip` (ct, nct, eq, ne)
	//   - `customerState` (ct, nct, eq, ne)
	//   - `customerCountry` (ct, nct, eq, ne)
	//   - `customerPhone` (ct, nct, eq, ne)
	//   - `customerEmail` (ct, nct, eq, ne)
	//   - `customerShippingAddress` (ct, nct, eq, ne)
	//   - `customerShippingCity`    (ct, nct, eq, ne)
	//   - `customerShippingZip` (ct, nct, eq, ne)
	//   - `customerShippingState` (ct, nct, eq, ne)
	//   - `customerShippingCountry` (ct, nct, eq, ne)
	//   - `orgId`  (eq) *mandatory when entry=org*
	//   - `isHold` (eq, ne)
	//   - `paypointId`  (ne, eq)
	//   - `paypointLegal`  (ne, eq, ct, nct)
	//   - `paypointDba`  (ne, eq, ct, nct)
	//   - `orgName`  (ne, eq, ct, nct)
	//   - `batchId` (ct, nct, eq, neq)
	//   - `additional-xxx`  (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of parameters accepted:
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// Example: `amount(gt)=20` return all records with amount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportBatchDetailsOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchDetailsOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportBatchDetailsOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchDetailsOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportBatchDetailsOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchDetailsOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportBatchDetailsOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchDetailsOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportBatchDetailsOrgRequestFieldParameters)
}

var (
	exportBatchesRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportBatchesRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportBatchesRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportBatchesRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportBatchesRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `batchDate` (gt, ge, lt, le, eq, ne)
	// - `batchNumber` (ne, eq)
	// - `connectorName` (ne, eq, ct, nct)
	// - `method` (in, nin, eq, ne)
	// - `batchAmount` (gt, ge, lt, le, eq, ne)
	// - `feeBatchAmount` (gt, ge, lt, le, eq, ne)
	// - `netBatchAmount` (gt, ge, lt, le, eq, ne)
	// - `releaseAmount` (gt, ge, lt, le, eq, ne)
	// - `heldAmount` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `paypointId` (ne, eq)
	// - `externalPaypointID` (ct, nct, eq, ne)
	// - `expectedDepositDate` (gt, ge, lt, le, eq, ne)
	// - `batchRecords` (gt, ge, lt, le, eq, ne)
	// - `transferId` (ne, eq)
	// - `transferDate` (gt, ge, lt, le, eq, ne)
	// - `grossAmount` (gt, ge, lt, le, eq, ne)
	// - `chargeBackAmount` (gt, ge, lt, le, eq, ne)
	// - `returnedAmount` (gt, ge, lt, le, eq, ne)
	// - `billingFeeAmount` (gt, ge, lt, le, eq, ne)
	// - `thirdPartyPaidAmount` (gt, ge, lt, le, eq, ne)
	// - `netFundedAmount` (gt, ge, lt, le, eq, ne)
	// - `adjustmentAmount` (gt, ge, lt, le, eq, ne)
	// - `processor` (ne, eq, ct, nct)
	// - `transferStatus` (ne, eq, in, nin)
	//
	// List of parameters accepted:
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// Example: `batchAmount(gt)=20` returns all records with a `batchAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportBatchesRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportBatchesRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportBatchesRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportBatchesRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportBatchesRequestFieldParameters)
}

var (
	exportBatchesOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportBatchesOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportBatchesOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportBatchesOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportBatchesOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `batchDate` (gt, ge, lt, le, eq, ne)
	// - `batchNumber` (ne, eq)
	// - `connectorName` (ne, eq, ct, nct)
	// - `method` (in, nin, eq, ne)
	// - `batchAmount` (gt, ge, lt, le, eq, ne)
	// - `feeBatchAmount` (gt, ge, lt, le, eq, ne)
	// - `netBatchAmount` (gt, ge, lt, le, eq, ne)
	// - `releaseAmount` (gt, ge, lt, le, eq, ne)
	// - `heldAmount` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `paypointId` (ne, eq)
	// - `externalPaypointID` (ct, nct, eq, ne)
	// - `expectedDepositDate` (gt, ge, lt, le, eq, ne)
	// - `batchRecords` (gt, ge, lt, le, eq, ne)
	// - `transferId` (ne, eq)
	// - `transferDate` (gt, ge, lt, le, eq, ne)
	// - `grossAmount` (gt, ge, lt, le, eq, ne)
	// - `chargeBackAmount` (gt, ge, lt, le, eq, ne)
	// - `returnedAmount` (gt, ge, lt, le, eq, ne)
	// - `billingFeeAmount` (gt, ge, lt, le, eq, ne)
	// - `thirdPartyPaidAmount` (gt, ge, lt, le, eq, ne)
	// - `netFundedAmount` (gt, ge, lt, le, eq, ne)
	// - `adjustmentAmount` (gt, ge, lt, le, eq, ne)
	// - `processor` (ne, eq, ct, nct)
	// - `transferStatus` (ne, eq, in, nin)
	//
	// List of parameters accepted:
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	// Example: `batchAmount(gt)=20` returns all records with a `batchAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportBatchesOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportBatchesOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportBatchesOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportBatchesOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportBatchesOrgRequestFieldParameters)
}

var (
	exportBatchesOutRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportBatchesOutRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportBatchesOutRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportBatchesOutRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportBatchesOutRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	//   - `batchDate` (gt, ge, lt, le, eq, ne)
	//   - `batchNumber` (ne, eq)
	//   - `batchAmount` (gt, ge, lt, le, eq, ne)
	//   - `status` (in, nin, eq, ne)
	//   - `paypointLegal` (ne, eq, ct, nct)
	//   - `paypointDba` (ne, eq, ct, nct)
	//   - `orgName` (ne, eq, ct, nct, nin, in)
	//   - `paypointId` (ne, eq)
	//   - `externalPaypointID` (ct, nct, eq, ne)
	//
	// List of parameters accepted:
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// Example: `batchAmount(gt)=20` returns all records with a `batchAmount` greater than 20.00"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportBatchesOutRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOutRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportBatchesOutRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOutRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportBatchesOutRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOutRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportBatchesOutRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOutRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportBatchesOutRequestFieldParameters)
}

var (
	exportBatchesOutOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportBatchesOutOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportBatchesOutOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportBatchesOutOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportBatchesOutOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	//   - `batchDate` (gt, ge, lt, le, eq, ne)
	//   - `batchNumber` (ne, eq)
	//   - `batchAmount` (gt, ge, lt, le, eq, ne)
	//   - `status` (in, nin, eq, ne)
	//   - `paypointLegal` (ne, eq, ct, nct)
	//   - `paypointDba` (ne, eq, ct, nct)
	//   - `orgName` (ne, eq, ct, nct, nin, in)
	//   - `paypointId` (ne, eq)
	//   - `externalPaypointID` (ct, nct, eq, ne)
	//
	// List of parameters accepted:
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// Example: `batchAmount(gt)=20` returns all records with a `batchAmount` greater than 20.00"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportBatchesOutOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOutOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportBatchesOutOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOutOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportBatchesOutOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOutOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportBatchesOutOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBatchesOutOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportBatchesOutOrgRequestFieldParameters)
}

var (
	exportBillsRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportBillsRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportBillsRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportBillsRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportBillsRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `status` (in, nin, eq, ne)
	// - `billNumber` (ct, nct, eq, ne)
	// - `billDate` (gt, ge, lt, le, eq, ne)
	// - `billDueDate` (gt, ge, lt, le, eq, ne)
	// - `vendorNumber` (ct, nct, eq, ne)
	// - `vendorName` (ct, nct, eq, ne)
	// - `ein` (ct, nct, eq, ne)
	// - `paymentMethod` (ct, nct, eq, ne)
	// - `paymentId` (ct, nct, eq, ne)
	// - `paymentgroup` (ct, nct, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: totalAmount(gt)=20  return all records with totalAmount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportBillsRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBillsRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportBillsRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBillsRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportBillsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBillsRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportBillsRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBillsRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportBillsRequestFieldParameters)
}

var (
	exportBillsOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportBillsOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportBillsOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportBillsOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportBillsOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `status` (in, nin, eq, ne)
	// - `billNumber` (ct, nct, eq, ne)
	// - `billDate` (gt, ge, lt, le, eq, ne)
	// - `billDueDate` (gt, ge, lt, le, eq, ne)
	// - `vendorNumber` (ct, nct, eq, ne)
	// - `vendorName` (ct, nct, eq, ne)
	// - `ein` (ct, nct, eq, ne)
	// - `paymentMethod` (ct, nct, eq, ne)
	// - `paymentId` (ct, nct, eq, ne)
	// - `paymentgroup` (ct, nct, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: totalAmount(gt)=20  return all records with totalAmount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportBillsOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBillsOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportBillsOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBillsOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportBillsOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBillsOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportBillsOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportBillsOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportBillsOrgRequestFieldParameters)
}

var (
	exportChargebacksRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportChargebacksRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportChargebacksRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportChargebacksRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportChargebacksRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `chargebackDate` (gt, ge, lt, le, eq, ne)
	// - `transId` (ne, eq, ct, nct)
	// - `method` (in, nin, eq, ne)
	// - `netAmount` (gt, ge, lt, le, eq, ne)
	// - `reasonCode` (in, nin, eq, ne)
	// - `reason` (ct, nct, eq, ne)
	// - `caseNumber` (ct, nct, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `accountType` (in, nin, eq, ne)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId` (eq) *mandatory when entry=org*
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportChargebacksRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportChargebacksRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportChargebacksRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportChargebacksRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportChargebacksRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportChargebacksRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportChargebacksRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportChargebacksRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportChargebacksRequestFieldParameters)
}

var (
	exportChargebacksOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportChargebacksOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportChargebacksOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportChargebacksOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportChargebacksOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `chargebackDate` (gt, ge, lt, le, eq, ne)
	// - `transId` (ne, eq, ct, nct)
	// - `method` (in, nin, eq, ne)
	// - `netAmount` (gt, ge, lt, le, eq, ne)
	// - `reasonCode` (in, nin, eq, ne)
	// - `reason` (ct, nct, eq, ne)
	// - `caseNumber` (ct, nct, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `accountType` (in, nin, eq, ne)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId` (eq) *mandatory when entry=org*
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportChargebacksOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportChargebacksOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportChargebacksOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportChargebacksOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportChargebacksOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportChargebacksOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportChargebacksOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportChargebacksOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportChargebacksOrgRequestFieldParameters)
}

var (
	exportCustomersRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportCustomersRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportCustomersRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportCustomersRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportCustomersRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// **List of field names accepted:**
	// - `createdDate` (gt, ge, lt, le, eq, ne)
	// - `customernumber` (ne, eq, ct, nct)
	// - `firstname` (ne, eq, ct, nct)
	// - `lastname` (ne, eq, ct, nct)
	// - `name` (ct, nct)
	// - `address` (ne, eq, ct, nct)
	// - `city` (ne, eq, ct, nct)
	// - `country` (ne, eq, ct, nct)
	// - `zip` (ne, eq, ct, nct)
	// - `state` (ne, eq, ct, nct)
	// - `shippingaddress` (ne, eq, ct, nct)
	// - `shippingcity` (ne, eq, ct, nct)
	// - `shippingcountry` (ne, eq, ct, nct)
	// - `shippingzip` (ne, eq, ct, nct)
	// - `shippingstate` (ne, eq, ct, nct)
	// - `phone` (ne, eq, ct, nct)
	// - `email` (ne, eq, ct, nct)
	// - `company` (ne, eq, ct, nct)
	// - `username` (ne, eq, ct, nct)
	// - `balance` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	// - `orgId` (eq) *mandatory when entry=org*
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// **List of comparison accepted - enclosed between parentheses:**
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// **List of parameters accepted:**
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// **Example:**
	// balance(gt)=20 return all records with balance greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportCustomersRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportCustomersRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportCustomersRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportCustomersRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportCustomersRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportCustomersRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportCustomersRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportCustomersRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportCustomersRequestFieldParameters)
}

var (
	exportCustomersOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportCustomersOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportCustomersOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportCustomersOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportCustomersOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// **List of field names accepted:**
	// - `createdDate` (gt, ge, lt, le, eq, ne)
	// - `customernumber` (ne, eq, ct, nct)
	// - `firstname` (ne, eq, ct, nct)
	// - `lastname` (ne, eq, ct, nct)
	// - `name` (ct, nct)
	// - `address` (ne, eq, ct, nct)
	// - `city` (ne, eq, ct, nct)
	// - `country` (ne, eq, ct, nct)
	// - `zip` (ne, eq, ct, nct)
	// - `state` (ne, eq, ct, nct)
	// - `shippingaddress` (ne, eq, ct, nct)
	// - `shippingcity` (ne, eq, ct, nct)
	// - `shippingcountry` (ne, eq, ct, nct)
	// - `shippingzip` (ne, eq, ct, nct)
	// - `shippingstate` (ne, eq, ct, nct)
	// - `phone` (ne, eq, ct, nct)
	// - `email` (ne, eq, ct, nct)
	// - `company` (ne, eq, ct, nct)
	// - `username` (ne, eq, ct, nct)
	// - `balance` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	// - `orgId` (eq) *mandatory when entry=org*
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// **List of comparison accepted - enclosed between parentheses:**
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// **List of parameters accepted:**
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// **Example:**
	// balance(gt)=20 return all records with balance greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportCustomersOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportCustomersOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportCustomersOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportCustomersOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportCustomersOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportCustomersOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportCustomersOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportCustomersOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportCustomersOrgRequestFieldParameters)
}

var (
	exportInvoicesRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportInvoicesRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportInvoicesRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportInvoicesRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportInvoicesRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	//   - `invoiceDate` (gt, ge, lt, le, eq, ne)
	//   - `dueDate` (gt, ge, lt, le, eq, ne)
	//   - `sentDate` (gt, ge, lt, le, eq, ne)
	//   - `frequency`  (in, nin,ne, eq)
	//   - `invoiceType`   (eq, ne)
	//   - `payTerms`   (in, nin, eq, ne)
	//   - `paypointId`  (ne, eq)
	//   - `totalAmount`  (gt, ge, lt, le, eq, ne)
	//   - `paidAmount`  (gt, ge, lt, le, eq, ne)
	//   - `status`   (in, nin, eq, ne)
	//   - `invoiceNumber`   (ct, nct, eq, ne)
	//   - `purchaseOrder`   (ct, nct, eq, ne)
	//   - `itemProductCode` (ct, nct)
	//   - `itemDescription` (ct, nct)
	//   - `customerFirstname`   (ct, nct, eq, ne)
	//   - `customerLastname`    (ct, nct, eq, ne)
	//   - `customerName`   (ct, nct)
	//   - `customerId`  (eq, ne)
	//   - `customerNumber`  (ct, nct, eq, ne)
	//   - `customerCompanyname`    (ct, nct, eq, ne)
	//   - `customerAddress` (ct, nct, eq, ne)
	//   - `customerCity`    (ct, nct, eq, ne)
	//   - `customerZip` (ct, nct, eq, ne)
	//   - `customerState` (ct, nct, eq, ne)
	//   - `customerCountry` (ct, nct, eq, ne)
	//   - `customerPhone` (ct, nct, eq, ne)
	//   - `customerEmail` (ct, nct, eq, ne)
	//   - `customerShippingAddress` (ct, nct, eq, ne)
	//   - `customerShippingCity` (ct, nct, eq, ne)
	//   - `customerShippingZip` (ct, nct, eq, ne)
	//   - `customerShippingState` (ct, nct, eq, ne)
	//   - `customerShippingCountry` (ct, nct, eq, ne)
	//   - `orgId`  (eq)
	//   - `paylinkId`  (ne, eq)
	//   - `paypointLegal`  (ne, eq, ct, nct)
	//   - `paypointDba`  (ne, eq, ct, nct)
	//   - `orgName`  (ne, eq, ct, nct)
	//   - `additional-xxx`  (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	//   - eq or empty => equal
	//   - gt => greater than
	//   - ge => greater or equal
	//   - lt => less than
	//   - le => less or equal
	//   - ne => not equal
	//   - ct => contains
	//   - nct => not contains
	//   - in => inside array
	//   - nin => not inside array
	//
	// List of parameters accepted:
	//   - `limitRecord` : max number of records for query (default="20", "0" or negative value for all)
	//   - `fromRecord` : initial record in query
	//
	// Example: `totalAmount(gt)=20` returns all records with `totalAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportInvoicesRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportInvoicesRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportInvoicesRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportInvoicesRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportInvoicesRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportInvoicesRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportInvoicesRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportInvoicesRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportInvoicesRequestFieldParameters)
}

var (
	exportInvoicesOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportInvoicesOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportInvoicesOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportInvoicesOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportInvoicesOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	//   - `invoiceDate` (gt, ge, lt, le, eq, ne)
	//   - `dueDate` (gt, ge, lt, le, eq, ne)
	//   - `sentDate` (gt, ge, lt, le, eq, ne)
	//   - `frequency` (in, nin,ne, eq)
	//   - `invoiceType` (eq, ne)
	//   - `payTerms` (in, nin, eq, ne)
	//   - `paypointId` (ne, eq)
	//   - `totalAmount` (gt, ge, lt, le, eq, ne)
	//   - `paidAmount` (gt, ge, lt, le, eq, ne)
	//   - `status` (in, nin, eq, ne)
	//   - `invoiceNumber` (ct, nct, eq, ne)
	//   - `purchaseOrder` (ct, nct, eq, ne)
	//   - `itemProductCode` (ct, nct)
	//   - `itemDescription` (ct, nct)
	//   - `customerFirstname` (ct, nct, eq, ne)
	//   - `customerLastname` (ct, nct, eq, ne)
	//   - `customerName` (ct, nct)
	//   - `customerId` (eq, ne)
	//   - `customerNumber` (ct, nct, eq, ne)
	//   - `customerCompanyname` (ct, nct, eq, ne)
	//   - `customerAddress` (ct, nct, eq, ne)
	//   - `customerCity` (ct, nct, eq, ne)
	//   - `customerZip` (ct, nct, eq, ne)
	//   - `customerState` (ct, nct, eq, ne)
	//   - `customerCountry` (ct, nct, eq, ne)
	//   - `customerPhone` (ct, nct, eq, ne)
	//   - `customerEmail` (ct, nct, eq, ne)
	//   - `customerShippingAddress` (ct, nct, eq, ne)
	//   - `customerShippingCity` (ct, nct, eq, ne)
	//   - `customerShippingZip` (ct, nct, eq, ne)
	//   - `customerShippingState` (ct, nct, eq, ne)
	//   - `customerShippingCountry` (ct, nct, eq, ne)
	//   - `orgId` (eq)
	//   - `paylinkId` (ne, eq)
	//   - `paypointLegal` (ne, eq, ct, nct)
	//   - `paypointDba` (ne, eq, ct, nct)
	//   - `orgName` (ne, eq, ct, nct)
	//   - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	//   - eq or empty => equal
	//   - gt => greater than
	//   - ge => greater or equal
	//   - lt => less than
	//   - le => less or equal
	//   - ne => not equal
	//   - ct => contains
	//   - nct => not contains
	//   - in => inside array
	//   - nin => not inside array
	//
	// List of parameters accepted:
	//   - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	//   - fromRecord : initial record in query
	//
	// Example: totalAmount(gt)=20  return all records with totalAmount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportInvoicesOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportInvoicesOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportInvoicesOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportInvoicesOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportInvoicesOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportInvoicesOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportInvoicesOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportInvoicesOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportInvoicesOrgRequestFieldParameters)
}

var (
	exportOrganizationsRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportOrganizationsRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportOrganizationsRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportOrganizationsRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportOrganizationsRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `name` (ct, nct, eq, ne)
	// - `type` (ne, eq)
	// - `contactName` (ct, nct, eq, ne)
	// - `contactTitle` (ct, nct, eq, ne)
	// - `contactEmail` (ct, nct, eq, ne)
	// - `contactPhone` (ct, nct, eq, ne)
	// - `city` (ct, nct, eq, ne)
	// - `state` (in, nin, eq, ne)
	// - `address` (ct, nct, eq, ne)
	// - `country` (ct, nct, eq, ne)
	// - `zip` (ct, nct, eq, ne)
	// - `hasBilling` any value greater than zero is taken as TRUE otherwise is FALSE
	// - `hasResidual` any value greater than zero is taken as TRUE otherwise is FALSE
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: name(ct)=hoa  return all records where name contains "hoa"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportOrganizationsRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportOrganizationsRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportOrganizationsRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportOrganizationsRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportOrganizationsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportOrganizationsRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportOrganizationsRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportOrganizationsRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportOrganizationsRequestFieldParameters)
}

var (
	exportPayoutRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportPayoutRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportPayoutRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportPayoutRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportPayoutRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `status` (in, nin, eq, ne)
	// - `transactionDate` (gt, ge, lt, le, eq, ne)
	// - `billNumber` (ct, nct)
	// - `vendorNumber` (ct, nct, eq, ne)
	// - `vendorName` (ct, nct, eq, ne)
	// - `paymentMethod` (ct, nct, eq, ne)
	// - `paymentId` (ct, nct, eq, ne)
	// - `paymentgroup` (ct, nct, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// Example: totalAmount(gt)=20 return all records with totalAmount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportPayoutRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPayoutRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportPayoutRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPayoutRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportPayoutRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPayoutRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportPayoutRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPayoutRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportPayoutRequestFieldParameters)
}

var (
	exportPayoutOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportPayoutOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportPayoutOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportPayoutOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportPayoutOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `status` (in, nin, eq, ne)
	// - `transactionDate` (gt, ge, lt, le, eq, ne)
	// - `billNumber` (ct, nct)
	// - `vendorNumber` (ct, nct, eq, ne)
	// - `vendorName` (ct, nct, eq, ne)
	// - `paymentMethod` (ct, nct, eq, ne)
	// - `paymentId` (ct, nct, eq, ne)
	// - `paymentgroup` (ct, nct, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// Example: totalAmount(gt)=20 return all records with totalAmount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportPayoutOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPayoutOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportPayoutOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPayoutOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportPayoutOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPayoutOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportPayoutOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPayoutOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportPayoutOrgRequestFieldParameters)
}

var (
	exportPaypointsRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportPaypointsRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportPaypointsRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportPaypointsRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportPaypointsRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `createdAt` (gt, ge, lt, le, eq, ne)
	// - `startDate` (gt, ge, lt, le, eq, ne)
	// - `dbaname` (ct, nct)
	// - `legalname` (ct, nct)
	// - `ein` (ct, nct)
	// - `address` (ct, nct)
	// - `city` (ct, nct)
	// - `state` (ct, nct)
	// - `phone` (ct, nct)
	// - `mcc` (ct, nct)
	// - `owntype` (ct, nct)
	// - `ownerName` (ct, nct)
	// - `contactName` (ct, nct)
	// - `orgParentname` (ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `dbaname(ct)=hoa` returns all records with `dbaname` containing "hoa"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportPaypointsRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPaypointsRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportPaypointsRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPaypointsRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportPaypointsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPaypointsRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportPaypointsRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportPaypointsRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportPaypointsRequestFieldParameters)
}

var (
	exportSettlementsRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportSettlementsRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportSettlementsRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportSettlementsRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportSettlementsRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `settlementDate` (gt, ge, lt, le, eq, ne)
	// - `transId` (ne, eq, ct, nct)
	// - `gatewayTransId` (ne, eq, ct, nct)
	// - `method` (in, nin, eq, ne)
	// - `settledAmount` (gt, ge, lt, le, eq, ne)
	// - `operation` (in, nin, eq, ne)
	// - `source` (in, nin, eq, ne)
	// - `batchNumber` (ct, nct, eq, ne)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId` (eq) *mandatory when entry=org*
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// Example: `settledAmount(gt)=20` returns all records with a `settledAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportSettlementsRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSettlementsRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportSettlementsRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSettlementsRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportSettlementsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSettlementsRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportSettlementsRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSettlementsRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportSettlementsRequestFieldParameters)
}

var (
	exportSettlementsOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportSettlementsOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportSettlementsOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportSettlementsOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportSettlementsOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `settlementDate` (gt, ge, lt, le, eq, ne)
	// - `transId` (ne, eq, ct, nct)
	// - `gatewayTransId` (ne, eq, ct, nct)
	// - `method` (in, nin, eq, ne)
	// - `settledAmount` (gt, ge, lt, le, eq, ne)
	// - `operation` (in, nin, eq, ne)
	// - `source` (in, nin, eq, ne)
	// - `batchNumber` (ct, nct, eq, ne)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId` (eq) *mandatory when entry=org*
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord: max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord: initial record in query
	//
	// Example: `settledAmount(gt)=20` returns all records with a `settledAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportSettlementsOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSettlementsOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportSettlementsOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSettlementsOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportSettlementsOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSettlementsOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportSettlementsOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSettlementsOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportSettlementsOrgRequestFieldParameters)
}

var (
	exportSubscriptionsRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportSubscriptionsRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportSubscriptionsRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportSubscriptionsRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportSubscriptionsRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `startDate` (gt, ge, lt, le, eq, ne)
	// - `endDate` (gt, ge, lt, le, eq, ne)
	// - `nextDate` (gt, ge, lt, le, eq, ne)
	// - `frequency` (in, nin, ne, eq)
	// - `method` (in, nin, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `netAmount` (gt, ge, lt, le, eq, ne)
	// - `feeAmount` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `untilcancelled` (eq, ne)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId` (eq)
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportSubscriptionsRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSubscriptionsRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportSubscriptionsRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSubscriptionsRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportSubscriptionsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSubscriptionsRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportSubscriptionsRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSubscriptionsRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportSubscriptionsRequestFieldParameters)
}

var (
	exportSubscriptionsOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportSubscriptionsOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportSubscriptionsOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportSubscriptionsOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportSubscriptionsOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `startDate` (gt, ge, lt, le, eq, ne)
	// - `endDate` (gt, ge, lt, le, eq, ne)
	// - `nextDate` (gt, ge, lt, le, eq, ne)
	// - `frequency` (in, nin, ne, eq)
	// - `method` (in, nin, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `netAmount` (gt, ge, lt, le, eq, ne)
	// - `feeAmount` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `untilcancelled` (eq, ne)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId` (eq)
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportSubscriptionsOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSubscriptionsOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportSubscriptionsOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSubscriptionsOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportSubscriptionsOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSubscriptionsOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportSubscriptionsOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportSubscriptionsOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportSubscriptionsOrgRequestFieldParameters)
}

var (
	exportTransactionsRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportTransactionsRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportTransactionsRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportTransactionsRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportTransactionsRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `transactionDate` (gt, ge, lt, le, eq, ne)
	// - `transId` (ne, eq, ct, nct)
	// - `gatewayTransId` (ne, eq, ct, nct)
	// - `orderId` (ne, eq)
	// - `idTrans` (ne, eq)
	// - `orgId` (ne, eq)
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `method` (in, nin, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `netAmount` (gt, ge, lt, le, eq, ne)
	// - `feeAmount` (gt, ge, lt, le, eq, ne)
	// - `operation` (in, nin, eq, ne)
	// - `source` (in, nin, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `settlementStatus` (in, nin, eq, ne)
	// - `batchNumber` (nct, ct)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportTransactionsRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransactionsRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportTransactionsRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransactionsRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportTransactionsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransactionsRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportTransactionsRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransactionsRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportTransactionsRequestFieldParameters)
}

var (
	exportTransactionsOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportTransactionsOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportTransactionsOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportTransactionsOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportTransactionsOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `transactionDate` (gt, ge, lt, le, eq, ne)
	// - `transId` (ne, eq, ct, nct)
	// - `gatewayTransId` (ne, eq, ct, nct)
	// - `orderId` (ne, eq)
	// - `idTrans` (ne, eq)
	// - `orgId` (ne, eq)
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `method` (in, nin, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `netAmount` (gt, ge, lt, le, eq, ne)
	// - `feeAmount` (gt, ge, lt, le, eq, ne)
	// - `operation` (in, nin, eq, ne)
	// - `source` (in, nin, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `settlementStatus` (in, nin, eq, ne)
	// - `batchNumber` (nct, ct)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportTransactionsOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransactionsOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportTransactionsOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransactionsOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportTransactionsOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransactionsOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportTransactionsOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransactionsOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportTransactionsOrgRequestFieldParameters)
}

var (
	exportTransferDetailsRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportTransferDetailsRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportTransferDetailsRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportTransferDetailsRequestFieldParameters    = big.NewInt(1 << 3)
	exportTransferDetailsRequestFieldSortBy        = big.NewInt(1 << 4)
)

type ExportTransferDetailsRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	//
	//   - `grossAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `chargeBackAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `returnedAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `billingFeeAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `thirdPartyPaidAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `netFundedAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `adjustmentAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `transactionId` (eq, ne, in, nin)
	//
	//   - `category` (eq, ne, ct, nct)
	//
	//   - `type` (eq, ne, in, nin)
	//
	//   - `method` (eq, ne, in, nin)
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportTransferDetailsRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransferDetailsRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportTransferDetailsRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransferDetailsRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportTransferDetailsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransferDetailsRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportTransferDetailsRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransferDetailsRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportTransferDetailsRequestFieldParameters)
}

// SetSortBy sets the SortBy field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransferDetailsRequest) SetSortBy(sortBy *string) {
	e.SortBy = sortBy
	e.require(exportTransferDetailsRequestFieldSortBy)
}

var (
	exportTransfersRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportTransfersRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportTransfersRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportTransfersRequestFieldParameters    = big.NewInt(1 << 3)
	exportTransfersRequestFieldSortBy        = big.NewInt(1 << 4)
)

type ExportTransfersRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	//
	//   - `transferDate` (gt, ge, lt, le, eq, ne)
	//
	//   - `grossAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `chargeBackAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `returnedAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `billingFeeAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `thirdPartyPaidAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `netFundedAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `adjustmentAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `processor` (ne, eq, ct, nct)
	//
	//   - `transferStatus` (ne, eq, in, nin)
	//
	//   - `batchNumber` (ne, eq, ct, nct)
	//
	//   - `batchId` (ne, eq, in, nin)
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportTransfersRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransfersRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportTransfersRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransfersRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportTransfersRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransfersRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportTransfersRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransfersRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportTransfersRequestFieldParameters)
}

// SetSortBy sets the SortBy field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportTransfersRequest) SetSortBy(sortBy *string) {
	e.SortBy = sortBy
	e.require(exportTransfersRequestFieldSortBy)
}

var (
	exportVendorsRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportVendorsRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportVendorsRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportVendorsRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportVendorsRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `method` (in, nin, eq, ne)
	// - `enrollmentStatus` (in, nin, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `vendorNumber` (ct, nct, eq, ne)
	// - `name` (ct, nct, eq, ne)
	// - `ein` (ct, nct, eq, ne)
	// - `phone` (ct, nct, eq, ne)
	// - `email` (ct, nct, eq, ne)
	// - `address` (ct, nct, eq, ne)
	// - `city` (ct, nct, eq, ne)
	// - `state` (ct, nct, eq, ne)
	// - `country` (ct, nct, eq, ne)
	// - `zip` (ct, nct, eq, ne)
	// - `mcc` (ct, nct, eq, ne)
	// - `locationCode` (ct, nct, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportVendorsRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportVendorsRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportVendorsRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportVendorsRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportVendorsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportVendorsRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportVendorsRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportVendorsRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportVendorsRequestFieldParameters)
}

var (
	exportVendorsOrgRequestFieldColumnsExport = big.NewInt(1 << 0)
	exportVendorsOrgRequestFieldFromRecord    = big.NewInt(1 << 1)
	exportVendorsOrgRequestFieldLimitRecord   = big.NewInt(1 << 2)
	exportVendorsOrgRequestFieldParameters    = big.NewInt(1 << 3)
)

type ExportVendorsOrgRequest struct {
	ColumnsExport *string `json:"-" url:"columnsExport,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `method` (in, nin, eq, ne)
	// - `enrollmentStatus` (in, nin, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `vendorNumber` (ct, nct, eq, ne)
	// - `name` (ct, nct, eq, ne)
	// - `ein` (ct, nct, eq, ne)
	// - `phone` (ct, nct, eq, ne)
	// - `email` (ct, nct, eq, ne)
	// - `address` (ct, nct, eq, ne)
	// - `city` (ct, nct, eq, ne)
	// - `state` (ct, nct, eq, ne)
	// - `country` (ct, nct, eq, ne)
	// - `zip` (ct, nct, eq, ne)
	// - `mcc` (ct, nct, eq, ne)
	// - `locationCode` (ct, nct, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (e *ExportVendorsOrgRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetColumnsExport sets the ColumnsExport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportVendorsOrgRequest) SetColumnsExport(columnsExport *string) {
	e.ColumnsExport = columnsExport
	e.require(exportVendorsOrgRequestFieldColumnsExport)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportVendorsOrgRequest) SetFromRecord(fromRecord *int) {
	e.FromRecord = fromRecord
	e.require(exportVendorsOrgRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportVendorsOrgRequest) SetLimitRecord(limitRecord *int) {
	e.LimitRecord = limitRecord
	e.require(exportVendorsOrgRequestFieldLimitRecord)
}

// SetParameters sets the Parameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExportVendorsOrgRequest) SetParameters(parameters map[string]*string) {
	e.Parameters = parameters
	e.require(exportVendorsOrgRequestFieldParameters)
}

type ExportFormat1 string

const (
	ExportFormat1Csv  ExportFormat1 = "csv"
	ExportFormat1Xlsx ExportFormat1 = "xlsx"
)

func NewExportFormat1FromString(s string) (ExportFormat1, error) {
	switch s {
	case "csv":
		return ExportFormat1Csv, nil
	case "xlsx":
		return ExportFormat1Xlsx, nil
	}
	var t ExportFormat1
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e ExportFormat1) Ptr() *ExportFormat1 {
	return &e
}
