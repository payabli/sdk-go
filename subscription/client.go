// Code generated by Fern. DO NOT EDIT.

package subscription

import (
	context "context"
	http "net/http"
	sdk "sdk"
	core "sdk/core"
	internal "sdk/internal"
	option "sdk/option"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Retrieves a single subscription's details.
func (c *Client) GetSubscription(
	ctx context.Context,
	// The subscription ID.
	subId int,
	opts ...option.RequestOption,
) (*sdk.SubscriptionQueryRecords, error) {
	response, err := c.WithRawResponse.GetSubscription(
		ctx,
		subId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Creates a subscription or scheduled payment to run at a specified time and frequency.
func (c *Client) NewSubscription(
	ctx context.Context,
	request *sdk.RequestSchedule,
	opts ...option.RequestOption,
) (*sdk.AddSubscriptionResponse, error) {
	response, err := c.WithRawResponse.NewSubscription(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes a subscription, autopay, or recurring payment and prevents future charges.
func (c *Client) RemoveSubscription(
	ctx context.Context,
	// The subscription ID.
	subId int,
	opts ...option.RequestOption,
) (*sdk.RemoveSubscriptionResponse, error) {
	response, err := c.WithRawResponse.RemoveSubscription(
		ctx,
		subId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates a subscription's details.
func (c *Client) UpdateSubscription(
	ctx context.Context,
	// The subscription ID.
	subId int,
	request *sdk.RequestUpdateSchedule,
	opts ...option.RequestOption,
) (*sdk.UpdateSubscriptionResponse, error) {
	response, err := c.WithRawResponse.UpdateSubscription(
		ctx,
		subId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
