// Code generated by Fern. DO NOT EDIT.

package invoice

import (
	context "context"
	http "net/http"
	sdk "sdk"
	core "sdk/core"
	internal "sdk/internal"
	option "sdk/option"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates an invoice in an entrypoint.
func (c *Client) AddInvoice(
	ctx context.Context,
	// The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
	entry string,
	request *sdk.AddInvoiceRequest,
	opts ...option.RequestOption,
) (*sdk.InvoiceResponseWithoutData, error) {
	response, err := c.WithRawResponse.AddInvoice(
		ctx,
		entry,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes an invoice that's attached to a file.
func (c *Client) DeleteAttachedFromInvoice(
	ctx context.Context,
	// The filename in Payabli. Filename is `zipName` in response to a request to `/api/Invoice/{idInvoice}`. Here, the filename is `0_Bill.pdf``.
	// "DocumentsRef": {
	//   "zipfile": "inva_269.zip",
	//   "filelist": [
	//     {
	//       "originalName": "Bill.pdf",
	//       "zipName": "0_Bill.pdf",
	//       "descriptor": null
	//     }
	//   ]
	// }
	filename string,
	// Invoice ID
	idInvoice int,
	opts ...option.RequestOption,
) (*sdk.InvoiceResponseWithoutData, error) {
	response, err := c.WithRawResponse.DeleteAttachedFromInvoice(
		ctx,
		filename,
		idInvoice,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes a single invoice from an entrypoint.
func (c *Client) DeleteInvoice(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	opts ...option.RequestOption,
) (*sdk.InvoiceResponseWithoutData, error) {
	response, err := c.WithRawResponse.DeleteInvoice(
		ctx,
		idInvoice,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates details for a single invoice in an entrypoint.
func (c *Client) EditInvoice(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	request *sdk.EditInvoiceRequest,
	opts ...option.RequestOption,
) (*sdk.InvoiceResponseWithoutData, error) {
	response, err := c.WithRawResponse.EditInvoice(
		ctx,
		idInvoice,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a file attached to an invoice.
func (c *Client) GetAttachedFileFromInvoice(
	ctx context.Context,
	// The filename in Payabli. Filename is `zipName` in the response to a request to `/api/Invoice/{idInvoice}`. Here, the filename is `0_Bill.pdf``.
	// ```
	//   "DocumentsRef": {
	//     "zipfile": "inva_269.zip",
	//     "filelist": [
	//       {
	//         "originalName": "Bill.pdf",
	//         "zipName": "0_Bill.pdf",
	//         "descriptor": null
	//       }
	//     ]
	//   }
	//   ```
	filename string,
	// Invoice ID
	idInvoice int,
	request *sdk.GetAttachedFileFromInvoiceRequest,
	opts ...option.RequestOption,
) (*sdk.FileContent, error) {
	response, err := c.WithRawResponse.GetAttachedFileFromInvoice(
		ctx,
		filename,
		idInvoice,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a single invoice by ID.
func (c *Client) GetInvoice(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	opts ...option.RequestOption,
) (*sdk.GetInvoiceRecord, error) {
	response, err := c.WithRawResponse.GetInvoice(
		ctx,
		idInvoice,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves the next available invoice number for a paypoint.
func (c *Client) GetInvoiceNumber(
	ctx context.Context,
	// The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
	entry string,
	opts ...option.RequestOption,
) (*sdk.InvoiceNumberResponse, error) {
	response, err := c.WithRawResponse.GetInvoiceNumber(
		ctx,
		entry,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns a list of invoices for an entrypoint. Use filters to limit results. Include the `exportFormat` query parameter to return the results as a file instead of a JSON response.
func (c *Client) ListInvoices(
	ctx context.Context,
	// The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
	entry string,
	request *sdk.ListInvoicesRequest,
	opts ...option.RequestOption,
) (*sdk.QueryInvoiceResponse, error) {
	response, err := c.WithRawResponse.ListInvoices(
		ctx,
		entry,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns a list of invoices for an org. Use filters to limit results. Include the `exportFormat` query parameter to return the results as a file instead of a JSON response.
func (c *Client) ListInvoicesOrg(
	ctx context.Context,
	// The numeric identifier for organization, assigned by Payabli.
	orgId int,
	request *sdk.ListInvoicesOrgRequest,
	opts ...option.RequestOption,
) (*sdk.QueryInvoiceResponse, error) {
	response, err := c.WithRawResponse.ListInvoicesOrg(
		ctx,
		orgId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Sends an invoice from an entrypoint via email.
func (c *Client) SendInvoice(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	request *sdk.SendInvoiceRequest,
	opts ...option.RequestOption,
) (*sdk.SendInvoiceResponse, error) {
	response, err := c.WithRawResponse.SendInvoice(
		ctx,
		idInvoice,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Export a single invoice in PDF format.
func (c *Client) GetInvoicePdf(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	opts ...option.RequestOption,
) (sdk.File, error) {
	response, err := c.WithRawResponse.GetInvoicePdf(
		ctx,
		idInvoice,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
