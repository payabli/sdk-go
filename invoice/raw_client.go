// Code generated by Fern. DO NOT EDIT.

package invoice

import (
	context "context"
	sdkgo "github.com/payabli/sdk-go"
	core "github.com/payabli/sdk-go/core"
	internal "github.com/payabli/sdk-go/internal"
	option "github.com/payabli/sdk-go/option"
	http "net/http"
)

type RawClient struct {
	baseURL string
	caller  *internal.Caller
	options *core.RequestOptions
}

func NewRawClient(options *core.RequestOptions) *RawClient {
	return &RawClient{
		options: options,
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (r *RawClient) AddInvoice(
	ctx context.Context,
	// The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
	entry string,
	request *sdkgo.AddInvoiceRequest,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.InvoiceResponseWithoutData], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Invoice/%v",
		entry,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	if request.IdempotencyKey != nil {
		headers.Add("idempotencyKey", *request.IdempotencyKey)
	}
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.InvoiceResponseWithoutData
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.InvoiceResponseWithoutData]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) DeleteAttachedFromInvoice(
	ctx context.Context,
	// The filename in Payabli. Filename is `zipName` in response to a request to `/api/Invoice/{idInvoice}`. Here, the filename is `0_Bill.pdf``.
	// "DocumentsRef": {
	//   "zipfile": "inva_269.zip",
	//   "filelist": [
	//     {
	//       "originalName": "Bill.pdf",
	//       "zipName": "0_Bill.pdf",
	//       "descriptor": null
	//     }
	//   ]
	// }
	filename string,
	// Invoice ID
	idInvoice int,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.InvoiceResponseWithoutData], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Invoice/attachedFileFromInvoice/%v/%v",
		filename,
		idInvoice,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.InvoiceResponseWithoutData
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.InvoiceResponseWithoutData]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) DeleteInvoice(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.InvoiceResponseWithoutData], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Invoice/%v",
		idInvoice,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.InvoiceResponseWithoutData
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.InvoiceResponseWithoutData]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) EditInvoice(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	request *sdkgo.EditInvoiceRequest,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.InvoiceResponseWithoutData], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Invoice/%v",
		idInvoice,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.InvoiceResponseWithoutData
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.InvoiceResponseWithoutData]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetAttachedFileFromInvoice(
	ctx context.Context,
	// The filename in Payabli. Filename is `zipName` in the response to a request to `/api/Invoice/{idInvoice}`. Here, the filename is `0_Bill.pdf``.
	// ```
	//   "DocumentsRef": {
	//     "zipfile": "inva_269.zip",
	//     "filelist": [
	//       {
	//         "originalName": "Bill.pdf",
	//         "zipName": "0_Bill.pdf",
	//         "descriptor": null
	//       }
	//     ]
	//   }
	//   ```
	filename string,
	// Invoice ID
	idInvoice int,
	request *sdkgo.GetAttachedFileFromInvoiceRequest,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.FileContent], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Invoice/attachedFileFromInvoice/%v/%v",
		filename,
		idInvoice,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.FileContent
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.FileContent]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetInvoice(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.GetInvoiceRecord], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Invoice/%v",
		idInvoice,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.GetInvoiceRecord
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.GetInvoiceRecord]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetInvoiceNumber(
	ctx context.Context,
	// The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
	entry string,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.InvoiceNumberResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Invoice/getNumber/%v",
		entry,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.InvoiceNumberResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.InvoiceNumberResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) ListInvoices(
	ctx context.Context,
	// The paypoint's entrypoint identifier. [Learn more](/api-reference/api-overview#entrypoint-vs-entry)
	entry string,
	request *sdkgo.ListInvoicesRequest,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.QueryInvoiceResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Query/invoices/%v",
		entry,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.QueryInvoiceResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.QueryInvoiceResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) ListInvoicesOrg(
	ctx context.Context,
	// The numeric identifier for organization, assigned by Payabli.
	orgId int,
	request *sdkgo.ListInvoicesOrgRequest,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.QueryInvoiceResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Query/invoices/org/%v",
		orgId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.QueryInvoiceResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.QueryInvoiceResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) SendInvoice(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	request *sdkgo.SendInvoiceRequest,
	opts ...option.RequestOption,
) (*core.Response[*sdkgo.SendInvoiceResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Invoice/send/%v",
		idInvoice,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response *sdkgo.SendInvoiceResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdkgo.SendInvoiceResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetInvoicePdf(
	ctx context.Context,
	// Invoice ID
	idInvoice int,
	opts ...option.RequestOption,
) (*core.Response[sdkgo.File], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Export/invoicePdf/%v",
		idInvoice,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdkgo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdkgo.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdkgo.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdkgo.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response sdkgo.File
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[sdkgo.File]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}
