// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	time "time"
)

type AddInvoiceRequest struct {
	IdempotencyKey        *IdempotencyKey        `json:"-" url:"-"`
	ForceCustomerCreation *ForceCustomerCreation `json:"-" url:"forceCustomerCreation,omitempty"`
	Body                  *InvoiceDataRequest    `json:"-" url:"-"`
}

func (a *AddInvoiceRequest) UnmarshalJSON(data []byte) error {
	body := new(InvoiceDataRequest)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	a.Body = body
	return nil
}

func (a *AddInvoiceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(a.Body)
}

type EditInvoiceRequest struct {
	// When `true`, the request creates a new customer record, regardless of whether customer identifiers match an existing customer.
	ForceCustomerCreation *bool               `json:"-" url:"forceCustomerCreation,omitempty"`
	Body                  *InvoiceDataRequest `json:"-" url:"-"`
}

func (e *EditInvoiceRequest) UnmarshalJSON(data []byte) error {
	body := new(InvoiceDataRequest)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	e.Body = body
	return nil
}

func (e *EditInvoiceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.Body)
}

type GetAttachedFileFromInvoiceRequest struct {
	// When `true`, the request returns the file content as a Base64-encoded string.
	ReturnObject *bool `json:"-" url:"returnObject,omitempty"`
}

type ListInvoicesRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	//
	// - `invoiceDate` (gt, ge, lt, le, eq, ne)
	// - `dueDate` (gt, ge, lt, le, eq, ne)
	// - `sentDate` (gt, ge, lt, le, eq, ne)
	// - `frequency` (in, nin,ne, eq)
	// - `invoiceType` (eq, ne)
	// - `payTerms` (in, nin, eq, ne)
	// - `paypointId` (ne, eq)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `paidAmount` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `invoiceNumber` (ct, nct, eq, ne)
	// - `purchaseOrder` (ct, nct, eq, ne)
	// - `itemProductCode` (ct, nct)
	// - `itemDescription` (ct, nct)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId` (eq)
	// - `paylinkId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	//
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: totalAmount(gt)=20 return all records with totalAmount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListInvoicesOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	//
	// - `invoiceDate` (gt, ge, lt, le, eq, ne)
	// - `dueDate` (gt, ge, lt, le, eq, ne)
	// - `sentDate` (gt, ge, lt, le, eq, ne)
	// - `frequency` (in, nin,ne, eq)
	// - `invoiceType` (eq, ne)
	// - `payTerms` (in, nin, eq, ne)
	// - `paypointId` (ne, eq)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `paidAmount` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `invoiceNumber` (ct, nct, eq, ne)
	// - `purchaseOrder` (ct, nct, eq, ne)
	// - `itemProductCode` (ct, nct)
	// - `itemDescription` (ct, nct)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId` (eq)
	// - `paylinkId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// List of comparison accepted - enclosed between parentheses:
	//
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: totalAmount(gt)=20 return all records with totalAmount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type SendInvoiceRequest struct {
	// When `true`, attaches a PDF version of invoice to the email.
	Attachfile *bool `json:"-" url:"attachfile,omitempty"`
	// Email address where the invoice will be sent to. If this parameter isn't included, Payabli uses the email address on file for the customer owner of the invoice.
	Mail2 *string `json:"-" url:"mail2,omitempty"`
}

type BillOptions struct {
	// Flag to indicate if the scheduled invoice includes a payment link.
	IncludePaylink *bool `json:"includePaylink,omitempty" url:"includePaylink,omitempty"`
	// Flag to indicate if the scheduled invoice includes a PDF version of invoice
	IncludePdf *bool `json:"includePdf,omitempty" url:"includePdf,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillOptions) GetIncludePaylink() *bool {
	if b == nil {
		return nil
	}
	return b.IncludePaylink
}

func (b *BillOptions) GetIncludePdf() *bool {
	if b == nil {
		return nil
	}
	return b.IncludePdf
}

func (b *BillOptions) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillOptions) UnmarshalJSON(data []byte) error {
	type unmarshaler BillOptions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillOptions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillOptions) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Customer information.
type PayorDataResponse struct {
	AdditionalData  *AdditionalData              `json:"AdditionalData,omitempty" url:"AdditionalData,omitempty"`
	BillingAddress1 *BillingAddressNullable      `json:"BillingAddress1,omitempty" url:"BillingAddress1,omitempty"`
	BillingAddress2 *BillingAddressAddtlNullable `json:"BillingAddress2,omitempty" url:"BillingAddress2,omitempty"`
	BillingCity     *BillingCityNullable         `json:"BillingCity,omitempty" url:"BillingCity,omitempty"`
	BillingCountry  *BillingCountryNullable      `json:"BillingCountry,omitempty" url:"BillingCountry,omitempty"`
	BillingEmail    *Email                       `json:"BillingEmail,omitempty" url:"BillingEmail,omitempty"`
	BillingPhone    *PhoneNumber                 `json:"BillingPhone,omitempty" url:"BillingPhone,omitempty"`
	BillingState    *BillingStateNullable        `json:"BillingState,omitempty" url:"BillingState,omitempty"`
	// Customer's billing ZIP code. For Pay In functions, this field supports 5-digit and 9-digit ZIP codes and alphanumeric Canadian postal codes. For example: "37615-1234" or "37615".
	BillingZip *BillingZip `json:"BillingZip,omitempty" url:"BillingZip,omitempty"`
	// Customer's company name.
	CompanyName    *string                 `json:"CompanyName,omitempty" url:"CompanyName,omitempty"`
	CustomerId     *CustomerId             `json:"customerId,omitempty" url:"customerId,omitempty"`
	CustomerNumber *CustomerNumberNullable `json:"CustomerNumber,omitempty" url:"CustomerNumber,omitempty"`
	// Customer status. This is used to determine if the customer is active or inactive.
	CustomerStatus *CustomerStatus `json:"customerStatus,omitempty" url:"customerStatus,omitempty"`
	// Customer/Payor first name.
	FirstName   *string           `json:"FirstName,omitempty" url:"FirstName,omitempty"`
	Identifiers *Identifierfields `json:"Identifiers,omitempty" url:"Identifiers,omitempty"`
	// Customer/Payor last name.
	LastName         *string                    `json:"LastName,omitempty" url:"LastName,omitempty"`
	ShippingAddress1 *Shippingaddress           `json:"ShippingAddress1,omitempty" url:"ShippingAddress1,omitempty"`
	ShippingAddress2 *Shippingaddressadditional `json:"ShippingAddress2,omitempty" url:"ShippingAddress2,omitempty"`
	ShippingCity     *Shippingcity              `json:"ShippingCity,omitempty" url:"ShippingCity,omitempty"`
	ShippingCountry  *Shippingcountry           `json:"ShippingCountry,omitempty" url:"ShippingCountry,omitempty"`
	ShippingState    *Shippingstate             `json:"ShippingState,omitempty" url:"ShippingState,omitempty"`
	ShippingZip      *Shippingzip               `json:"ShippingZip,omitempty" url:"ShippingZip,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayorDataResponse) GetAdditionalData() *AdditionalData {
	if p == nil {
		return nil
	}
	return p.AdditionalData
}

func (p *PayorDataResponse) GetBillingAddress1() *BillingAddressNullable {
	if p == nil {
		return nil
	}
	return p.BillingAddress1
}

func (p *PayorDataResponse) GetBillingAddress2() *BillingAddressAddtlNullable {
	if p == nil {
		return nil
	}
	return p.BillingAddress2
}

func (p *PayorDataResponse) GetBillingCity() *BillingCityNullable {
	if p == nil {
		return nil
	}
	return p.BillingCity
}

func (p *PayorDataResponse) GetBillingCountry() *BillingCountryNullable {
	if p == nil {
		return nil
	}
	return p.BillingCountry
}

func (p *PayorDataResponse) GetBillingEmail() *Email {
	if p == nil {
		return nil
	}
	return p.BillingEmail
}

func (p *PayorDataResponse) GetBillingPhone() *PhoneNumber {
	if p == nil {
		return nil
	}
	return p.BillingPhone
}

func (p *PayorDataResponse) GetBillingState() *BillingStateNullable {
	if p == nil {
		return nil
	}
	return p.BillingState
}

func (p *PayorDataResponse) GetBillingZip() *BillingZip {
	if p == nil {
		return nil
	}
	return p.BillingZip
}

func (p *PayorDataResponse) GetCompanyName() *string {
	if p == nil {
		return nil
	}
	return p.CompanyName
}

func (p *PayorDataResponse) GetCustomerId() *CustomerId {
	if p == nil {
		return nil
	}
	return p.CustomerId
}

func (p *PayorDataResponse) GetCustomerNumber() *CustomerNumberNullable {
	if p == nil {
		return nil
	}
	return p.CustomerNumber
}

func (p *PayorDataResponse) GetCustomerStatus() *CustomerStatus {
	if p == nil {
		return nil
	}
	return p.CustomerStatus
}

func (p *PayorDataResponse) GetFirstName() *string {
	if p == nil {
		return nil
	}
	return p.FirstName
}

func (p *PayorDataResponse) GetIdentifiers() *Identifierfields {
	if p == nil {
		return nil
	}
	return p.Identifiers
}

func (p *PayorDataResponse) GetLastName() *string {
	if p == nil {
		return nil
	}
	return p.LastName
}

func (p *PayorDataResponse) GetShippingAddress1() *Shippingaddress {
	if p == nil {
		return nil
	}
	return p.ShippingAddress1
}

func (p *PayorDataResponse) GetShippingAddress2() *Shippingaddressadditional {
	if p == nil {
		return nil
	}
	return p.ShippingAddress2
}

func (p *PayorDataResponse) GetShippingCity() *Shippingcity {
	if p == nil {
		return nil
	}
	return p.ShippingCity
}

func (p *PayorDataResponse) GetShippingCountry() *Shippingcountry {
	if p == nil {
		return nil
	}
	return p.ShippingCountry
}

func (p *PayorDataResponse) GetShippingState() *Shippingstate {
	if p == nil {
		return nil
	}
	return p.ShippingState
}

func (p *PayorDataResponse) GetShippingZip() *Shippingzip {
	if p == nil {
		return nil
	}
	return p.ShippingZip
}

func (p *PayorDataResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayorDataResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PayorDataResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayorDataResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayorDataResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type GetInvoiceRecord struct {
	InvoiceId         InvoiceId         `json:"invoiceId" url:"invoiceId"`
	CustomerId        CustomerId        `json:"customerId" url:"customerId"`
	PaypointId        PaypointId        `json:"paypointId" url:"paypointId"`
	InvoiceNumber     InvoiceNumber     `json:"invoiceNumber" url:"invoiceNumber"`
	InvoiceDate       Datenullable      `json:"invoiceDate,omitempty" url:"invoiceDate,omitempty"`
	InvoiceDueDate    Datenullable      `json:"invoiceDueDate,omitempty" url:"invoiceDueDate,omitempty"`
	InvoiceSentDate   DatetimeNullable  `json:"invoiceSentDate,omitempty" url:"invoiceSentDate,omitempty"`
	InvoiceEndDate    Datenullable      `json:"invoiceEndDate,omitempty" url:"invoiceEndDate,omitempty"`
	LastPaymentDate   DatetimeNullable  `json:"lastPaymentDate,omitempty" url:"lastPaymentDate,omitempty"`
	CreatedAt         CreatedAt         `json:"createdAt" url:"createdAt"`
	InvoiceStatus     Invoicestatus     `json:"invoiceStatus" url:"invoiceStatus"`
	InvoiceType       InvoiceType       `json:"invoiceType" url:"invoiceType"`
	Frequency         Frequency         `json:"frequency" url:"frequency"`
	PaymentTerms      Terms             `json:"paymentTerms" url:"paymentTerms"`
	TermsConditions   *TermsConditions  `json:"termsConditions,omitempty" url:"termsConditions,omitempty"`
	Notes             *string           `json:"notes,omitempty" url:"notes,omitempty"`
	Tax               Tax               `json:"tax,omitempty" url:"tax,omitempty"`
	Discount          Discount          `json:"discount,omitempty" url:"discount,omitempty"`
	InvoiceAmount     InvoiceAmount     `json:"invoiceAmount" url:"invoiceAmount"`
	InvoicePaidAmount InvoicePaidAmount `json:"invoicePaidAmount" url:"invoicePaidAmount"`
	FreightAmount     FreightAmount     `json:"freightAmount,omitempty" url:"freightAmount,omitempty"`
	DutyAmount        DutyAmount        `json:"dutyAmount,omitempty" url:"dutyAmount,omitempty"`
	PurchaseOrder     PurchaseOrder     `json:"purchaseOrder" url:"purchaseOrder"`
	// First name of the recipient of the invoice.
	FirstName *string `json:"firstName,omitempty" url:"firstName,omitempty"`
	// Last name of the recipient of the invoice.
	LastName *string `json:"lastName,omitempty" url:"lastName,omitempty"`
	// Company name of the recipient of the invoice.
	Company              *string                   `json:"company,omitempty" url:"company,omitempty"`
	ShippingAddress1     Shippingaddress           `json:"shippingAddress1" url:"shippingAddress1"`
	ShippingAddress2     Shippingaddressadditional `json:"shippingAddress2" url:"shippingAddress2"`
	ShippingCity         Shippingcity              `json:"shippingCity" url:"shippingCity"`
	ShippingState        Shippingstate             `json:"shippingState" url:"shippingState"`
	ShippingZip          Shippingzip               `json:"shippingZip" url:"shippingZip"`
	ShippingFromZip      ShippingFromZip           `json:"shippingFromZip" url:"shippingFromZip"`
	ShippingCountry      Shippingcountry           `json:"shippingCountry" url:"shippingCountry"`
	ShippingEmail        Email                     `json:"shippingEmail" url:"shippingEmail"`
	ShippingPhone        string                    `json:"shippingPhone" url:"shippingPhone"`
	SummaryCommodityCode SummaryCommodityCode      `json:"summaryCommodityCode" url:"summaryCommodityCode"`
	Items                []*BillItem               `json:"items" url:"items"`
	Customer             *PayorDataResponse        `json:"Customer" url:"Customer"`
	PaylinkId            PaylinkId                 `json:"paylinkId" url:"paylinkId"`
	BillEvents           BillEvents                `json:"billEvents,omitempty" url:"billEvents,omitempty"`
	ScheduledOptions     *BillOptions              `json:"scheduledOptions" url:"scheduledOptions"`
	PaypointLegalname    string                    `json:"PaypointLegalname" url:"PaypointLegalname"`
	PaypointDbaname      Dbaname                   `json:"PaypointDbaname" url:"PaypointDbaname"`
	PaypointEntryname    Entrypointfield           `json:"PaypointEntryname" url:"PaypointEntryname"`
	ParentOrgName        OrgParentName             `json:"ParentOrgName" url:"ParentOrgName"`
	AdditionalData       *AdditionalDataString     `json:"AdditionalData,omitempty" url:"AdditionalData,omitempty"`
	DocumentsRef         *DocumentsRef             `json:"DocumentsRef" url:"DocumentsRef"`
	ExternalPaypointId   *ExternalPaypointId       `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetInvoiceRecord) GetInvoiceId() InvoiceId {
	if g == nil {
		return 0
	}
	return g.InvoiceId
}

func (g *GetInvoiceRecord) GetCustomerId() CustomerId {
	if g == nil {
		return 0
	}
	return g.CustomerId
}

func (g *GetInvoiceRecord) GetPaypointId() PaypointId {
	if g == nil {
		return 0
	}
	return g.PaypointId
}

func (g *GetInvoiceRecord) GetInvoiceNumber() InvoiceNumber {
	if g == nil {
		return ""
	}
	return g.InvoiceNumber
}

func (g *GetInvoiceRecord) GetInvoiceDate() Datenullable {
	if g == nil {
		return nil
	}
	return g.InvoiceDate
}

func (g *GetInvoiceRecord) GetInvoiceDueDate() Datenullable {
	if g == nil {
		return nil
	}
	return g.InvoiceDueDate
}

func (g *GetInvoiceRecord) GetInvoiceSentDate() DatetimeNullable {
	if g == nil {
		return nil
	}
	return g.InvoiceSentDate
}

func (g *GetInvoiceRecord) GetInvoiceEndDate() Datenullable {
	if g == nil {
		return nil
	}
	return g.InvoiceEndDate
}

func (g *GetInvoiceRecord) GetLastPaymentDate() DatetimeNullable {
	if g == nil {
		return nil
	}
	return g.LastPaymentDate
}

func (g *GetInvoiceRecord) GetCreatedAt() CreatedAt {
	if g == nil {
		return time.Time{}
	}
	return g.CreatedAt
}

func (g *GetInvoiceRecord) GetInvoiceStatus() Invoicestatus {
	if g == nil {
		return 0
	}
	return g.InvoiceStatus
}

func (g *GetInvoiceRecord) GetInvoiceType() InvoiceType {
	if g == nil {
		return 0
	}
	return g.InvoiceType
}

func (g *GetInvoiceRecord) GetFrequency() Frequency {
	if g == nil {
		return ""
	}
	return g.Frequency
}

func (g *GetInvoiceRecord) GetPaymentTerms() Terms {
	if g == nil {
		return ""
	}
	return g.PaymentTerms
}

func (g *GetInvoiceRecord) GetTermsConditions() *TermsConditions {
	if g == nil {
		return nil
	}
	return g.TermsConditions
}

func (g *GetInvoiceRecord) GetNotes() *string {
	if g == nil {
		return nil
	}
	return g.Notes
}

func (g *GetInvoiceRecord) GetTax() Tax {
	if g == nil {
		return nil
	}
	return g.Tax
}

func (g *GetInvoiceRecord) GetDiscount() Discount {
	if g == nil {
		return nil
	}
	return g.Discount
}

func (g *GetInvoiceRecord) GetInvoiceAmount() InvoiceAmount {
	if g == nil {
		return 0
	}
	return g.InvoiceAmount
}

func (g *GetInvoiceRecord) GetInvoicePaidAmount() InvoicePaidAmount {
	if g == nil {
		return 0
	}
	return g.InvoicePaidAmount
}

func (g *GetInvoiceRecord) GetFreightAmount() FreightAmount {
	if g == nil {
		return nil
	}
	return g.FreightAmount
}

func (g *GetInvoiceRecord) GetDutyAmount() DutyAmount {
	if g == nil {
		return nil
	}
	return g.DutyAmount
}

func (g *GetInvoiceRecord) GetPurchaseOrder() PurchaseOrder {
	if g == nil {
		return ""
	}
	return g.PurchaseOrder
}

func (g *GetInvoiceRecord) GetFirstName() *string {
	if g == nil {
		return nil
	}
	return g.FirstName
}

func (g *GetInvoiceRecord) GetLastName() *string {
	if g == nil {
		return nil
	}
	return g.LastName
}

func (g *GetInvoiceRecord) GetCompany() *string {
	if g == nil {
		return nil
	}
	return g.Company
}

func (g *GetInvoiceRecord) GetShippingAddress1() Shippingaddress {
	if g == nil {
		return ""
	}
	return g.ShippingAddress1
}

func (g *GetInvoiceRecord) GetShippingAddress2() Shippingaddressadditional {
	if g == nil {
		return ""
	}
	return g.ShippingAddress2
}

func (g *GetInvoiceRecord) GetShippingCity() Shippingcity {
	if g == nil {
		return ""
	}
	return g.ShippingCity
}

func (g *GetInvoiceRecord) GetShippingState() Shippingstate {
	if g == nil {
		return ""
	}
	return g.ShippingState
}

func (g *GetInvoiceRecord) GetShippingZip() Shippingzip {
	if g == nil {
		return ""
	}
	return g.ShippingZip
}

func (g *GetInvoiceRecord) GetShippingFromZip() ShippingFromZip {
	if g == nil {
		return ""
	}
	return g.ShippingFromZip
}

func (g *GetInvoiceRecord) GetShippingCountry() Shippingcountry {
	if g == nil {
		return ""
	}
	return g.ShippingCountry
}

func (g *GetInvoiceRecord) GetShippingEmail() Email {
	if g == nil {
		return ""
	}
	return g.ShippingEmail
}

func (g *GetInvoiceRecord) GetShippingPhone() string {
	if g == nil {
		return ""
	}
	return g.ShippingPhone
}

func (g *GetInvoiceRecord) GetSummaryCommodityCode() SummaryCommodityCode {
	if g == nil {
		return ""
	}
	return g.SummaryCommodityCode
}

func (g *GetInvoiceRecord) GetItems() []*BillItem {
	if g == nil {
		return nil
	}
	return g.Items
}

func (g *GetInvoiceRecord) GetCustomer() *PayorDataResponse {
	if g == nil {
		return nil
	}
	return g.Customer
}

func (g *GetInvoiceRecord) GetPaylinkId() PaylinkId {
	if g == nil {
		return ""
	}
	return g.PaylinkId
}

func (g *GetInvoiceRecord) GetBillEvents() BillEvents {
	if g == nil {
		return nil
	}
	return g.BillEvents
}

func (g *GetInvoiceRecord) GetScheduledOptions() *BillOptions {
	if g == nil {
		return nil
	}
	return g.ScheduledOptions
}

func (g *GetInvoiceRecord) GetPaypointLegalname() string {
	if g == nil {
		return ""
	}
	return g.PaypointLegalname
}

func (g *GetInvoiceRecord) GetPaypointDbaname() Dbaname {
	if g == nil {
		return ""
	}
	return g.PaypointDbaname
}

func (g *GetInvoiceRecord) GetPaypointEntryname() Entrypointfield {
	if g == nil {
		return ""
	}
	return g.PaypointEntryname
}

func (g *GetInvoiceRecord) GetParentOrgName() OrgParentName {
	if g == nil {
		return ""
	}
	return g.ParentOrgName
}

func (g *GetInvoiceRecord) GetAdditionalData() *AdditionalDataString {
	if g == nil {
		return nil
	}
	return g.AdditionalData
}

func (g *GetInvoiceRecord) GetDocumentsRef() *DocumentsRef {
	if g == nil {
		return nil
	}
	return g.DocumentsRef
}

func (g *GetInvoiceRecord) GetExternalPaypointId() *ExternalPaypointId {
	if g == nil {
		return nil
	}
	return g.ExternalPaypointId
}

func (g *GetInvoiceRecord) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetInvoiceRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler GetInvoiceRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetInvoiceRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetInvoiceRecord) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type InvoiceDataRequest struct {
	// Object describing the customer/payor. Required for POST requests. Which fields are required depends on the paypoint's custom identifier settings.
	CustomerData *PayorDataRequest `json:"customerData,omitempty" url:"customerData,omitempty"`
	// Object describing the invoice. Required for POST requests.
	InvoiceData *BillData `json:"invoiceData,omitempty" url:"invoiceData,omitempty"`
	// Object with options for scheduled invoices.
	ScheduledOptions *BillOptions `json:"scheduledOptions,omitempty" url:"scheduledOptions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceDataRequest) GetCustomerData() *PayorDataRequest {
	if i == nil {
		return nil
	}
	return i.CustomerData
}

func (i *InvoiceDataRequest) GetInvoiceData() *BillData {
	if i == nil {
		return nil
	}
	return i.InvoiceData
}

func (i *InvoiceDataRequest) GetScheduledOptions() *BillOptions {
	if i == nil {
		return nil
	}
	return i.ScheduledOptions
}

func (i *InvoiceDataRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceDataRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceDataRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Identifier of invoice.
type InvoiceId = int64

// Response schema for operations for sending invoices or getting next invoice number.
type InvoiceNumberResponse struct {
	IsSuccess    IsSuccess    `json:"isSuccess" url:"isSuccess"`
	ResponseText ResponseText `json:"responseText" url:"responseText"`
	// If `isSuccess` = true, this contains the next available invoice number in the format defined by paypoint settings. If `isSuccess` = false, this contains the reason for the error.
	ResponseData string `json:"responseData" url:"responseData"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceNumberResponse) GetIsSuccess() IsSuccess {
	if i == nil {
		return false
	}
	return i.IsSuccess
}

func (i *InvoiceNumberResponse) GetResponseText() ResponseText {
	if i == nil {
		return ""
	}
	return i.ResponseText
}

func (i *InvoiceNumberResponse) GetResponseData() string {
	if i == nil {
		return ""
	}
	return i.ResponseData
}

func (i *InvoiceNumberResponse) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceNumberResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceNumberResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceNumberResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceNumberResponse) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Amount partially paid to the invoice.
type InvoicePaidAmount = float64

// Response schema for invoice operations.
type InvoiceResponseWithoutData struct {
	IsSuccess    IsSuccess    `json:"isSuccess" url:"isSuccess"`
	ResponseCode Responsecode `json:"responseCode" url:"responseCode"`
	// If `isSuccess` = true, this contains the identifier of the invoice. If `isSuccess` = false, this contains the reason for the failure.
	ResponseData   *Responsedatanonobject `json:"responseData" url:"responseData"`
	ResponseText   ResponseText           `json:"responseText" url:"responseText"`
	Pageidentifier *PageIdentifier        `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`
	RoomId         RoomIdNotInUse         `json:"roomId" url:"roomId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceResponseWithoutData) GetIsSuccess() IsSuccess {
	if i == nil {
		return false
	}
	return i.IsSuccess
}

func (i *InvoiceResponseWithoutData) GetResponseCode() Responsecode {
	if i == nil {
		return 0
	}
	return i.ResponseCode
}

func (i *InvoiceResponseWithoutData) GetResponseData() *Responsedatanonobject {
	if i == nil {
		return nil
	}
	return i.ResponseData
}

func (i *InvoiceResponseWithoutData) GetResponseText() ResponseText {
	if i == nil {
		return ""
	}
	return i.ResponseText
}

func (i *InvoiceResponseWithoutData) GetPageidentifier() *PageIdentifier {
	if i == nil {
		return nil
	}
	return i.Pageidentifier
}

func (i *InvoiceResponseWithoutData) GetRoomId() RoomIdNotInUse {
	if i == nil {
		return 0
	}
	return i.RoomId
}

func (i *InvoiceResponseWithoutData) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceResponseWithoutData) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceResponseWithoutData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceResponseWithoutData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceResponseWithoutData) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type QueryInvoiceResponse struct {
	Records []*QueryInvoiceResponseRecordsItem `json:"Records" url:"Records"`
	Summary *QuerySummary                      `json:"Summary" url:"Summary"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryInvoiceResponse) GetRecords() []*QueryInvoiceResponseRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryInvoiceResponse) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryInvoiceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryInvoiceResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryInvoiceResponseRecordsItem struct {
	InvoiceId     InvoiceId     `json:"invoiceId" url:"invoiceId"`
	CustomerId    CustomerId    `json:"customerId" url:"customerId"`
	PaypointId    PaypointId    `json:"paypointId" url:"paypointId"`
	InvoiceNumber InvoiceNumber `json:"invoiceNumber" url:"invoiceNumber"`
	// Invoice date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
	InvoiceDate Datenullable `json:"invoiceDate,omitempty" url:"invoiceDate,omitempty"`
	// Invoice due date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
	InvoiceDueDate Datenullable `json:"invoiceDueDate,omitempty" url:"invoiceDueDate,omitempty"`
	// Invoice sent date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
	InvoiceSentDate Datenullable `json:"invoiceSentDate,omitempty" url:"invoiceSentDate,omitempty"`
	// The end date for a scheduled invoice cycle (`invoiceType` = 1).
	InvoiceEndDate Datenullable `json:"invoiceEndDate,omitempty" url:"invoiceEndDate,omitempty"`
	// Timestamp of last payment.
	LastPaymentDate *DatetimeNullable `json:"lastPaymentDate,omitempty" url:"lastPaymentDate,omitempty"`
	CreatedAt       CreatedAt         `json:"createdAt" url:"createdAt"`
	InvoiceStatus   Invoicestatus     `json:"invoiceStatus" url:"invoiceStatus"`
	InvoiceType     InvoiceType       `json:"invoiceType" url:"invoiceType"`
	// Frequency of scheduled invoice.
	Frequency       Frequency        `json:"frequency" url:"frequency"`
	PaymentTerms    Terms            `json:"paymentTerms" url:"paymentTerms"`
	TermsConditions *TermsConditions `json:"termsConditions,omitempty" url:"termsConditions,omitempty"`
	// Invoice notes.
	Notes             *string           `json:"notes,omitempty" url:"notes,omitempty"`
	Tax               Tax               `json:"tax,omitempty" url:"tax,omitempty"`
	Discount          Discount          `json:"discount,omitempty" url:"discount,omitempty"`
	InvoiceAmount     InvoiceAmount     `json:"invoiceAmount" url:"invoiceAmount"`
	InvoicePaidAmount InvoicePaidAmount `json:"invoicePaidAmount" url:"invoicePaidAmount"`
	FreightAmount     FreightAmount     `json:"freightAmount,omitempty" url:"freightAmount,omitempty"`
	DutyAmount        DutyAmount        `json:"dutyAmount,omitempty" url:"dutyAmount,omitempty"`
	PurchaseOrder     *PurchaseOrder    `json:"purchaseOrder,omitempty" url:"purchaseOrder,omitempty"`
	// First name of the recipient of the invoice.
	FirstName string `json:"firstName" url:"firstName"`
	// Last name of the recipient of the invoice.
	LastName string `json:"lastName" url:"lastName"`
	// Company name of the recipient of the invoice.
	Company          *string                   `json:"company,omitempty" url:"company,omitempty"`
	ShippingAddress1 Shippingaddress           `json:"shippingAddress1" url:"shippingAddress1"`
	ShippingAddress2 Shippingaddressadditional `json:"shippingAddress2" url:"shippingAddress2"`
	ShippingCity     Shippingcity              `json:"shippingCity" url:"shippingCity"`
	ShippingState    Shippingstate             `json:"shippingState" url:"shippingState"`
	ShippingZip      Shippingzip               `json:"shippingZip" url:"shippingZip"`
	ShippingFromZip  ShippingFromZip           `json:"shippingFromZip" url:"shippingFromZip"`
	ShippingCountry  Shippingcountry           `json:"shippingCountry" url:"shippingCountry"`
	// Shipping recipient's contact email address.
	ShippingEmail Email `json:"shippingEmail" url:"shippingEmail"`
	// Recipient phone number.
	ShippingPhone        string                `json:"shippingPhone" url:"shippingPhone"`
	SummaryCommodityCode *SummaryCommodityCode `json:"summaryCommodityCode,omitempty" url:"summaryCommodityCode,omitempty"`
	// Array of line items included in the invoice.
	Items      []*BillItem        `json:"items" url:"items"`
	Customer   *PayorDataResponse `json:"Customer" url:"Customer"`
	PaylinkId  string             `json:"paylinkId" url:"paylinkId"`
	BillEvents BillEvents         `json:"billEvents,omitempty" url:"billEvents,omitempty"`
	// Object with options for scheduled invoices.
	ScheduledOptions *BillOptions `json:"scheduledOptions,omitempty" url:"scheduledOptions,omitempty"`
	// Paypoint's legal name.
	PaypointLegalname Legalname `json:"PaypointLegalname" url:"PaypointLegalname"`
	// Paypoint's DBA name.
	PaypointDbaname Dbaname `json:"PaypointDbaname" url:"PaypointDbaname"`
	// Paypoint's entryname.
	PaypointEntryname Entrypointfield `json:"PaypointEntryname" url:"PaypointEntryname"`
	ParentOrgId       Orgid           `json:"ParentOrgId" url:"ParentOrgId"`
	ParentOrgName     OrgParentName   `json:"ParentOrgName" url:"ParentOrgName"`
	// Custom list of key:value pairs. This field is used to store any data related to the invoice or for your system.
	AdditionalData map[string]interface{} `json:"AdditionalData,omitempty" url:"AdditionalData,omitempty"`
	// Object containing attachments associated to the invoice.
	DocumentsRef       *DocumentsRef      `json:"DocumentsRef,omitempty" url:"DocumentsRef,omitempty"`
	ExternalPaypointId ExternalPaypointId `json:"externalPaypointID" url:"externalPaypointID"`
	PageIdentifier     *PageIdentifier    `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryInvoiceResponseRecordsItem) GetInvoiceId() InvoiceId {
	if q == nil {
		return 0
	}
	return q.InvoiceId
}

func (q *QueryInvoiceResponseRecordsItem) GetCustomerId() CustomerId {
	if q == nil {
		return 0
	}
	return q.CustomerId
}

func (q *QueryInvoiceResponseRecordsItem) GetPaypointId() PaypointId {
	if q == nil {
		return 0
	}
	return q.PaypointId
}

func (q *QueryInvoiceResponseRecordsItem) GetInvoiceNumber() InvoiceNumber {
	if q == nil {
		return ""
	}
	return q.InvoiceNumber
}

func (q *QueryInvoiceResponseRecordsItem) GetInvoiceDate() Datenullable {
	if q == nil {
		return nil
	}
	return q.InvoiceDate
}

func (q *QueryInvoiceResponseRecordsItem) GetInvoiceDueDate() Datenullable {
	if q == nil {
		return nil
	}
	return q.InvoiceDueDate
}

func (q *QueryInvoiceResponseRecordsItem) GetInvoiceSentDate() Datenullable {
	if q == nil {
		return nil
	}
	return q.InvoiceSentDate
}

func (q *QueryInvoiceResponseRecordsItem) GetInvoiceEndDate() Datenullable {
	if q == nil {
		return nil
	}
	return q.InvoiceEndDate
}

func (q *QueryInvoiceResponseRecordsItem) GetLastPaymentDate() *DatetimeNullable {
	if q == nil {
		return nil
	}
	return q.LastPaymentDate
}

func (q *QueryInvoiceResponseRecordsItem) GetCreatedAt() CreatedAt {
	if q == nil {
		return time.Time{}
	}
	return q.CreatedAt
}

func (q *QueryInvoiceResponseRecordsItem) GetInvoiceStatus() Invoicestatus {
	if q == nil {
		return 0
	}
	return q.InvoiceStatus
}

func (q *QueryInvoiceResponseRecordsItem) GetInvoiceType() InvoiceType {
	if q == nil {
		return 0
	}
	return q.InvoiceType
}

func (q *QueryInvoiceResponseRecordsItem) GetFrequency() Frequency {
	if q == nil {
		return ""
	}
	return q.Frequency
}

func (q *QueryInvoiceResponseRecordsItem) GetPaymentTerms() Terms {
	if q == nil {
		return ""
	}
	return q.PaymentTerms
}

func (q *QueryInvoiceResponseRecordsItem) GetTermsConditions() *TermsConditions {
	if q == nil {
		return nil
	}
	return q.TermsConditions
}

func (q *QueryInvoiceResponseRecordsItem) GetNotes() *string {
	if q == nil {
		return nil
	}
	return q.Notes
}

func (q *QueryInvoiceResponseRecordsItem) GetTax() Tax {
	if q == nil {
		return nil
	}
	return q.Tax
}

func (q *QueryInvoiceResponseRecordsItem) GetDiscount() Discount {
	if q == nil {
		return nil
	}
	return q.Discount
}

func (q *QueryInvoiceResponseRecordsItem) GetInvoiceAmount() InvoiceAmount {
	if q == nil {
		return 0
	}
	return q.InvoiceAmount
}

func (q *QueryInvoiceResponseRecordsItem) GetInvoicePaidAmount() InvoicePaidAmount {
	if q == nil {
		return 0
	}
	return q.InvoicePaidAmount
}

func (q *QueryInvoiceResponseRecordsItem) GetFreightAmount() FreightAmount {
	if q == nil {
		return nil
	}
	return q.FreightAmount
}

func (q *QueryInvoiceResponseRecordsItem) GetDutyAmount() DutyAmount {
	if q == nil {
		return nil
	}
	return q.DutyAmount
}

func (q *QueryInvoiceResponseRecordsItem) GetPurchaseOrder() *PurchaseOrder {
	if q == nil {
		return nil
	}
	return q.PurchaseOrder
}

func (q *QueryInvoiceResponseRecordsItem) GetFirstName() string {
	if q == nil {
		return ""
	}
	return q.FirstName
}

func (q *QueryInvoiceResponseRecordsItem) GetLastName() string {
	if q == nil {
		return ""
	}
	return q.LastName
}

func (q *QueryInvoiceResponseRecordsItem) GetCompany() *string {
	if q == nil {
		return nil
	}
	return q.Company
}

func (q *QueryInvoiceResponseRecordsItem) GetShippingAddress1() Shippingaddress {
	if q == nil {
		return ""
	}
	return q.ShippingAddress1
}

func (q *QueryInvoiceResponseRecordsItem) GetShippingAddress2() Shippingaddressadditional {
	if q == nil {
		return ""
	}
	return q.ShippingAddress2
}

func (q *QueryInvoiceResponseRecordsItem) GetShippingCity() Shippingcity {
	if q == nil {
		return ""
	}
	return q.ShippingCity
}

func (q *QueryInvoiceResponseRecordsItem) GetShippingState() Shippingstate {
	if q == nil {
		return ""
	}
	return q.ShippingState
}

func (q *QueryInvoiceResponseRecordsItem) GetShippingZip() Shippingzip {
	if q == nil {
		return ""
	}
	return q.ShippingZip
}

func (q *QueryInvoiceResponseRecordsItem) GetShippingFromZip() ShippingFromZip {
	if q == nil {
		return ""
	}
	return q.ShippingFromZip
}

func (q *QueryInvoiceResponseRecordsItem) GetShippingCountry() Shippingcountry {
	if q == nil {
		return ""
	}
	return q.ShippingCountry
}

func (q *QueryInvoiceResponseRecordsItem) GetShippingEmail() Email {
	if q == nil {
		return ""
	}
	return q.ShippingEmail
}

func (q *QueryInvoiceResponseRecordsItem) GetShippingPhone() string {
	if q == nil {
		return ""
	}
	return q.ShippingPhone
}

func (q *QueryInvoiceResponseRecordsItem) GetSummaryCommodityCode() *SummaryCommodityCode {
	if q == nil {
		return nil
	}
	return q.SummaryCommodityCode
}

func (q *QueryInvoiceResponseRecordsItem) GetItems() []*BillItem {
	if q == nil {
		return nil
	}
	return q.Items
}

func (q *QueryInvoiceResponseRecordsItem) GetCustomer() *PayorDataResponse {
	if q == nil {
		return nil
	}
	return q.Customer
}

func (q *QueryInvoiceResponseRecordsItem) GetPaylinkId() string {
	if q == nil {
		return ""
	}
	return q.PaylinkId
}

func (q *QueryInvoiceResponseRecordsItem) GetBillEvents() BillEvents {
	if q == nil {
		return nil
	}
	return q.BillEvents
}

func (q *QueryInvoiceResponseRecordsItem) GetScheduledOptions() *BillOptions {
	if q == nil {
		return nil
	}
	return q.ScheduledOptions
}

func (q *QueryInvoiceResponseRecordsItem) GetPaypointLegalname() Legalname {
	if q == nil {
		return ""
	}
	return q.PaypointLegalname
}

func (q *QueryInvoiceResponseRecordsItem) GetPaypointDbaname() Dbaname {
	if q == nil {
		return ""
	}
	return q.PaypointDbaname
}

func (q *QueryInvoiceResponseRecordsItem) GetPaypointEntryname() Entrypointfield {
	if q == nil {
		return ""
	}
	return q.PaypointEntryname
}

func (q *QueryInvoiceResponseRecordsItem) GetParentOrgId() Orgid {
	if q == nil {
		return 0
	}
	return q.ParentOrgId
}

func (q *QueryInvoiceResponseRecordsItem) GetParentOrgName() OrgParentName {
	if q == nil {
		return ""
	}
	return q.ParentOrgName
}

func (q *QueryInvoiceResponseRecordsItem) GetAdditionalData() map[string]interface{} {
	if q == nil {
		return nil
	}
	return q.AdditionalData
}

func (q *QueryInvoiceResponseRecordsItem) GetDocumentsRef() *DocumentsRef {
	if q == nil {
		return nil
	}
	return q.DocumentsRef
}

func (q *QueryInvoiceResponseRecordsItem) GetExternalPaypointId() ExternalPaypointId {
	if q == nil {
		return ""
	}
	return q.ExternalPaypointId
}

func (q *QueryInvoiceResponseRecordsItem) GetPageIdentifier() *PageIdentifier {
	if q == nil {
		return nil
	}
	return q.PageIdentifier
}

func (q *QueryInvoiceResponseRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryInvoiceResponseRecordsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryInvoiceResponseRecordsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryInvoiceResponseRecordsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryInvoiceResponseRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type SendInvoiceResponse struct {
	IsSuccess    IsSuccess    `json:"isSuccess" url:"isSuccess"`
	ResponseText ResponseText `json:"responseText" url:"responseText"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendInvoiceResponse) GetIsSuccess() IsSuccess {
	if s == nil {
		return false
	}
	return s.IsSuccess
}

func (s *SendInvoiceResponse) GetResponseText() ResponseText {
	if s == nil {
		return ""
	}
	return s.ResponseText
}

func (s *SendInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SendInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendInvoiceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendInvoiceResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
