// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
)

type BasicStatsRequest struct {
	// Used with `custom` mode. The end date for the range.
	// Valid formats:
	//   - YYYY-mm-dd
	//   - YYYY/mm/dd
	//   - mm-dd-YYYY
	//   - mm/dd/YYYY
	EndDate *string `json:"-" url:"endDate,omitempty"`
	// List of parameters.
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// Used with `custom` mode. The start date for the range.
	// Valid formats:
	//   - YYYY-mm-dd
	//   - YYYY/mm/dd
	//   - mm-dd-YYYY
	//   - mm/dd/YYYY
	StartDate *string `json:"-" url:"startDate,omitempty"`
}

type CustomerBasicStatsRequest struct {
	// List of parameters.
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
}

type SubStatsRequest struct {
	// List of parameters
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
}

type VendorBasicStatsRequest struct {
	// List of parameters
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
}

type StatBasicQueryRecord struct {
	// Statistical grouping identifier
	StatX string `json:"statX" url:"statX"`
	// Number of incoming transactions
	InTransactions int `json:"inTransactions" url:"inTransactions"`
	// Volume of incoming transactions
	InTransactionsVolume float64 `json:"inTransactionsVolume" url:"inTransactionsVolume"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StatBasicQueryRecord) GetStatX() string {
	if s == nil {
		return ""
	}
	return s.StatX
}

func (s *StatBasicQueryRecord) GetInTransactions() int {
	if s == nil {
		return 0
	}
	return s.InTransactions
}

func (s *StatBasicQueryRecord) GetInTransactionsVolume() float64 {
	if s == nil {
		return 0
	}
	return s.InTransactionsVolume
}

func (s *StatBasicQueryRecord) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StatBasicQueryRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler StatBasicQueryRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StatBasicQueryRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StatBasicQueryRecord) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StatisticsVendorQueryRecord struct {
	// Statistical grouping identifier
	StatX string `json:"statX" url:"statX"`
	// Number of active transactions
	Active int `json:"active" url:"active"`
	// Volume of active transactions
	ActiveVolume float64 `json:"activeVolume" url:"activeVolume"`
	// Number of transactions sent to approval
	SentToApproval int `json:"sentToApproval" url:"sentToApproval"`
	// Volume of transactions sent to approval
	SentToApprovalVolume float64 `json:"sentToApprovalVolume" url:"sentToApprovalVolume"`
	// Number of transactions to approval
	ToApproval int `json:"toApproval" url:"toApproval"`
	// Volume of transactions to approval
	ToApprovalVolume float64 `json:"toApprovalVolume" url:"toApprovalVolume"`
	// Number of approved transactions
	Approved int `json:"approved" url:"approved"`
	// Volume of approved transactions
	ApprovedVolume float64 `json:"approvedVolume" url:"approvedVolume"`
	// Number of disapproved transactions
	Disapproved int `json:"disapproved" url:"disapproved"`
	// Volume of disapproved transactions
	DisapprovedVolume float64 `json:"disapprovedVolume" url:"disapprovedVolume"`
	// Number of cancelled transactions
	Cancelled int `json:"cancelled" url:"cancelled"`
	// Volume of cancelled transactions
	CancelledVolume float64 `json:"cancelledVolume" url:"cancelledVolume"`
	// Number of transactions in transit
	InTransit int `json:"inTransit" url:"inTransit"`
	// Volume of transactions in transit
	InTransitVolume float64 `json:"inTransitVolume" url:"inTransitVolume"`
	// Number of paid transactions
	Paid int `json:"paid" url:"paid"`
	// Volume of paid transactions
	PaidVolume float64 `json:"paidVolume" url:"paidVolume"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StatisticsVendorQueryRecord) GetStatX() string {
	if s == nil {
		return ""
	}
	return s.StatX
}

func (s *StatisticsVendorQueryRecord) GetActive() int {
	if s == nil {
		return 0
	}
	return s.Active
}

func (s *StatisticsVendorQueryRecord) GetActiveVolume() float64 {
	if s == nil {
		return 0
	}
	return s.ActiveVolume
}

func (s *StatisticsVendorQueryRecord) GetSentToApproval() int {
	if s == nil {
		return 0
	}
	return s.SentToApproval
}

func (s *StatisticsVendorQueryRecord) GetSentToApprovalVolume() float64 {
	if s == nil {
		return 0
	}
	return s.SentToApprovalVolume
}

func (s *StatisticsVendorQueryRecord) GetToApproval() int {
	if s == nil {
		return 0
	}
	return s.ToApproval
}

func (s *StatisticsVendorQueryRecord) GetToApprovalVolume() float64 {
	if s == nil {
		return 0
	}
	return s.ToApprovalVolume
}

func (s *StatisticsVendorQueryRecord) GetApproved() int {
	if s == nil {
		return 0
	}
	return s.Approved
}

func (s *StatisticsVendorQueryRecord) GetApprovedVolume() float64 {
	if s == nil {
		return 0
	}
	return s.ApprovedVolume
}

func (s *StatisticsVendorQueryRecord) GetDisapproved() int {
	if s == nil {
		return 0
	}
	return s.Disapproved
}

func (s *StatisticsVendorQueryRecord) GetDisapprovedVolume() float64 {
	if s == nil {
		return 0
	}
	return s.DisapprovedVolume
}

func (s *StatisticsVendorQueryRecord) GetCancelled() int {
	if s == nil {
		return 0
	}
	return s.Cancelled
}

func (s *StatisticsVendorQueryRecord) GetCancelledVolume() float64 {
	if s == nil {
		return 0
	}
	return s.CancelledVolume
}

func (s *StatisticsVendorQueryRecord) GetInTransit() int {
	if s == nil {
		return 0
	}
	return s.InTransit
}

func (s *StatisticsVendorQueryRecord) GetInTransitVolume() float64 {
	if s == nil {
		return 0
	}
	return s.InTransitVolume
}

func (s *StatisticsVendorQueryRecord) GetPaid() int {
	if s == nil {
		return 0
	}
	return s.Paid
}

func (s *StatisticsVendorQueryRecord) GetPaidVolume() float64 {
	if s == nil {
		return 0
	}
	return s.PaidVolume
}

func (s *StatisticsVendorQueryRecord) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StatisticsVendorQueryRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler StatisticsVendorQueryRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StatisticsVendorQueryRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StatisticsVendorQueryRecord) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubscriptionStatsQueryRecord struct {
	// Time interval identifier
	Interval string `json:"interval" url:"interval"`
	// Number of subscriptions
	Count int `json:"count" url:"count"`
	// Subscription volume
	Volume float64 `json:"volume" url:"volume"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SubscriptionStatsQueryRecord) GetInterval() string {
	if s == nil {
		return ""
	}
	return s.Interval
}

func (s *SubscriptionStatsQueryRecord) GetCount() int {
	if s == nil {
		return 0
	}
	return s.Count
}

func (s *SubscriptionStatsQueryRecord) GetVolume() float64 {
	if s == nil {
		return 0
	}
	return s.Volume
}

func (s *SubscriptionStatsQueryRecord) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubscriptionStatsQueryRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler SubscriptionStatsQueryRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubscriptionStatsQueryRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubscriptionStatsQueryRecord) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
