// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	core "github.com/payabli/sdk-go/core"
)

// Bad request/ invalid data
type BadRequestError struct {
	*core.APIError
	Body interface{}
}

func (b *BadRequestError) UnmarshalJSON(data []byte) error {
	var body interface{}
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	b.StatusCode = 400
	b.Body = body
	return nil
}

func (b *BadRequestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.Body)
}

func (b *BadRequestError) Unwrap() error {
	return b.APIError
}

// Opt in pending
type ConflictError struct {
	*core.APIError
	Body *PayabliApiResponsePaylinks
}

func (c *ConflictError) UnmarshalJSON(data []byte) error {
	var body *PayabliApiResponsePaylinks
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	c.StatusCode = 409
	c.Body = body
	return nil
}

func (c *ConflictError) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Body)
}

func (c *ConflictError) Unwrap() error {
	return c.APIError
}

// Consent error
type ForbiddenError struct {
	*core.APIError
	Body *PayabliApiResponsePaylinks
}

func (f *ForbiddenError) UnmarshalJSON(data []byte) error {
	var body *PayabliApiResponsePaylinks
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	f.StatusCode = 403
	f.Body = body
	return nil
}

func (f *ForbiddenError) MarshalJSON() ([]byte, error) {
	return json.Marshal(f.Body)
}

func (f *ForbiddenError) Unwrap() error {
	return f.APIError
}

// Internal API Error
type InternalServerError struct {
	*core.APIError
	Body interface{}
}

func (i *InternalServerError) UnmarshalJSON(data []byte) error {
	var body interface{}
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	i.StatusCode = 500
	i.Body = body
	return nil
}

func (i *InternalServerError) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.Body)
}

func (i *InternalServerError) Unwrap() error {
	return i.APIError
}

// Database connection error
type ServiceUnavailableError struct {
	*core.APIError
	Body *PayabliApiResponse
}

func (s *ServiceUnavailableError) UnmarshalJSON(data []byte) error {
	var body *PayabliApiResponse
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	s.StatusCode = 503
	s.Body = body
	return nil
}

func (s *ServiceUnavailableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.Body)
}

func (s *ServiceUnavailableError) Unwrap() error {
	return s.APIError
}

// Unauthorized request.
type UnauthorizedError struct {
	*core.APIError
	Body interface{}
}

func (u *UnauthorizedError) UnmarshalJSON(data []byte) error {
	var body interface{}
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.StatusCode = 401
	u.Body = body
	return nil
}

func (u *UnauthorizedError) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}

func (u *UnauthorizedError) Unwrap() error {
	return u.APIError
}

// Validation errors for capture requests. Possible response codes include: 3014, 3015, 3016.
type CaptureError struct {
	*core.APIError
	Body *PayabliApiResponseError400
}

func (c *CaptureError) UnmarshalJSON(data []byte) error {
	var body *PayabliApiResponseError400
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	c.StatusCode = 400
	c.Body = body
	return nil
}

func (c *CaptureError) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Body)
}

func (c *CaptureError) Unwrap() error {
	return c.APIError
}

type InvalidTransStatusError struct {
	*core.APIError
	Body *InvalidTransStatusErrorType
}

func (i *InvalidTransStatusError) UnmarshalJSON(data []byte) error {
	var body *InvalidTransStatusErrorType
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	i.StatusCode = 400
	i.Body = body
	return nil
}

func (i *InvalidTransStatusError) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.Body)
}

func (i *InvalidTransStatusError) Unwrap() error {
	return i.APIError
}
