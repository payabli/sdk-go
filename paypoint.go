// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
)

type GetEntryConfigRequest struct {
	Entrypages *string `json:"-" url:"entrypages,omitempty"`
}

type GetBasicEntryByIdResponse struct {
	IsSuccess      *IsSuccess           `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier      `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode        `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	ResponseData   *PaypointEntryConfig `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText   *ResponseText        `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetBasicEntryByIdResponse) GetIsSuccess() *IsSuccess {
	if g == nil {
		return nil
	}
	return g.IsSuccess
}

func (g *GetBasicEntryByIdResponse) GetPageIdentifier() *PageIdentifier {
	if g == nil {
		return nil
	}
	return g.PageIdentifier
}

func (g *GetBasicEntryByIdResponse) GetResponseCode() *Responsecode {
	if g == nil {
		return nil
	}
	return g.ResponseCode
}

func (g *GetBasicEntryByIdResponse) GetResponseData() *PaypointEntryConfig {
	if g == nil {
		return nil
	}
	return g.ResponseData
}

func (g *GetBasicEntryByIdResponse) GetResponseText() *ResponseText {
	if g == nil {
		return nil
	}
	return g.ResponseText
}

func (g *GetBasicEntryByIdResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetBasicEntryByIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetBasicEntryByIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetBasicEntryByIdResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBasicEntryByIdResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetBasicEntryResponse struct {
	IsSuccess      *IsSuccess           `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier      `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode        `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	ResponseData   *PaypointEntryConfig `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText   *ResponseText        `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetBasicEntryResponse) GetIsSuccess() *IsSuccess {
	if g == nil {
		return nil
	}
	return g.IsSuccess
}

func (g *GetBasicEntryResponse) GetPageIdentifier() *PageIdentifier {
	if g == nil {
		return nil
	}
	return g.PageIdentifier
}

func (g *GetBasicEntryResponse) GetResponseCode() *Responsecode {
	if g == nil {
		return nil
	}
	return g.ResponseCode
}

func (g *GetBasicEntryResponse) GetResponseData() *PaypointEntryConfig {
	if g == nil {
		return nil
	}
	return g.ResponseData
}

func (g *GetBasicEntryResponse) GetResponseText() *ResponseText {
	if g == nil {
		return nil
	}
	return g.ResponseText
}

func (g *GetBasicEntryResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetBasicEntryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetBasicEntryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetBasicEntryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBasicEntryResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetEntryConfigResponse struct {
	IsSuccess      *IsSuccess           `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier      `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode        `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	ResponseData   *PaypointEntryConfig `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText   *ResponseText        `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetEntryConfigResponse) GetIsSuccess() *IsSuccess {
	if g == nil {
		return nil
	}
	return g.IsSuccess
}

func (g *GetEntryConfigResponse) GetPageIdentifier() *PageIdentifier {
	if g == nil {
		return nil
	}
	return g.PageIdentifier
}

func (g *GetEntryConfigResponse) GetResponseCode() *Responsecode {
	if g == nil {
		return nil
	}
	return g.ResponseCode
}

func (g *GetEntryConfigResponse) GetResponseData() *PaypointEntryConfig {
	if g == nil {
		return nil
	}
	return g.ResponseData
}

func (g *GetEntryConfigResponse) GetResponseText() *ResponseText {
	if g == nil {
		return nil
	}
	return g.ResponseText
}

func (g *GetEntryConfigResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEntryConfigResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEntryConfigResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEntryConfigResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEntryConfigResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}
