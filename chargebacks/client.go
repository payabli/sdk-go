// Code generated by Fern. DO NOT EDIT.

package chargebacks

import (
	context "context"
	sdkgo "github.com/payabli/sdk-go"
	core "github.com/payabli/sdk-go/core"
	internal "github.com/payabli/sdk-go/internal"
	option "github.com/payabli/sdk-go/option"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Add a response to a chargeback or ACH return.
func (c *Client) AddResponse(
	ctx context.Context,
	// ID of the chargeback or return record.
	id int64,
	request *sdkgo.ResponseChargeBack,
	opts ...option.RequestOption,
) (*sdkgo.AddResponseResponse, error) {
	response, err := c.WithRawResponse.AddResponse(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a chargeback record and its details.
func (c *Client) GetChargeback(
	ctx context.Context,
	// ID of the chargeback or return record. This is returned as `chargebackId` in the [RecievedChargeback](/developers/developer-guides/webhook-payloads#receivedChargeback) and [ReceivedAchReturn](/developers/developer-guides/webhook-payloads#receivedachreturn) webhook notifications.
	id int64,
	opts ...option.RequestOption,
) (*sdkgo.ChargebackQueryRecords, error) {
	response, err := c.WithRawResponse.GetChargeback(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetChargebackAttachment(
	ctx context.Context,
	// The chargeback attachment's file name.
	fileName string,
	// The ID of chargeback or return record.
	id int64,
	opts ...option.RequestOption,
) (string, error) {
	response, err := c.WithRawResponse.GetChargebackAttachment(
		ctx,
		fileName,
		id,
		opts...,
	)
	if err != nil {
		return "", err
	}
	return response.Body, nil
}
