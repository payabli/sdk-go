// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
)

type NotificationQueryRecord struct {
	// Notification content.
	Content *NotificationContent `json:"content,omitempty" url:"content,omitempty"`
	// Timestamp of when notification was created.
	CreatedAt *CreatedAt             `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	Frequency *Frequencynotification `json:"frequency,omitempty" url:"frequency,omitempty"`
	// Timestamp of when notification was last updated.
	LastUpdated    *LastModified       `json:"lastUpdated,omitempty" url:"lastUpdated,omitempty"`
	Method         *Methodnotification `json:"method,omitempty" url:"method,omitempty"`
	NotificationId *NotificationId     `json:"notificationId,omitempty" url:"notificationId,omitempty"`
	OwnerId        *Ownerid            `json:"ownerId,omitempty" url:"ownerId,omitempty"`
	// Name of entity owner of notification.
	OwnerName *string    `json:"ownerName,omitempty" url:"ownerName,omitempty"`
	OwnerType *Ownertype `json:"ownerType,omitempty" url:"ownerType,omitempty"`
	// Custom descriptor of source of notification.
	Source *Source             `json:"source,omitempty" url:"source,omitempty"`
	Status *Statusnotification `json:"status,omitempty" url:"status,omitempty"`
	Target *Target             `json:"target,omitempty" url:"target,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationQueryRecord) GetContent() *NotificationContent {
	if n == nil {
		return nil
	}
	return n.Content
}

func (n *NotificationQueryRecord) GetCreatedAt() *CreatedAt {
	if n == nil {
		return nil
	}
	return n.CreatedAt
}

func (n *NotificationQueryRecord) GetFrequency() *Frequencynotification {
	if n == nil {
		return nil
	}
	return n.Frequency
}

func (n *NotificationQueryRecord) GetLastUpdated() *LastModified {
	if n == nil {
		return nil
	}
	return n.LastUpdated
}

func (n *NotificationQueryRecord) GetMethod() *Methodnotification {
	if n == nil {
		return nil
	}
	return n.Method
}

func (n *NotificationQueryRecord) GetNotificationId() *NotificationId {
	if n == nil {
		return nil
	}
	return n.NotificationId
}

func (n *NotificationQueryRecord) GetOwnerId() *Ownerid {
	if n == nil {
		return nil
	}
	return n.OwnerId
}

func (n *NotificationQueryRecord) GetOwnerName() *string {
	if n == nil {
		return nil
	}
	return n.OwnerName
}

func (n *NotificationQueryRecord) GetOwnerType() *Ownertype {
	if n == nil {
		return nil
	}
	return n.OwnerType
}

func (n *NotificationQueryRecord) GetSource() *Source {
	if n == nil {
		return nil
	}
	return n.Source
}

func (n *NotificationQueryRecord) GetStatus() *Statusnotification {
	if n == nil {
		return nil
	}
	return n.Status
}

func (n *NotificationQueryRecord) GetTarget() *Target {
	if n == nil {
		return nil
	}
	return n.Target
}

func (n *NotificationQueryRecord) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationQueryRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationQueryRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationQueryRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationQueryRecord) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Information about the report notification configuration (report-email, report-web).
type NotificationReportRequest struct {
	Content   *NotificationReportRequestContent  `json:"content" url:"content"`
	Frequency NotificationReportRequestFrequency `json:"frequency" url:"frequency"`
	// Automated reporting lets you gather critical reports without manually filtering and exporting the data. Get automated daily, weekly, and monthly report for daily sales, ACH returns, settlements, and more. You can send these reports via email or via webhook. See [Automated Reports](/developers/developer-guides/notifications-and-webhooks-overview#automated-reports) for more.
	Method    NotificationReportRequestMethod `json:"method" url:"method"`
	OwnerId   *Ownerid                        `json:"ownerId,omitempty" url:"ownerId,omitempty"`
	OwnerType Ownertype                       `json:"ownerType" url:"ownerType"`
	Status    *Statusnotification             `json:"status,omitempty" url:"status,omitempty"`
	// Specify the notification target.
	//
	// For method=report-email the expected value is a list of email addresses separated by semicolon.
	//
	// For method=report-web the expected value is a valid and complete URL. Webhooks support only standard HTTP ports: 80, 443, 8080, or 4443.
	Target string `json:"target" url:"target"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationReportRequest) GetContent() *NotificationReportRequestContent {
	if n == nil {
		return nil
	}
	return n.Content
}

func (n *NotificationReportRequest) GetFrequency() NotificationReportRequestFrequency {
	if n == nil {
		return ""
	}
	return n.Frequency
}

func (n *NotificationReportRequest) GetMethod() NotificationReportRequestMethod {
	if n == nil {
		return ""
	}
	return n.Method
}

func (n *NotificationReportRequest) GetOwnerId() *Ownerid {
	if n == nil {
		return nil
	}
	return n.OwnerId
}

func (n *NotificationReportRequest) GetOwnerType() Ownertype {
	if n == nil {
		return 0
	}
	return n.OwnerType
}

func (n *NotificationReportRequest) GetStatus() *Statusnotification {
	if n == nil {
		return nil
	}
	return n.Status
}

func (n *NotificationReportRequest) GetTarget() string {
	if n == nil {
		return ""
	}
	return n.Target
}

func (n *NotificationReportRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationReportRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationReportRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationReportRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationReportRequest) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationReportRequestContent struct {
	// The notification's event name.
	EventType *string `json:"eventType,omitempty" url:"eventType,omitempty"`
	// Indicate the format of report file to be generated by the engine.
	FileFormat *NotificationReportRequestContentFileFormat `json:"fileFormat,omitempty" url:"fileFormat,omitempty"`
	// Array of pairs key:value to insert in request body to target in **method** = *report-web*.
	InternalData []*KeyValueDuo `json:"internalData,omitempty" url:"internalData,omitempty"`
	// The kind report to generate.
	ReportName *NotificationReportRequestContentReportName `json:"reportName,omitempty" url:"reportName,omitempty"`
	TimeZone   *Timezone                                   `json:"timeZone,omitempty" url:"timeZone,omitempty"`
	// Used internally to reference the entity or object generating the event.
	TransactionId *string `json:"transactionId,omitempty" url:"transactionId,omitempty"`
	// Array of pairs key:value to insert in header of request to target in **method** = *report-web*.
	WebHeaderParameters []*KeyValueDuo `json:"webHeaderParameters,omitempty" url:"webHeaderParameters,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationReportRequestContent) GetFileFormat() *NotificationReportRequestContentFileFormat {
	if n == nil {
		return nil
	}
	return n.FileFormat
}

func (n *NotificationReportRequestContent) GetInternalData() []*KeyValueDuo {
	if n == nil {
		return nil
	}
	return n.InternalData
}

func (n *NotificationReportRequestContent) GetReportName() *NotificationReportRequestContentReportName {
	if n == nil {
		return nil
	}
	return n.ReportName
}

func (n *NotificationReportRequestContent) GetTimeZone() *Timezone {
	if n == nil {
		return nil
	}
	return n.TimeZone
}

func (n *NotificationReportRequestContent) GetTransactionId() *string {
	if n == nil {
		return nil
	}
	return n.TransactionId
}

func (n *NotificationReportRequestContent) GetWebHeaderParameters() []*KeyValueDuo {
	if n == nil {
		return nil
	}
	return n.WebHeaderParameters
}

func (n *NotificationReportRequestContent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationReportRequestContent) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationReportRequestContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationReportRequestContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationReportRequestContent) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Indicate the format of report file to be generated by the engine.
type NotificationReportRequestContentFileFormat string

const (
	NotificationReportRequestContentFileFormatJson NotificationReportRequestContentFileFormat = "json"
	NotificationReportRequestContentFileFormatCsv  NotificationReportRequestContentFileFormat = "csv"
	NotificationReportRequestContentFileFormatXlsx NotificationReportRequestContentFileFormat = "xlsx"
)

func NewNotificationReportRequestContentFileFormatFromString(s string) (NotificationReportRequestContentFileFormat, error) {
	switch s {
	case "json":
		return NotificationReportRequestContentFileFormatJson, nil
	case "csv":
		return NotificationReportRequestContentFileFormatCsv, nil
	case "xlsx":
		return NotificationReportRequestContentFileFormatXlsx, nil
	}
	var t NotificationReportRequestContentFileFormat
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationReportRequestContentFileFormat) Ptr() *NotificationReportRequestContentFileFormat {
	return &n
}

// The kind report to generate.
type NotificationReportRequestContentReportName string

const (
	NotificationReportRequestContentReportNameTransaction NotificationReportRequestContentReportName = "Transaction"
	NotificationReportRequestContentReportNameSettlement  NotificationReportRequestContentReportName = "Settlement"
	NotificationReportRequestContentReportNameBoarding    NotificationReportRequestContentReportName = "Boarding"
	NotificationReportRequestContentReportNameReturned    NotificationReportRequestContentReportName = "Returned"
)

func NewNotificationReportRequestContentReportNameFromString(s string) (NotificationReportRequestContentReportName, error) {
	switch s {
	case "Transaction":
		return NotificationReportRequestContentReportNameTransaction, nil
	case "Settlement":
		return NotificationReportRequestContentReportNameSettlement, nil
	case "Boarding":
		return NotificationReportRequestContentReportNameBoarding, nil
	case "Returned":
		return NotificationReportRequestContentReportNameReturned, nil
	}
	var t NotificationReportRequestContentReportName
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationReportRequestContentReportName) Ptr() *NotificationReportRequestContentReportName {
	return &n
}

type NotificationReportRequestFrequency string

const (
	NotificationReportRequestFrequencyOneTime      NotificationReportRequestFrequency = "one-time"
	NotificationReportRequestFrequencyDaily        NotificationReportRequestFrequency = "daily"
	NotificationReportRequestFrequencyWeekly       NotificationReportRequestFrequency = "weekly"
	NotificationReportRequestFrequencyBiweekly     NotificationReportRequestFrequency = "biweekly"
	NotificationReportRequestFrequencyMonthly      NotificationReportRequestFrequency = "monthly"
	NotificationReportRequestFrequencyQuarterly    NotificationReportRequestFrequency = "quarterly"
	NotificationReportRequestFrequencySemiannually NotificationReportRequestFrequency = "semiannually"
	NotificationReportRequestFrequencyAnnually     NotificationReportRequestFrequency = "annually"
)

func NewNotificationReportRequestFrequencyFromString(s string) (NotificationReportRequestFrequency, error) {
	switch s {
	case "one-time":
		return NotificationReportRequestFrequencyOneTime, nil
	case "daily":
		return NotificationReportRequestFrequencyDaily, nil
	case "weekly":
		return NotificationReportRequestFrequencyWeekly, nil
	case "biweekly":
		return NotificationReportRequestFrequencyBiweekly, nil
	case "monthly":
		return NotificationReportRequestFrequencyMonthly, nil
	case "quarterly":
		return NotificationReportRequestFrequencyQuarterly, nil
	case "semiannually":
		return NotificationReportRequestFrequencySemiannually, nil
	case "annually":
		return NotificationReportRequestFrequencyAnnually, nil
	}
	var t NotificationReportRequestFrequency
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationReportRequestFrequency) Ptr() *NotificationReportRequestFrequency {
	return &n
}

// Automated reporting lets you gather critical reports without manually filtering and exporting the data. Get automated daily, weekly, and monthly report for daily sales, ACH returns, settlements, and more. You can send these reports via email or via webhook. See [Automated Reports](/developers/developer-guides/notifications-and-webhooks-overview#automated-reports) for more.
type NotificationReportRequestMethod string

const (
	NotificationReportRequestMethodReportEmail NotificationReportRequestMethod = "report-email"
	NotificationReportRequestMethodReportWeb   NotificationReportRequestMethod = "report-web"
)

func NewNotificationReportRequestMethodFromString(s string) (NotificationReportRequestMethod, error) {
	switch s {
	case "report-email":
		return NotificationReportRequestMethodReportEmail, nil
	case "report-web":
		return NotificationReportRequestMethodReportWeb, nil
	}
	var t NotificationReportRequestMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationReportRequestMethod) Ptr() *NotificationReportRequestMethod {
	return &n
}

// Information about the standard notification configuration (email, sms, web).
type NotificationStandardRequest struct {
	Content   *NotificationStandardRequestContent  `json:"content,omitempty" url:"content,omitempty"`
	Frequency NotificationStandardRequestFrequency `json:"frequency" url:"frequency"`
	// Get near-instant notifications via email, SMS, or webhooks for important events like new payment disputes, merchant activations, fraud alerts, approved transactions, settlement history, vendor payouts, and more. Use webhooks with notifications to get real-time updates and automate operations based on key those key events. See [Notifications](/developers/developer-guides/notifications-and-webhooks-overview#notifications) for more.
	Method    NotificationStandardRequestMethod `json:"method" url:"method"`
	OwnerId   *Ownerid                          `json:"ownerId,omitempty" url:"ownerId,omitempty"`
	OwnerType Ownertype                         `json:"ownerType" url:"ownerType"`
	Status    *Statusnotification               `json:"status,omitempty" url:"status,omitempty"`
	// Specify the notification target.
	//
	// - For method=email the expected value is a list of email addresses separated by semicolon.
	// - For method=sms the expected value is a list of phone numbers separated by semicolon.
	// - For method=web the expected value is a valid and complete URL. Webhooks support only standard HTTP ports: 80, 443, 8080, or 4443.
	Target string `json:"target" url:"target"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationStandardRequest) GetContent() *NotificationStandardRequestContent {
	if n == nil {
		return nil
	}
	return n.Content
}

func (n *NotificationStandardRequest) GetFrequency() NotificationStandardRequestFrequency {
	if n == nil {
		return ""
	}
	return n.Frequency
}

func (n *NotificationStandardRequest) GetMethod() NotificationStandardRequestMethod {
	if n == nil {
		return ""
	}
	return n.Method
}

func (n *NotificationStandardRequest) GetOwnerId() *Ownerid {
	if n == nil {
		return nil
	}
	return n.OwnerId
}

func (n *NotificationStandardRequest) GetOwnerType() Ownertype {
	if n == nil {
		return 0
	}
	return n.OwnerType
}

func (n *NotificationStandardRequest) GetStatus() *Statusnotification {
	if n == nil {
		return nil
	}
	return n.Status
}

func (n *NotificationStandardRequest) GetTarget() string {
	if n == nil {
		return ""
	}
	return n.Target
}

func (n *NotificationStandardRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationStandardRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationStandardRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationStandardRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationStandardRequest) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationStandardRequestContent struct {
	// The notification's event name.
	EventType *NotificationStandardRequestContentEventType `json:"eventType,omitempty" url:"eventType,omitempty"`
	// Array of pairs key:value to insert in request body to target in **method** = *web*.
	InternalData []*KeyValueDuo `json:"internalData,omitempty" url:"internalData,omitempty"`
	// Used internally to reference the entity or object generating the event.
	TransactionId *string `json:"transactionId,omitempty" url:"transactionId,omitempty"`
	// Array of pairs key:value to insert in header of request to target in **method** = *web*.
	WebHeaderParameters []*KeyValueDuo `json:"webHeaderParameters,omitempty" url:"webHeaderParameters,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationStandardRequestContent) GetEventType() *NotificationStandardRequestContentEventType {
	if n == nil {
		return nil
	}
	return n.EventType
}

func (n *NotificationStandardRequestContent) GetInternalData() []*KeyValueDuo {
	if n == nil {
		return nil
	}
	return n.InternalData
}

func (n *NotificationStandardRequestContent) GetTransactionId() *string {
	if n == nil {
		return nil
	}
	return n.TransactionId
}

func (n *NotificationStandardRequestContent) GetWebHeaderParameters() []*KeyValueDuo {
	if n == nil {
		return nil
	}
	return n.WebHeaderParameters
}

func (n *NotificationStandardRequestContent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationStandardRequestContent) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationStandardRequestContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationStandardRequestContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationStandardRequestContent) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// The notification's event name.
type NotificationStandardRequestContentEventType string

const (
	NotificationStandardRequestContentEventTypePayinTransactionInitiated         NotificationStandardRequestContentEventType = "payin_transaction_initiated"
	NotificationStandardRequestContentEventTypePayinTransactionAuthorized        NotificationStandardRequestContentEventType = "payin_transaction_authorized"
	NotificationStandardRequestContentEventTypePayinTransactionApprovedcaptured  NotificationStandardRequestContentEventType = "payin_transaction_approvedcaptured"
	NotificationStandardRequestContentEventTypePayinTransactionDeclined          NotificationStandardRequestContentEventType = "payin_transaction_declined"
	NotificationStandardRequestContentEventTypePayinTransactionTechnicaldecline  NotificationStandardRequestContentEventType = "payin_transaction_technicaldecline"
	NotificationStandardRequestContentEventTypePayinTransactionFailed            NotificationStandardRequestContentEventType = "payin_transaction_failed"
	NotificationStandardRequestContentEventTypePayinTransactionError             NotificationStandardRequestContentEventType = "payin_transaction_error"
	NotificationStandardRequestContentEventTypePayinTransactionPaid              NotificationStandardRequestContentEventType = "payin_transaction_paid"
	NotificationStandardRequestContentEventTypePayinTransactionReturned          NotificationStandardRequestContentEventType = "payin_transaction_returned"
	NotificationStandardRequestContentEventTypePayinTransactionRejected          NotificationStandardRequestContentEventType = "payin_transaction_rejected"
	NotificationStandardRequestContentEventTypePayinTransactionVoidedcancelled   NotificationStandardRequestContentEventType = "payin_transaction_voidedcancelled"
	NotificationStandardRequestContentEventTypePayinTransactionProcessing        NotificationStandardRequestContentEventType = "payin_transaction_processing"
	NotificationStandardRequestContentEventTypePayinTransactionProcessed         NotificationStandardRequestContentEventType = "payin_transaction_processed"
	NotificationStandardRequestContentEventTypePayinTransactionOnhold            NotificationStandardRequestContentEventType = "payin_transaction_onhold"
	NotificationStandardRequestContentEventTypePayinTransactionReleased          NotificationStandardRequestContentEventType = "payin_transaction_released"
	NotificationStandardRequestContentEventTypePayinTransactionRecovered         NotificationStandardRequestContentEventType = "payin_transaction_recovered"
	NotificationStandardRequestContentEventTypePayoutTransactionInitiated        NotificationStandardRequestContentEventType = "payout_transaction_initiated"
	NotificationStandardRequestContentEventTypePayoutTransactionAuthorized       NotificationStandardRequestContentEventType = "payout_transaction_authorized"
	NotificationStandardRequestContentEventTypePayoutTransactionApprovedcaptured NotificationStandardRequestContentEventType = "payout_transaction_approvedcaptured"
	NotificationStandardRequestContentEventTypePayoutTransactionDeclined         NotificationStandardRequestContentEventType = "payout_transaction_declined"
	NotificationStandardRequestContentEventTypePayoutTransactionTechnicaldecline NotificationStandardRequestContentEventType = "payout_transaction_technicaldecline"
	NotificationStandardRequestContentEventTypePayoutTransactionFailed           NotificationStandardRequestContentEventType = "payout_transaction_failed"
	NotificationStandardRequestContentEventTypePayoutTransactionError            NotificationStandardRequestContentEventType = "payout_transaction_error"
	NotificationStandardRequestContentEventTypePayoutTransactionPaid             NotificationStandardRequestContentEventType = "payout_transaction_paid"
	NotificationStandardRequestContentEventTypePayoutTransactionReturned         NotificationStandardRequestContentEventType = "payout_transaction_returned"
	NotificationStandardRequestContentEventTypePayoutTransactionRejected         NotificationStandardRequestContentEventType = "payout_transaction_rejected"
	NotificationStandardRequestContentEventTypePayoutTransactionVoidedcancelled  NotificationStandardRequestContentEventType = "payout_transaction_voidedcancelled"
	NotificationStandardRequestContentEventTypePayoutTransactionProcessing       NotificationStandardRequestContentEventType = "payout_transaction_processing"
	NotificationStandardRequestContentEventTypePayoutTransactionProcessed        NotificationStandardRequestContentEventType = "payout_transaction_processed"
	NotificationStandardRequestContentEventTypePayoutTransactionOnhold           NotificationStandardRequestContentEventType = "payout_transaction_onhold"
	NotificationStandardRequestContentEventTypePayoutTransactionReleased         NotificationStandardRequestContentEventType = "payout_transaction_released"
	NotificationStandardRequestContentEventTypePayoutTransactionRecovered        NotificationStandardRequestContentEventType = "payout_transaction_recovered"
	NotificationStandardRequestContentEventTypePayinBatchOpen                    NotificationStandardRequestContentEventType = "payin_batch_open"
	NotificationStandardRequestContentEventTypePayinBatchOnhold                  NotificationStandardRequestContentEventType = "payin_batch_onhold"
	NotificationStandardRequestContentEventTypePayinBatchReleased                NotificationStandardRequestContentEventType = "payin_batch_released"
	NotificationStandardRequestContentEventTypePayinBatchProcessed               NotificationStandardRequestContentEventType = "payin_batch_processed"
	NotificationStandardRequestContentEventTypePayinBatchPaid                    NotificationStandardRequestContentEventType = "payin_batch_paid"
	NotificationStandardRequestContentEventTypePayinBatchFunded                  NotificationStandardRequestContentEventType = "payin_batch_funded"
	NotificationStandardRequestContentEventTypePayinBatchClosed                  NotificationStandardRequestContentEventType = "payin_batch_closed"
	NotificationStandardRequestContentEventTypePayinBatchNotclosed               NotificationStandardRequestContentEventType = "payin_batch_notclosed"
	NotificationStandardRequestContentEventTypePayinBatchFundpending             NotificationStandardRequestContentEventType = "payin_batch_fundpending"
	NotificationStandardRequestContentEventTypePayinBatchCancelled               NotificationStandardRequestContentEventType = "payin_batch_cancelled"
	NotificationStandardRequestContentEventTypePayinBatchTransferred             NotificationStandardRequestContentEventType = "payin_batch_transferred"
	NotificationStandardRequestContentEventTypePayinBatchResolved                NotificationStandardRequestContentEventType = "payin_batch_resolved"
	NotificationStandardRequestContentEventTypePayoutBatchOpen                   NotificationStandardRequestContentEventType = "payout_batch_open"
	NotificationStandardRequestContentEventTypePayoutBatchOnhold                 NotificationStandardRequestContentEventType = "payout_batch_onhold"
	NotificationStandardRequestContentEventTypePayoutBatchReleased               NotificationStandardRequestContentEventType = "payout_batch_released"
	NotificationStandardRequestContentEventTypePayoutBatchProcessed              NotificationStandardRequestContentEventType = "payout_batch_processed"
	NotificationStandardRequestContentEventTypePayoutBatchPaid                   NotificationStandardRequestContentEventType = "payout_batch_paid"
	NotificationStandardRequestContentEventTypePayoutBatchFunded                 NotificationStandardRequestContentEventType = "payout_batch_funded"
	NotificationStandardRequestContentEventTypePayoutBatchClosed                 NotificationStandardRequestContentEventType = "payout_batch_closed"
	NotificationStandardRequestContentEventTypePayoutBatchNotclosed              NotificationStandardRequestContentEventType = "payout_batch_notclosed"
	NotificationStandardRequestContentEventTypePayoutBatchFundpending            NotificationStandardRequestContentEventType = "payout_batch_fundpending"
	NotificationStandardRequestContentEventTypePayoutBatchCancelled              NotificationStandardRequestContentEventType = "payout_batch_cancelled"
	NotificationStandardRequestContentEventTypePayoutBatchTransferred            NotificationStandardRequestContentEventType = "payout_batch_transferred"
	NotificationStandardRequestContentEventTypePayoutBatchResolved               NotificationStandardRequestContentEventType = "payout_batch_resolved"
	NotificationStandardRequestContentEventTypePayinBatchSettlementPending       NotificationStandardRequestContentEventType = "payin_batch_settlement_pending"
	NotificationStandardRequestContentEventTypePayinBatchSettlementIntransit     NotificationStandardRequestContentEventType = "payin_batch_settlement_intransit"
	NotificationStandardRequestContentEventTypePayinBatchSettlementTransferred   NotificationStandardRequestContentEventType = "payin_batch_settlement_transferred"
	NotificationStandardRequestContentEventTypePayinBatchSettlementFunded        NotificationStandardRequestContentEventType = "payin_batch_settlement_funded"
	NotificationStandardRequestContentEventTypePayinBatchSettlementResolved      NotificationStandardRequestContentEventType = "payin_batch_settlement_resolved"
	NotificationStandardRequestContentEventTypePayinBatchSettlementException     NotificationStandardRequestContentEventType = "payin_batch_settlement_exception"
	NotificationStandardRequestContentEventTypePayinBatchSettlementAchreturn     NotificationStandardRequestContentEventType = "payin_batch_settlement_achreturn"
	NotificationStandardRequestContentEventTypePayinBatchSettlementHeld          NotificationStandardRequestContentEventType = "payin_batch_settlement_held"
	NotificationStandardRequestContentEventTypePayinBatchSettlementReleased      NotificationStandardRequestContentEventType = "payin_batch_settlement_released"
	NotificationStandardRequestContentEventTypePayoutBatchSettlementPending      NotificationStandardRequestContentEventType = "payout_batch_settlement_pending"
	NotificationStandardRequestContentEventTypePayoutBatchSettlementIntransit    NotificationStandardRequestContentEventType = "payout_batch_settlement_intransit"
	NotificationStandardRequestContentEventTypePayoutBatchSettlementTransferred  NotificationStandardRequestContentEventType = "payout_batch_settlement_transferred"
	NotificationStandardRequestContentEventTypePayoutBatchSettlementFunded       NotificationStandardRequestContentEventType = "payout_batch_settlement_funded"
	NotificationStandardRequestContentEventTypePayoutBatchSettlementResolved     NotificationStandardRequestContentEventType = "payout_batch_settlement_resolved"
	NotificationStandardRequestContentEventTypePayoutBatchSettlementException    NotificationStandardRequestContentEventType = "payout_batch_settlement_exception"
	NotificationStandardRequestContentEventTypePayoutBatchSettlementAchreturn    NotificationStandardRequestContentEventType = "payout_batch_settlement_achreturn"
	NotificationStandardRequestContentEventTypePayoutBatchSettlementHeld         NotificationStandardRequestContentEventType = "payout_batch_settlement_held"
	NotificationStandardRequestContentEventTypePayoutBatchSettlementReleased     NotificationStandardRequestContentEventType = "payout_batch_settlement_released"
	NotificationStandardRequestContentEventTypeApprovedPayment                   NotificationStandardRequestContentEventType = "ApprovedPayment"
	NotificationStandardRequestContentEventTypeAuthorizedPayment                 NotificationStandardRequestContentEventType = "AuthorizedPayment"
	NotificationStandardRequestContentEventTypeDeclinedPayment                   NotificationStandardRequestContentEventType = "DeclinedPayment"
	NotificationStandardRequestContentEventTypeOriginatedPayment                 NotificationStandardRequestContentEventType = "OriginatedPayment"
	NotificationStandardRequestContentEventTypeSettledPayment                    NotificationStandardRequestContentEventType = "SettledPayment"
	NotificationStandardRequestContentEventTypeSubscriptionCreated               NotificationStandardRequestContentEventType = "SubscriptionCreated"
	NotificationStandardRequestContentEventTypeSubscriptionUpdated               NotificationStandardRequestContentEventType = "SubscriptionUpdated"
	NotificationStandardRequestContentEventTypeSubscriptionCanceled              NotificationStandardRequestContentEventType = "SubscriptionCanceled"
	NotificationStandardRequestContentEventTypeSubscriptionCompleted             NotificationStandardRequestContentEventType = "SubscriptionCompleted"
	NotificationStandardRequestContentEventTypeFundedPayment                     NotificationStandardRequestContentEventType = "FundedPayment"
	NotificationStandardRequestContentEventTypeVoidedPayment                     NotificationStandardRequestContentEventType = "VoidedPayment"
	NotificationStandardRequestContentEventTypeRefundedPayment                   NotificationStandardRequestContentEventType = "RefundedPayment"
	NotificationStandardRequestContentEventTypeHoldTransaction                   NotificationStandardRequestContentEventType = "HoldTransaction"
	NotificationStandardRequestContentEventTypeReleasedTransaction               NotificationStandardRequestContentEventType = "ReleasedTransaction"
	NotificationStandardRequestContentEventTypeHoldBatch                         NotificationStandardRequestContentEventType = "HoldBatch"
	NotificationStandardRequestContentEventTypeReleasedBatch                     NotificationStandardRequestContentEventType = "ReleasedBatch"
	NotificationStandardRequestContentEventTypeTransferAdjusted                  NotificationStandardRequestContentEventType = "TransferAdjusted"
	NotificationStandardRequestContentEventTypeTransferDisabledCreditFund        NotificationStandardRequestContentEventType = "TransferDisabledCreditFund"
	NotificationStandardRequestContentEventTypeTransferDisabledDebitFund         NotificationStandardRequestContentEventType = "TransferDisabledDebitFund"
	NotificationStandardRequestContentEventTypeTransferNotAvailableBalance       NotificationStandardRequestContentEventType = "TransferNotAvailableBalance"
	NotificationStandardRequestContentEventTypeTransferReadyforRetry             NotificationStandardRequestContentEventType = "TransferReadyforRetry"
	NotificationStandardRequestContentEventTypeTransferResolved                  NotificationStandardRequestContentEventType = "TransferResolved"
	NotificationStandardRequestContentEventTypeTransferReturn                    NotificationStandardRequestContentEventType = "TransferReturn"
	NotificationStandardRequestContentEventTypeTransferSuccess                   NotificationStandardRequestContentEventType = "TransferSuccess"
	NotificationStandardRequestContentEventTypeTransferSuspended                 NotificationStandardRequestContentEventType = "TransferSuspended"
	NotificationStandardRequestContentEventTypeTransferError                     NotificationStandardRequestContentEventType = "TransferError"
	NotificationStandardRequestContentEventTypeSendReceipt                       NotificationStandardRequestContentEventType = "SendReceipt"
	NotificationStandardRequestContentEventTypeRecoveredTransaction              NotificationStandardRequestContentEventType = "RecoveredTransaction"
	NotificationStandardRequestContentEventTypeCreatedApplication                NotificationStandardRequestContentEventType = "CreatedApplication"
	NotificationStandardRequestContentEventTypeApprovedApplication               NotificationStandardRequestContentEventType = "ApprovedApplication"
	NotificationStandardRequestContentEventTypeFailedBoardingApplication         NotificationStandardRequestContentEventType = "FailedBoardingApplication"
	NotificationStandardRequestContentEventTypeSubmittedApplication              NotificationStandardRequestContentEventType = "SubmittedApplication"
	NotificationStandardRequestContentEventTypeActivatedMerchant                 NotificationStandardRequestContentEventType = "ActivatedMerchant"
	NotificationStandardRequestContentEventTypeReceivedChargeBack                NotificationStandardRequestContentEventType = "ReceivedChargeBack"
	NotificationStandardRequestContentEventTypeChargebackUpdated                 NotificationStandardRequestContentEventType = "ChargebackUpdated"
	NotificationStandardRequestContentEventTypeReceivedRetrieval                 NotificationStandardRequestContentEventType = "ReceivedRetrieval"
	NotificationStandardRequestContentEventTypeRetrievalUpdated                  NotificationStandardRequestContentEventType = "RetrievalUpdated"
	NotificationStandardRequestContentEventTypeReceivedAchReturn                 NotificationStandardRequestContentEventType = "ReceivedAchReturn"
	NotificationStandardRequestContentEventTypeHoldingApplication                NotificationStandardRequestContentEventType = "HoldingApplication"
	NotificationStandardRequestContentEventTypeDeclinedApplication               NotificationStandardRequestContentEventType = "DeclinedApplication"
	NotificationStandardRequestContentEventTypeBoardingApplication               NotificationStandardRequestContentEventType = "BoardingApplication"
	NotificationStandardRequestContentEventTypePaypointMoved                     NotificationStandardRequestContentEventType = "PaypointMoved"
	NotificationStandardRequestContentEventTypeFraudAlert                        NotificationStandardRequestContentEventType = "FraudAlert"
	NotificationStandardRequestContentEventTypeInvoiceSent                       NotificationStandardRequestContentEventType = "InvoiceSent"
	NotificationStandardRequestContentEventTypeInvoicePaid                       NotificationStandardRequestContentEventType = "InvoicePaid"
	NotificationStandardRequestContentEventTypeInvoiceCreated                    NotificationStandardRequestContentEventType = "InvoiceCreated"
	NotificationStandardRequestContentEventTypeBillPaid                          NotificationStandardRequestContentEventType = "BillPaid"
	NotificationStandardRequestContentEventTypeBillApproved                      NotificationStandardRequestContentEventType = "BillApproved"
	NotificationStandardRequestContentEventTypeBillDisApproved                   NotificationStandardRequestContentEventType = "BillDisApproved"
	NotificationStandardRequestContentEventTypeBillCanceled                      NotificationStandardRequestContentEventType = "BillCanceled"
	NotificationStandardRequestContentEventTypeBillProcessing                    NotificationStandardRequestContentEventType = "BillProcessing"
	NotificationStandardRequestContentEventTypeCardCreated                       NotificationStandardRequestContentEventType = "CardCreated"
	NotificationStandardRequestContentEventTypeCardActivated                     NotificationStandardRequestContentEventType = "CardActivated"
	NotificationStandardRequestContentEventTypeCardDeactivated                   NotificationStandardRequestContentEventType = "CardDeactivated"
	NotificationStandardRequestContentEventTypeCardExpired                       NotificationStandardRequestContentEventType = "CardExpired"
	NotificationStandardRequestContentEventTypeCardExpiring                      NotificationStandardRequestContentEventType = "CardExpiring"
	NotificationStandardRequestContentEventTypeCardLimitUpdated                  NotificationStandardRequestContentEventType = "CardLimitUpdated"
	NotificationStandardRequestContentEventTypeBatchClosed                       NotificationStandardRequestContentEventType = "BatchClosed"
	NotificationStandardRequestContentEventTypeBatchNotClosed                    NotificationStandardRequestContentEventType = "BatchNotClosed"
	NotificationStandardRequestContentEventTypePayOutFunded                      NotificationStandardRequestContentEventType = "PayOutFunded"
	NotificationStandardRequestContentEventTypePayOutProcessed                   NotificationStandardRequestContentEventType = "PayOutProcessed"
	NotificationStandardRequestContentEventTypePayOutCanceled                    NotificationStandardRequestContentEventType = "PayOutCanceled"
	NotificationStandardRequestContentEventTypePayOutPaid                        NotificationStandardRequestContentEventType = "PayOutPaid"
	NotificationStandardRequestContentEventTypePayOutReturned                    NotificationStandardRequestContentEventType = "PayOutReturned"
	NotificationStandardRequestContentEventTypePayoutSubscriptionCreated         NotificationStandardRequestContentEventType = "PayoutSubscriptionCreated"
	NotificationStandardRequestContentEventTypePayoutSubscriptionUpdated         NotificationStandardRequestContentEventType = "PayoutSubscriptionUpdated"
	NotificationStandardRequestContentEventTypePayoutSubscriptionCanceled        NotificationStandardRequestContentEventType = "PayoutSubscriptionCanceled"
	NotificationStandardRequestContentEventTypePayoutSubscriptionCompleted       NotificationStandardRequestContentEventType = "PayoutSubscriptionCompleted"
	NotificationStandardRequestContentEventTypePayoutSubscriptionReminder        NotificationStandardRequestContentEventType = "PayoutSubscriptionReminder"
	NotificationStandardRequestContentEventTypeImportFileReceived                NotificationStandardRequestContentEventType = "importFileReceived"
	NotificationStandardRequestContentEventTypeImportFileProcessed               NotificationStandardRequestContentEventType = "importFileProcessed"
	NotificationStandardRequestContentEventTypeImportFileError                   NotificationStandardRequestContentEventType = "importFileError"
	NotificationStandardRequestContentEventTypeExportFileSent                    NotificationStandardRequestContentEventType = "exportFileSent"
	NotificationStandardRequestContentEventTypeExportFileError                   NotificationStandardRequestContentEventType = "exportFileError"
	NotificationStandardRequestContentEventTypeUpdatedMerchant                   NotificationStandardRequestContentEventType = "UpdatedMerchant"
	NotificationStandardRequestContentEventTypeReport                            NotificationStandardRequestContentEventType = "Report"
	NotificationStandardRequestContentEventTypeFailedEmailNotification           NotificationStandardRequestContentEventType = "FailedEmailNotification"
	NotificationStandardRequestContentEventTypeFailedWebNotification             NotificationStandardRequestContentEventType = "FailedWebNotification"
	NotificationStandardRequestContentEventTypeFailedSmsNotification             NotificationStandardRequestContentEventType = "FailedSMSNotification"
	NotificationStandardRequestContentEventTypeUserPasswordExpiring              NotificationStandardRequestContentEventType = "UserPasswordExpiring"
	NotificationStandardRequestContentEventTypeUserPasswordExpired               NotificationStandardRequestContentEventType = "UserPasswordExpired"
	NotificationStandardRequestContentEventTypeTransactionNotFound               NotificationStandardRequestContentEventType = "TransactionNotFound"
	NotificationStandardRequestContentEventTypeSystemAlert                       NotificationStandardRequestContentEventType = "SystemAlert"
)

func NewNotificationStandardRequestContentEventTypeFromString(s string) (NotificationStandardRequestContentEventType, error) {
	switch s {
	case "payin_transaction_initiated":
		return NotificationStandardRequestContentEventTypePayinTransactionInitiated, nil
	case "payin_transaction_authorized":
		return NotificationStandardRequestContentEventTypePayinTransactionAuthorized, nil
	case "payin_transaction_approvedcaptured":
		return NotificationStandardRequestContentEventTypePayinTransactionApprovedcaptured, nil
	case "payin_transaction_declined":
		return NotificationStandardRequestContentEventTypePayinTransactionDeclined, nil
	case "payin_transaction_technicaldecline":
		return NotificationStandardRequestContentEventTypePayinTransactionTechnicaldecline, nil
	case "payin_transaction_failed":
		return NotificationStandardRequestContentEventTypePayinTransactionFailed, nil
	case "payin_transaction_error":
		return NotificationStandardRequestContentEventTypePayinTransactionError, nil
	case "payin_transaction_paid":
		return NotificationStandardRequestContentEventTypePayinTransactionPaid, nil
	case "payin_transaction_returned":
		return NotificationStandardRequestContentEventTypePayinTransactionReturned, nil
	case "payin_transaction_rejected":
		return NotificationStandardRequestContentEventTypePayinTransactionRejected, nil
	case "payin_transaction_voidedcancelled":
		return NotificationStandardRequestContentEventTypePayinTransactionVoidedcancelled, nil
	case "payin_transaction_processing":
		return NotificationStandardRequestContentEventTypePayinTransactionProcessing, nil
	case "payin_transaction_processed":
		return NotificationStandardRequestContentEventTypePayinTransactionProcessed, nil
	case "payin_transaction_onhold":
		return NotificationStandardRequestContentEventTypePayinTransactionOnhold, nil
	case "payin_transaction_released":
		return NotificationStandardRequestContentEventTypePayinTransactionReleased, nil
	case "payin_transaction_recovered":
		return NotificationStandardRequestContentEventTypePayinTransactionRecovered, nil
	case "payout_transaction_initiated":
		return NotificationStandardRequestContentEventTypePayoutTransactionInitiated, nil
	case "payout_transaction_authorized":
		return NotificationStandardRequestContentEventTypePayoutTransactionAuthorized, nil
	case "payout_transaction_approvedcaptured":
		return NotificationStandardRequestContentEventTypePayoutTransactionApprovedcaptured, nil
	case "payout_transaction_declined":
		return NotificationStandardRequestContentEventTypePayoutTransactionDeclined, nil
	case "payout_transaction_technicaldecline":
		return NotificationStandardRequestContentEventTypePayoutTransactionTechnicaldecline, nil
	case "payout_transaction_failed":
		return NotificationStandardRequestContentEventTypePayoutTransactionFailed, nil
	case "payout_transaction_error":
		return NotificationStandardRequestContentEventTypePayoutTransactionError, nil
	case "payout_transaction_paid":
		return NotificationStandardRequestContentEventTypePayoutTransactionPaid, nil
	case "payout_transaction_returned":
		return NotificationStandardRequestContentEventTypePayoutTransactionReturned, nil
	case "payout_transaction_rejected":
		return NotificationStandardRequestContentEventTypePayoutTransactionRejected, nil
	case "payout_transaction_voidedcancelled":
		return NotificationStandardRequestContentEventTypePayoutTransactionVoidedcancelled, nil
	case "payout_transaction_processing":
		return NotificationStandardRequestContentEventTypePayoutTransactionProcessing, nil
	case "payout_transaction_processed":
		return NotificationStandardRequestContentEventTypePayoutTransactionProcessed, nil
	case "payout_transaction_onhold":
		return NotificationStandardRequestContentEventTypePayoutTransactionOnhold, nil
	case "payout_transaction_released":
		return NotificationStandardRequestContentEventTypePayoutTransactionReleased, nil
	case "payout_transaction_recovered":
		return NotificationStandardRequestContentEventTypePayoutTransactionRecovered, nil
	case "payin_batch_open":
		return NotificationStandardRequestContentEventTypePayinBatchOpen, nil
	case "payin_batch_onhold":
		return NotificationStandardRequestContentEventTypePayinBatchOnhold, nil
	case "payin_batch_released":
		return NotificationStandardRequestContentEventTypePayinBatchReleased, nil
	case "payin_batch_processed":
		return NotificationStandardRequestContentEventTypePayinBatchProcessed, nil
	case "payin_batch_paid":
		return NotificationStandardRequestContentEventTypePayinBatchPaid, nil
	case "payin_batch_funded":
		return NotificationStandardRequestContentEventTypePayinBatchFunded, nil
	case "payin_batch_closed":
		return NotificationStandardRequestContentEventTypePayinBatchClosed, nil
	case "payin_batch_notclosed":
		return NotificationStandardRequestContentEventTypePayinBatchNotclosed, nil
	case "payin_batch_fundpending":
		return NotificationStandardRequestContentEventTypePayinBatchFundpending, nil
	case "payin_batch_cancelled":
		return NotificationStandardRequestContentEventTypePayinBatchCancelled, nil
	case "payin_batch_transferred":
		return NotificationStandardRequestContentEventTypePayinBatchTransferred, nil
	case "payin_batch_resolved":
		return NotificationStandardRequestContentEventTypePayinBatchResolved, nil
	case "payout_batch_open":
		return NotificationStandardRequestContentEventTypePayoutBatchOpen, nil
	case "payout_batch_onhold":
		return NotificationStandardRequestContentEventTypePayoutBatchOnhold, nil
	case "payout_batch_released":
		return NotificationStandardRequestContentEventTypePayoutBatchReleased, nil
	case "payout_batch_processed":
		return NotificationStandardRequestContentEventTypePayoutBatchProcessed, nil
	case "payout_batch_paid":
		return NotificationStandardRequestContentEventTypePayoutBatchPaid, nil
	case "payout_batch_funded":
		return NotificationStandardRequestContentEventTypePayoutBatchFunded, nil
	case "payout_batch_closed":
		return NotificationStandardRequestContentEventTypePayoutBatchClosed, nil
	case "payout_batch_notclosed":
		return NotificationStandardRequestContentEventTypePayoutBatchNotclosed, nil
	case "payout_batch_fundpending":
		return NotificationStandardRequestContentEventTypePayoutBatchFundpending, nil
	case "payout_batch_cancelled":
		return NotificationStandardRequestContentEventTypePayoutBatchCancelled, nil
	case "payout_batch_transferred":
		return NotificationStandardRequestContentEventTypePayoutBatchTransferred, nil
	case "payout_batch_resolved":
		return NotificationStandardRequestContentEventTypePayoutBatchResolved, nil
	case "payin_batch_settlement_pending":
		return NotificationStandardRequestContentEventTypePayinBatchSettlementPending, nil
	case "payin_batch_settlement_intransit":
		return NotificationStandardRequestContentEventTypePayinBatchSettlementIntransit, nil
	case "payin_batch_settlement_transferred":
		return NotificationStandardRequestContentEventTypePayinBatchSettlementTransferred, nil
	case "payin_batch_settlement_funded":
		return NotificationStandardRequestContentEventTypePayinBatchSettlementFunded, nil
	case "payin_batch_settlement_resolved":
		return NotificationStandardRequestContentEventTypePayinBatchSettlementResolved, nil
	case "payin_batch_settlement_exception":
		return NotificationStandardRequestContentEventTypePayinBatchSettlementException, nil
	case "payin_batch_settlement_achreturn":
		return NotificationStandardRequestContentEventTypePayinBatchSettlementAchreturn, nil
	case "payin_batch_settlement_held":
		return NotificationStandardRequestContentEventTypePayinBatchSettlementHeld, nil
	case "payin_batch_settlement_released":
		return NotificationStandardRequestContentEventTypePayinBatchSettlementReleased, nil
	case "payout_batch_settlement_pending":
		return NotificationStandardRequestContentEventTypePayoutBatchSettlementPending, nil
	case "payout_batch_settlement_intransit":
		return NotificationStandardRequestContentEventTypePayoutBatchSettlementIntransit, nil
	case "payout_batch_settlement_transferred":
		return NotificationStandardRequestContentEventTypePayoutBatchSettlementTransferred, nil
	case "payout_batch_settlement_funded":
		return NotificationStandardRequestContentEventTypePayoutBatchSettlementFunded, nil
	case "payout_batch_settlement_resolved":
		return NotificationStandardRequestContentEventTypePayoutBatchSettlementResolved, nil
	case "payout_batch_settlement_exception":
		return NotificationStandardRequestContentEventTypePayoutBatchSettlementException, nil
	case "payout_batch_settlement_achreturn":
		return NotificationStandardRequestContentEventTypePayoutBatchSettlementAchreturn, nil
	case "payout_batch_settlement_held":
		return NotificationStandardRequestContentEventTypePayoutBatchSettlementHeld, nil
	case "payout_batch_settlement_released":
		return NotificationStandardRequestContentEventTypePayoutBatchSettlementReleased, nil
	case "ApprovedPayment":
		return NotificationStandardRequestContentEventTypeApprovedPayment, nil
	case "AuthorizedPayment":
		return NotificationStandardRequestContentEventTypeAuthorizedPayment, nil
	case "DeclinedPayment":
		return NotificationStandardRequestContentEventTypeDeclinedPayment, nil
	case "OriginatedPayment":
		return NotificationStandardRequestContentEventTypeOriginatedPayment, nil
	case "SettledPayment":
		return NotificationStandardRequestContentEventTypeSettledPayment, nil
	case "SubscriptionCreated":
		return NotificationStandardRequestContentEventTypeSubscriptionCreated, nil
	case "SubscriptionUpdated":
		return NotificationStandardRequestContentEventTypeSubscriptionUpdated, nil
	case "SubscriptionCanceled":
		return NotificationStandardRequestContentEventTypeSubscriptionCanceled, nil
	case "SubscriptionCompleted":
		return NotificationStandardRequestContentEventTypeSubscriptionCompleted, nil
	case "FundedPayment":
		return NotificationStandardRequestContentEventTypeFundedPayment, nil
	case "VoidedPayment":
		return NotificationStandardRequestContentEventTypeVoidedPayment, nil
	case "RefundedPayment":
		return NotificationStandardRequestContentEventTypeRefundedPayment, nil
	case "HoldTransaction":
		return NotificationStandardRequestContentEventTypeHoldTransaction, nil
	case "ReleasedTransaction":
		return NotificationStandardRequestContentEventTypeReleasedTransaction, nil
	case "HoldBatch":
		return NotificationStandardRequestContentEventTypeHoldBatch, nil
	case "ReleasedBatch":
		return NotificationStandardRequestContentEventTypeReleasedBatch, nil
	case "TransferAdjusted":
		return NotificationStandardRequestContentEventTypeTransferAdjusted, nil
	case "TransferDisabledCreditFund":
		return NotificationStandardRequestContentEventTypeTransferDisabledCreditFund, nil
	case "TransferDisabledDebitFund":
		return NotificationStandardRequestContentEventTypeTransferDisabledDebitFund, nil
	case "TransferNotAvailableBalance":
		return NotificationStandardRequestContentEventTypeTransferNotAvailableBalance, nil
	case "TransferReadyforRetry":
		return NotificationStandardRequestContentEventTypeTransferReadyforRetry, nil
	case "TransferResolved":
		return NotificationStandardRequestContentEventTypeTransferResolved, nil
	case "TransferReturn":
		return NotificationStandardRequestContentEventTypeTransferReturn, nil
	case "TransferSuccess":
		return NotificationStandardRequestContentEventTypeTransferSuccess, nil
	case "TransferSuspended":
		return NotificationStandardRequestContentEventTypeTransferSuspended, nil
	case "TransferError":
		return NotificationStandardRequestContentEventTypeTransferError, nil
	case "SendReceipt":
		return NotificationStandardRequestContentEventTypeSendReceipt, nil
	case "RecoveredTransaction":
		return NotificationStandardRequestContentEventTypeRecoveredTransaction, nil
	case "CreatedApplication":
		return NotificationStandardRequestContentEventTypeCreatedApplication, nil
	case "ApprovedApplication":
		return NotificationStandardRequestContentEventTypeApprovedApplication, nil
	case "FailedBoardingApplication":
		return NotificationStandardRequestContentEventTypeFailedBoardingApplication, nil
	case "SubmittedApplication":
		return NotificationStandardRequestContentEventTypeSubmittedApplication, nil
	case "ActivatedMerchant":
		return NotificationStandardRequestContentEventTypeActivatedMerchant, nil
	case "ReceivedChargeBack":
		return NotificationStandardRequestContentEventTypeReceivedChargeBack, nil
	case "ChargebackUpdated":
		return NotificationStandardRequestContentEventTypeChargebackUpdated, nil
	case "ReceivedRetrieval":
		return NotificationStandardRequestContentEventTypeReceivedRetrieval, nil
	case "RetrievalUpdated":
		return NotificationStandardRequestContentEventTypeRetrievalUpdated, nil
	case "ReceivedAchReturn":
		return NotificationStandardRequestContentEventTypeReceivedAchReturn, nil
	case "HoldingApplication":
		return NotificationStandardRequestContentEventTypeHoldingApplication, nil
	case "DeclinedApplication":
		return NotificationStandardRequestContentEventTypeDeclinedApplication, nil
	case "BoardingApplication":
		return NotificationStandardRequestContentEventTypeBoardingApplication, nil
	case "PaypointMoved":
		return NotificationStandardRequestContentEventTypePaypointMoved, nil
	case "FraudAlert":
		return NotificationStandardRequestContentEventTypeFraudAlert, nil
	case "InvoiceSent":
		return NotificationStandardRequestContentEventTypeInvoiceSent, nil
	case "InvoicePaid":
		return NotificationStandardRequestContentEventTypeInvoicePaid, nil
	case "InvoiceCreated":
		return NotificationStandardRequestContentEventTypeInvoiceCreated, nil
	case "BillPaid":
		return NotificationStandardRequestContentEventTypeBillPaid, nil
	case "BillApproved":
		return NotificationStandardRequestContentEventTypeBillApproved, nil
	case "BillDisApproved":
		return NotificationStandardRequestContentEventTypeBillDisApproved, nil
	case "BillCanceled":
		return NotificationStandardRequestContentEventTypeBillCanceled, nil
	case "BillProcessing":
		return NotificationStandardRequestContentEventTypeBillProcessing, nil
	case "CardCreated":
		return NotificationStandardRequestContentEventTypeCardCreated, nil
	case "CardActivated":
		return NotificationStandardRequestContentEventTypeCardActivated, nil
	case "CardDeactivated":
		return NotificationStandardRequestContentEventTypeCardDeactivated, nil
	case "CardExpired":
		return NotificationStandardRequestContentEventTypeCardExpired, nil
	case "CardExpiring":
		return NotificationStandardRequestContentEventTypeCardExpiring, nil
	case "CardLimitUpdated":
		return NotificationStandardRequestContentEventTypeCardLimitUpdated, nil
	case "BatchClosed":
		return NotificationStandardRequestContentEventTypeBatchClosed, nil
	case "BatchNotClosed":
		return NotificationStandardRequestContentEventTypeBatchNotClosed, nil
	case "PayOutFunded":
		return NotificationStandardRequestContentEventTypePayOutFunded, nil
	case "PayOutProcessed":
		return NotificationStandardRequestContentEventTypePayOutProcessed, nil
	case "PayOutCanceled":
		return NotificationStandardRequestContentEventTypePayOutCanceled, nil
	case "PayOutPaid":
		return NotificationStandardRequestContentEventTypePayOutPaid, nil
	case "PayOutReturned":
		return NotificationStandardRequestContentEventTypePayOutReturned, nil
	case "PayoutSubscriptionCreated":
		return NotificationStandardRequestContentEventTypePayoutSubscriptionCreated, nil
	case "PayoutSubscriptionUpdated":
		return NotificationStandardRequestContentEventTypePayoutSubscriptionUpdated, nil
	case "PayoutSubscriptionCanceled":
		return NotificationStandardRequestContentEventTypePayoutSubscriptionCanceled, nil
	case "PayoutSubscriptionCompleted":
		return NotificationStandardRequestContentEventTypePayoutSubscriptionCompleted, nil
	case "PayoutSubscriptionReminder":
		return NotificationStandardRequestContentEventTypePayoutSubscriptionReminder, nil
	case "importFileReceived":
		return NotificationStandardRequestContentEventTypeImportFileReceived, nil
	case "importFileProcessed":
		return NotificationStandardRequestContentEventTypeImportFileProcessed, nil
	case "importFileError":
		return NotificationStandardRequestContentEventTypeImportFileError, nil
	case "exportFileSent":
		return NotificationStandardRequestContentEventTypeExportFileSent, nil
	case "exportFileError":
		return NotificationStandardRequestContentEventTypeExportFileError, nil
	case "UpdatedMerchant":
		return NotificationStandardRequestContentEventTypeUpdatedMerchant, nil
	case "Report":
		return NotificationStandardRequestContentEventTypeReport, nil
	case "FailedEmailNotification":
		return NotificationStandardRequestContentEventTypeFailedEmailNotification, nil
	case "FailedWebNotification":
		return NotificationStandardRequestContentEventTypeFailedWebNotification, nil
	case "FailedSMSNotification":
		return NotificationStandardRequestContentEventTypeFailedSmsNotification, nil
	case "UserPasswordExpiring":
		return NotificationStandardRequestContentEventTypeUserPasswordExpiring, nil
	case "UserPasswordExpired":
		return NotificationStandardRequestContentEventTypeUserPasswordExpired, nil
	case "TransactionNotFound":
		return NotificationStandardRequestContentEventTypeTransactionNotFound, nil
	case "SystemAlert":
		return NotificationStandardRequestContentEventTypeSystemAlert, nil
	}
	var t NotificationStandardRequestContentEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationStandardRequestContentEventType) Ptr() *NotificationStandardRequestContentEventType {
	return &n
}

type NotificationStandardRequestFrequency string

const (
	NotificationStandardRequestFrequencyOneTime        NotificationStandardRequestFrequency = "one-time"
	NotificationStandardRequestFrequencyUntilcancelled NotificationStandardRequestFrequency = "untilcancelled"
)

func NewNotificationStandardRequestFrequencyFromString(s string) (NotificationStandardRequestFrequency, error) {
	switch s {
	case "one-time":
		return NotificationStandardRequestFrequencyOneTime, nil
	case "untilcancelled":
		return NotificationStandardRequestFrequencyUntilcancelled, nil
	}
	var t NotificationStandardRequestFrequency
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationStandardRequestFrequency) Ptr() *NotificationStandardRequestFrequency {
	return &n
}

// Get near-instant notifications via email, SMS, or webhooks for important events like new payment disputes, merchant activations, fraud alerts, approved transactions, settlement history, vendor payouts, and more. Use webhooks with notifications to get real-time updates and automate operations based on key those key events. See [Notifications](/developers/developer-guides/notifications-and-webhooks-overview#notifications) for more.
type NotificationStandardRequestMethod string

const (
	NotificationStandardRequestMethodEmail NotificationStandardRequestMethod = "email"
	NotificationStandardRequestMethodSms   NotificationStandardRequestMethod = "sms"
	NotificationStandardRequestMethodWeb   NotificationStandardRequestMethod = "web"
)

func NewNotificationStandardRequestMethodFromString(s string) (NotificationStandardRequestMethod, error) {
	switch s {
	case "email":
		return NotificationStandardRequestMethodEmail, nil
	case "sms":
		return NotificationStandardRequestMethodSms, nil
	case "web":
		return NotificationStandardRequestMethodWeb, nil
	}
	var t NotificationStandardRequestMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationStandardRequestMethod) Ptr() *NotificationStandardRequestMethod {
	return &n
}

type PayabliApiResponseNotifications struct {
	// If `isSuccess` = true, `responseData` contains the notification identifier.
	//
	// If `isSuccess` = false, `responseData` contains the reason for the error.
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseCode   *Responsecode   `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	// When the request was successful, this contains the notification ID, or `nID` used to manage the notification.
	ResponseData *PayabliApiResponseNotificationsResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText ResponseText                                 `json:"responseText" url:"responseText"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponseNotifications) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponseNotifications) GetPageIdentifier() *PageIdentifier {
	if p == nil {
		return nil
	}
	return p.PageIdentifier
}

func (p *PayabliApiResponseNotifications) GetResponseCode() *Responsecode {
	if p == nil {
		return nil
	}
	return p.ResponseCode
}

func (p *PayabliApiResponseNotifications) GetResponseData() *PayabliApiResponseNotificationsResponseData {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponseNotifications) GetResponseText() ResponseText {
	if p == nil {
		return ""
	}
	return p.ResponseText
}

func (p *PayabliApiResponseNotifications) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponseNotifications) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponseNotifications
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponseNotifications(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponseNotifications) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// When the request was successful, this contains the notification ID, or
// `nID` used to manage the notification.
type PayabliApiResponseNotificationsResponseData struct {
	Integer int
	String  string

	typ string
}

func (p *PayabliApiResponseNotificationsResponseData) GetInteger() int {
	if p == nil {
		return 0
	}
	return p.Integer
}

func (p *PayabliApiResponseNotificationsResponseData) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PayabliApiResponseNotificationsResponseData) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		p.typ = "Integer"
		p.Integer = valueInteger
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PayabliApiResponseNotificationsResponseData) MarshalJSON() ([]byte, error) {
	if p.typ == "Integer" || p.Integer != 0 {
		return json.Marshal(p.Integer)
	}
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PayabliApiResponseNotificationsResponseDataVisitor interface {
	VisitInteger(int) error
	VisitString(string) error
}

func (p *PayabliApiResponseNotificationsResponseData) Accept(visitor PayabliApiResponseNotificationsResponseDataVisitor) error {
	if p.typ == "Integer" || p.Integer != 0 {
		return visitor.VisitInteger(p.Integer)
	}
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type AddNotificationRequest struct {
	// Create a standard webhook, email, or SMS notification.
	NotificationStandardRequest *NotificationStandardRequest
	// Create an auto-generated report.
	NotificationReportRequest *NotificationReportRequest

	typ string
}

func (a *AddNotificationRequest) GetNotificationStandardRequest() *NotificationStandardRequest {
	if a == nil {
		return nil
	}
	return a.NotificationStandardRequest
}

func (a *AddNotificationRequest) GetNotificationReportRequest() *NotificationReportRequest {
	if a == nil {
		return nil
	}
	return a.NotificationReportRequest
}

func (a *AddNotificationRequest) UnmarshalJSON(data []byte) error {
	valueNotificationStandardRequest := new(NotificationStandardRequest)
	if err := json.Unmarshal(data, &valueNotificationStandardRequest); err == nil {
		a.typ = "NotificationStandardRequest"
		a.NotificationStandardRequest = valueNotificationStandardRequest
		return nil
	}
	valueNotificationReportRequest := new(NotificationReportRequest)
	if err := json.Unmarshal(data, &valueNotificationReportRequest); err == nil {
		a.typ = "NotificationReportRequest"
		a.NotificationReportRequest = valueNotificationReportRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddNotificationRequest) MarshalJSON() ([]byte, error) {
	if a.typ == "NotificationStandardRequest" || a.NotificationStandardRequest != nil {
		return json.Marshal(a.NotificationStandardRequest)
	}
	if a.typ == "NotificationReportRequest" || a.NotificationReportRequest != nil {
		return json.Marshal(a.NotificationReportRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AddNotificationRequestVisitor interface {
	VisitNotificationStandardRequest(*NotificationStandardRequest) error
	VisitNotificationReportRequest(*NotificationReportRequest) error
}

func (a *AddNotificationRequest) Accept(visitor AddNotificationRequestVisitor) error {
	if a.typ == "NotificationStandardRequest" || a.NotificationStandardRequest != nil {
		return visitor.VisitNotificationStandardRequest(a.NotificationStandardRequest)
	}
	if a.typ == "NotificationReportRequest" || a.NotificationReportRequest != nil {
		return visitor.VisitNotificationReportRequest(a.NotificationReportRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type UpdateNotificationRequest struct {
	NotificationStandardRequest *NotificationStandardRequest
	NotificationReportRequest   *NotificationReportRequest

	typ string
}

func (u *UpdateNotificationRequest) GetNotificationStandardRequest() *NotificationStandardRequest {
	if u == nil {
		return nil
	}
	return u.NotificationStandardRequest
}

func (u *UpdateNotificationRequest) GetNotificationReportRequest() *NotificationReportRequest {
	if u == nil {
		return nil
	}
	return u.NotificationReportRequest
}

func (u *UpdateNotificationRequest) UnmarshalJSON(data []byte) error {
	valueNotificationStandardRequest := new(NotificationStandardRequest)
	if err := json.Unmarshal(data, &valueNotificationStandardRequest); err == nil {
		u.typ = "NotificationStandardRequest"
		u.NotificationStandardRequest = valueNotificationStandardRequest
		return nil
	}
	valueNotificationReportRequest := new(NotificationReportRequest)
	if err := json.Unmarshal(data, &valueNotificationReportRequest); err == nil {
		u.typ = "NotificationReportRequest"
		u.NotificationReportRequest = valueNotificationReportRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateNotificationRequest) MarshalJSON() ([]byte, error) {
	if u.typ == "NotificationStandardRequest" || u.NotificationStandardRequest != nil {
		return json.Marshal(u.NotificationStandardRequest)
	}
	if u.typ == "NotificationReportRequest" || u.NotificationReportRequest != nil {
		return json.Marshal(u.NotificationReportRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateNotificationRequestVisitor interface {
	VisitNotificationStandardRequest(*NotificationStandardRequest) error
	VisitNotificationReportRequest(*NotificationReportRequest) error
}

func (u *UpdateNotificationRequest) Accept(visitor UpdateNotificationRequestVisitor) error {
	if u.typ == "NotificationStandardRequest" || u.NotificationStandardRequest != nil {
		return visitor.VisitNotificationStandardRequest(u.NotificationStandardRequest)
	}
	if u.typ == "NotificationReportRequest" || u.NotificationReportRequest != nil {
		return visitor.VisitNotificationReportRequest(u.NotificationReportRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}
