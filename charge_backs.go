// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	time "time"
)

type ResponseChargeBack struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	// Array of attached files to response.
	Attachments *Attachments `json:"attachments,omitempty" url:"-"`
	// Email of response submitter.
	ContactEmail *Email `json:"contactEmail,omitempty" url:"-"`
	// Name of response submitter
	ContactName *string `json:"contactName,omitempty" url:"-"`
	// Response notes
	Notes *string `json:"notes,omitempty" url:"-"`
}

type ChargeBackResponse struct {
	// Object with attached files to response
	Attachments *BoardingApplicationAttachments `json:"attachments,omitempty" url:"attachments,omitempty"`
	// Email of response submitter.
	ContactEmail *Email `json:"contactEmail,omitempty" url:"contactEmail,omitempty"`
	// Name of response submitter
	ContactName *string `json:"contactName,omitempty" url:"contactName,omitempty"`
	// Timestamp when response was submitted, in UTC.
	CreatedAt *CreatedAt `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	// Chargeback response identifier
	Id *int64 `json:"id,omitempty" url:"id,omitempty"`
	// Response notes
	Notes *string `json:"notes,omitempty" url:"notes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ChargeBackResponse) GetAttachments() *BoardingApplicationAttachments {
	if c == nil {
		return nil
	}
	return c.Attachments
}

func (c *ChargeBackResponse) GetContactEmail() *Email {
	if c == nil {
		return nil
	}
	return c.ContactEmail
}

func (c *ChargeBackResponse) GetContactName() *string {
	if c == nil {
		return nil
	}
	return c.ContactName
}

func (c *ChargeBackResponse) GetCreatedAt() *CreatedAt {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *ChargeBackResponse) GetId() *int64 {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ChargeBackResponse) GetNotes() *string {
	if c == nil {
		return nil
	}
	return c.Notes
}

func (c *ChargeBackResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChargeBackResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ChargeBackResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChargeBackResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChargeBackResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChargebackQueryRecords struct {
	AccountType *Accounttype `json:"accountType,omitempty" url:"accountType,omitempty"`
	// Number of case assigned to the chargeback.
	CaseNumber *string `json:"caseNumber,omitempty" url:"caseNumber,omitempty"`
	// Date of chargeback in format YYYY-MM-DD or MM/DD/YYYY.
	ChargebackDate *time.Time `json:"chargebackDate,omitempty" url:"chargebackDate,omitempty"`
	// Timestamp when the register was created, in UTC.
	CreatedAt *CreatedAt                 `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	Customer  *QueryTransactionPayorData `json:"customer,omitempty" url:"customer,omitempty"`
	// Identifier of chargeback or return.
	Id *int64 `json:"id,omitempty" url:"id,omitempty"`
	// Last 4 digits of card or bank account involved in chargeback or return.
	LastFour string `json:"lastFour" url:"lastFour"`
	// Type of payment vehicle: **ach** or **card**.
	Method string `json:"method" url:"method"`
	// Net amount in chargeback or ACH return.
	NetAmount     *Netamountnullable `json:"netAmount,omitempty" url:"netAmount,omitempty"`
	OrderId       *OrderId           `json:"orderId,omitempty" url:"orderId,omitempty"`
	ParentOrgName *OrgParentName     `json:"parentOrgName,omitempty" url:"parentOrgName,omitempty"`
	PaymentData   *QueryPaymentData  `json:"paymentData,omitempty" url:"paymentData,omitempty"`
	// ReferenceId of the transaction in Payabli.
	PaymentId *string `json:"PaymentId,omitempty" url:"PaymentId,omitempty"`
	// The paypoint's DBA name.
	PaypointDbaname *Dbaname `json:"paypointDbaname,omitempty" url:"paypointDbaname,omitempty"`
	// The paypoint's entryname.
	PaypointEntryname *Entrypointfield `json:"paypointEntryname,omitempty" url:"paypointEntryname,omitempty"`
	// The paypoint's legal name.
	PaypointLegalname *Legalname `json:"paypointLegalname,omitempty" url:"paypointLegalname,omitempty"`
	// Text describing the chargeback or ACH return reason.
	Reason *string `json:"reason,omitempty" url:"reason,omitempty"`
	// R code for returned ACH or custom code identifying the reason.
	ReasonCode *string `json:"reasonCode,omitempty" url:"reasonCode,omitempty"`
	// Processor reference number to the chargeback.
	ReferenceNumber *string `json:"referenceNumber,omitempty" url:"referenceNumber,omitempty"`
	// Chargeback response records.
	Responses []*ChargeBackResponse `json:"responses,omitempty" url:"responses,omitempty"`
	// Status for chargeback or ACH return
	//
	// - 0: Open (chargebacks only)
	// - 1: Pending (chargebacks only)
	// - 2: Closed-Won (chargebacks only)
	// - 3: Closed-Lost (chargebacks only)
	// - 4: ACH Return (ACH only)
	// - 5: ACH Dispute, Not Authorized (ACH only)
	Status          *int                     `json:"status,omitempty" url:"status,omitempty"`
	Transaction     *TransactionQueryRecords `json:"transaction,omitempty" url:"transaction,omitempty"`
	TransactionTime *TransactionTime         `json:"transactionTime,omitempty" url:"transactionTime,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ChargebackQueryRecords) GetAccountType() *Accounttype {
	if c == nil {
		return nil
	}
	return c.AccountType
}

func (c *ChargebackQueryRecords) GetCaseNumber() *string {
	if c == nil {
		return nil
	}
	return c.CaseNumber
}

func (c *ChargebackQueryRecords) GetChargebackDate() *time.Time {
	if c == nil {
		return nil
	}
	return c.ChargebackDate
}

func (c *ChargebackQueryRecords) GetCreatedAt() *CreatedAt {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *ChargebackQueryRecords) GetCustomer() *QueryTransactionPayorData {
	if c == nil {
		return nil
	}
	return c.Customer
}

func (c *ChargebackQueryRecords) GetId() *int64 {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ChargebackQueryRecords) GetLastFour() string {
	if c == nil {
		return ""
	}
	return c.LastFour
}

func (c *ChargebackQueryRecords) GetMethod() string {
	if c == nil {
		return ""
	}
	return c.Method
}

func (c *ChargebackQueryRecords) GetNetAmount() *Netamountnullable {
	if c == nil {
		return nil
	}
	return c.NetAmount
}

func (c *ChargebackQueryRecords) GetOrderId() *OrderId {
	if c == nil {
		return nil
	}
	return c.OrderId
}

func (c *ChargebackQueryRecords) GetParentOrgName() *OrgParentName {
	if c == nil {
		return nil
	}
	return c.ParentOrgName
}

func (c *ChargebackQueryRecords) GetPaymentData() *QueryPaymentData {
	if c == nil {
		return nil
	}
	return c.PaymentData
}

func (c *ChargebackQueryRecords) GetPaymentId() *string {
	if c == nil {
		return nil
	}
	return c.PaymentId
}

func (c *ChargebackQueryRecords) GetPaypointDbaname() *Dbaname {
	if c == nil {
		return nil
	}
	return c.PaypointDbaname
}

func (c *ChargebackQueryRecords) GetPaypointEntryname() *Entrypointfield {
	if c == nil {
		return nil
	}
	return c.PaypointEntryname
}

func (c *ChargebackQueryRecords) GetPaypointLegalname() *Legalname {
	if c == nil {
		return nil
	}
	return c.PaypointLegalname
}

func (c *ChargebackQueryRecords) GetReason() *string {
	if c == nil {
		return nil
	}
	return c.Reason
}

func (c *ChargebackQueryRecords) GetReasonCode() *string {
	if c == nil {
		return nil
	}
	return c.ReasonCode
}

func (c *ChargebackQueryRecords) GetReferenceNumber() *string {
	if c == nil {
		return nil
	}
	return c.ReferenceNumber
}

func (c *ChargebackQueryRecords) GetResponses() []*ChargeBackResponse {
	if c == nil {
		return nil
	}
	return c.Responses
}

func (c *ChargebackQueryRecords) GetStatus() *int {
	if c == nil {
		return nil
	}
	return c.Status
}

func (c *ChargebackQueryRecords) GetTransaction() *TransactionQueryRecords {
	if c == nil {
		return nil
	}
	return c.Transaction
}

func (c *ChargebackQueryRecords) GetTransactionTime() *TransactionTime {
	if c == nil {
		return nil
	}
	return c.TransactionTime
}

func (c *ChargebackQueryRecords) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChargebackQueryRecords) UnmarshalJSON(data []byte) error {
	type embed ChargebackQueryRecords
	var unmarshaler = struct {
		embed
		ChargebackDate *internal.DateTime `json:"chargebackDate,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChargebackQueryRecords(unmarshaler.embed)
	c.ChargebackDate = unmarshaler.ChargebackDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChargebackQueryRecords) MarshalJSON() ([]byte, error) {
	type embed ChargebackQueryRecords
	var marshaler = struct {
		embed
		ChargebackDate *internal.DateTime `json:"chargebackDate,omitempty"`
	}{
		embed:          embed(*c),
		ChargebackDate: internal.NewOptionalDateTime(c.ChargebackDate),
	}
	return json.Marshal(marshaler)
}

func (c *ChargebackQueryRecords) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type AddResponseResponse struct {
	IsSuccess    *IsSuccess    `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`
	// If `isSuccess` = true, this contains the chargeback identifier. If `isSuccess` = false, this contains the reason for the error.
	ResponseData *int `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddResponseResponse) GetIsSuccess() *IsSuccess {
	if a == nil {
		return nil
	}
	return a.IsSuccess
}

func (a *AddResponseResponse) GetResponseText() *ResponseText {
	if a == nil {
		return nil
	}
	return a.ResponseText
}

func (a *AddResponseResponse) GetResponseData() *int {
	if a == nil {
		return nil
	}
	return a.ResponseData
}

func (a *AddResponseResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddResponseResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddResponseResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddResponseResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddResponseResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}
