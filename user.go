// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
)

type UserAuthResetRequest struct {
	// The user's email address.
	Email *Email `json:"email,omitempty" url:"-"`
	// Identifier for entrypoint originating the request (used by front-end apps)
	Entry *string `json:"entry,omitempty" url:"-"`
	// Type of entry identifier: 0 - partner, 2 - paypoint. This is used by front-end apps, required if an Entry is indicated.
	EntryType *int `json:"entryType,omitempty" url:"-"`
}

type UserAuthRequest struct {
	Email *Email `json:"email,omitempty" url:"-"`
	// Identifier for entry point originating the request (used by front-end apps)
	Entry *string `json:"entry,omitempty" url:"-"`
	// Type of entry identifier: 0 - partner, 2 - paypoint. This is used by front-end apps, required if an Entry is indicated.
	EntryType   *int    `json:"entryType,omitempty" url:"-"`
	Psw         *string `json:"psw,omitempty" url:"-"`
	UserId      *int64  `json:"userId,omitempty" url:"-"`
	UserTokenId *string `json:"userTokenId,omitempty" url:"-"`
}

type UserAuthPswResetRequest struct {
	// New User password
	Psw *string `json:"psw,omitempty" url:"-"`
}

type GetUserRequest struct {
	// The entrypoint identifier.
	Entry *string `json:"-" url:"entry,omitempty"`
	// Entry level: 0 - partner, 2 - paypoint
	Level *int `json:"-" url:"level,omitempty"`
}

type MfaValidationData struct {
	MfaCode           *string            `json:"mfaCode,omitempty" url:"-"`
	MfaValidationCode *MfaValidationCode `json:"mfaValidationCode,omitempty" url:"-"`
}

type MfaData struct {
	Mfa     *bool    `json:"mfa,omitempty" url:"mfa,omitempty"`
	MfaMode *MfaMode `json:"mfaMode,omitempty" url:"mfaMode,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MfaData) GetMfa() *bool {
	if m == nil {
		return nil
	}
	return m.Mfa
}

func (m *MfaData) GetMfaMode() *MfaMode {
	if m == nil {
		return nil
	}
	return m.MfaMode
}

func (m *MfaData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MfaData) UnmarshalJSON(data []byte) error {
	type unmarshaler MfaData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MfaData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MfaData) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// The validation code for multi-factor authentication, typically a hash or similar encrypted format.
type MfaValidationCode = string

type OrgScope struct {
	OrgId   *Orgid   `json:"orgId,omitempty" url:"orgId,omitempty"`
	OrgType *Orgtype `json:"orgType,omitempty" url:"orgType,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrgScope) GetOrgId() *Orgid {
	if o == nil {
		return nil
	}
	return o.OrgId
}

func (o *OrgScope) GetOrgType() *Orgtype {
	if o == nil {
		return nil
	}
	return o.OrgType
}

func (o *OrgScope) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrgScope) UnmarshalJSON(data []byte) error {
	type unmarshaler OrgScope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrgScope(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrgScope) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type PayabliApiResponseMfaBasic struct {
	IsSuccess *IsSuccess `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	Mfa       *Mfa       `json:"mfa,omitempty" url:"mfa,omitempty"`
	// The mode of multi-factor authentication used.
	MfaMode           *string            `json:"mfaMode,omitempty" url:"mfaMode,omitempty"`
	MfaValidationCode *MfaValidationCode `json:"mfaValidationCode,omitempty" url:"mfaValidationCode,omitempty"`
	// Data returned by the response, masked for security.
	ResponseData *string       `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponseMfaBasic) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponseMfaBasic) GetMfa() *Mfa {
	if p == nil {
		return nil
	}
	return p.Mfa
}

func (p *PayabliApiResponseMfaBasic) GetMfaMode() *string {
	if p == nil {
		return nil
	}
	return p.MfaMode
}

func (p *PayabliApiResponseMfaBasic) GetMfaValidationCode() *MfaValidationCode {
	if p == nil {
		return nil
	}
	return p.MfaValidationCode
}

func (p *PayabliApiResponseMfaBasic) GetResponseData() *string {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponseMfaBasic) GetResponseText() *ResponseText {
	if p == nil {
		return nil
	}
	return p.ResponseText
}

func (p *PayabliApiResponseMfaBasic) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponseMfaBasic) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponseMfaBasic
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponseMfaBasic(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponseMfaBasic) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayabliApiResponseUserMfa struct {
	InactiveTokenTime *int                   `json:"inactiveTokenTime,omitempty" url:"inactiveTokenTime,omitempty"`
	IsSuccess         *IsSuccess             `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	Remaining         *int                   `json:"remaining,omitempty" url:"remaining,omitempty"`
	ResponseData      *Responsedatanonobject `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText      *ResponseText          `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponseUserMfa) GetInactiveTokenTime() *int {
	if p == nil {
		return nil
	}
	return p.InactiveTokenTime
}

func (p *PayabliApiResponseUserMfa) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponseUserMfa) GetRemaining() *int {
	if p == nil {
		return nil
	}
	return p.Remaining
}

func (p *PayabliApiResponseUserMfa) GetResponseData() *Responsedatanonobject {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponseUserMfa) GetResponseText() *ResponseText {
	if p == nil {
		return nil
	}
	return p.ResponseText
}

func (p *PayabliApiResponseUserMfa) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponseUserMfa) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponseUserMfa
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponseUserMfa(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponseUserMfa) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type UserData struct {
	Access         []*UsrAccess    `json:"access,omitempty" url:"access,omitempty"`
	AdditionalData *AdditionalData `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	// The user's email address.
	Email    *Email    `json:"email,omitempty" url:"email,omitempty"`
	Language *Language `json:"language,omitempty" url:"language,omitempty"`
	MfaData  *MfaData  `json:"mfaData,omitempty" url:"mfaData,omitempty"`
	Name     *NameUser `json:"name,omitempty" url:"name,omitempty"`
	// The user's phone number.
	Phone     *PhoneNumber `json:"phone,omitempty" url:"phone,omitempty"`
	Pwd       *string      `json:"pwd,omitempty" url:"pwd,omitempty"`
	Scope     []*OrgScope  `json:"scope,omitempty" url:"scope,omitempty"`
	TimeZone  *Timezone    `json:"timeZone,omitempty" url:"timeZone,omitempty"`
	UsrStatus *UsrStatus   `json:"usrStatus,omitempty" url:"usrStatus,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserData) GetAccess() []*UsrAccess {
	if u == nil {
		return nil
	}
	return u.Access
}

func (u *UserData) GetAdditionalData() *AdditionalData {
	if u == nil {
		return nil
	}
	return u.AdditionalData
}

func (u *UserData) GetEmail() *Email {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UserData) GetLanguage() *Language {
	if u == nil {
		return nil
	}
	return u.Language
}

func (u *UserData) GetMfaData() *MfaData {
	if u == nil {
		return nil
	}
	return u.MfaData
}

func (u *UserData) GetName() *NameUser {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UserData) GetPhone() *PhoneNumber {
	if u == nil {
		return nil
	}
	return u.Phone
}

func (u *UserData) GetPwd() *string {
	if u == nil {
		return nil
	}
	return u.Pwd
}

func (u *UserData) GetScope() []*OrgScope {
	if u == nil {
		return nil
	}
	return u.Scope
}

func (u *UserData) GetTimeZone() *Timezone {
	if u == nil {
		return nil
	}
	return u.TimeZone
}

func (u *UserData) GetUsrStatus() *UsrStatus {
	if u == nil {
		return nil
	}
	return u.UsrStatus
}

func (u *UserData) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserData) UnmarshalJSON(data []byte) error {
	type unmarshaler UserData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserData) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type AddUserResponse struct {
	IsSuccess *IsSuccess `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	// The response data.
	ResponseData *string       `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddUserResponse) GetIsSuccess() *IsSuccess {
	if a == nil {
		return nil
	}
	return a.IsSuccess
}

func (a *AddUserResponse) GetResponseData() *string {
	if a == nil {
		return nil
	}
	return a.ResponseData
}

func (a *AddUserResponse) GetResponseText() *ResponseText {
	if a == nil {
		return nil
	}
	return a.ResponseText
}

func (a *AddUserResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddUserResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthResetUserResponse struct {
	IsSuccess    *IsSuccess    `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthResetUserResponse) GetIsSuccess() *IsSuccess {
	if a == nil {
		return nil
	}
	return a.IsSuccess
}

func (a *AuthResetUserResponse) GetResponseText() *ResponseText {
	if a == nil {
		return nil
	}
	return a.ResponseText
}

func (a *AuthResetUserResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthResetUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthResetUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthResetUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthResetUserResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ChangePswUserResponse struct {
	IsSuccess    *IsSuccess    `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ChangePswUserResponse) GetIsSuccess() *IsSuccess {
	if c == nil {
		return nil
	}
	return c.IsSuccess
}

func (c *ChangePswUserResponse) GetResponseText() *ResponseText {
	if c == nil {
		return nil
	}
	return c.ResponseText
}

func (c *ChangePswUserResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChangePswUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ChangePswUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChangePswUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChangePswUserResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteUserResponse struct {
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteUserResponse) GetResponseText() *ResponseText {
	if d == nil {
		return nil
	}
	return d.ResponseText
}

func (d *DeleteUserResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteUserResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EditMfaUserResponse struct {
	IsSuccess    *IsSuccess    `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EditMfaUserResponse) GetIsSuccess() *IsSuccess {
	if e == nil {
		return nil
	}
	return e.IsSuccess
}

func (e *EditMfaUserResponse) GetResponseText() *ResponseText {
	if e == nil {
		return nil
	}
	return e.ResponseText
}

func (e *EditMfaUserResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EditMfaUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EditMfaUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EditMfaUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EditMfaUserResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type LogoutUserResponse struct {
	IsSuccess    *IsSuccess    `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LogoutUserResponse) GetIsSuccess() *IsSuccess {
	if l == nil {
		return nil
	}
	return l.IsSuccess
}

func (l *LogoutUserResponse) GetResponseText() *ResponseText {
	if l == nil {
		return nil
	}
	return l.ResponseText
}

func (l *LogoutUserResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LogoutUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LogoutUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LogoutUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LogoutUserResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
