// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	time "time"
)

type AddBillRequest struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	Body           *BillOutData    `json:"-" url:"-"`
}

func (a *AddBillRequest) UnmarshalJSON(data []byte) error {
	body := new(BillOutData)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	a.Body = body
	return nil
}

func (a *AddBillRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(a.Body)
}

type ListBillsRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response isn't filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `frequency` (`in`, `nin`, `ne`, `eq`)
	// - `method` (`in`, `nin`, `eq`, `ne`)
	// - `event` (`in`, `nin`, `eq`, `ne`)
	// - `target` (`ct`, `nct`, `eq`, `ne`)
	// - `status` (`eq`, `ne`)
	// - `approvalUserId` (`eq`, `ne`)
	// - `parentOrgId` (`ne`, `eq`, `nin`, `in`)
	// - `approvalUserEmail` (`eq`, `ne`)
	// - `scheduleId` (`ne`, `eq`)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array
	// - `nin` => not inside array
	//
	// List of parameters accepted:
	// - `limitRecord` : max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord` : initial record in query
	// Example: `totalAmount(gt)=20` returns all records with a `totalAmount` that's greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListBillsOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response isn't filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `frequency` (in, nin, ne, eq)
	// - `method` (in, nin, eq, ne)
	// - `event` (in, nin, eq, ne)
	// - `target` (ct, nct, eq, ne)
	// - `status` (eq, ne)
	// - `parentOrgId` (ne, eq, nin, in)
	// - `approvalUserId` (eq, ne)
	// - `approvalUserEmail` (eq, ne)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: totalAmount(gt)=20 return all records with totalAmount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type SendToApprovalBillRequest struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	// Automatically create the target user for approval if they don't exist.
	AutocreateUser *bool    `json:"-" url:"autocreateUser,omitempty"`
	Body           []string `json:"-" url:"-"`
}

func (s *SendToApprovalBillRequest) UnmarshalJSON(data []byte) error {
	var body []string
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	s.Body = body
	return nil
}

func (s *SendToApprovalBillRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.Body)
}

type SetApprovedBillRequest struct {
	// Email or username of user modifying approval status.
	Email *string `json:"-" url:"email,omitempty"`
}

type DeleteAttachedFromBillRequest struct {
	// When `true`, the request returns the file content as a Base64-encoded string.
	ReturnObject *bool `json:"-" url:"returnObject,omitempty"`
}

type GetAttachedFromBillRequest struct {
	// When `true`, the request returns the file content as a Base64-encoded string.
	ReturnObject *bool `json:"-" url:"returnObject,omitempty"`
}

// Custom dictionary of key:value pairs. You can use this field to store any data related to the object or for your system.
//
// ```json
//
//	{
//	  "additionalData": {
//	    "key1": "value1",
//	    "key2": "value2",
//	    "key3": "value3"
//	  }
//	}
//
// ```
type AdditionalDataMap = map[string]string

// Approvals associated with the bill.
type BillApprovals = []*BillQueryRecord2BillApprovalsItem

type BillQueryRecord2 struct {
	AccountingField1 *AccountingField `json:"AccountingField1,omitempty" url:"AccountingField1,omitempty"`
	AccountingField2 *AccountingField `json:"AccountingField2,omitempty" url:"AccountingField2,omitempty"`
	// Additional data associated with the bill.
	AdditionalData map[string]string `json:"AdditionalData,omitempty" url:"AdditionalData,omitempty"`
	// Batch number associated with the bill.
	BatchNumber   *string                              `json:"BatchNumber,omitempty" url:"BatchNumber,omitempty"`
	BillApprovals []*BillQueryRecord2BillApprovalsItem `json:"billApprovals,omitempty" url:"billApprovals,omitempty"`
	// Bill creation date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
	BillDate *Datenullable `json:"BillDate,omitempty" url:"BillDate,omitempty"`
	// Events associated with the bill.
	BillEvents []*GeneralEvents `json:"billEvents,omitempty" url:"billEvents,omitempty"`
	// Array of items included in the bill.
	BillItems []*BillItem `json:"BillItems,omitempty" url:"BillItems,omitempty"`
	// Bill number.
	BillNumber *string `json:"BillNumber,omitempty" url:"BillNumber,omitempty"`
	// Additional comments on the bill.
	Comments *string `json:"Comments,omitempty" url:"Comments,omitempty"`
	// Timestamp of when bill was created, in UTC.
	CreatedAt *CreatedAt `json:"CreatedAt,omitempty" url:"CreatedAt,omitempty"`
	// Discount amount applied to the bill.
	Discount *float64 `json:"Discount,omitempty" url:"Discount,omitempty"`
	// Reference to documents associated with the bill.
	DocumentsRef *string `json:"DocumentsRef,omitempty" url:"DocumentsRef,omitempty"`
	// Bill due date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
	DueDate *Datenullable `json:"DueDate,omitempty" url:"DueDate,omitempty"`
	// End date for the bill.
	EndDate *Datenullable `json:"EndDate,omitempty" url:"EndDate,omitempty"`
	// Entity identifier associated with the bill.
	EntityId           *string             `json:"EntityID,omitempty" url:"EntityID,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// Frequency for scheduled bills. Applied only in `Mode` = 1.
	Frequency *Frequency `json:"Frequency,omitempty" url:"Frequency,omitempty"`
	// Identifier of the bill.
	IdBill *int64 `json:"IdBill,omitempty" url:"IdBill,omitempty"`
	// Timestamp of when bill was last updated, in UTC.
	LastUpdated *DatetimeNullable `json:"LastUpdated,omitempty" url:"LastUpdated,omitempty"`
	// Lot number associated with the bill.
	LotNumber *string `json:"LotNumber,omitempty" url:"LotNumber,omitempty"`
	// Bill mode: value `0` for single/one-time bills, `1` for scheduled bills.
	Mode *int `json:"Mode,omitempty" url:"Mode,omitempty"`
	// Net amount of the bill.
	NetAmount *float64 `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	// Parent organization identifier.
	ParentOrgId   *int64           `json:"ParentOrgId,omitempty" url:"ParentOrgId,omitempty"`
	ParentOrgName *OrgParentName   `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	PaymentId     *PaymentIdString `json:"PaymentId,omitempty" url:"PaymentId,omitempty"`
	// Preferred payment method used.
	PaymentMethod *BillQueryRecord2PaymentMethod `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	// Paylink identifier associated with the bill.
	PaylinkId *string `json:"paylinkId,omitempty" url:"paylinkId,omitempty"`
	// The paypoint's DBA name.
	PaypointDbaname *Dbaname `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// Entry name of the paypoint.
	PaypointEntryname *string `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	// The paypoint's legal name.
	PaypointLegalname *Legalname `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// Source of the bill.
	Source *string     `json:"Source,omitempty" url:"Source,omitempty"`
	Status *Billstatus `json:"Status,omitempty" url:"Status,omitempty"`
	// The payment terms for invoice. If no terms were defined initially, then response data for this field will default to `N30`.
	Terms *Terms `json:"Terms,omitempty" url:"Terms,omitempty"`
	// Total amount of the bill including taxes and fees.
	TotalAmount *float64 `json:"TotalAmount,omitempty" url:"TotalAmount,omitempty"`
	// MoneyOut transaction associated to the bill.
	Transaction *TransactionOutQueryRecord `json:"Transaction,omitempty" url:"Transaction,omitempty"`
	Vendor      *VendorOutData             `json:"Vendor,omitempty" url:"Vendor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillQueryRecord2) GetAccountingField1() *AccountingField {
	if b == nil {
		return nil
	}
	return b.AccountingField1
}

func (b *BillQueryRecord2) GetAccountingField2() *AccountingField {
	if b == nil {
		return nil
	}
	return b.AccountingField2
}

func (b *BillQueryRecord2) GetAdditionalData() map[string]string {
	if b == nil {
		return nil
	}
	return b.AdditionalData
}

func (b *BillQueryRecord2) GetBatchNumber() *string {
	if b == nil {
		return nil
	}
	return b.BatchNumber
}

func (b *BillQueryRecord2) GetBillApprovals() []*BillQueryRecord2BillApprovalsItem {
	if b == nil {
		return nil
	}
	return b.BillApprovals
}

func (b *BillQueryRecord2) GetBillDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.BillDate
}

func (b *BillQueryRecord2) GetBillEvents() []*GeneralEvents {
	if b == nil {
		return nil
	}
	return b.BillEvents
}

func (b *BillQueryRecord2) GetBillItems() []*BillItem {
	if b == nil {
		return nil
	}
	return b.BillItems
}

func (b *BillQueryRecord2) GetBillNumber() *string {
	if b == nil {
		return nil
	}
	return b.BillNumber
}

func (b *BillQueryRecord2) GetComments() *string {
	if b == nil {
		return nil
	}
	return b.Comments
}

func (b *BillQueryRecord2) GetCreatedAt() *CreatedAt {
	if b == nil {
		return nil
	}
	return b.CreatedAt
}

func (b *BillQueryRecord2) GetDiscount() *float64 {
	if b == nil {
		return nil
	}
	return b.Discount
}

func (b *BillQueryRecord2) GetDocumentsRef() *string {
	if b == nil {
		return nil
	}
	return b.DocumentsRef
}

func (b *BillQueryRecord2) GetDueDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.DueDate
}

func (b *BillQueryRecord2) GetEndDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.EndDate
}

func (b *BillQueryRecord2) GetEntityId() *string {
	if b == nil {
		return nil
	}
	return b.EntityId
}

func (b *BillQueryRecord2) GetExternalPaypointId() *ExternalPaypointId {
	if b == nil {
		return nil
	}
	return b.ExternalPaypointId
}

func (b *BillQueryRecord2) GetFrequency() *Frequency {
	if b == nil {
		return nil
	}
	return b.Frequency
}

func (b *BillQueryRecord2) GetIdBill() *int64 {
	if b == nil {
		return nil
	}
	return b.IdBill
}

func (b *BillQueryRecord2) GetLastUpdated() *DatetimeNullable {
	if b == nil {
		return nil
	}
	return b.LastUpdated
}

func (b *BillQueryRecord2) GetLotNumber() *string {
	if b == nil {
		return nil
	}
	return b.LotNumber
}

func (b *BillQueryRecord2) GetMode() *int {
	if b == nil {
		return nil
	}
	return b.Mode
}

func (b *BillQueryRecord2) GetNetAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.NetAmount
}

func (b *BillQueryRecord2) GetParentOrgId() *int64 {
	if b == nil {
		return nil
	}
	return b.ParentOrgId
}

func (b *BillQueryRecord2) GetParentOrgName() *OrgParentName {
	if b == nil {
		return nil
	}
	return b.ParentOrgName
}

func (b *BillQueryRecord2) GetPaymentId() *PaymentIdString {
	if b == nil {
		return nil
	}
	return b.PaymentId
}

func (b *BillQueryRecord2) GetPaymentMethod() *BillQueryRecord2PaymentMethod {
	if b == nil {
		return nil
	}
	return b.PaymentMethod
}

func (b *BillQueryRecord2) GetPaylinkId() *string {
	if b == nil {
		return nil
	}
	return b.PaylinkId
}

func (b *BillQueryRecord2) GetPaypointDbaname() *Dbaname {
	if b == nil {
		return nil
	}
	return b.PaypointDbaname
}

func (b *BillQueryRecord2) GetPaypointEntryname() *string {
	if b == nil {
		return nil
	}
	return b.PaypointEntryname
}

func (b *BillQueryRecord2) GetPaypointLegalname() *Legalname {
	if b == nil {
		return nil
	}
	return b.PaypointLegalname
}

func (b *BillQueryRecord2) GetSource() *string {
	if b == nil {
		return nil
	}
	return b.Source
}

func (b *BillQueryRecord2) GetStatus() *Billstatus {
	if b == nil {
		return nil
	}
	return b.Status
}

func (b *BillQueryRecord2) GetTerms() *Terms {
	if b == nil {
		return nil
	}
	return b.Terms
}

func (b *BillQueryRecord2) GetTotalAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.TotalAmount
}

func (b *BillQueryRecord2) GetTransaction() *TransactionOutQueryRecord {
	if b == nil {
		return nil
	}
	return b.Transaction
}

func (b *BillQueryRecord2) GetVendor() *VendorOutData {
	if b == nil {
		return nil
	}
	return b.Vendor
}

func (b *BillQueryRecord2) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillQueryRecord2) UnmarshalJSON(data []byte) error {
	type unmarshaler BillQueryRecord2
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillQueryRecord2(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillQueryRecord2) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillQueryRecord2BillApprovalsItem struct {
	// Indicates whether the bill has been approved. `0` is false, and `1` is true.
	Approved *int `json:"approved,omitempty" url:"approved,omitempty"`
	// Timestamp of when the approval was made, in UTC.
	ApprovedTime *DatetimeNullable `json:"approvedTime,omitempty" url:"approvedTime,omitempty"`
	// Additional comments on the approval.
	Comments *string `json:"comments,omitempty" url:"comments,omitempty"`
	// The approving user's email address.
	Email *Email `json:"email,omitempty" url:"email,omitempty"`
	// The approving user's ID.
	Id *int64 `json:"Id,omitempty" url:"Id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillQueryRecord2BillApprovalsItem) GetApproved() *int {
	if b == nil {
		return nil
	}
	return b.Approved
}

func (b *BillQueryRecord2BillApprovalsItem) GetApprovedTime() *DatetimeNullable {
	if b == nil {
		return nil
	}
	return b.ApprovedTime
}

func (b *BillQueryRecord2BillApprovalsItem) GetComments() *string {
	if b == nil {
		return nil
	}
	return b.Comments
}

func (b *BillQueryRecord2BillApprovalsItem) GetEmail() *Email {
	if b == nil {
		return nil
	}
	return b.Email
}

func (b *BillQueryRecord2BillApprovalsItem) GetId() *int64 {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *BillQueryRecord2BillApprovalsItem) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillQueryRecord2BillApprovalsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler BillQueryRecord2BillApprovalsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillQueryRecord2BillApprovalsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillQueryRecord2BillApprovalsItem) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Preferred payment method used.
type BillQueryRecord2PaymentMethod string

const (
	BillQueryRecord2PaymentMethodVcard   BillQueryRecord2PaymentMethod = "vcard"
	BillQueryRecord2PaymentMethodAch     BillQueryRecord2PaymentMethod = "ach"
	BillQueryRecord2PaymentMethodCheck   BillQueryRecord2PaymentMethod = "check"
	BillQueryRecord2PaymentMethodCard    BillQueryRecord2PaymentMethod = "card"
	BillQueryRecord2PaymentMethodManaged BillQueryRecord2PaymentMethod = "managed"
)

func NewBillQueryRecord2PaymentMethodFromString(s string) (BillQueryRecord2PaymentMethod, error) {
	switch s {
	case "vcard":
		return BillQueryRecord2PaymentMethodVcard, nil
	case "ach":
		return BillQueryRecord2PaymentMethodAch, nil
	case "check":
		return BillQueryRecord2PaymentMethodCheck, nil
	case "card":
		return BillQueryRecord2PaymentMethodCard, nil
	case "managed":
		return BillQueryRecord2PaymentMethodManaged, nil
	}
	var t BillQueryRecord2PaymentMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BillQueryRecord2PaymentMethod) Ptr() *BillQueryRecord2PaymentMethod {
	return &b
}

type BillQueryResponse struct {
	// Summary statistics for the bill query response.
	Summary *BillQueryResponseSummary `json:"Summary,omitempty" url:"Summary,omitempty"`
	// Array of bill records returned by the query.
	Records []*BillQueryRecord2 `json:"Records,omitempty" url:"Records,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillQueryResponse) GetSummary() *BillQueryResponseSummary {
	if b == nil {
		return nil
	}
	return b.Summary
}

func (b *BillQueryResponse) GetRecords() []*BillQueryRecord2 {
	if b == nil {
		return nil
	}
	return b.Records
}

func (b *BillQueryResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillQueryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BillQueryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillQueryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillQueryResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillQueryResponseSummary struct {
	Pageidentifier *PageIdentifier `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`
	PageSize       *Pagesize       `json:"pageSize,omitempty" url:"pageSize,omitempty"`
	Total2Approval *int            `json:"total2approval,omitempty" url:"total2approval,omitempty"`
	Totalactive    *int            `json:"totalactive,omitempty" url:"totalactive,omitempty"`
	// Total amount of bills in response.
	TotalAmount          *float64 `json:"totalAmount,omitempty" url:"totalAmount,omitempty"`
	Totalamount2Approval *float64 `json:"totalamount2approval,omitempty" url:"totalamount2approval,omitempty"`
	Totalamountactive    *float64 `json:"totalamountactive,omitempty" url:"totalamountactive,omitempty"`
	// The total amount of approved bills.
	Totalamountapproved *float64 `json:"totalamountapproved,omitempty" url:"totalamountapproved,omitempty"`
	Totalamountcancel   *float64 `json:"totalamountcancel,omitempty" url:"totalamountcancel,omitempty"`
	// The total amount of disapproved bills.
	Totalamountdisapproved *float64 `json:"totalamountdisapproved,omitempty" url:"totalamountdisapproved,omitempty"`
	Totalamountintransit   *float64 `json:"totalamountintransit,omitempty" url:"totalamountintransit,omitempty"`
	// The total amount of bills that are overdue.
	Totalamountoverdue *float64 `json:"totalamountoverdue,omitempty" url:"totalamountoverdue,omitempty"`
	// The total amount of paid bills.
	Totalamountpaid          *float64 `json:"totalamountpaid,omitempty" url:"totalamountpaid,omitempty"`
	Totalamountsent2Approval *float64 `json:"totalamountsent2approval,omitempty" url:"totalamountsent2approval,omitempty"`
	// The total number of bills that were approved.
	Totalapproved *int `json:"totalapproved,omitempty" url:"totalapproved,omitempty"`
	Totalcancel   *int `json:"totalcancel,omitempty" url:"totalcancel,omitempty"`
	// The number of bills that were disapproved.
	Totaldisapproved *int `json:"totaldisapproved,omitempty" url:"totaldisapproved,omitempty"`
	Totalintransit   *int `json:"totalintransit,omitempty" url:"totalintransit,omitempty"`
	// The number of bills that are overdue.
	Totaloverdue *int        `json:"totaloverdue,omitempty" url:"totaloverdue,omitempty"`
	TotalPages   *Totalpages `json:"totalPages,omitempty" url:"totalPages,omitempty"`
	// The total number of paid bills.
	Totalpaid          *int          `json:"totalpaid,omitempty" url:"totalpaid,omitempty"`
	TotalRecords       *Totalrecords `json:"totalRecords,omitempty" url:"totalRecords,omitempty"`
	Totalsent2Approval *int          `json:"totalsent2approval,omitempty" url:"totalsent2approval,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillQueryResponseSummary) GetPageidentifier() *PageIdentifier {
	if b == nil {
		return nil
	}
	return b.Pageidentifier
}

func (b *BillQueryResponseSummary) GetPageSize() *Pagesize {
	if b == nil {
		return nil
	}
	return b.PageSize
}

func (b *BillQueryResponseSummary) GetTotal2Approval() *int {
	if b == nil {
		return nil
	}
	return b.Total2Approval
}

func (b *BillQueryResponseSummary) GetTotalactive() *int {
	if b == nil {
		return nil
	}
	return b.Totalactive
}

func (b *BillQueryResponseSummary) GetTotalAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.TotalAmount
}

func (b *BillQueryResponseSummary) GetTotalamount2Approval() *float64 {
	if b == nil {
		return nil
	}
	return b.Totalamount2Approval
}

func (b *BillQueryResponseSummary) GetTotalamountactive() *float64 {
	if b == nil {
		return nil
	}
	return b.Totalamountactive
}

func (b *BillQueryResponseSummary) GetTotalamountapproved() *float64 {
	if b == nil {
		return nil
	}
	return b.Totalamountapproved
}

func (b *BillQueryResponseSummary) GetTotalamountcancel() *float64 {
	if b == nil {
		return nil
	}
	return b.Totalamountcancel
}

func (b *BillQueryResponseSummary) GetTotalamountdisapproved() *float64 {
	if b == nil {
		return nil
	}
	return b.Totalamountdisapproved
}

func (b *BillQueryResponseSummary) GetTotalamountintransit() *float64 {
	if b == nil {
		return nil
	}
	return b.Totalamountintransit
}

func (b *BillQueryResponseSummary) GetTotalamountoverdue() *float64 {
	if b == nil {
		return nil
	}
	return b.Totalamountoverdue
}

func (b *BillQueryResponseSummary) GetTotalamountpaid() *float64 {
	if b == nil {
		return nil
	}
	return b.Totalamountpaid
}

func (b *BillQueryResponseSummary) GetTotalamountsent2Approval() *float64 {
	if b == nil {
		return nil
	}
	return b.Totalamountsent2Approval
}

func (b *BillQueryResponseSummary) GetTotalapproved() *int {
	if b == nil {
		return nil
	}
	return b.Totalapproved
}

func (b *BillQueryResponseSummary) GetTotalcancel() *int {
	if b == nil {
		return nil
	}
	return b.Totalcancel
}

func (b *BillQueryResponseSummary) GetTotaldisapproved() *int {
	if b == nil {
		return nil
	}
	return b.Totaldisapproved
}

func (b *BillQueryResponseSummary) GetTotalintransit() *int {
	if b == nil {
		return nil
	}
	return b.Totalintransit
}

func (b *BillQueryResponseSummary) GetTotaloverdue() *int {
	if b == nil {
		return nil
	}
	return b.Totaloverdue
}

func (b *BillQueryResponseSummary) GetTotalPages() *Totalpages {
	if b == nil {
		return nil
	}
	return b.TotalPages
}

func (b *BillQueryResponseSummary) GetTotalpaid() *int {
	if b == nil {
		return nil
	}
	return b.Totalpaid
}

func (b *BillQueryResponseSummary) GetTotalRecords() *Totalrecords {
	if b == nil {
		return nil
	}
	return b.TotalRecords
}

func (b *BillQueryResponseSummary) GetTotalsent2Approval() *int {
	if b == nil {
		return nil
	}
	return b.Totalsent2Approval
}

func (b *BillQueryResponseSummary) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillQueryResponseSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler BillQueryResponseSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillQueryResponseSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillQueryResponseSummary) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Array of `LineItems` contained in bill.
type Billitems = []*BillItem

// The bill's status. Values are:
//
// - `-99`: deleted or canceled
// - `1`: Active
// - `2`: Sent to approval
// - `5`: Partially approved
// - `11`: Rejected
// - `20`: Approved
// - `50`: Payment in transit
// - `100`: Paid "
type Billstatus = int

type TransactionOutQueryRecord struct {
	// Identifier of payout transaction.
	IdOut     *int64     `json:"IdOut,omitempty" url:"IdOut,omitempty"`
	CreatedAt *CreatedAt `json:"CreatedAt,omitempty" url:"CreatedAt,omitempty"`
	// Any comment or description for payout transaction.
	Comments *Comments `json:"Comments,omitempty" url:"Comments,omitempty"`
	// Vendor related to the payout transaction.
	Vendor            *VendorQueryRecord `json:"Vendor,omitempty" url:"Vendor,omitempty"`
	PaypointDbaname   *Dbaname           `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	PaypointLegalname *Legalname         `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// Internal status of transaction.
	Status *int `json:"Status,omitempty" url:"Status,omitempty"`
	// Timestamp when payment record was updated, in UTC.
	LastUpdated *LastModified `json:"LastUpdated,omitempty" url:"LastUpdated,omitempty"`
	// Transaction total amount (including service fee or sub-charge).
	TotalAmount   *float64           `json:"TotalAmount,omitempty" url:"TotalAmount,omitempty"`
	NetAmount     *Netamountnullable `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	FeeAmount     *FeeAmount         `json:"FeeAmount,omitempty" url:"FeeAmount,omitempty"`
	Source        *Source            `json:"Source,omitempty" url:"Source,omitempty"`
	ParentOrgName *OrgParentName     `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	ParentOrgId   *Orgid             `json:"ParentOrgId,omitempty" url:"ParentOrgId,omitempty"`
	// The batch number for the payout transaction.
	BatchNumber *string `json:"BatchNumber,omitempty" url:"BatchNumber,omitempty"`
	// Status of payout transaction.
	PaymentStatus *string `json:"PaymentStatus,omitempty" url:"PaymentStatus,omitempty"`
	// Method of payment applied to the transaction.
	PaymentMethod *string `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	CardToken     *string `json:"CardToken,omitempty" url:"CardToken,omitempty"`
	// Paper check number related to payout transaction.
	CheckNumber *string `json:"CheckNumber,omitempty" url:"CheckNumber,omitempty"`
	// Object referencing to paper check image.
	CheckData   *FileContent      `json:"CheckData,omitempty" url:"CheckData,omitempty"`
	PaymentId   *PaymentIdString  `json:"PaymentId,omitempty" url:"PaymentId,omitempty"`
	PaymentData *QueryPaymentData `json:"PaymentData,omitempty" url:"PaymentData,omitempty"`
	// Events associated to this transaction.
	Bills []*BillPayOutData `json:"Bills,omitempty" url:"Bills,omitempty"`
	// Events associated to this transaction.
	Events             []*QueryTransactionEvents `json:"Events,omitempty" url:"Events,omitempty"`
	ExternalPaypointId *ExternalPaypointId       `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	EntryName          *Entrypointfield          `json:"EntryName,omitempty" url:"EntryName,omitempty"`
	Gateway            *Gatewayfield             `json:"Gateway,omitempty" url:"Gateway,omitempty"`
	// ID of the batch the transaction belongs to.
	BatchId              *string                 `json:"BatchId,omitempty" url:"BatchId,omitempty"`
	HasVcardTransactions *HasVcardTransactions   `json:"HasVcardTransactions,omitempty" url:"HasVcardTransactions,omitempty"`
	IsSameDayAch         *IsSameDayAch           `json:"IsSameDayACH,omitempty" url:"IsSameDayACH,omitempty"`
	ScheduleId           *ScheduleId             `json:"ScheduleId,omitempty" url:"ScheduleId,omitempty"`
	SettlementStatus     *SettlementStatusPayout `json:"SettlementStatus,omitempty" url:"SettlementStatus,omitempty"`
	RiskFlagged          *RiskFlagged            `json:"RiskFlagged,omitempty" url:"RiskFlagged,omitempty"`
	RiskFlaggedOn        *RiskFlaggedOn          `json:"RiskFlaggedOn,omitempty" url:"RiskFlaggedOn,omitempty"`
	RiskStatus           *RiskStatus             `json:"RiskStatus,omitempty" url:"RiskStatus,omitempty"`
	RiskReason           *RiskReason             `json:"RiskReason,omitempty" url:"RiskReason,omitempty"`
	RiskAction           *RiskAction             `json:"RiskAction,omitempty" url:"RiskAction,omitempty"`
	RiskActionCode       *RiskActionCode         `json:"RiskActionCode,omitempty" url:"RiskActionCode,omitempty"`
	PayoutProgram        *PayoutProgram          `json:"PayoutProgram,omitempty" url:"PayoutProgram,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransactionOutQueryRecord) GetIdOut() *int64 {
	if t == nil {
		return nil
	}
	return t.IdOut
}

func (t *TransactionOutQueryRecord) GetCreatedAt() *CreatedAt {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TransactionOutQueryRecord) GetComments() *Comments {
	if t == nil {
		return nil
	}
	return t.Comments
}

func (t *TransactionOutQueryRecord) GetVendor() *VendorQueryRecord {
	if t == nil {
		return nil
	}
	return t.Vendor
}

func (t *TransactionOutQueryRecord) GetPaypointDbaname() *Dbaname {
	if t == nil {
		return nil
	}
	return t.PaypointDbaname
}

func (t *TransactionOutQueryRecord) GetPaypointLegalname() *Legalname {
	if t == nil {
		return nil
	}
	return t.PaypointLegalname
}

func (t *TransactionOutQueryRecord) GetStatus() *int {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *TransactionOutQueryRecord) GetLastUpdated() *LastModified {
	if t == nil {
		return nil
	}
	return t.LastUpdated
}

func (t *TransactionOutQueryRecord) GetTotalAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.TotalAmount
}

func (t *TransactionOutQueryRecord) GetNetAmount() *Netamountnullable {
	if t == nil {
		return nil
	}
	return t.NetAmount
}

func (t *TransactionOutQueryRecord) GetFeeAmount() *FeeAmount {
	if t == nil {
		return nil
	}
	return t.FeeAmount
}

func (t *TransactionOutQueryRecord) GetSource() *Source {
	if t == nil {
		return nil
	}
	return t.Source
}

func (t *TransactionOutQueryRecord) GetParentOrgName() *OrgParentName {
	if t == nil {
		return nil
	}
	return t.ParentOrgName
}

func (t *TransactionOutQueryRecord) GetParentOrgId() *Orgid {
	if t == nil {
		return nil
	}
	return t.ParentOrgId
}

func (t *TransactionOutQueryRecord) GetBatchNumber() *string {
	if t == nil {
		return nil
	}
	return t.BatchNumber
}

func (t *TransactionOutQueryRecord) GetPaymentStatus() *string {
	if t == nil {
		return nil
	}
	return t.PaymentStatus
}

func (t *TransactionOutQueryRecord) GetPaymentMethod() *string {
	if t == nil {
		return nil
	}
	return t.PaymentMethod
}

func (t *TransactionOutQueryRecord) GetCardToken() *string {
	if t == nil {
		return nil
	}
	return t.CardToken
}

func (t *TransactionOutQueryRecord) GetCheckNumber() *string {
	if t == nil {
		return nil
	}
	return t.CheckNumber
}

func (t *TransactionOutQueryRecord) GetCheckData() *FileContent {
	if t == nil {
		return nil
	}
	return t.CheckData
}

func (t *TransactionOutQueryRecord) GetPaymentId() *PaymentIdString {
	if t == nil {
		return nil
	}
	return t.PaymentId
}

func (t *TransactionOutQueryRecord) GetPaymentData() *QueryPaymentData {
	if t == nil {
		return nil
	}
	return t.PaymentData
}

func (t *TransactionOutQueryRecord) GetBills() []*BillPayOutData {
	if t == nil {
		return nil
	}
	return t.Bills
}

func (t *TransactionOutQueryRecord) GetEvents() []*QueryTransactionEvents {
	if t == nil {
		return nil
	}
	return t.Events
}

func (t *TransactionOutQueryRecord) GetExternalPaypointId() *ExternalPaypointId {
	if t == nil {
		return nil
	}
	return t.ExternalPaypointId
}

func (t *TransactionOutQueryRecord) GetEntryName() *Entrypointfield {
	if t == nil {
		return nil
	}
	return t.EntryName
}

func (t *TransactionOutQueryRecord) GetGateway() *Gatewayfield {
	if t == nil {
		return nil
	}
	return t.Gateway
}

func (t *TransactionOutQueryRecord) GetBatchId() *string {
	if t == nil {
		return nil
	}
	return t.BatchId
}

func (t *TransactionOutQueryRecord) GetHasVcardTransactions() *HasVcardTransactions {
	if t == nil {
		return nil
	}
	return t.HasVcardTransactions
}

func (t *TransactionOutQueryRecord) GetIsSameDayAch() *IsSameDayAch {
	if t == nil {
		return nil
	}
	return t.IsSameDayAch
}

func (t *TransactionOutQueryRecord) GetScheduleId() *ScheduleId {
	if t == nil {
		return nil
	}
	return t.ScheduleId
}

func (t *TransactionOutQueryRecord) GetSettlementStatus() *SettlementStatusPayout {
	if t == nil {
		return nil
	}
	return t.SettlementStatus
}

func (t *TransactionOutQueryRecord) GetRiskFlagged() *RiskFlagged {
	if t == nil {
		return nil
	}
	return t.RiskFlagged
}

func (t *TransactionOutQueryRecord) GetRiskFlaggedOn() *RiskFlaggedOn {
	if t == nil {
		return nil
	}
	return t.RiskFlaggedOn
}

func (t *TransactionOutQueryRecord) GetRiskStatus() *RiskStatus {
	if t == nil {
		return nil
	}
	return t.RiskStatus
}

func (t *TransactionOutQueryRecord) GetRiskReason() *RiskReason {
	if t == nil {
		return nil
	}
	return t.RiskReason
}

func (t *TransactionOutQueryRecord) GetRiskAction() *RiskAction {
	if t == nil {
		return nil
	}
	return t.RiskAction
}

func (t *TransactionOutQueryRecord) GetRiskActionCode() *RiskActionCode {
	if t == nil {
		return nil
	}
	return t.RiskActionCode
}

func (t *TransactionOutQueryRecord) GetPayoutProgram() *PayoutProgram {
	if t == nil {
		return nil
	}
	return t.PayoutProgram
}

func (t *TransactionOutQueryRecord) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransactionOutQueryRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler TransactionOutQueryRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransactionOutQueryRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransactionOutQueryRecord) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type VendorDataResponse struct {
	VendorNumber VendorNumber `json:"VendorNumber" url:"VendorNumber"`
	// Primary name for vendor.
	Name1 string `json:"Name1" url:"Name1"`
	// Secondary name for vendor.
	Name2 string `json:"Name2" url:"Name2"`
	// EIN/Tax ID for vendor. In responses, this field is masked, and looks like: `"ein": "XXXXX6789"`.
	Ein string `json:"EIN" url:"EIN"`
	// Vendor's phone number.
	Phone string `json:"Phone" url:"Phone"`
	Email Email  `json:"Email" url:"Email"`
	// Email address for remittance
	RemitEmail *string `json:"RemitEmail,omitempty" url:"RemitEmail,omitempty"`
	// Vendor's address.
	Address1 string `json:"Address1" url:"Address1"`
	// Additional line for vendor's address.
	Address2 string `json:"Address2" url:"Address2"`
	// Vendor's city.
	City string `json:"City" url:"City"`
	// Vendor's state. Must be a two-character state code.
	State string `json:"State" url:"State"`
	// Vendor's zip code.
	Zip string `json:"Zip" url:"Zip"`
	// Vendor's country. Payabli supports only US and Canadian vendors.
	Country      string       `json:"Country" url:"Country"`
	Mcc          Mcc          `json:"Mcc" url:"Mcc"`
	LocationCode LocationCode `json:"LocationCode" url:"LocationCode"`
	// Array of objects describing the vendor's contacts.
	Contacts []*ContactsResponse `json:"Contacts" url:"Contacts"`
	// Object containing vendor's bank information.
	BillingData *VendorResponseBillingData `json:"BillingData" url:"BillingData"`
	// Preferred payment method for vendor.
	PaymentMethod VendorDataResponsePaymentMethod `json:"PaymentMethod" url:"PaymentMethod"`
	VendorStatus  Vendorstatus                    `json:"VendorStatus" url:"VendorStatus"`
	VendorId      Vendorid                        `json:"VendorId" url:"VendorId"`
	// Vendor enrollment status
	EnrollmentStatus *string `json:"EnrollmentStatus,omitempty" url:"EnrollmentStatus,omitempty"`
	// Vendor bill summary statistics
	Summary *VendorResponseSummary `json:"Summary" url:"Summary"`
	// Legal name of the paypoint
	PaypointLegalname string `json:"PaypointLegalname" url:"PaypointLegalname"`
	// DBA name of the paypoint
	PaypointDbaname string `json:"PaypointDbaname" url:"PaypointDbaname"`
	// Entry name of the paypoint
	PaypointEntryname string `json:"PaypointEntryname" url:"PaypointEntryname"`
	// Name of the parent organization
	ParentOrgName string `json:"ParentOrgName" url:"ParentOrgName"`
	// ID of the parent organization
	ParentOrgId int `json:"ParentOrgId" url:"ParentOrgId"`
	// Date when vendor was created
	CreatedDate time.Time `json:"CreatedDate" url:"CreatedDate"`
	// Date when vendor was last updated
	LastUpdated   time.Time     `json:"LastUpdated" url:"LastUpdated"`
	RemitAddress1 Remitaddress1 `json:"remitAddress1" url:"remitAddress1"`
	RemitAddress2 Remitaddress2 `json:"remitAddress2" url:"remitAddress2"`
	RemitCity     Remitcity     `json:"remitCity" url:"remitCity"`
	RemitState    Remitstate    `json:"remitState" url:"remitState"`
	RemitZip      Remitzip      `json:"remitZip" url:"remitZip"`
	RemitCountry  Remitcountry  `json:"remitCountry" url:"remitCountry"`
	PayeeName1    PayeeName     `json:"payeeName1" url:"payeeName1"`
	PayeeName2    PayeeName     `json:"payeeName2" url:"payeeName2"`
	// Custom field 1 for vendor
	CustomField1 string `json:"customField1" url:"customField1"`
	// Custom field 2 for vendor
	CustomField2 string `json:"customField2" url:"customField2"`
	// Account number of paypoint in the Vendor side.
	CustomerVendorAccount *string             `json:"customerVendorAccount,omitempty" url:"customerVendorAccount,omitempty"`
	InternalReferenceId   InternalReferenceId `json:"InternalReferenceId" url:"InternalReferenceId"`
	AdditionalData        AdditionalDataMap   `json:"additionalData" url:"additionalData"`
	// External paypoint identifier
	ExternalPaypointId string `json:"externalPaypointID" url:"externalPaypointID"`
	// Array of stored payment methods for vendor
	StoredMethods []*VendorResponseStoredMethod `json:"StoredMethods" url:"StoredMethods"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VendorDataResponse) GetVendorNumber() VendorNumber {
	if v == nil {
		return ""
	}
	return v.VendorNumber
}

func (v *VendorDataResponse) GetName1() string {
	if v == nil {
		return ""
	}
	return v.Name1
}

func (v *VendorDataResponse) GetName2() string {
	if v == nil {
		return ""
	}
	return v.Name2
}

func (v *VendorDataResponse) GetEin() string {
	if v == nil {
		return ""
	}
	return v.Ein
}

func (v *VendorDataResponse) GetPhone() string {
	if v == nil {
		return ""
	}
	return v.Phone
}

func (v *VendorDataResponse) GetEmail() Email {
	if v == nil {
		return ""
	}
	return v.Email
}

func (v *VendorDataResponse) GetRemitEmail() *string {
	if v == nil {
		return nil
	}
	return v.RemitEmail
}

func (v *VendorDataResponse) GetAddress1() string {
	if v == nil {
		return ""
	}
	return v.Address1
}

func (v *VendorDataResponse) GetAddress2() string {
	if v == nil {
		return ""
	}
	return v.Address2
}

func (v *VendorDataResponse) GetCity() string {
	if v == nil {
		return ""
	}
	return v.City
}

func (v *VendorDataResponse) GetState() string {
	if v == nil {
		return ""
	}
	return v.State
}

func (v *VendorDataResponse) GetZip() string {
	if v == nil {
		return ""
	}
	return v.Zip
}

func (v *VendorDataResponse) GetCountry() string {
	if v == nil {
		return ""
	}
	return v.Country
}

func (v *VendorDataResponse) GetMcc() Mcc {
	if v == nil {
		return ""
	}
	return v.Mcc
}

func (v *VendorDataResponse) GetLocationCode() LocationCode {
	if v == nil {
		return ""
	}
	return v.LocationCode
}

func (v *VendorDataResponse) GetContacts() []*ContactsResponse {
	if v == nil {
		return nil
	}
	return v.Contacts
}

func (v *VendorDataResponse) GetBillingData() *VendorResponseBillingData {
	if v == nil {
		return nil
	}
	return v.BillingData
}

func (v *VendorDataResponse) GetPaymentMethod() VendorDataResponsePaymentMethod {
	if v == nil {
		return ""
	}
	return v.PaymentMethod
}

func (v *VendorDataResponse) GetVendorStatus() Vendorstatus {
	if v == nil {
		return 0
	}
	return v.VendorStatus
}

func (v *VendorDataResponse) GetVendorId() Vendorid {
	if v == nil {
		return 0
	}
	return v.VendorId
}

func (v *VendorDataResponse) GetEnrollmentStatus() *string {
	if v == nil {
		return nil
	}
	return v.EnrollmentStatus
}

func (v *VendorDataResponse) GetSummary() *VendorResponseSummary {
	if v == nil {
		return nil
	}
	return v.Summary
}

func (v *VendorDataResponse) GetPaypointLegalname() string {
	if v == nil {
		return ""
	}
	return v.PaypointLegalname
}

func (v *VendorDataResponse) GetPaypointDbaname() string {
	if v == nil {
		return ""
	}
	return v.PaypointDbaname
}

func (v *VendorDataResponse) GetPaypointEntryname() string {
	if v == nil {
		return ""
	}
	return v.PaypointEntryname
}

func (v *VendorDataResponse) GetParentOrgName() string {
	if v == nil {
		return ""
	}
	return v.ParentOrgName
}

func (v *VendorDataResponse) GetParentOrgId() int {
	if v == nil {
		return 0
	}
	return v.ParentOrgId
}

func (v *VendorDataResponse) GetCreatedDate() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.CreatedDate
}

func (v *VendorDataResponse) GetLastUpdated() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.LastUpdated
}

func (v *VendorDataResponse) GetRemitAddress1() Remitaddress1 {
	if v == nil {
		return ""
	}
	return v.RemitAddress1
}

func (v *VendorDataResponse) GetRemitAddress2() Remitaddress2 {
	if v == nil {
		return ""
	}
	return v.RemitAddress2
}

func (v *VendorDataResponse) GetRemitCity() Remitcity {
	if v == nil {
		return ""
	}
	return v.RemitCity
}

func (v *VendorDataResponse) GetRemitState() Remitstate {
	if v == nil {
		return ""
	}
	return v.RemitState
}

func (v *VendorDataResponse) GetRemitZip() Remitzip {
	if v == nil {
		return ""
	}
	return v.RemitZip
}

func (v *VendorDataResponse) GetRemitCountry() Remitcountry {
	if v == nil {
		return ""
	}
	return v.RemitCountry
}

func (v *VendorDataResponse) GetPayeeName1() PayeeName {
	if v == nil {
		return ""
	}
	return v.PayeeName1
}

func (v *VendorDataResponse) GetPayeeName2() PayeeName {
	if v == nil {
		return ""
	}
	return v.PayeeName2
}

func (v *VendorDataResponse) GetCustomField1() string {
	if v == nil {
		return ""
	}
	return v.CustomField1
}

func (v *VendorDataResponse) GetCustomField2() string {
	if v == nil {
		return ""
	}
	return v.CustomField2
}

func (v *VendorDataResponse) GetCustomerVendorAccount() *string {
	if v == nil {
		return nil
	}
	return v.CustomerVendorAccount
}

func (v *VendorDataResponse) GetInternalReferenceId() InternalReferenceId {
	if v == nil {
		return 0
	}
	return v.InternalReferenceId
}

func (v *VendorDataResponse) GetAdditionalData() AdditionalDataMap {
	if v == nil {
		return nil
	}
	return v.AdditionalData
}

func (v *VendorDataResponse) GetExternalPaypointId() string {
	if v == nil {
		return ""
	}
	return v.ExternalPaypointId
}

func (v *VendorDataResponse) GetStoredMethods() []*VendorResponseStoredMethod {
	if v == nil {
		return nil
	}
	return v.StoredMethods
}

func (v *VendorDataResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VendorDataResponse) UnmarshalJSON(data []byte) error {
	type embed VendorDataResponse
	var unmarshaler = struct {
		embed
		CreatedDate *internal.DateTime `json:"CreatedDate"`
		LastUpdated *internal.DateTime `json:"LastUpdated"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VendorDataResponse(unmarshaler.embed)
	v.CreatedDate = unmarshaler.CreatedDate.Time()
	v.LastUpdated = unmarshaler.LastUpdated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VendorDataResponse) MarshalJSON() ([]byte, error) {
	type embed VendorDataResponse
	var marshaler = struct {
		embed
		CreatedDate *internal.DateTime `json:"CreatedDate"`
		LastUpdated *internal.DateTime `json:"LastUpdated"`
	}{
		embed:       embed(*v),
		CreatedDate: internal.NewDateTime(v.CreatedDate),
		LastUpdated: internal.NewDateTime(v.LastUpdated),
	}
	return json.Marshal(marshaler)
}

func (v *VendorDataResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Preferred payment method for vendor.
type VendorDataResponsePaymentMethod string

const (
	VendorDataResponsePaymentMethodVcard VendorDataResponsePaymentMethod = "vcard"
	VendorDataResponsePaymentMethodAch   VendorDataResponsePaymentMethod = "ach"
	VendorDataResponsePaymentMethodCheck VendorDataResponsePaymentMethod = "check"
	VendorDataResponsePaymentMethodCard  VendorDataResponsePaymentMethod = "card"
)

func NewVendorDataResponsePaymentMethodFromString(s string) (VendorDataResponsePaymentMethod, error) {
	switch s {
	case "vcard":
		return VendorDataResponsePaymentMethodVcard, nil
	case "ach":
		return VendorDataResponsePaymentMethodAch, nil
	case "check":
		return VendorDataResponsePaymentMethodCheck, nil
	case "card":
		return VendorDataResponsePaymentMethodCard, nil
	}
	var t VendorDataResponsePaymentMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VendorDataResponsePaymentMethod) Ptr() *VendorDataResponsePaymentMethod {
	return &v
}

type VendorOutData struct {
	AdditionalData *AdditionalData `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	// Vendor's address
	Address1 *AddressNullable `json:"Address1,omitempty" url:"Address1,omitempty"`
	// Additional line for vendor's address.
	Address2 *AddressAddtlNullable `json:"Address2,omitempty" url:"Address2,omitempty"`
	// Object containing vendor's bank information.
	BillingData *BillingData `json:"BillingData,omitempty" url:"BillingData,omitempty"`
	// Vendor's city.
	City string `json:"City" url:"City"`
	// Array of objects describing the vendor's contacts.
	Contacts *ContactsField `json:"Contacts,omitempty" url:"Contacts,omitempty"`
	// Vendor's country.
	Country string `json:"Country" url:"Country"`
	// Account number of paypoint in the vendor side.
	CustomerVendorAccount *string `json:"customerVendorAccount,omitempty" url:"customerVendorAccount,omitempty"`
	// EIN/Tax ID for vendor. In reponses, this field is masked, and looks like: `XXXXX6789`.
	Ein string `json:"EIN" url:"EIN"`
	// Vendor's email address. Required for vCard.
	Email *Email `json:"Email,omitempty" url:"Email,omitempty"`
	// Internal identifier for global vendor account.
	InternalReferenceId *int64        `json:"InternalReferenceId,omitempty" url:"InternalReferenceId,omitempty"`
	LocationCode        *LocationCode `json:"LocationCode,omitempty" url:"LocationCode,omitempty"`
	Mcc                 *Mcc          `json:"Mcc,omitempty" url:"Mcc,omitempty"`
	// Primary name for vendor. Required for new vendor.
	Name1 string `json:"Name1" url:"Name1"`
	// Secondary name for vendor.
	Name2         *string              `json:"Name2,omitempty" url:"Name2,omitempty"`
	PayeeName1    *PayeeName           `json:"payeeName1,omitempty" url:"payeeName1,omitempty"`
	PayeeName2    *PayeeName           `json:"payeeName2,omitempty" url:"payeeName2,omitempty"`
	PaymentMethod *VendorPaymentMethod `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	// Vendor's phone number
	Phone         string         `json:"Phone" url:"Phone"`
	RemitAddress1 *Remitaddress1 `json:"remitAddress1,omitempty" url:"remitAddress1,omitempty"`
	RemitAddress2 *Remitaddress2 `json:"remitAddress2,omitempty" url:"remitAddress2,omitempty"`
	RemitCity     *Remitcity     `json:"remitCity,omitempty" url:"remitCity,omitempty"`
	RemitCountry  *Remitcountry  `json:"remitCountry,omitempty" url:"remitCountry,omitempty"`
	RemitState    *Remitstate    `json:"remitState,omitempty" url:"remitState,omitempty"`
	RemitZip      *Remitzip      `json:"remitZip,omitempty" url:"remitZip,omitempty"`
	// Vendor's state. Must be a 2 character state code.
	State string `json:"State" url:"State"`
	// Payabli identifier for vendor record. Required when `VendorNumber` isn't included.
	VendorId     *Vendorid     `json:"VendorId,omitempty" url:"VendorId,omitempty"`
	VendorNumber *VendorNumber `json:"VendorNumber,omitempty" url:"VendorNumber,omitempty"`
	VendorStatus *Vendorstatus `json:"VendorStatus,omitempty" url:"VendorStatus,omitempty"`
	// Vendor's zip code.
	Zip string `json:"Zip" url:"Zip"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VendorOutData) GetAdditionalData() *AdditionalData {
	if v == nil {
		return nil
	}
	return v.AdditionalData
}

func (v *VendorOutData) GetAddress1() *AddressNullable {
	if v == nil {
		return nil
	}
	return v.Address1
}

func (v *VendorOutData) GetAddress2() *AddressAddtlNullable {
	if v == nil {
		return nil
	}
	return v.Address2
}

func (v *VendorOutData) GetBillingData() *BillingData {
	if v == nil {
		return nil
	}
	return v.BillingData
}

func (v *VendorOutData) GetCity() string {
	if v == nil {
		return ""
	}
	return v.City
}

func (v *VendorOutData) GetContacts() *ContactsField {
	if v == nil {
		return nil
	}
	return v.Contacts
}

func (v *VendorOutData) GetCountry() string {
	if v == nil {
		return ""
	}
	return v.Country
}

func (v *VendorOutData) GetCustomerVendorAccount() *string {
	if v == nil {
		return nil
	}
	return v.CustomerVendorAccount
}

func (v *VendorOutData) GetEin() string {
	if v == nil {
		return ""
	}
	return v.Ein
}

func (v *VendorOutData) GetEmail() *Email {
	if v == nil {
		return nil
	}
	return v.Email
}

func (v *VendorOutData) GetInternalReferenceId() *int64 {
	if v == nil {
		return nil
	}
	return v.InternalReferenceId
}

func (v *VendorOutData) GetLocationCode() *LocationCode {
	if v == nil {
		return nil
	}
	return v.LocationCode
}

func (v *VendorOutData) GetMcc() *Mcc {
	if v == nil {
		return nil
	}
	return v.Mcc
}

func (v *VendorOutData) GetName1() string {
	if v == nil {
		return ""
	}
	return v.Name1
}

func (v *VendorOutData) GetName2() *string {
	if v == nil {
		return nil
	}
	return v.Name2
}

func (v *VendorOutData) GetPayeeName1() *PayeeName {
	if v == nil {
		return nil
	}
	return v.PayeeName1
}

func (v *VendorOutData) GetPayeeName2() *PayeeName {
	if v == nil {
		return nil
	}
	return v.PayeeName2
}

func (v *VendorOutData) GetPaymentMethod() *VendorPaymentMethod {
	if v == nil {
		return nil
	}
	return v.PaymentMethod
}

func (v *VendorOutData) GetPhone() string {
	if v == nil {
		return ""
	}
	return v.Phone
}

func (v *VendorOutData) GetRemitAddress1() *Remitaddress1 {
	if v == nil {
		return nil
	}
	return v.RemitAddress1
}

func (v *VendorOutData) GetRemitAddress2() *Remitaddress2 {
	if v == nil {
		return nil
	}
	return v.RemitAddress2
}

func (v *VendorOutData) GetRemitCity() *Remitcity {
	if v == nil {
		return nil
	}
	return v.RemitCity
}

func (v *VendorOutData) GetRemitCountry() *Remitcountry {
	if v == nil {
		return nil
	}
	return v.RemitCountry
}

func (v *VendorOutData) GetRemitState() *Remitstate {
	if v == nil {
		return nil
	}
	return v.RemitState
}

func (v *VendorOutData) GetRemitZip() *Remitzip {
	if v == nil {
		return nil
	}
	return v.RemitZip
}

func (v *VendorOutData) GetState() string {
	if v == nil {
		return ""
	}
	return v.State
}

func (v *VendorOutData) GetVendorId() *Vendorid {
	if v == nil {
		return nil
	}
	return v.VendorId
}

func (v *VendorOutData) GetVendorNumber() *VendorNumber {
	if v == nil {
		return nil
	}
	return v.VendorNumber
}

func (v *VendorOutData) GetVendorStatus() *Vendorstatus {
	if v == nil {
		return nil
	}
	return v.VendorStatus
}

func (v *VendorOutData) GetZip() string {
	if v == nil {
		return ""
	}
	return v.Zip
}

func (v *VendorOutData) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VendorOutData) UnmarshalJSON(data []byte) error {
	type unmarshaler VendorOutData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VendorOutData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VendorOutData) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Object containing vendor's bank information
type VendorResponseBillingData struct {
	Id                    *int          `json:"id,omitempty" url:"id,omitempty"`
	AccountId             *string       `json:"accountId,omitempty" url:"accountId,omitempty"`
	Nickname              *string       `json:"nickname,omitempty" url:"nickname,omitempty"`
	BankName              *string       `json:"bankName,omitempty" url:"bankName,omitempty"`
	RoutingAccount        *string       `json:"routingAccount,omitempty" url:"routingAccount,omitempty"`
	AccountNumber         *string       `json:"accountNumber,omitempty" url:"accountNumber,omitempty"`
	TypeAccount           *string       `json:"typeAccount,omitempty" url:"typeAccount,omitempty"`
	BankAccountHolderName *string       `json:"bankAccountHolderName,omitempty" url:"bankAccountHolderName,omitempty"`
	BankAccountHolderType *string       `json:"bankAccountHolderType,omitempty" url:"bankAccountHolderType,omitempty"`
	BankAccountFunction   *int          `json:"bankAccountFunction,omitempty" url:"bankAccountFunction,omitempty"`
	Verified              *bool         `json:"verified,omitempty" url:"verified,omitempty"`
	Status                *int          `json:"status,omitempty" url:"status,omitempty"`
	Services              []interface{} `json:"services,omitempty" url:"services,omitempty"`
	Default               *bool         `json:"default,omitempty" url:"default,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VendorResponseBillingData) GetId() *int {
	if v == nil {
		return nil
	}
	return v.Id
}

func (v *VendorResponseBillingData) GetAccountId() *string {
	if v == nil {
		return nil
	}
	return v.AccountId
}

func (v *VendorResponseBillingData) GetNickname() *string {
	if v == nil {
		return nil
	}
	return v.Nickname
}

func (v *VendorResponseBillingData) GetBankName() *string {
	if v == nil {
		return nil
	}
	return v.BankName
}

func (v *VendorResponseBillingData) GetRoutingAccount() *string {
	if v == nil {
		return nil
	}
	return v.RoutingAccount
}

func (v *VendorResponseBillingData) GetAccountNumber() *string {
	if v == nil {
		return nil
	}
	return v.AccountNumber
}

func (v *VendorResponseBillingData) GetTypeAccount() *string {
	if v == nil {
		return nil
	}
	return v.TypeAccount
}

func (v *VendorResponseBillingData) GetBankAccountHolderName() *string {
	if v == nil {
		return nil
	}
	return v.BankAccountHolderName
}

func (v *VendorResponseBillingData) GetBankAccountHolderType() *string {
	if v == nil {
		return nil
	}
	return v.BankAccountHolderType
}

func (v *VendorResponseBillingData) GetBankAccountFunction() *int {
	if v == nil {
		return nil
	}
	return v.BankAccountFunction
}

func (v *VendorResponseBillingData) GetVerified() *bool {
	if v == nil {
		return nil
	}
	return v.Verified
}

func (v *VendorResponseBillingData) GetStatus() *int {
	if v == nil {
		return nil
	}
	return v.Status
}

func (v *VendorResponseBillingData) GetServices() []interface{} {
	if v == nil {
		return nil
	}
	return v.Services
}

func (v *VendorResponseBillingData) GetDefault() *bool {
	if v == nil {
		return nil
	}
	return v.Default
}

func (v *VendorResponseBillingData) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VendorResponseBillingData) UnmarshalJSON(data []byte) error {
	type unmarshaler VendorResponseBillingData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VendorResponseBillingData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VendorResponseBillingData) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Vendor bill summary statistics
type VendorResponseSummary struct {
	ActiveBills            *int     `json:"ActiveBills,omitempty" url:"ActiveBills,omitempty"`
	PendingBills           *int     `json:"PendingBills,omitempty" url:"PendingBills,omitempty"`
	InTransitBills         *int     `json:"InTransitBills,omitempty" url:"InTransitBills,omitempty"`
	PaidBills              *int     `json:"PaidBills,omitempty" url:"PaidBills,omitempty"`
	OverdueBills           *int     `json:"OverdueBills,omitempty" url:"OverdueBills,omitempty"`
	ApprovedBills          *int     `json:"ApprovedBills,omitempty" url:"ApprovedBills,omitempty"`
	DisapprovedBills       *int     `json:"DisapprovedBills,omitempty" url:"DisapprovedBills,omitempty"`
	TotalBills             *int     `json:"TotalBills,omitempty" url:"TotalBills,omitempty"`
	ActiveBillsAmount      *float64 `json:"ActiveBillsAmount,omitempty" url:"ActiveBillsAmount,omitempty"`
	PendingBillsAmount     *float64 `json:"PendingBillsAmount,omitempty" url:"PendingBillsAmount,omitempty"`
	InTransitBillsAmount   *float64 `json:"InTransitBillsAmount,omitempty" url:"InTransitBillsAmount,omitempty"`
	PaidBillsAmount        *float64 `json:"PaidBillsAmount,omitempty" url:"PaidBillsAmount,omitempty"`
	OverdueBillsAmount     *float64 `json:"OverdueBillsAmount,omitempty" url:"OverdueBillsAmount,omitempty"`
	ApprovedBillsAmount    *float64 `json:"ApprovedBillsAmount,omitempty" url:"ApprovedBillsAmount,omitempty"`
	DisapprovedBillsAmount *float64 `json:"DisapprovedBillsAmount,omitempty" url:"DisapprovedBillsAmount,omitempty"`
	TotalBillsAmount       *float64 `json:"TotalBillsAmount,omitempty" url:"TotalBillsAmount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VendorResponseSummary) GetActiveBills() *int {
	if v == nil {
		return nil
	}
	return v.ActiveBills
}

func (v *VendorResponseSummary) GetPendingBills() *int {
	if v == nil {
		return nil
	}
	return v.PendingBills
}

func (v *VendorResponseSummary) GetInTransitBills() *int {
	if v == nil {
		return nil
	}
	return v.InTransitBills
}

func (v *VendorResponseSummary) GetPaidBills() *int {
	if v == nil {
		return nil
	}
	return v.PaidBills
}

func (v *VendorResponseSummary) GetOverdueBills() *int {
	if v == nil {
		return nil
	}
	return v.OverdueBills
}

func (v *VendorResponseSummary) GetApprovedBills() *int {
	if v == nil {
		return nil
	}
	return v.ApprovedBills
}

func (v *VendorResponseSummary) GetDisapprovedBills() *int {
	if v == nil {
		return nil
	}
	return v.DisapprovedBills
}

func (v *VendorResponseSummary) GetTotalBills() *int {
	if v == nil {
		return nil
	}
	return v.TotalBills
}

func (v *VendorResponseSummary) GetActiveBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.ActiveBillsAmount
}

func (v *VendorResponseSummary) GetPendingBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.PendingBillsAmount
}

func (v *VendorResponseSummary) GetInTransitBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.InTransitBillsAmount
}

func (v *VendorResponseSummary) GetPaidBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.PaidBillsAmount
}

func (v *VendorResponseSummary) GetOverdueBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.OverdueBillsAmount
}

func (v *VendorResponseSummary) GetApprovedBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.ApprovedBillsAmount
}

func (v *VendorResponseSummary) GetDisapprovedBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.DisapprovedBillsAmount
}

func (v *VendorResponseSummary) GetTotalBillsAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.TotalBillsAmount
}

func (v *VendorResponseSummary) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VendorResponseSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler VendorResponseSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VendorResponseSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VendorResponseSummary) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type BillOutData struct {
	AccountingField1 *AccountingField      `json:"accountingField1,omitempty" url:"accountingField1,omitempty"`
	AccountingField2 *AccountingField      `json:"accountingField2,omitempty" url:"accountingField2,omitempty"`
	AdditionalData   *AdditionalDataString `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	// An array of bill images. Attachments aren't required, but we strongly recommend including them. Including a bill image can make payouts smoother and prevent delays. You can include either the Base64-encoded file content, or you can include an fURL to a public file. The maximum file size for image uploads is 30 MB.
	Attachments *Attachments `json:"attachments,omitempty" url:"attachments,omitempty"`
	// Date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY.
	BillDate  *Datenullable `json:"billDate,omitempty" url:"billDate,omitempty"`
	BillItems *Billitems    `json:"billItems,omitempty" url:"billItems,omitempty"`
	// Unique identifier for the bill. Required when adding a bill.
	BillNumber *string   `json:"billNumber,omitempty" url:"billNumber,omitempty"`
	Comments   *Comments `json:"comments,omitempty" url:"comments,omitempty"`
	// Discount amount applied to the bill.
	Discount *float64 `json:"discount,omitempty" url:"discount,omitempty"`
	// Due date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY.
	DueDate *Datenullable `json:"dueDate,omitempty" url:"dueDate,omitempty"`
	// End Date for scheduled bills. Applied only in `Mode` = 1. Accepted formats: YYYY-MM-DD, MM/DD/YYYY
	EndDate *Datenullable `json:"endDate,omitempty" url:"endDate,omitempty"`
	// Frequency for scheduled bills. Applied only in `Mode` = 1.
	Frequency *Frequency `json:"frequency,omitempty" url:"frequency,omitempty"`
	// Lot number associated with the bill.
	LotNumber *string `json:"lotNumber,omitempty" url:"lotNumber,omitempty"`
	// Bill mode: value `0` for one-time bills, `1` for scheduled bills.
	Mode *int `json:"mode,omitempty" url:"mode,omitempty"`
	// Net Amount owed in bill. Required when adding a bill.
	NetAmount *float64 `json:"netAmount,omitempty" url:"netAmount,omitempty"`
	// Options for scheduled bills.
	ScheduledOptions *BillOutDataScheduledOptions `json:"scheduledOptions,omitempty" url:"scheduledOptions,omitempty"`
	Status           *Billstatus                  `json:"status,omitempty" url:"status,omitempty"`
	Terms            *Terms                       `json:"terms,omitempty" url:"terms,omitempty"`
	// Total amount of the bill.
	TotalAmount *float64 `json:"totalAmount,omitempty" url:"totalAmount,omitempty"`
	// The vendor associated with the bill. Although you can create a vendor in a create bill request, Payabli recommends creating a vendor separately and passing a valid `vendorNumber` here. At minimum, the `vendorNumber` is required.
	Vendor *VendorData `json:"vendor,omitempty" url:"vendor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillOutData) GetAccountingField1() *AccountingField {
	if b == nil {
		return nil
	}
	return b.AccountingField1
}

func (b *BillOutData) GetAccountingField2() *AccountingField {
	if b == nil {
		return nil
	}
	return b.AccountingField2
}

func (b *BillOutData) GetAdditionalData() *AdditionalDataString {
	if b == nil {
		return nil
	}
	return b.AdditionalData
}

func (b *BillOutData) GetAttachments() *Attachments {
	if b == nil {
		return nil
	}
	return b.Attachments
}

func (b *BillOutData) GetBillDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.BillDate
}

func (b *BillOutData) GetBillItems() *Billitems {
	if b == nil {
		return nil
	}
	return b.BillItems
}

func (b *BillOutData) GetBillNumber() *string {
	if b == nil {
		return nil
	}
	return b.BillNumber
}

func (b *BillOutData) GetComments() *Comments {
	if b == nil {
		return nil
	}
	return b.Comments
}

func (b *BillOutData) GetDiscount() *float64 {
	if b == nil {
		return nil
	}
	return b.Discount
}

func (b *BillOutData) GetDueDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.DueDate
}

func (b *BillOutData) GetEndDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.EndDate
}

func (b *BillOutData) GetFrequency() *Frequency {
	if b == nil {
		return nil
	}
	return b.Frequency
}

func (b *BillOutData) GetLotNumber() *string {
	if b == nil {
		return nil
	}
	return b.LotNumber
}

func (b *BillOutData) GetMode() *int {
	if b == nil {
		return nil
	}
	return b.Mode
}

func (b *BillOutData) GetNetAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.NetAmount
}

func (b *BillOutData) GetScheduledOptions() *BillOutDataScheduledOptions {
	if b == nil {
		return nil
	}
	return b.ScheduledOptions
}

func (b *BillOutData) GetStatus() *Billstatus {
	if b == nil {
		return nil
	}
	return b.Status
}

func (b *BillOutData) GetTerms() *Terms {
	if b == nil {
		return nil
	}
	return b.Terms
}

func (b *BillOutData) GetTotalAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.TotalAmount
}

func (b *BillOutData) GetVendor() *VendorData {
	if b == nil {
		return nil
	}
	return b.Vendor
}

func (b *BillOutData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillOutData) UnmarshalJSON(data []byte) error {
	type unmarshaler BillOutData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillOutData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillOutData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillOutDataScheduledOptions struct {
	// The ID of the stored payment method to use for the bill.
	StoredMethodId *string `json:"storedMethodId,omitempty" url:"storedMethodId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillOutDataScheduledOptions) GetStoredMethodId() *string {
	if b == nil {
		return nil
	}
	return b.StoredMethodId
}

func (b *BillOutDataScheduledOptions) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillOutDataScheduledOptions) UnmarshalJSON(data []byte) error {
	type unmarshaler BillOutDataScheduledOptions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillOutDataScheduledOptions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillOutDataScheduledOptions) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillResponse struct {
	ResponseCode   *Responsecode   `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	RoomId         *RoomIdNotInUse `json:"roomId,omitempty" url:"roomId,omitempty"`
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText   *ResponseText   `json:"responseText,omitempty" url:"responseText,omitempty"`
	// If `isSuccess` = true, this contains the bill identifier. If `isSuccess` = false, this contains the reason for the error.
	ResponseData *Responsedatanonobject `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillResponse) GetResponseCode() *Responsecode {
	if b == nil {
		return nil
	}
	return b.ResponseCode
}

func (b *BillResponse) GetPageIdentifier() *PageIdentifier {
	if b == nil {
		return nil
	}
	return b.PageIdentifier
}

func (b *BillResponse) GetRoomId() *RoomIdNotInUse {
	if b == nil {
		return nil
	}
	return b.RoomId
}

func (b *BillResponse) GetIsSuccess() *IsSuccess {
	if b == nil {
		return nil
	}
	return b.IsSuccess
}

func (b *BillResponse) GetResponseText() *ResponseText {
	if b == nil {
		return nil
	}
	return b.ResponseText
}

func (b *BillResponse) GetResponseData() *Responsedatanonobject {
	if b == nil {
		return nil
	}
	return b.ResponseData
}

func (b *BillResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BillResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillResponseData struct {
	IdBill *BillId `json:"IdBill,omitempty" url:"IdBill,omitempty"`
	// Unique identifier for the bill.
	BillNumber *string `json:"BillNumber,omitempty" url:"BillNumber,omitempty"`
	// Net amount owed in bill.
	NetAmount *float64 `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	// Bill discount amount.
	Discount *float64 `json:"Discount,omitempty" url:"Discount,omitempty"`
	// Total amount for the bill.
	TotalAmount *float64 `json:"TotalAmount,omitempty" url:"TotalAmount,omitempty"`
	// Date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY
	BillDate *Datenullable `json:"BillDate,omitempty" url:"BillDate,omitempty"`
	// Due Date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY
	DueDate  *Datenullable `json:"DueDate,omitempty" url:"DueDate,omitempty"`
	Comments *Comments     `json:"Comments,omitempty" url:"Comments,omitempty"`
	// The batch number that the bill belongs to.
	BatchNumber *string `json:"BatchNumber,omitempty" url:"BatchNumber,omitempty"`
	// Array of `LineItems` contained in bill.
	BillItems *Billitems `json:"BillItems,omitempty" url:"BillItems,omitempty"`
	// Bill mode: value `0` for single/one-time bills, `1` for scheduled bills.
	Mode *int `json:"Mode,omitempty" url:"Mode,omitempty"`
	// Payment method used for the bill.
	PaymentMethod *string `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	// Payment ID associated with the bill.
	PaymentId        *string          `json:"PaymentId,omitempty" url:"PaymentId,omitempty"`
	AccountingField1 *AccountingField `json:"AccountingField1,omitempty" url:"AccountingField1,omitempty"`
	AccountingField2 *AccountingField `json:"AccountingField2,omitempty" url:"AccountingField2,omitempty"`
	Terms            *Terms           `json:"Terms,omitempty" url:"Terms,omitempty"`
	// The source of the bill, such as "API" or "UI".
	Source         *string               `json:"Source,omitempty" url:"Source,omitempty"`
	AdditionalData *AdditionalDataString `json:"AdditionalData,omitempty" url:"AdditionalData,omitempty"`
	Vendor         *VendorDataResponse   `json:"Vendor,omitempty" url:"Vendor,omitempty"`
	Status         *Billstatus           `json:"Status,omitempty" url:"Status,omitempty"`
	CreatedAt      *CreatedAt            `json:"CreatedAt,omitempty" url:"CreatedAt,omitempty"`
	// End date for scheduled bills. Applied only in `Mode` = 1.
	EndDate     *Datenullable `json:"EndDate,omitempty" url:"EndDate,omitempty"`
	LastUpdated *LastModified `json:"LastUpdated,omitempty" url:"LastUpdated,omitempty"`
	// Frequency for scheduled bills. Applied only in `Mode` = 1.
	Frequency *Frequency `json:"Frequency,omitempty" url:"Frequency,omitempty"`
	// MoneyOut transaction associated to the bill
	Transaction       *TransactionOutQueryRecord `json:"Transaction,omitempty" url:"Transaction,omitempty"`
	BillEvents        *BillEvents                `json:"billEvents,omitempty" url:"billEvents,omitempty"`
	BillApprovals     *BillApprovals             `json:"billApprovals,omitempty" url:"billApprovals,omitempty"`
	PaypointLegalname *Legalname                 `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	PaypointDbaname   *Dbaname                   `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	ParentOrgId       *OrgParentId               `json:"ParentOrgId,omitempty" url:"ParentOrgId,omitempty"`
	ParentOrgName     *OrgParentName             `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	PaypointEntryname *Entrypointfield           `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	PaylinkId         *PaylinkId                 `json:"paylinkId,omitempty" url:"paylinkId,omitempty"`
	// Object with the attached documents.
	DocumentsRef       *DocumentsRef       `json:"DocumentsRef,omitempty" url:"DocumentsRef,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// Lot number of the bill.
	LotNumber *string   `json:"LotNumber,omitempty" url:"LotNumber,omitempty"`
	EntityId  *EntityId `json:"EntityID,omitempty" url:"EntityID,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillResponseData) GetIdBill() *BillId {
	if b == nil {
		return nil
	}
	return b.IdBill
}

func (b *BillResponseData) GetBillNumber() *string {
	if b == nil {
		return nil
	}
	return b.BillNumber
}

func (b *BillResponseData) GetNetAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.NetAmount
}

func (b *BillResponseData) GetDiscount() *float64 {
	if b == nil {
		return nil
	}
	return b.Discount
}

func (b *BillResponseData) GetTotalAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.TotalAmount
}

func (b *BillResponseData) GetBillDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.BillDate
}

func (b *BillResponseData) GetDueDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.DueDate
}

func (b *BillResponseData) GetComments() *Comments {
	if b == nil {
		return nil
	}
	return b.Comments
}

func (b *BillResponseData) GetBatchNumber() *string {
	if b == nil {
		return nil
	}
	return b.BatchNumber
}

func (b *BillResponseData) GetBillItems() *Billitems {
	if b == nil {
		return nil
	}
	return b.BillItems
}

func (b *BillResponseData) GetMode() *int {
	if b == nil {
		return nil
	}
	return b.Mode
}

func (b *BillResponseData) GetPaymentMethod() *string {
	if b == nil {
		return nil
	}
	return b.PaymentMethod
}

func (b *BillResponseData) GetPaymentId() *string {
	if b == nil {
		return nil
	}
	return b.PaymentId
}

func (b *BillResponseData) GetAccountingField1() *AccountingField {
	if b == nil {
		return nil
	}
	return b.AccountingField1
}

func (b *BillResponseData) GetAccountingField2() *AccountingField {
	if b == nil {
		return nil
	}
	return b.AccountingField2
}

func (b *BillResponseData) GetTerms() *Terms {
	if b == nil {
		return nil
	}
	return b.Terms
}

func (b *BillResponseData) GetSource() *string {
	if b == nil {
		return nil
	}
	return b.Source
}

func (b *BillResponseData) GetAdditionalData() *AdditionalDataString {
	if b == nil {
		return nil
	}
	return b.AdditionalData
}

func (b *BillResponseData) GetVendor() *VendorDataResponse {
	if b == nil {
		return nil
	}
	return b.Vendor
}

func (b *BillResponseData) GetStatus() *Billstatus {
	if b == nil {
		return nil
	}
	return b.Status
}

func (b *BillResponseData) GetCreatedAt() *CreatedAt {
	if b == nil {
		return nil
	}
	return b.CreatedAt
}

func (b *BillResponseData) GetEndDate() *Datenullable {
	if b == nil {
		return nil
	}
	return b.EndDate
}

func (b *BillResponseData) GetLastUpdated() *LastModified {
	if b == nil {
		return nil
	}
	return b.LastUpdated
}

func (b *BillResponseData) GetFrequency() *Frequency {
	if b == nil {
		return nil
	}
	return b.Frequency
}

func (b *BillResponseData) GetTransaction() *TransactionOutQueryRecord {
	if b == nil {
		return nil
	}
	return b.Transaction
}

func (b *BillResponseData) GetBillEvents() *BillEvents {
	if b == nil {
		return nil
	}
	return b.BillEvents
}

func (b *BillResponseData) GetBillApprovals() *BillApprovals {
	if b == nil {
		return nil
	}
	return b.BillApprovals
}

func (b *BillResponseData) GetPaypointLegalname() *Legalname {
	if b == nil {
		return nil
	}
	return b.PaypointLegalname
}

func (b *BillResponseData) GetPaypointDbaname() *Dbaname {
	if b == nil {
		return nil
	}
	return b.PaypointDbaname
}

func (b *BillResponseData) GetParentOrgId() *OrgParentId {
	if b == nil {
		return nil
	}
	return b.ParentOrgId
}

func (b *BillResponseData) GetParentOrgName() *OrgParentName {
	if b == nil {
		return nil
	}
	return b.ParentOrgName
}

func (b *BillResponseData) GetPaypointEntryname() *Entrypointfield {
	if b == nil {
		return nil
	}
	return b.PaypointEntryname
}

func (b *BillResponseData) GetPaylinkId() *PaylinkId {
	if b == nil {
		return nil
	}
	return b.PaylinkId
}

func (b *BillResponseData) GetDocumentsRef() *DocumentsRef {
	if b == nil {
		return nil
	}
	return b.DocumentsRef
}

func (b *BillResponseData) GetExternalPaypointId() *ExternalPaypointId {
	if b == nil {
		return nil
	}
	return b.ExternalPaypointId
}

func (b *BillResponseData) GetLotNumber() *string {
	if b == nil {
		return nil
	}
	return b.LotNumber
}

func (b *BillResponseData) GetEntityId() *EntityId {
	if b == nil {
		return nil
	}
	return b.EntityId
}

func (b *BillResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler BillResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillResponseData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type EditBillResponse struct {
	ResponseCode   *Responsecode   `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	RoomId         *RoomIdNotInUse `json:"roomId,omitempty" url:"roomId,omitempty"`
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText   *ResponseText   `json:"responseText,omitempty" url:"responseText,omitempty"`
	// If `isSuccess` = true, this contains the bill identifier. If `isSuccess` = false, this contains the reason for the error.
	ResponseData *int `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EditBillResponse) GetResponseCode() *Responsecode {
	if e == nil {
		return nil
	}
	return e.ResponseCode
}

func (e *EditBillResponse) GetPageIdentifier() *PageIdentifier {
	if e == nil {
		return nil
	}
	return e.PageIdentifier
}

func (e *EditBillResponse) GetRoomId() *RoomIdNotInUse {
	if e == nil {
		return nil
	}
	return e.RoomId
}

func (e *EditBillResponse) GetIsSuccess() *IsSuccess {
	if e == nil {
		return nil
	}
	return e.IsSuccess
}

func (e *EditBillResponse) GetResponseText() *ResponseText {
	if e == nil {
		return nil
	}
	return e.ResponseText
}

func (e *EditBillResponse) GetResponseData() *int {
	if e == nil {
		return nil
	}
	return e.ResponseData
}

func (e *EditBillResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EditBillResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EditBillResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EditBillResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EditBillResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A successful response returns a bill object with all its details. If the bill isn't found, the response will contain an error message.
type GetBillResponse struct {
	ResponseCode   *Responsecode     `json:"responseCode,omitempty" url:"responseCode,omitempty"`
	PageIdentifier *PageIdentifier   `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	RoomId         *RoomIdNotInUse   `json:"roomId,omitempty" url:"roomId,omitempty"`
	IsSuccess      *IsSuccess        `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText   *ResponseText     `json:"responseText,omitempty" url:"responseText,omitempty"`
	ResponseData   *BillResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetBillResponse) GetResponseCode() *Responsecode {
	if g == nil {
		return nil
	}
	return g.ResponseCode
}

func (g *GetBillResponse) GetPageIdentifier() *PageIdentifier {
	if g == nil {
		return nil
	}
	return g.PageIdentifier
}

func (g *GetBillResponse) GetRoomId() *RoomIdNotInUse {
	if g == nil {
		return nil
	}
	return g.RoomId
}

func (g *GetBillResponse) GetIsSuccess() *IsSuccess {
	if g == nil {
		return nil
	}
	return g.IsSuccess
}

func (g *GetBillResponse) GetResponseText() *ResponseText {
	if g == nil {
		return nil
	}
	return g.ResponseText
}

func (g *GetBillResponse) GetResponseData() *BillResponseData {
	if g == nil {
		return nil
	}
	return g.ResponseData
}

func (g *GetBillResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetBillResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetBillResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetBillResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBillResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ModifyApprovalBillResponse struct {
	IsSuccess    *IsSuccess    `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`
	// If `isSuccess` = true, this contains the bill identifier. If `isSuccess` = false, this contains the reason for the error.
	ResponseData *int `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *ModifyApprovalBillResponse) GetIsSuccess() *IsSuccess {
	if m == nil {
		return nil
	}
	return m.IsSuccess
}

func (m *ModifyApprovalBillResponse) GetResponseText() *ResponseText {
	if m == nil {
		return nil
	}
	return m.ResponseText
}

func (m *ModifyApprovalBillResponse) GetResponseData() *int {
	if m == nil {
		return nil
	}
	return m.ResponseData
}

func (m *ModifyApprovalBillResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *ModifyApprovalBillResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ModifyApprovalBillResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModifyApprovalBillResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModifyApprovalBillResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type SetApprovedBillResponse struct {
	IsSuccess    *IsSuccess    `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText *ResponseText `json:"responseText,omitempty" url:"responseText,omitempty"`
	// If `isSuccess` = true, this contains the bill identifier. If `isSuccess` = false, this contains the reason for the error.
	ResponseData *int `json:"responseData,omitempty" url:"responseData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SetApprovedBillResponse) GetIsSuccess() *IsSuccess {
	if s == nil {
		return nil
	}
	return s.IsSuccess
}

func (s *SetApprovedBillResponse) GetResponseText() *ResponseText {
	if s == nil {
		return nil
	}
	return s.ResponseText
}

func (s *SetApprovedBillResponse) GetResponseData() *int {
	if s == nil {
		return nil
	}
	return s.ResponseData
}

func (s *SetApprovedBillResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SetApprovedBillResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SetApprovedBillResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetApprovedBillResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetApprovedBillResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
