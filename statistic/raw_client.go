// Code generated by Fern. DO NOT EDIT.

package statistic

import (
	context "context"
	http "net/http"
	sdk "sdk"
	core "sdk/core"
	internal "sdk/internal"
	option "sdk/option"
)

type RawClient struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewRawClient(options *core.RequestOptions) *RawClient {
	return &RawClient{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (r *RawClient) BasicStats(
	ctx context.Context,
	// Identifier in Payabli for the entity.
	entryId int64,
	// Frequency to group series. Allowed values:
	//
	// - `m` - monthly
	// - `w` - weekly
	// - `d` - daily
	// - `h` - hourly
	//
	// For example, `w` groups the results by week.
	freq string,
	// The entry level for the request:
	//   - 0 for Organization
	//   - 2 for Paypoint
	level int,
	// Mode for the request. Allowed values:
	//
	// - `custom` - Allows you to set a custom date range
	// - `ytd` - Year To Date
	// - `mtd` - Month To Date
	// - `wtd` - Week To Date
	// - `today` - All current day
	// - `m12` - Last 12 months
	// - `d30` - Last 30 days
	// - `h24` - Last 24 hours
	// - `lasty` - Last Year
	// - `lastm` - Last Month
	// - `lastw` - Last Week
	// - `yesterday` - Last Day
	//
	mode string,
	request *sdk.BasicStatsRequest,
	opts ...option.RequestOption,
) (*core.Response[[]*sdk.StatBasicQueryRecord], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Statistic/basic/%v/%v/%v/%v",
		entryId,
		freq,
		level,
		mode,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdk.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdk.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdk.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdk.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response []*sdk.StatBasicQueryRecord
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[[]*sdk.StatBasicQueryRecord]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) CustomerBasicStats(
	ctx context.Context,
	// Payabli-generated customer ID. Maps to "Customer ID" column in PartnerHub.
	customerId int,
	// Frequency to group series. Allowed values:
	//
	// - `m` - monthly
	// - `w` - weekly
	// - `d` - daily
	// - `h` - hourly
	//
	// For example, `w` groups the results by week.
	freq string,
	// Mode for request. Allowed values:
	//
	// - `ytd` - Year To Date
	// - `mtd` - Month To Date
	// - `wtd` - Week To Date
	// - `today` - All current day
	// - `m12` - Last 12 months
	// - `d30` - Last 30 days
	// - `h24` - Last 24 hours
	// - `lasty` - Last Year
	// - `lastm` - Last Month
	// - `lastw` - Last Week
	// - `yesterday` - Last Day
	mode string,
	request *sdk.CustomerBasicStatsRequest,
	opts ...option.RequestOption,
) (*core.Response[[]*sdk.SubscriptionStatsQueryRecord], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Statistic/customerbasic/%v/%v/%v",
		customerId,
		freq,
		mode,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdk.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdk.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdk.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdk.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response []*sdk.SubscriptionStatsQueryRecord
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[[]*sdk.SubscriptionStatsQueryRecord]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) SubStats(
	ctx context.Context,
	// Identifier in Payabli for the entity.
	entryId int64,
	// Interval to get the data. Allowed values:
	//
	// - `all` - all intervals
	// - `30` - 1-30 days
	// - `60` - 31-60 days
	// - `90` - 61-90 days
	// - `plus` - +90 days
	interval string,
	// The entry level for the request:
	//   - 0 for Organization
	//   - 2 for Paypoint
	level int,
	request *sdk.SubStatsRequest,
	opts ...option.RequestOption,
) (*core.Response[[]*sdk.StatBasicQueryRecord], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Statistic/subscriptions/%v/%v/%v",
		entryId,
		interval,
		level,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdk.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdk.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdk.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdk.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response []*sdk.StatBasicQueryRecord
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[[]*sdk.StatBasicQueryRecord]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) VendorBasicStats(
	ctx context.Context,
	// Frequency to group series. Allowed values:
	//
	// - `m` - monthly
	// - `w` - weekly
	// - `d` - daily
	// - `h` - hourly
	//
	// For example, `w` groups the results by week.
	freq string,
	// Vendor ID.
	idVendor int,
	// Mode for request. Allowed values:
	//
	// - `ytd` - Year To Date
	// - `mtd` - Month To Date
	// - `wtd` - Week To Date
	// - `today` - All current day
	// - `m12` - Last 12 months
	// - `d30` - Last 30 days
	// - `h24` - Last 24 hours
	// - `lasty` - Last Year
	// - `lastm` - Last Month
	// - `lastw` - Last Week
	// - `yesterday` - Last Day
	mode string,
	request *sdk.VendorBasicStatsRequest,
	opts ...option.RequestOption,
) (*core.Response[[]*sdk.StatisticsVendorQueryRecord], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api-sandbox.payabli.com/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/Statistic/vendorbasic/%v/%v/%v",
		freq,
		idVendor,
		mode,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &sdk.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &sdk.UnauthorizedError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &sdk.InternalServerError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &sdk.ServiceUnavailableError{
				APIError: apiError,
			}
		},
	}
	var response []*sdk.StatisticsVendorQueryRecord
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[[]*sdk.StatisticsVendorQueryRecord]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}
