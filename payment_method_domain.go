// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	time "time"
)

type AddPaymentMethodDomainRequest struct {
	// Apple Pay configuration information.
	ApplePay *AddPaymentMethodDomainRequestApplePay `json:"applePay,omitempty" url:"-"`
	// Google Pay configuration information.
	GooglePay  *AddPaymentMethodDomainRequestGooglePay `json:"googlePay,omitempty" url:"-"`
	DomainName *DomainName                             `json:"domainName,omitempty" url:"-"`
	EntityId   *EntityId                               `json:"entityId,omitempty" url:"-"`
	EntityType *EntityType                             `json:"entityType,omitempty" url:"-"`
}

type ListPaymentMethodDomainsRequest struct {
	// Identifier for the organization or paypoint.
	// - For organization, provide the organization ID - For paypoint, provide the paypoint ID
	EntityId *int64 `json:"-" url:"entityId,omitempty"`
	// The type of entity. Valid values:
	//   - organization
	//   - paypoint
	//   - psp
	EntityType *string `json:"-" url:"entityType,omitempty"`
	// Number of records to skip. Defaults to `0`.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records for query response. Defaults to `20`.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
}

type UpdatePaymentMethodDomainRequest struct {
	ApplePay  *UpdatePaymentMethodDomainRequestWallet `json:"applePay,omitempty" url:"-"`
	GooglePay *UpdatePaymentMethodDomainRequestWallet `json:"googlePay,omitempty" url:"-"`
}

// Response for the add payment method domain operation.
type AddPaymentMethodDomainApiResponse struct {
	IsSuccess      IsSuccess                       `json:"isSuccess" url:"isSuccess"`
	Pageidentifier PageIdentifier                  `json:"pageidentifier" url:"pageidentifier"`
	ResponseData   *PaymentMethodDomainApiResponse `json:"responseData" url:"responseData"`
	ResponseText   string                          `json:"responseText" url:"responseText"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddPaymentMethodDomainApiResponse) GetIsSuccess() IsSuccess {
	if a == nil {
		return false
	}
	return a.IsSuccess
}

func (a *AddPaymentMethodDomainApiResponse) GetPageidentifier() PageIdentifier {
	if a == nil {
		return ""
	}
	return a.Pageidentifier
}

func (a *AddPaymentMethodDomainApiResponse) GetResponseData() *PaymentMethodDomainApiResponse {
	if a == nil {
		return nil
	}
	return a.ResponseData
}

func (a *AddPaymentMethodDomainApiResponse) GetResponseText() string {
	if a == nil {
		return ""
	}
	return a.ResponseText
}

func (a *AddPaymentMethodDomainApiResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddPaymentMethodDomainApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddPaymentMethodDomainApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddPaymentMethodDomainApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddPaymentMethodDomainApiResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Details about the status of the Apple Pay service.
type ApplePayData struct {
	// This object is only returned when the domain verification check fails. If a domain has failed validation, this object contains information about the failure.
	Data *ApplePayStatusData `json:"data,omitempty" url:"data,omitempty"`
	// When `true`, Apple Pay is enabled.
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplePayData) GetData() *ApplePayStatusData {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *ApplePayData) GetIsEnabled() *IsEnabled {
	if a == nil {
		return nil
	}
	return a.IsEnabled
}

func (a *ApplePayData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplePayData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplePayData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplePayData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplePayData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// This metadata appears only when the domain verification check fails. It gives more information about why the check failed.
type ApplePayMetadata struct {
	// When `true`, indicates whether the domain verification file is available at the expected path. When `false`, Payabli was unable to find the file at the expected path. If the file is missing, make sure it's hosted at the correct path: `/.well-known/apple-developer-merchantid-domain-association`
	IsFileAvailable *bool `json:"isFileAvailable,omitempty" url:"isFileAvailable,omitempty"`
	// Indicates whether the domain verification file content is valid. If the file is invalid, try downloading it and hosting it again.
	IsFileContentValid *bool `json:"isFileContentValid,omitempty" url:"isFileContentValid,omitempty"`
	// The domain name if the domain verification URL returns a redirect.
	RedirectDomainName *string `json:"redirectDomainName,omitempty" url:"redirectDomainName,omitempty"`
	// If the domain verification URL is redirected, this is the URL it's redirected to.
	// For example, www.partner.com could redirect to www.partners-new-home-page.com. In this case, you should add www.partners-new-home-page.com as a domain instead of www.partner.com.
	RedirectUrl *string `json:"redirectUrl,omitempty" url:"redirectUrl,omitempty"`
	// The status code return by the domain verification URL.
	StatusCode *int `json:"statusCode,omitempty" url:"statusCode,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplePayMetadata) GetIsFileAvailable() *bool {
	if a == nil {
		return nil
	}
	return a.IsFileAvailable
}

func (a *ApplePayMetadata) GetIsFileContentValid() *bool {
	if a == nil {
		return nil
	}
	return a.IsFileContentValid
}

func (a *ApplePayMetadata) GetRedirectDomainName() *string {
	if a == nil {
		return nil
	}
	return a.RedirectDomainName
}

func (a *ApplePayMetadata) GetRedirectUrl() *string {
	if a == nil {
		return nil
	}
	return a.RedirectUrl
}

func (a *ApplePayMetadata) GetStatusCode() *int {
	if a == nil {
		return nil
	}
	return a.StatusCode
}

func (a *ApplePayMetadata) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplePayMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplePayMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplePayMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplePayMetadata) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Details about the Apple Pay service status.
type ApplePayStatusData struct {
	// Any error message related to Apple Pay's activation status.
	ErrorMessage *string           `json:"errorMessage,omitempty" url:"errorMessage,omitempty"`
	Metadata     *ApplePayMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplePayStatusData) GetErrorMessage() *string {
	if a == nil {
		return nil
	}
	return a.ErrorMessage
}

func (a *ApplePayStatusData) GetMetadata() *ApplePayMetadata {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *ApplePayStatusData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplePayStatusData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplePayStatusData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplePayStatusData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplePayStatusData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Details about the cascade process.
type CascadeJobDetails struct {
	CreatedAt *CreatedAt `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	// Error message for a failed cascade process.
	JobErrorMessage *string       `json:"jobErrorMessage,omitempty" url:"jobErrorMessage,omitempty"`
	JobId           *JobId        `json:"jobId,omitempty" url:"jobId,omitempty"`
	JobStatus       *JobStatus    `json:"jobStatus,omitempty" url:"jobStatus,omitempty"`
	UpdatedAt       *LastModified `json:"updatedAt,omitempty" url:"updatedAt,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CascadeJobDetails) GetCreatedAt() *CreatedAt {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CascadeJobDetails) GetJobErrorMessage() *string {
	if c == nil {
		return nil
	}
	return c.JobErrorMessage
}

func (c *CascadeJobDetails) GetJobId() *JobId {
	if c == nil {
		return nil
	}
	return c.JobId
}

func (c *CascadeJobDetails) GetJobStatus() *JobStatus {
	if c == nil {
		return nil
	}
	return c.JobStatus
}

func (c *CascadeJobDetails) GetUpdatedAt() *LastModified {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CascadeJobDetails) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CascadeJobDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler CascadeJobDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CascadeJobDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CascadeJobDetails) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The entity type. Available values:
//   - paypoint
//   - organization
//   - psp (payment service provider)
type EntityType = string

// Details about the status of the Google Pay service.
type GooglePayData struct {
	// This object is only returned when the domain verification check fails. If a domain has failed validation, this object contains information about the failure.
	Data *GooglePayStatusData `json:"data,omitempty" url:"data,omitempty"`
	// When `true`, Google Pay is enabled.
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayData) GetData() *GooglePayStatusData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GooglePayData) GetIsEnabled() *IsEnabled {
	if g == nil {
		return nil
	}
	return g.IsEnabled
}

func (g *GooglePayData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayData) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePayData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePayData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// This metadata appears only when the domain verification check fails. It gives more information about why the check failed.
type GooglePayMetadata struct {
	// The status code return by the domain verification URL.
	StatusCode *int `json:"statusCode,omitempty" url:"statusCode,omitempty"`
	// If the domain verification URL is redirected, this is the URL it's redirected to.  For example, www.partner.com could redirect to www.partners-new-home-page.com. In this case, you should add www.partners-new-home-page.com as a domain instead of www.partner.com.
	RedirectUrl *string `json:"redirectUrl,omitempty" url:"redirectUrl,omitempty"`
	// The domain name if the domain verification URL returns a redirect.
	RedirectDomainName *string `json:"redirectDomainName,omitempty" url:"redirectDomainName,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayMetadata) GetStatusCode() *int {
	if g == nil {
		return nil
	}
	return g.StatusCode
}

func (g *GooglePayMetadata) GetRedirectUrl() *string {
	if g == nil {
		return nil
	}
	return g.RedirectUrl
}

func (g *GooglePayMetadata) GetRedirectDomainName() *string {
	if g == nil {
		return nil
	}
	return g.RedirectDomainName
}

func (g *GooglePayMetadata) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePayMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePayMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayMetadata) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Details about the Google Pay service status.
type GooglePayStatusData struct {
	// Any error message related to Google Pay's activation status.
	ErrorMessage *string            `json:"errorMessage,omitempty" url:"errorMessage,omitempty"`
	Metadata     *GooglePayMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayStatusData) GetErrorMessage() *string {
	if g == nil {
		return nil
	}
	return g.ErrorMessage
}

func (g *GooglePayStatusData) GetMetadata() *GooglePayMetadata {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GooglePayStatusData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayStatusData) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePayStatusData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePayStatusData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayStatusData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// The domain's owning entity's ID in Payabli. This value might be different than the `entityId`, depending on whether the domain is cascaded and whether it's inherited.`
type OwnerEntityId = int64

// The domain's owner's entity type. Available values:
//   - paypoint
//   - organization
//   - psp (payment service provider).
type OwnerEntityType = string

// Data related to the payment method domain.
type PaymentMethodDomainApiResponse struct {
	// The record type. For payment method domains, this is always `PaymentMethodDomain`.
	Type      *string        `json:"type,omitempty" url:"type,omitempty"`
	ApplePay  *ApplePayData  `json:"applePay" url:"applePay"`
	GooglePay *GooglePayData `json:"googlePay" url:"googlePay"`
	// Data about the domain's cascade status.
	Cascades        []*CascadeJobDetails  `json:"cascades,omitempty" url:"cascades,omitempty"`
	CreatedAt       CreatedAt             `json:"createdAt" url:"createdAt"`
	DomainName      DomainName            `json:"domainName" url:"domainName"`
	EntityId        EntityId              `json:"entityId" url:"entityId"`
	EntityType      EntityType            `json:"entityType" url:"entityType"`
	Id              PaymentMethodDomainId `json:"id" url:"id"`
	OwnerEntityId   OwnerEntityId         `json:"ownerEntityId" url:"ownerEntityId"`
	OwnerEntityType OwnerEntityType       `json:"ownerEntityType" url:"ownerEntityType"`
	UpdatedAt       LastModified          `json:"updatedAt,omitempty" url:"updatedAt,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentMethodDomainApiResponse) GetType() *string {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PaymentMethodDomainApiResponse) GetApplePay() *ApplePayData {
	if p == nil {
		return nil
	}
	return p.ApplePay
}

func (p *PaymentMethodDomainApiResponse) GetGooglePay() *GooglePayData {
	if p == nil {
		return nil
	}
	return p.GooglePay
}

func (p *PaymentMethodDomainApiResponse) GetCascades() []*CascadeJobDetails {
	if p == nil {
		return nil
	}
	return p.Cascades
}

func (p *PaymentMethodDomainApiResponse) GetCreatedAt() CreatedAt {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PaymentMethodDomainApiResponse) GetDomainName() DomainName {
	if p == nil {
		return ""
	}
	return p.DomainName
}

func (p *PaymentMethodDomainApiResponse) GetEntityId() EntityId {
	if p == nil {
		return 0
	}
	return p.EntityId
}

func (p *PaymentMethodDomainApiResponse) GetEntityType() EntityType {
	if p == nil {
		return ""
	}
	return p.EntityType
}

func (p *PaymentMethodDomainApiResponse) GetId() PaymentMethodDomainId {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PaymentMethodDomainApiResponse) GetOwnerEntityId() OwnerEntityId {
	if p == nil {
		return 0
	}
	return p.OwnerEntityId
}

func (p *PaymentMethodDomainApiResponse) GetOwnerEntityType() OwnerEntityType {
	if p == nil {
		return ""
	}
	return p.OwnerEntityType
}

func (p *PaymentMethodDomainApiResponse) GetUpdatedAt() LastModified {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *PaymentMethodDomainApiResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentMethodDomainApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentMethodDomainApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentMethodDomainApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentMethodDomainApiResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentMethodDomainGeneralResponse struct {
	IsSuccess      *IsSuccess                      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	Pageidentifier *PageIdentifier                 `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`
	ResponseData   *PaymentMethodDomainApiResponse `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText   *string                         `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentMethodDomainGeneralResponse) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PaymentMethodDomainGeneralResponse) GetPageidentifier() *PageIdentifier {
	if p == nil {
		return nil
	}
	return p.Pageidentifier
}

func (p *PaymentMethodDomainGeneralResponse) GetResponseData() *PaymentMethodDomainApiResponse {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PaymentMethodDomainGeneralResponse) GetResponseText() *string {
	if p == nil {
		return nil
	}
	return p.ResponseText
}

func (p *PaymentMethodDomainGeneralResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentMethodDomainGeneralResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentMethodDomainGeneralResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentMethodDomainGeneralResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentMethodDomainGeneralResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The payment method domain's ID in Payabli.
type PaymentMethodDomainId = string

type QuerySummaryNoAmt struct {
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	PageSize       *Pagesize       `json:"pageSize,omitempty" url:"pageSize,omitempty"`
	TotalPages     *Totalrecords   `json:"totalPages,omitempty" url:"totalPages,omitempty"`
	TotalRecords   *Totalrecords   `json:"totalRecords,omitempty" url:"totalRecords,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QuerySummaryNoAmt) GetPageIdentifier() *PageIdentifier {
	if q == nil {
		return nil
	}
	return q.PageIdentifier
}

func (q *QuerySummaryNoAmt) GetPageSize() *Pagesize {
	if q == nil {
		return nil
	}
	return q.PageSize
}

func (q *QuerySummaryNoAmt) GetTotalPages() *Totalrecords {
	if q == nil {
		return nil
	}
	return q.TotalPages
}

func (q *QuerySummaryNoAmt) GetTotalRecords() *Totalrecords {
	if q == nil {
		return nil
	}
	return q.TotalRecords
}

func (q *QuerySummaryNoAmt) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QuerySummaryNoAmt) UnmarshalJSON(data []byte) error {
	type unmarshaler QuerySummaryNoAmt
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QuerySummaryNoAmt(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QuerySummaryNoAmt) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Apple Pay configuration information.
type AddPaymentMethodDomainRequestApplePay struct {
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddPaymentMethodDomainRequestApplePay) GetIsEnabled() *IsEnabled {
	if a == nil {
		return nil
	}
	return a.IsEnabled
}

func (a *AddPaymentMethodDomainRequestApplePay) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddPaymentMethodDomainRequestApplePay) UnmarshalJSON(data []byte) error {
	type unmarshaler AddPaymentMethodDomainRequestApplePay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddPaymentMethodDomainRequestApplePay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddPaymentMethodDomainRequestApplePay) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Google Pay configuration information.
type AddPaymentMethodDomainRequestGooglePay struct {
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddPaymentMethodDomainRequestGooglePay) GetIsEnabled() *IsEnabled {
	if a == nil {
		return nil
	}
	return a.IsEnabled
}

func (a *AddPaymentMethodDomainRequestGooglePay) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddPaymentMethodDomainRequestGooglePay) UnmarshalJSON(data []byte) error {
	type unmarshaler AddPaymentMethodDomainRequestGooglePay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddPaymentMethodDomainRequestGooglePay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddPaymentMethodDomainRequestGooglePay) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type DeletePaymentMethodDomainResponse struct {
	IsSuccess      IsSuccess      `json:"isSuccess" url:"isSuccess"`
	PageIdentifier PageIdentifier `json:"pageIdentifier" url:"pageIdentifier"`
	// The deleted domain's domain ID.
	ResponseData *Responsedatanonobject `json:"responseData" url:"responseData"`
	ResponseText ResponseText           `json:"responseText" url:"responseText"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeletePaymentMethodDomainResponse) GetIsSuccess() IsSuccess {
	if d == nil {
		return false
	}
	return d.IsSuccess
}

func (d *DeletePaymentMethodDomainResponse) GetPageIdentifier() PageIdentifier {
	if d == nil {
		return ""
	}
	return d.PageIdentifier
}

func (d *DeletePaymentMethodDomainResponse) GetResponseData() *Responsedatanonobject {
	if d == nil {
		return nil
	}
	return d.ResponseData
}

func (d *DeletePaymentMethodDomainResponse) GetResponseText() ResponseText {
	if d == nil {
		return ""
	}
	return d.ResponseText
}

func (d *DeletePaymentMethodDomainResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeletePaymentMethodDomainResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeletePaymentMethodDomainResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeletePaymentMethodDomainResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeletePaymentMethodDomainResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type ListPaymentMethodDomainsResponse struct {
	Records []*PaymentMethodDomainApiResponse `json:"records" url:"records"`
	Summary *QuerySummaryNoAmt                `json:"summary" url:"summary"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPaymentMethodDomainsResponse) GetRecords() []*PaymentMethodDomainApiResponse {
	if l == nil {
		return nil
	}
	return l.Records
}

func (l *ListPaymentMethodDomainsResponse) GetSummary() *QuerySummaryNoAmt {
	if l == nil {
		return nil
	}
	return l.Summary
}

func (l *ListPaymentMethodDomainsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPaymentMethodDomainsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPaymentMethodDomainsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPaymentMethodDomainsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPaymentMethodDomainsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdatePaymentMethodDomainRequestWallet struct {
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatePaymentMethodDomainRequestWallet) GetIsEnabled() *IsEnabled {
	if u == nil {
		return nil
	}
	return u.IsEnabled
}

func (u *UpdatePaymentMethodDomainRequestWallet) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePaymentMethodDomainRequestWallet) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePaymentMethodDomainRequestWallet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePaymentMethodDomainRequestWallet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePaymentMethodDomainRequestWallet) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
