// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	big "math/big"
	time "time"
)

var (
	addPaymentMethodDomainRequestFieldApplePay   = big.NewInt(1 << 0)
	addPaymentMethodDomainRequestFieldGooglePay  = big.NewInt(1 << 1)
	addPaymentMethodDomainRequestFieldDomainName = big.NewInt(1 << 2)
	addPaymentMethodDomainRequestFieldEntityId   = big.NewInt(1 << 3)
	addPaymentMethodDomainRequestFieldEntityType = big.NewInt(1 << 4)
)

type AddPaymentMethodDomainRequest struct {
	// Apple Pay configuration information.
	ApplePay *AddPaymentMethodDomainRequestApplePay `json:"applePay,omitempty" url:"-"`
	// Google Pay configuration information.
	GooglePay  *AddPaymentMethodDomainRequestGooglePay `json:"googlePay,omitempty" url:"-"`
	DomainName *DomainName                             `json:"domainName,omitempty" url:"-"`
	EntityId   *EntityId                               `json:"entityId,omitempty" url:"-"`
	EntityType *EntityType                             `json:"entityType,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (a *AddPaymentMethodDomainRequest) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetApplePay sets the ApplePay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainRequest) SetApplePay(applePay *AddPaymentMethodDomainRequestApplePay) {
	a.ApplePay = applePay
	a.require(addPaymentMethodDomainRequestFieldApplePay)
}

// SetGooglePay sets the GooglePay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainRequest) SetGooglePay(googlePay *AddPaymentMethodDomainRequestGooglePay) {
	a.GooglePay = googlePay
	a.require(addPaymentMethodDomainRequestFieldGooglePay)
}

// SetDomainName sets the DomainName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainRequest) SetDomainName(domainName *DomainName) {
	a.DomainName = domainName
	a.require(addPaymentMethodDomainRequestFieldDomainName)
}

// SetEntityId sets the EntityId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainRequest) SetEntityId(entityId *EntityId) {
	a.EntityId = entityId
	a.require(addPaymentMethodDomainRequestFieldEntityId)
}

// SetEntityType sets the EntityType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainRequest) SetEntityType(entityType *EntityType) {
	a.EntityType = entityType
	a.require(addPaymentMethodDomainRequestFieldEntityType)
}

var (
	listPaymentMethodDomainsRequestFieldEntityId    = big.NewInt(1 << 0)
	listPaymentMethodDomainsRequestFieldEntityType  = big.NewInt(1 << 1)
	listPaymentMethodDomainsRequestFieldFromRecord  = big.NewInt(1 << 2)
	listPaymentMethodDomainsRequestFieldLimitRecord = big.NewInt(1 << 3)
)

type ListPaymentMethodDomainsRequest struct {
	// Identifier for the organization or paypoint.
	// - For organization, provide the organization ID - For paypoint, provide the paypoint ID
	EntityId *int64 `json:"-" url:"entityId,omitempty"`
	// The type of entity. Valid values:
	//   - organization
	//   - paypoint
	//   - psp
	EntityType *string `json:"-" url:"entityType,omitempty"`
	// Number of records to skip. Defaults to `0`.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records for query response. Defaults to `20`.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListPaymentMethodDomainsRequest) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetEntityId sets the EntityId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListPaymentMethodDomainsRequest) SetEntityId(entityId *int64) {
	l.EntityId = entityId
	l.require(listPaymentMethodDomainsRequestFieldEntityId)
}

// SetEntityType sets the EntityType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListPaymentMethodDomainsRequest) SetEntityType(entityType *string) {
	l.EntityType = entityType
	l.require(listPaymentMethodDomainsRequestFieldEntityType)
}

// SetFromRecord sets the FromRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListPaymentMethodDomainsRequest) SetFromRecord(fromRecord *int) {
	l.FromRecord = fromRecord
	l.require(listPaymentMethodDomainsRequestFieldFromRecord)
}

// SetLimitRecord sets the LimitRecord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListPaymentMethodDomainsRequest) SetLimitRecord(limitRecord *int) {
	l.LimitRecord = limitRecord
	l.require(listPaymentMethodDomainsRequestFieldLimitRecord)
}

var (
	updatePaymentMethodDomainRequestFieldApplePay  = big.NewInt(1 << 0)
	updatePaymentMethodDomainRequestFieldGooglePay = big.NewInt(1 << 1)
)

type UpdatePaymentMethodDomainRequest struct {
	ApplePay  *UpdatePaymentMethodDomainRequestWallet `json:"applePay,omitempty" url:"-"`
	GooglePay *UpdatePaymentMethodDomainRequestWallet `json:"googlePay,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (u *UpdatePaymentMethodDomainRequest) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetApplePay sets the ApplePay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdatePaymentMethodDomainRequest) SetApplePay(applePay *UpdatePaymentMethodDomainRequestWallet) {
	u.ApplePay = applePay
	u.require(updatePaymentMethodDomainRequestFieldApplePay)
}

// SetGooglePay sets the GooglePay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdatePaymentMethodDomainRequest) SetGooglePay(googlePay *UpdatePaymentMethodDomainRequestWallet) {
	u.GooglePay = googlePay
	u.require(updatePaymentMethodDomainRequestFieldGooglePay)
}

// Response for the add payment method domain operation.
var (
	addPaymentMethodDomainApiResponseFieldIsSuccess      = big.NewInt(1 << 0)
	addPaymentMethodDomainApiResponseFieldPageidentifier = big.NewInt(1 << 1)
	addPaymentMethodDomainApiResponseFieldResponseData   = big.NewInt(1 << 2)
	addPaymentMethodDomainApiResponseFieldResponseText   = big.NewInt(1 << 3)
)

type AddPaymentMethodDomainApiResponse struct {
	IsSuccess      IsSuccess                       `json:"isSuccess" url:"isSuccess"`
	Pageidentifier PageIdentifier                  `json:"pageidentifier" url:"pageidentifier"`
	ResponseData   *PaymentMethodDomainApiResponse `json:"responseData" url:"responseData"`
	ResponseText   string                          `json:"responseText" url:"responseText"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddPaymentMethodDomainApiResponse) GetIsSuccess() IsSuccess {
	if a == nil {
		return false
	}
	return a.IsSuccess
}

func (a *AddPaymentMethodDomainApiResponse) GetPageidentifier() PageIdentifier {
	if a == nil {
		return ""
	}
	return a.Pageidentifier
}

func (a *AddPaymentMethodDomainApiResponse) GetResponseData() *PaymentMethodDomainApiResponse {
	if a == nil {
		return nil
	}
	return a.ResponseData
}

func (a *AddPaymentMethodDomainApiResponse) GetResponseText() string {
	if a == nil {
		return ""
	}
	return a.ResponseText
}

func (a *AddPaymentMethodDomainApiResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddPaymentMethodDomainApiResponse) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIsSuccess sets the IsSuccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainApiResponse) SetIsSuccess(isSuccess IsSuccess) {
	a.IsSuccess = isSuccess
	a.require(addPaymentMethodDomainApiResponseFieldIsSuccess)
}

// SetPageidentifier sets the Pageidentifier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainApiResponse) SetPageidentifier(pageidentifier PageIdentifier) {
	a.Pageidentifier = pageidentifier
	a.require(addPaymentMethodDomainApiResponseFieldPageidentifier)
}

// SetResponseData sets the ResponseData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainApiResponse) SetResponseData(responseData *PaymentMethodDomainApiResponse) {
	a.ResponseData = responseData
	a.require(addPaymentMethodDomainApiResponseFieldResponseData)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainApiResponse) SetResponseText(responseText string) {
	a.ResponseText = responseText
	a.require(addPaymentMethodDomainApiResponseFieldResponseText)
}

func (a *AddPaymentMethodDomainApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AddPaymentMethodDomainApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddPaymentMethodDomainApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddPaymentMethodDomainApiResponse) MarshalJSON() ([]byte, error) {
	type embed AddPaymentMethodDomainApiResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AddPaymentMethodDomainApiResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Details about the status of the Apple Pay service.
var (
	applePayDataFieldData      = big.NewInt(1 << 0)
	applePayDataFieldIsEnabled = big.NewInt(1 << 1)
)

type ApplePayData struct {
	// This object is only returned when the domain verification check fails. If a domain has failed validation, this object contains information about the failure.
	Data *ApplePayStatusData `json:"data,omitempty" url:"data,omitempty"`
	// When `true`, Apple Pay is enabled.
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplePayData) GetData() *ApplePayStatusData {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *ApplePayData) GetIsEnabled() *IsEnabled {
	if a == nil {
		return nil
	}
	return a.IsEnabled
}

func (a *ApplePayData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplePayData) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApplePayData) SetData(data *ApplePayStatusData) {
	a.Data = data
	a.require(applePayDataFieldData)
}

// SetIsEnabled sets the IsEnabled field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApplePayData) SetIsEnabled(isEnabled *IsEnabled) {
	a.IsEnabled = isEnabled
	a.require(applePayDataFieldIsEnabled)
}

func (a *ApplePayData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplePayData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplePayData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplePayData) MarshalJSON() ([]byte, error) {
	type embed ApplePayData
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *ApplePayData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// This metadata appears only when the domain verification check fails. It gives more information about why the check failed.
var (
	applePayMetadataFieldIsFileAvailable    = big.NewInt(1 << 0)
	applePayMetadataFieldIsFileContentValid = big.NewInt(1 << 1)
	applePayMetadataFieldRedirectDomainName = big.NewInt(1 << 2)
	applePayMetadataFieldRedirectUrl        = big.NewInt(1 << 3)
	applePayMetadataFieldStatusCode         = big.NewInt(1 << 4)
)

type ApplePayMetadata struct {
	// When `true`, indicates whether the domain verification file is available at the expected path. When `false`, Payabli was unable to find the file at the expected path. If the file is missing, make sure it's hosted at the correct path: `/.well-known/apple-developer-merchantid-domain-association`
	IsFileAvailable *bool `json:"isFileAvailable,omitempty" url:"isFileAvailable,omitempty"`
	// Indicates whether the domain verification file content is valid. If the file is invalid, try downloading it and hosting it again.
	IsFileContentValid *bool `json:"isFileContentValid,omitempty" url:"isFileContentValid,omitempty"`
	// The domain name if the domain verification URL returns a redirect.
	RedirectDomainName *string `json:"redirectDomainName,omitempty" url:"redirectDomainName,omitempty"`
	// If the domain verification URL is redirected, this is the URL it's redirected to.
	// For example, www.partner.com could redirect to www.partners-new-home-page.com. In this case, you should add www.partners-new-home-page.com as a domain instead of www.partner.com.
	RedirectUrl *string `json:"redirectUrl,omitempty" url:"redirectUrl,omitempty"`
	// The status code return by the domain verification URL.
	StatusCode *int `json:"statusCode,omitempty" url:"statusCode,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplePayMetadata) GetIsFileAvailable() *bool {
	if a == nil {
		return nil
	}
	return a.IsFileAvailable
}

func (a *ApplePayMetadata) GetIsFileContentValid() *bool {
	if a == nil {
		return nil
	}
	return a.IsFileContentValid
}

func (a *ApplePayMetadata) GetRedirectDomainName() *string {
	if a == nil {
		return nil
	}
	return a.RedirectDomainName
}

func (a *ApplePayMetadata) GetRedirectUrl() *string {
	if a == nil {
		return nil
	}
	return a.RedirectUrl
}

func (a *ApplePayMetadata) GetStatusCode() *int {
	if a == nil {
		return nil
	}
	return a.StatusCode
}

func (a *ApplePayMetadata) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplePayMetadata) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIsFileAvailable sets the IsFileAvailable field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApplePayMetadata) SetIsFileAvailable(isFileAvailable *bool) {
	a.IsFileAvailable = isFileAvailable
	a.require(applePayMetadataFieldIsFileAvailable)
}

// SetIsFileContentValid sets the IsFileContentValid field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApplePayMetadata) SetIsFileContentValid(isFileContentValid *bool) {
	a.IsFileContentValid = isFileContentValid
	a.require(applePayMetadataFieldIsFileContentValid)
}

// SetRedirectDomainName sets the RedirectDomainName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApplePayMetadata) SetRedirectDomainName(redirectDomainName *string) {
	a.RedirectDomainName = redirectDomainName
	a.require(applePayMetadataFieldRedirectDomainName)
}

// SetRedirectUrl sets the RedirectUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApplePayMetadata) SetRedirectUrl(redirectUrl *string) {
	a.RedirectUrl = redirectUrl
	a.require(applePayMetadataFieldRedirectUrl)
}

// SetStatusCode sets the StatusCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApplePayMetadata) SetStatusCode(statusCode *int) {
	a.StatusCode = statusCode
	a.require(applePayMetadataFieldStatusCode)
}

func (a *ApplePayMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplePayMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplePayMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplePayMetadata) MarshalJSON() ([]byte, error) {
	type embed ApplePayMetadata
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *ApplePayMetadata) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Details about the Apple Pay service status.
var (
	applePayStatusDataFieldErrorMessage = big.NewInt(1 << 0)
	applePayStatusDataFieldMetadata     = big.NewInt(1 << 1)
)

type ApplePayStatusData struct {
	// Any error message related to Apple Pay's activation status.
	ErrorMessage *string           `json:"errorMessage,omitempty" url:"errorMessage,omitempty"`
	Metadata     *ApplePayMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApplePayStatusData) GetErrorMessage() *string {
	if a == nil {
		return nil
	}
	return a.ErrorMessage
}

func (a *ApplePayStatusData) GetMetadata() *ApplePayMetadata {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *ApplePayStatusData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApplePayStatusData) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetErrorMessage sets the ErrorMessage field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApplePayStatusData) SetErrorMessage(errorMessage *string) {
	a.ErrorMessage = errorMessage
	a.require(applePayStatusDataFieldErrorMessage)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApplePayStatusData) SetMetadata(metadata *ApplePayMetadata) {
	a.Metadata = metadata
	a.require(applePayStatusDataFieldMetadata)
}

func (a *ApplePayStatusData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplePayStatusData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplePayStatusData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplePayStatusData) MarshalJSON() ([]byte, error) {
	type embed ApplePayStatusData
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *ApplePayStatusData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Details about the cascade process.
var (
	cascadeJobDetailsFieldCreatedAt       = big.NewInt(1 << 0)
	cascadeJobDetailsFieldJobErrorMessage = big.NewInt(1 << 1)
	cascadeJobDetailsFieldJobId           = big.NewInt(1 << 2)
	cascadeJobDetailsFieldJobStatus       = big.NewInt(1 << 3)
	cascadeJobDetailsFieldUpdatedAt       = big.NewInt(1 << 4)
)

type CascadeJobDetails struct {
	CreatedAt *CreatedAt `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	// Error message for a failed cascade process.
	JobErrorMessage *string       `json:"jobErrorMessage,omitempty" url:"jobErrorMessage,omitempty"`
	JobId           *JobId        `json:"jobId,omitempty" url:"jobId,omitempty"`
	JobStatus       *JobStatus    `json:"jobStatus,omitempty" url:"jobStatus,omitempty"`
	UpdatedAt       *LastModified `json:"updatedAt,omitempty" url:"updatedAt,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CascadeJobDetails) GetCreatedAt() *CreatedAt {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CascadeJobDetails) GetJobErrorMessage() *string {
	if c == nil {
		return nil
	}
	return c.JobErrorMessage
}

func (c *CascadeJobDetails) GetJobId() *JobId {
	if c == nil {
		return nil
	}
	return c.JobId
}

func (c *CascadeJobDetails) GetJobStatus() *JobStatus {
	if c == nil {
		return nil
	}
	return c.JobStatus
}

func (c *CascadeJobDetails) GetUpdatedAt() *LastModified {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CascadeJobDetails) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CascadeJobDetails) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CascadeJobDetails) SetCreatedAt(createdAt *CreatedAt) {
	c.CreatedAt = createdAt
	c.require(cascadeJobDetailsFieldCreatedAt)
}

// SetJobErrorMessage sets the JobErrorMessage field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CascadeJobDetails) SetJobErrorMessage(jobErrorMessage *string) {
	c.JobErrorMessage = jobErrorMessage
	c.require(cascadeJobDetailsFieldJobErrorMessage)
}

// SetJobId sets the JobId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CascadeJobDetails) SetJobId(jobId *JobId) {
	c.JobId = jobId
	c.require(cascadeJobDetailsFieldJobId)
}

// SetJobStatus sets the JobStatus field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CascadeJobDetails) SetJobStatus(jobStatus *JobStatus) {
	c.JobStatus = jobStatus
	c.require(cascadeJobDetailsFieldJobStatus)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CascadeJobDetails) SetUpdatedAt(updatedAt *LastModified) {
	c.UpdatedAt = updatedAt
	c.require(cascadeJobDetailsFieldUpdatedAt)
}

func (c *CascadeJobDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler CascadeJobDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CascadeJobDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CascadeJobDetails) MarshalJSON() ([]byte, error) {
	type embed CascadeJobDetails
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CascadeJobDetails) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The entity type. Available values:
//   - paypoint
//   - organization
//   - psp (payment service provider)
type EntityType = string

// Details about the status of the Google Pay service.
var (
	googlePayDataFieldData      = big.NewInt(1 << 0)
	googlePayDataFieldIsEnabled = big.NewInt(1 << 1)
)

type GooglePayData struct {
	// This object is only returned when the domain verification check fails. If a domain has failed validation, this object contains information about the failure.
	Data *GooglePayStatusData `json:"data,omitempty" url:"data,omitempty"`
	// When `true`, Google Pay is enabled.
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayData) GetData() *GooglePayStatusData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GooglePayData) GetIsEnabled() *IsEnabled {
	if g == nil {
		return nil
	}
	return g.IsEnabled
}

func (g *GooglePayData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayData) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GooglePayData) SetData(data *GooglePayStatusData) {
	g.Data = data
	g.require(googlePayDataFieldData)
}

// SetIsEnabled sets the IsEnabled field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GooglePayData) SetIsEnabled(isEnabled *IsEnabled) {
	g.IsEnabled = isEnabled
	g.require(googlePayDataFieldIsEnabled)
}

func (g *GooglePayData) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePayData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePayData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayData) MarshalJSON() ([]byte, error) {
	type embed GooglePayData
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GooglePayData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// This metadata appears only when the domain verification check fails. It gives more information about why the check failed.
var (
	googlePayMetadataFieldStatusCode         = big.NewInt(1 << 0)
	googlePayMetadataFieldRedirectUrl        = big.NewInt(1 << 1)
	googlePayMetadataFieldRedirectDomainName = big.NewInt(1 << 2)
)

type GooglePayMetadata struct {
	// The status code return by the domain verification URL.
	StatusCode *int `json:"statusCode,omitempty" url:"statusCode,omitempty"`
	// If the domain verification URL is redirected, this is the URL it's redirected to.  For example, www.partner.com could redirect to www.partners-new-home-page.com. In this case, you should add www.partners-new-home-page.com as a domain instead of www.partner.com.
	RedirectUrl *string `json:"redirectUrl,omitempty" url:"redirectUrl,omitempty"`
	// The domain name if the domain verification URL returns a redirect.
	RedirectDomainName *string `json:"redirectDomainName,omitempty" url:"redirectDomainName,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayMetadata) GetStatusCode() *int {
	if g == nil {
		return nil
	}
	return g.StatusCode
}

func (g *GooglePayMetadata) GetRedirectUrl() *string {
	if g == nil {
		return nil
	}
	return g.RedirectUrl
}

func (g *GooglePayMetadata) GetRedirectDomainName() *string {
	if g == nil {
		return nil
	}
	return g.RedirectDomainName
}

func (g *GooglePayMetadata) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayMetadata) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetStatusCode sets the StatusCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GooglePayMetadata) SetStatusCode(statusCode *int) {
	g.StatusCode = statusCode
	g.require(googlePayMetadataFieldStatusCode)
}

// SetRedirectUrl sets the RedirectUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GooglePayMetadata) SetRedirectUrl(redirectUrl *string) {
	g.RedirectUrl = redirectUrl
	g.require(googlePayMetadataFieldRedirectUrl)
}

// SetRedirectDomainName sets the RedirectDomainName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GooglePayMetadata) SetRedirectDomainName(redirectDomainName *string) {
	g.RedirectDomainName = redirectDomainName
	g.require(googlePayMetadataFieldRedirectDomainName)
}

func (g *GooglePayMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePayMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePayMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayMetadata) MarshalJSON() ([]byte, error) {
	type embed GooglePayMetadata
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GooglePayMetadata) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Details about the Google Pay service status.
var (
	googlePayStatusDataFieldErrorMessage = big.NewInt(1 << 0)
	googlePayStatusDataFieldMetadata     = big.NewInt(1 << 1)
)

type GooglePayStatusData struct {
	// Any error message related to Google Pay's activation status.
	ErrorMessage *string            `json:"errorMessage,omitempty" url:"errorMessage,omitempty"`
	Metadata     *GooglePayMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GooglePayStatusData) GetErrorMessage() *string {
	if g == nil {
		return nil
	}
	return g.ErrorMessage
}

func (g *GooglePayStatusData) GetMetadata() *GooglePayMetadata {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GooglePayStatusData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GooglePayStatusData) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetErrorMessage sets the ErrorMessage field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GooglePayStatusData) SetErrorMessage(errorMessage *string) {
	g.ErrorMessage = errorMessage
	g.require(googlePayStatusDataFieldErrorMessage)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GooglePayStatusData) SetMetadata(metadata *GooglePayMetadata) {
	g.Metadata = metadata
	g.require(googlePayStatusDataFieldMetadata)
}

func (g *GooglePayStatusData) UnmarshalJSON(data []byte) error {
	type unmarshaler GooglePayStatusData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GooglePayStatusData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GooglePayStatusData) MarshalJSON() ([]byte, error) {
	type embed GooglePayStatusData
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GooglePayStatusData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// The domain's owning entity's ID in Payabli. This value might be different than the `entityId`, depending on whether the domain is cascaded and whether it's inherited.`
type OwnerEntityId = int64

// The domain's owner's entity type. Available values:
//   - paypoint
//   - organization
//   - psp (payment service provider).
type OwnerEntityType = string

// Data related to the payment method domain.
var (
	paymentMethodDomainApiResponseFieldType            = big.NewInt(1 << 0)
	paymentMethodDomainApiResponseFieldApplePay        = big.NewInt(1 << 1)
	paymentMethodDomainApiResponseFieldGooglePay       = big.NewInt(1 << 2)
	paymentMethodDomainApiResponseFieldCascades        = big.NewInt(1 << 3)
	paymentMethodDomainApiResponseFieldCreatedAt       = big.NewInt(1 << 4)
	paymentMethodDomainApiResponseFieldDomainName      = big.NewInt(1 << 5)
	paymentMethodDomainApiResponseFieldEntityId        = big.NewInt(1 << 6)
	paymentMethodDomainApiResponseFieldEntityType      = big.NewInt(1 << 7)
	paymentMethodDomainApiResponseFieldId              = big.NewInt(1 << 8)
	paymentMethodDomainApiResponseFieldOwnerEntityId   = big.NewInt(1 << 9)
	paymentMethodDomainApiResponseFieldOwnerEntityType = big.NewInt(1 << 10)
	paymentMethodDomainApiResponseFieldUpdatedAt       = big.NewInt(1 << 11)
)

type PaymentMethodDomainApiResponse struct {
	// The record type. For payment method domains, this is always `PaymentMethodDomain`.
	Type      *string        `json:"type,omitempty" url:"type,omitempty"`
	ApplePay  *ApplePayData  `json:"applePay" url:"applePay"`
	GooglePay *GooglePayData `json:"googlePay" url:"googlePay"`
	// Data about the domain's cascade status.
	Cascades        []*CascadeJobDetails  `json:"cascades,omitempty" url:"cascades,omitempty"`
	CreatedAt       CreatedAt             `json:"createdAt" url:"createdAt"`
	DomainName      DomainName            `json:"domainName" url:"domainName"`
	EntityId        EntityId              `json:"entityId" url:"entityId"`
	EntityType      EntityType            `json:"entityType" url:"entityType"`
	Id              PaymentMethodDomainId `json:"id" url:"id"`
	OwnerEntityId   OwnerEntityId         `json:"ownerEntityId" url:"ownerEntityId"`
	OwnerEntityType OwnerEntityType       `json:"ownerEntityType" url:"ownerEntityType"`
	UpdatedAt       LastModified          `json:"updatedAt,omitempty" url:"updatedAt,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentMethodDomainApiResponse) GetType() *string {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PaymentMethodDomainApiResponse) GetApplePay() *ApplePayData {
	if p == nil {
		return nil
	}
	return p.ApplePay
}

func (p *PaymentMethodDomainApiResponse) GetGooglePay() *GooglePayData {
	if p == nil {
		return nil
	}
	return p.GooglePay
}

func (p *PaymentMethodDomainApiResponse) GetCascades() []*CascadeJobDetails {
	if p == nil {
		return nil
	}
	return p.Cascades
}

func (p *PaymentMethodDomainApiResponse) GetCreatedAt() CreatedAt {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PaymentMethodDomainApiResponse) GetDomainName() DomainName {
	if p == nil {
		return ""
	}
	return p.DomainName
}

func (p *PaymentMethodDomainApiResponse) GetEntityId() EntityId {
	if p == nil {
		return 0
	}
	return p.EntityId
}

func (p *PaymentMethodDomainApiResponse) GetEntityType() EntityType {
	if p == nil {
		return ""
	}
	return p.EntityType
}

func (p *PaymentMethodDomainApiResponse) GetId() PaymentMethodDomainId {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PaymentMethodDomainApiResponse) GetOwnerEntityId() OwnerEntityId {
	if p == nil {
		return 0
	}
	return p.OwnerEntityId
}

func (p *PaymentMethodDomainApiResponse) GetOwnerEntityType() OwnerEntityType {
	if p == nil {
		return ""
	}
	return p.OwnerEntityType
}

func (p *PaymentMethodDomainApiResponse) GetUpdatedAt() LastModified {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *PaymentMethodDomainApiResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentMethodDomainApiResponse) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetType(type_ *string) {
	p.Type = type_
	p.require(paymentMethodDomainApiResponseFieldType)
}

// SetApplePay sets the ApplePay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetApplePay(applePay *ApplePayData) {
	p.ApplePay = applePay
	p.require(paymentMethodDomainApiResponseFieldApplePay)
}

// SetGooglePay sets the GooglePay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetGooglePay(googlePay *GooglePayData) {
	p.GooglePay = googlePay
	p.require(paymentMethodDomainApiResponseFieldGooglePay)
}

// SetCascades sets the Cascades field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetCascades(cascades []*CascadeJobDetails) {
	p.Cascades = cascades
	p.require(paymentMethodDomainApiResponseFieldCascades)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetCreatedAt(createdAt CreatedAt) {
	p.CreatedAt = createdAt
	p.require(paymentMethodDomainApiResponseFieldCreatedAt)
}

// SetDomainName sets the DomainName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetDomainName(domainName DomainName) {
	p.DomainName = domainName
	p.require(paymentMethodDomainApiResponseFieldDomainName)
}

// SetEntityId sets the EntityId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetEntityId(entityId EntityId) {
	p.EntityId = entityId
	p.require(paymentMethodDomainApiResponseFieldEntityId)
}

// SetEntityType sets the EntityType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetEntityType(entityType EntityType) {
	p.EntityType = entityType
	p.require(paymentMethodDomainApiResponseFieldEntityType)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetId(id PaymentMethodDomainId) {
	p.Id = id
	p.require(paymentMethodDomainApiResponseFieldId)
}

// SetOwnerEntityId sets the OwnerEntityId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetOwnerEntityId(ownerEntityId OwnerEntityId) {
	p.OwnerEntityId = ownerEntityId
	p.require(paymentMethodDomainApiResponseFieldOwnerEntityId)
}

// SetOwnerEntityType sets the OwnerEntityType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetOwnerEntityType(ownerEntityType OwnerEntityType) {
	p.OwnerEntityType = ownerEntityType
	p.require(paymentMethodDomainApiResponseFieldOwnerEntityType)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainApiResponse) SetUpdatedAt(updatedAt LastModified) {
	p.UpdatedAt = updatedAt
	p.require(paymentMethodDomainApiResponseFieldUpdatedAt)
}

func (p *PaymentMethodDomainApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentMethodDomainApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentMethodDomainApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentMethodDomainApiResponse) MarshalJSON() ([]byte, error) {
	type embed PaymentMethodDomainApiResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PaymentMethodDomainApiResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	paymentMethodDomainGeneralResponseFieldIsSuccess      = big.NewInt(1 << 0)
	paymentMethodDomainGeneralResponseFieldPageidentifier = big.NewInt(1 << 1)
	paymentMethodDomainGeneralResponseFieldResponseData   = big.NewInt(1 << 2)
	paymentMethodDomainGeneralResponseFieldResponseText   = big.NewInt(1 << 3)
)

type PaymentMethodDomainGeneralResponse struct {
	IsSuccess      *IsSuccess                      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	Pageidentifier *PageIdentifier                 `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`
	ResponseData   *PaymentMethodDomainApiResponse `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText   string                          `json:"responseText" url:"responseText"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentMethodDomainGeneralResponse) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PaymentMethodDomainGeneralResponse) GetPageidentifier() *PageIdentifier {
	if p == nil {
		return nil
	}
	return p.Pageidentifier
}

func (p *PaymentMethodDomainGeneralResponse) GetResponseData() *PaymentMethodDomainApiResponse {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PaymentMethodDomainGeneralResponse) GetResponseText() string {
	if p == nil {
		return ""
	}
	return p.ResponseText
}

func (p *PaymentMethodDomainGeneralResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentMethodDomainGeneralResponse) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetIsSuccess sets the IsSuccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainGeneralResponse) SetIsSuccess(isSuccess *IsSuccess) {
	p.IsSuccess = isSuccess
	p.require(paymentMethodDomainGeneralResponseFieldIsSuccess)
}

// SetPageidentifier sets the Pageidentifier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainGeneralResponse) SetPageidentifier(pageidentifier *PageIdentifier) {
	p.Pageidentifier = pageidentifier
	p.require(paymentMethodDomainGeneralResponseFieldPageidentifier)
}

// SetResponseData sets the ResponseData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainGeneralResponse) SetResponseData(responseData *PaymentMethodDomainApiResponse) {
	p.ResponseData = responseData
	p.require(paymentMethodDomainGeneralResponseFieldResponseData)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentMethodDomainGeneralResponse) SetResponseText(responseText string) {
	p.ResponseText = responseText
	p.require(paymentMethodDomainGeneralResponseFieldResponseText)
}

func (p *PaymentMethodDomainGeneralResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentMethodDomainGeneralResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentMethodDomainGeneralResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentMethodDomainGeneralResponse) MarshalJSON() ([]byte, error) {
	type embed PaymentMethodDomainGeneralResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PaymentMethodDomainGeneralResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The payment method domain's ID in Payabli.
type PaymentMethodDomainId = string

var (
	querySummaryNoAmtFieldPageIdentifier = big.NewInt(1 << 0)
	querySummaryNoAmtFieldPageSize       = big.NewInt(1 << 1)
	querySummaryNoAmtFieldTotalPages     = big.NewInt(1 << 2)
	querySummaryNoAmtFieldTotalRecords   = big.NewInt(1 << 3)
)

type QuerySummaryNoAmt struct {
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	PageSize       *Pagesize       `json:"pageSize,omitempty" url:"pageSize,omitempty"`
	TotalPages     *Totalrecords   `json:"totalPages,omitempty" url:"totalPages,omitempty"`
	TotalRecords   *Totalrecords   `json:"totalRecords,omitempty" url:"totalRecords,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QuerySummaryNoAmt) GetPageIdentifier() *PageIdentifier {
	if q == nil {
		return nil
	}
	return q.PageIdentifier
}

func (q *QuerySummaryNoAmt) GetPageSize() *Pagesize {
	if q == nil {
		return nil
	}
	return q.PageSize
}

func (q *QuerySummaryNoAmt) GetTotalPages() *Totalrecords {
	if q == nil {
		return nil
	}
	return q.TotalPages
}

func (q *QuerySummaryNoAmt) GetTotalRecords() *Totalrecords {
	if q == nil {
		return nil
	}
	return q.TotalRecords
}

func (q *QuerySummaryNoAmt) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QuerySummaryNoAmt) require(field *big.Int) {
	if q.explicitFields == nil {
		q.explicitFields = big.NewInt(0)
	}
	q.explicitFields.Or(q.explicitFields, field)
}

// SetPageIdentifier sets the PageIdentifier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (q *QuerySummaryNoAmt) SetPageIdentifier(pageIdentifier *PageIdentifier) {
	q.PageIdentifier = pageIdentifier
	q.require(querySummaryNoAmtFieldPageIdentifier)
}

// SetPageSize sets the PageSize field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (q *QuerySummaryNoAmt) SetPageSize(pageSize *Pagesize) {
	q.PageSize = pageSize
	q.require(querySummaryNoAmtFieldPageSize)
}

// SetTotalPages sets the TotalPages field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (q *QuerySummaryNoAmt) SetTotalPages(totalPages *Totalrecords) {
	q.TotalPages = totalPages
	q.require(querySummaryNoAmtFieldTotalPages)
}

// SetTotalRecords sets the TotalRecords field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (q *QuerySummaryNoAmt) SetTotalRecords(totalRecords *Totalrecords) {
	q.TotalRecords = totalRecords
	q.require(querySummaryNoAmtFieldTotalRecords)
}

func (q *QuerySummaryNoAmt) UnmarshalJSON(data []byte) error {
	type unmarshaler QuerySummaryNoAmt
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QuerySummaryNoAmt(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QuerySummaryNoAmt) MarshalJSON() ([]byte, error) {
	type embed QuerySummaryNoAmt
	var marshaler = struct {
		embed
	}{
		embed: embed(*q),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, q.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (q *QuerySummaryNoAmt) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Apple Pay configuration information.
var (
	addPaymentMethodDomainRequestApplePayFieldIsEnabled = big.NewInt(1 << 0)
)

type AddPaymentMethodDomainRequestApplePay struct {
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddPaymentMethodDomainRequestApplePay) GetIsEnabled() *IsEnabled {
	if a == nil {
		return nil
	}
	return a.IsEnabled
}

func (a *AddPaymentMethodDomainRequestApplePay) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddPaymentMethodDomainRequestApplePay) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIsEnabled sets the IsEnabled field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainRequestApplePay) SetIsEnabled(isEnabled *IsEnabled) {
	a.IsEnabled = isEnabled
	a.require(addPaymentMethodDomainRequestApplePayFieldIsEnabled)
}

func (a *AddPaymentMethodDomainRequestApplePay) UnmarshalJSON(data []byte) error {
	type unmarshaler AddPaymentMethodDomainRequestApplePay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddPaymentMethodDomainRequestApplePay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddPaymentMethodDomainRequestApplePay) MarshalJSON() ([]byte, error) {
	type embed AddPaymentMethodDomainRequestApplePay
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AddPaymentMethodDomainRequestApplePay) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Google Pay configuration information.
var (
	addPaymentMethodDomainRequestGooglePayFieldIsEnabled = big.NewInt(1 << 0)
)

type AddPaymentMethodDomainRequestGooglePay struct {
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddPaymentMethodDomainRequestGooglePay) GetIsEnabled() *IsEnabled {
	if a == nil {
		return nil
	}
	return a.IsEnabled
}

func (a *AddPaymentMethodDomainRequestGooglePay) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddPaymentMethodDomainRequestGooglePay) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIsEnabled sets the IsEnabled field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddPaymentMethodDomainRequestGooglePay) SetIsEnabled(isEnabled *IsEnabled) {
	a.IsEnabled = isEnabled
	a.require(addPaymentMethodDomainRequestGooglePayFieldIsEnabled)
}

func (a *AddPaymentMethodDomainRequestGooglePay) UnmarshalJSON(data []byte) error {
	type unmarshaler AddPaymentMethodDomainRequestGooglePay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddPaymentMethodDomainRequestGooglePay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddPaymentMethodDomainRequestGooglePay) MarshalJSON() ([]byte, error) {
	type embed AddPaymentMethodDomainRequestGooglePay
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AddPaymentMethodDomainRequestGooglePay) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	deletePaymentMethodDomainResponseFieldIsSuccess      = big.NewInt(1 << 0)
	deletePaymentMethodDomainResponseFieldPageIdentifier = big.NewInt(1 << 1)
	deletePaymentMethodDomainResponseFieldResponseData   = big.NewInt(1 << 2)
	deletePaymentMethodDomainResponseFieldResponseText   = big.NewInt(1 << 3)
)

type DeletePaymentMethodDomainResponse struct {
	IsSuccess      IsSuccess      `json:"isSuccess" url:"isSuccess"`
	PageIdentifier PageIdentifier `json:"pageIdentifier" url:"pageIdentifier"`
	// The deleted domain's domain ID.
	ResponseData *Responsedatanonobject `json:"responseData" url:"responseData"`
	ResponseText ResponseText           `json:"responseText" url:"responseText"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeletePaymentMethodDomainResponse) GetIsSuccess() IsSuccess {
	if d == nil {
		return false
	}
	return d.IsSuccess
}

func (d *DeletePaymentMethodDomainResponse) GetPageIdentifier() PageIdentifier {
	if d == nil {
		return ""
	}
	return d.PageIdentifier
}

func (d *DeletePaymentMethodDomainResponse) GetResponseData() *Responsedatanonobject {
	if d == nil {
		return nil
	}
	return d.ResponseData
}

func (d *DeletePaymentMethodDomainResponse) GetResponseText() ResponseText {
	if d == nil {
		return ""
	}
	return d.ResponseText
}

func (d *DeletePaymentMethodDomainResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeletePaymentMethodDomainResponse) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetIsSuccess sets the IsSuccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeletePaymentMethodDomainResponse) SetIsSuccess(isSuccess IsSuccess) {
	d.IsSuccess = isSuccess
	d.require(deletePaymentMethodDomainResponseFieldIsSuccess)
}

// SetPageIdentifier sets the PageIdentifier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeletePaymentMethodDomainResponse) SetPageIdentifier(pageIdentifier PageIdentifier) {
	d.PageIdentifier = pageIdentifier
	d.require(deletePaymentMethodDomainResponseFieldPageIdentifier)
}

// SetResponseData sets the ResponseData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeletePaymentMethodDomainResponse) SetResponseData(responseData *Responsedatanonobject) {
	d.ResponseData = responseData
	d.require(deletePaymentMethodDomainResponseFieldResponseData)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeletePaymentMethodDomainResponse) SetResponseText(responseText ResponseText) {
	d.ResponseText = responseText
	d.require(deletePaymentMethodDomainResponseFieldResponseText)
}

func (d *DeletePaymentMethodDomainResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeletePaymentMethodDomainResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeletePaymentMethodDomainResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeletePaymentMethodDomainResponse) MarshalJSON() ([]byte, error) {
	type embed DeletePaymentMethodDomainResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DeletePaymentMethodDomainResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	listPaymentMethodDomainsResponseFieldRecords = big.NewInt(1 << 0)
	listPaymentMethodDomainsResponseFieldSummary = big.NewInt(1 << 1)
)

type ListPaymentMethodDomainsResponse struct {
	Records []*PaymentMethodDomainApiResponse `json:"records" url:"records"`
	Summary *QuerySummaryNoAmt                `json:"summary" url:"summary"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPaymentMethodDomainsResponse) GetRecords() []*PaymentMethodDomainApiResponse {
	if l == nil {
		return nil
	}
	return l.Records
}

func (l *ListPaymentMethodDomainsResponse) GetSummary() *QuerySummaryNoAmt {
	if l == nil {
		return nil
	}
	return l.Summary
}

func (l *ListPaymentMethodDomainsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPaymentMethodDomainsResponse) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetRecords sets the Records field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListPaymentMethodDomainsResponse) SetRecords(records []*PaymentMethodDomainApiResponse) {
	l.Records = records
	l.require(listPaymentMethodDomainsResponseFieldRecords)
}

// SetSummary sets the Summary field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListPaymentMethodDomainsResponse) SetSummary(summary *QuerySummaryNoAmt) {
	l.Summary = summary
	l.require(listPaymentMethodDomainsResponseFieldSummary)
}

func (l *ListPaymentMethodDomainsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPaymentMethodDomainsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPaymentMethodDomainsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPaymentMethodDomainsResponse) MarshalJSON() ([]byte, error) {
	type embed ListPaymentMethodDomainsResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListPaymentMethodDomainsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	updatePaymentMethodDomainRequestWalletFieldIsEnabled = big.NewInt(1 << 0)
)

type UpdatePaymentMethodDomainRequestWallet struct {
	IsEnabled *IsEnabled `json:"isEnabled,omitempty" url:"isEnabled,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatePaymentMethodDomainRequestWallet) GetIsEnabled() *IsEnabled {
	if u == nil {
		return nil
	}
	return u.IsEnabled
}

func (u *UpdatePaymentMethodDomainRequestWallet) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePaymentMethodDomainRequestWallet) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetIsEnabled sets the IsEnabled field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdatePaymentMethodDomainRequestWallet) SetIsEnabled(isEnabled *IsEnabled) {
	u.IsEnabled = isEnabled
	u.require(updatePaymentMethodDomainRequestWalletFieldIsEnabled)
}

func (u *UpdatePaymentMethodDomainRequestWallet) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePaymentMethodDomainRequestWallet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePaymentMethodDomainRequestWallet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePaymentMethodDomainRequestWallet) MarshalJSON() ([]byte, error) {
	type embed UpdatePaymentMethodDomainRequestWallet
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UpdatePaymentMethodDomainRequestWallet) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
