// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	big "math/big"
	time "time"
)

var (
	payLinkDataBillFieldIdempotencyKey = big.NewInt(1 << 0)
	payLinkDataBillFieldAmountFixed    = big.NewInt(1 << 1)
	payLinkDataBillFieldMail2          = big.NewInt(1 << 2)
)

type PayLinkDataBill struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	// Indicates whether customer can modify the payment amount. A value of `true` means the amount isn't modifiable, a value `false` means the payor can modify the amount to pay.
	AmountFixed *bool `json:"-" url:"amountFixed,omitempty"`
	// List of recipient email addresses. When there is more than one, separate them by a semicolon (;).
	Mail2 *string                 `json:"-" url:"mail2,omitempty"`
	Body  *PaymentPageRequestBody `json:"-" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (p *PayLinkDataBill) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetIdempotencyKey sets the IdempotencyKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkDataBill) SetIdempotencyKey(idempotencyKey *IdempotencyKey) {
	p.IdempotencyKey = idempotencyKey
	p.require(payLinkDataBillFieldIdempotencyKey)
}

// SetAmountFixed sets the AmountFixed field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkDataBill) SetAmountFixed(amountFixed *bool) {
	p.AmountFixed = amountFixed
	p.require(payLinkDataBillFieldAmountFixed)
}

// SetMail2 sets the Mail2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkDataBill) SetMail2(mail2 *string) {
	p.Mail2 = mail2
	p.require(payLinkDataBillFieldMail2)
}

func (p *PayLinkDataBill) UnmarshalJSON(data []byte) error {
	body := new(PaymentPageRequestBody)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	p.Body = body
	return nil
}

func (p *PayLinkDataBill) MarshalJSON() ([]byte, error) {
	return json.Marshal(p.Body)
}

var (
	payLinkDataOutFieldEntryPoint   = big.NewInt(1 << 0)
	payLinkDataOutFieldVendorNumber = big.NewInt(1 << 1)
	payLinkDataOutFieldMail2        = big.NewInt(1 << 2)
	payLinkDataOutFieldAmountFixed  = big.NewInt(1 << 3)
)

type PayLinkDataOut struct {
	EntryPoint Entry `json:"-" url:"entryPoint"`
	// The vendor number for the vendor being paid with this payment link.
	VendorNumber string `json:"-" url:"vendorNumber"`
	// List of recipient email addresses. When there is more than one, separate them by a semicolon (;).
	Mail2 *string `json:"-" url:"mail2,omitempty"`
	// Indicates whether customer can modify the payment amount. A value of `true` means the amount isn't modifiable, a value `false` means the payor can modify the amount to pay.
	AmountFixed *string                 `json:"-" url:"amountFixed,omitempty"`
	Body        *PaymentPageRequestBody `json:"-" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (p *PayLinkDataOut) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetEntryPoint sets the EntryPoint field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkDataOut) SetEntryPoint(entryPoint Entry) {
	p.EntryPoint = entryPoint
	p.require(payLinkDataOutFieldEntryPoint)
}

// SetVendorNumber sets the VendorNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkDataOut) SetVendorNumber(vendorNumber string) {
	p.VendorNumber = vendorNumber
	p.require(payLinkDataOutFieldVendorNumber)
}

// SetMail2 sets the Mail2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkDataOut) SetMail2(mail2 *string) {
	p.Mail2 = mail2
	p.require(payLinkDataOutFieldMail2)
}

// SetAmountFixed sets the AmountFixed field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkDataOut) SetAmountFixed(amountFixed *string) {
	p.AmountFixed = amountFixed
	p.require(payLinkDataOutFieldAmountFixed)
}

func (p *PayLinkDataOut) UnmarshalJSON(data []byte) error {
	body := new(PaymentPageRequestBody)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	p.Body = body
	return nil
}

func (p *PayLinkDataOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(p.Body)
}

var (
	payLinkDataInvoiceFieldIdempotencyKey = big.NewInt(1 << 0)
	payLinkDataInvoiceFieldAmountFixed    = big.NewInt(1 << 1)
	payLinkDataInvoiceFieldMail2          = big.NewInt(1 << 2)
)

type PayLinkDataInvoice struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	// Indicates whether customer can modify the payment amount. A value of `true` means the amount isn't modifiable, a value `false` means the payor can modify the amount to pay.
	AmountFixed *bool `json:"-" url:"amountFixed,omitempty"`
	// List of recipient email addresses. When there is more than one, separate them by a semicolon (;).
	Mail2 *string                 `json:"-" url:"mail2,omitempty"`
	Body  *PaymentPageRequestBody `json:"-" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (p *PayLinkDataInvoice) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetIdempotencyKey sets the IdempotencyKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkDataInvoice) SetIdempotencyKey(idempotencyKey *IdempotencyKey) {
	p.IdempotencyKey = idempotencyKey
	p.require(payLinkDataInvoiceFieldIdempotencyKey)
}

// SetAmountFixed sets the AmountFixed field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkDataInvoice) SetAmountFixed(amountFixed *bool) {
	p.AmountFixed = amountFixed
	p.require(payLinkDataInvoiceFieldAmountFixed)
}

// SetMail2 sets the Mail2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkDataInvoice) SetMail2(mail2 *string) {
	p.Mail2 = mail2
	p.require(payLinkDataInvoiceFieldMail2)
}

func (p *PayLinkDataInvoice) UnmarshalJSON(data []byte) error {
	body := new(PaymentPageRequestBody)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	p.Body = body
	return nil
}

func (p *PayLinkDataInvoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(p.Body)
}

var (
	refreshPayLinkFromIdRequestFieldAmountFixed = big.NewInt(1 << 0)
)

type RefreshPayLinkFromIdRequest struct {
	// Indicates whether customer can modify the payment amount. A value of `true` means the amount isn't modifiable, a value `false` means the payor can modify the amount to pay.
	AmountFixed *bool `json:"-" url:"amountFixed,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (r *RefreshPayLinkFromIdRequest) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetAmountFixed sets the AmountFixed field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RefreshPayLinkFromIdRequest) SetAmountFixed(amountFixed *bool) {
	r.AmountFixed = amountFixed
	r.require(refreshPayLinkFromIdRequestFieldAmountFixed)
}

var (
	sendPayLinkFromIdRequestFieldAttachfile = big.NewInt(1 << 0)
	sendPayLinkFromIdRequestFieldMail2      = big.NewInt(1 << 1)
)

type SendPayLinkFromIdRequest struct {
	// When `true`, attaches a PDF version of invoice to the email.
	Attachfile *bool `json:"-" url:"attachfile,omitempty"`
	// List of recipient email addresses. When there is more than one, separate them by a semicolon (;).
	Mail2 *string `json:"-" url:"mail2,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (s *SendPayLinkFromIdRequest) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetAttachfile sets the Attachfile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendPayLinkFromIdRequest) SetAttachfile(attachfile *bool) {
	s.Attachfile = attachfile
	s.require(sendPayLinkFromIdRequestFieldAttachfile)
}

// SetMail2 sets the Mail2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendPayLinkFromIdRequest) SetMail2(mail2 *string) {
	s.Mail2 = mail2
	s.require(sendPayLinkFromIdRequestFieldMail2)
}

var (
	pagelinkSettingFieldColor                   = big.NewInt(1 << 0)
	pagelinkSettingFieldCustomCssUrl            = big.NewInt(1 << 1)
	pagelinkSettingFieldLanguage                = big.NewInt(1 << 2)
	pagelinkSettingFieldPageLogo                = big.NewInt(1 << 3)
	pagelinkSettingFieldRedirectAfterApprove    = big.NewInt(1 << 4)
	pagelinkSettingFieldRedirectAfterApproveUrl = big.NewInt(1 << 5)
)

type PagelinkSetting struct {
	// An HTML color code in format #RRGGBB
	Color *string `json:"color,omitempty" url:"color,omitempty"`
	// Complete URL to a custom CSS file to be loaded with the page
	CustomCssUrl *string `json:"customCssUrl,omitempty" url:"customCssUrl,omitempty"`
	// Two-letter code following ISO 639-1
	Language *string `json:"language,omitempty" url:"language,omitempty"`
	// Object containing logo file to upload/ use in page
	PageLogo *FileContent `json:"pageLogo,omitempty" url:"pageLogo,omitempty"`
	// Flag indicating if the capability for redirection in the page will be activated
	RedirectAfterApprove *bool `json:"redirectAfterApprove,omitempty" url:"redirectAfterApprove,omitempty"`
	// Complete URL where the page will be redirected after completion
	RedirectAfterApproveUrl *string `json:"redirectAfterApproveUrl,omitempty" url:"redirectAfterApproveUrl,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PagelinkSetting) GetColor() *string {
	if p == nil {
		return nil
	}
	return p.Color
}

func (p *PagelinkSetting) GetCustomCssUrl() *string {
	if p == nil {
		return nil
	}
	return p.CustomCssUrl
}

func (p *PagelinkSetting) GetLanguage() *string {
	if p == nil {
		return nil
	}
	return p.Language
}

func (p *PagelinkSetting) GetPageLogo() *FileContent {
	if p == nil {
		return nil
	}
	return p.PageLogo
}

func (p *PagelinkSetting) GetRedirectAfterApprove() *bool {
	if p == nil {
		return nil
	}
	return p.RedirectAfterApprove
}

func (p *PagelinkSetting) GetRedirectAfterApproveUrl() *string {
	if p == nil {
		return nil
	}
	return p.RedirectAfterApproveUrl
}

func (p *PagelinkSetting) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PagelinkSetting) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetColor sets the Color field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PagelinkSetting) SetColor(color *string) {
	p.Color = color
	p.require(pagelinkSettingFieldColor)
}

// SetCustomCssUrl sets the CustomCssUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PagelinkSetting) SetCustomCssUrl(customCssUrl *string) {
	p.CustomCssUrl = customCssUrl
	p.require(pagelinkSettingFieldCustomCssUrl)
}

// SetLanguage sets the Language field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PagelinkSetting) SetLanguage(language *string) {
	p.Language = language
	p.require(pagelinkSettingFieldLanguage)
}

// SetPageLogo sets the PageLogo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PagelinkSetting) SetPageLogo(pageLogo *FileContent) {
	p.PageLogo = pageLogo
	p.require(pagelinkSettingFieldPageLogo)
}

// SetRedirectAfterApprove sets the RedirectAfterApprove field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PagelinkSetting) SetRedirectAfterApprove(redirectAfterApprove *bool) {
	p.RedirectAfterApprove = redirectAfterApprove
	p.require(pagelinkSettingFieldRedirectAfterApprove)
}

// SetRedirectAfterApproveUrl sets the RedirectAfterApproveUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PagelinkSetting) SetRedirectAfterApproveUrl(redirectAfterApproveUrl *string) {
	p.RedirectAfterApproveUrl = redirectAfterApproveUrl
	p.require(pagelinkSettingFieldRedirectAfterApproveUrl)
}

func (p *PagelinkSetting) UnmarshalJSON(data []byte) error {
	type unmarshaler PagelinkSetting
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PagelinkSetting(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PagelinkSetting) MarshalJSON() ([]byte, error) {
	type embed PagelinkSetting
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PagelinkSetting) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Request body for the push paylink operation.
type PushPayLinkRequest struct {
	Channel string
	Email   *PushPayLinkRequestEmail
	Sms     *PushPayLinkRequestSms
}

func (p *PushPayLinkRequest) GetChannel() string {
	if p == nil {
		return ""
	}
	return p.Channel
}

func (p *PushPayLinkRequest) GetEmail() *PushPayLinkRequestEmail {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *PushPayLinkRequest) GetSms() *PushPayLinkRequestSms {
	if p == nil {
		return nil
	}
	return p.Sms
}

func (p *PushPayLinkRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Channel string `json:"channel"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Channel = unmarshaler.Channel
	if unmarshaler.Channel == "" {
		return fmt.Errorf("%T did not include discriminant channel", p)
	}
	switch unmarshaler.Channel {
	case "email":
		value := new(PushPayLinkRequestEmail)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Email = value
	case "sms":
		value := new(PushPayLinkRequestSms)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Sms = value
	}
	return nil
}

func (p PushPayLinkRequest) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.Email != nil {
		return internal.MarshalJSONWithExtraProperty(p.Email, "channel", "email")
	}
	if p.Sms != nil {
		return internal.MarshalJSONWithExtraProperty(p.Sms, "channel", "sms")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PushPayLinkRequestVisitor interface {
	VisitEmail(*PushPayLinkRequestEmail) error
	VisitSms(*PushPayLinkRequestSms) error
}

func (p *PushPayLinkRequest) Accept(visitor PushPayLinkRequestVisitor) error {
	if p.Email != nil {
		return visitor.VisitEmail(p.Email)
	}
	if p.Sms != nil {
		return visitor.VisitSms(p.Sms)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *PushPayLinkRequest) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.Email != nil {
		fields = append(fields, "email")
	}
	if p.Sms != nil {
		fields = append(fields, "sms")
	}
	if len(fields) == 0 {
		if p.Channel != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.Channel)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.Channel != "" {
		field := fields[0]
		if p.Channel != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.Channel,
				p,
			)
		}
	}
	return nil
}

var (
	pushPayLinkRequestEmailFieldAdditionalEmails = big.NewInt(1 << 0)
	pushPayLinkRequestEmailFieldAttachFile       = big.NewInt(1 << 1)
)

type PushPayLinkRequestEmail struct {
	// List of additional email addresses you want to send the paylink to, formatted as an array.
	// Payment links and opt-in requests are sent to the customer email address on file, and additional
	// recipients can be specified here.
	AdditionalEmails []string `json:"additionalEmails,omitempty" url:"additionalEmails,omitempty"`
	// When `true`, attaches a PDF version of the invoice to the email.
	AttachFile *bool `json:"attachFile,omitempty" url:"attachFile,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PushPayLinkRequestEmail) GetAdditionalEmails() []string {
	if p == nil {
		return nil
	}
	return p.AdditionalEmails
}

func (p *PushPayLinkRequestEmail) GetAttachFile() *bool {
	if p == nil {
		return nil
	}
	return p.AttachFile
}

func (p *PushPayLinkRequestEmail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PushPayLinkRequestEmail) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetAdditionalEmails sets the AdditionalEmails field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PushPayLinkRequestEmail) SetAdditionalEmails(additionalEmails []string) {
	p.AdditionalEmails = additionalEmails
	p.require(pushPayLinkRequestEmailFieldAdditionalEmails)
}

// SetAttachFile sets the AttachFile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PushPayLinkRequestEmail) SetAttachFile(attachFile *bool) {
	p.AttachFile = attachFile
	p.require(pushPayLinkRequestEmailFieldAttachFile)
}

func (p *PushPayLinkRequestEmail) UnmarshalJSON(data []byte) error {
	type unmarshaler PushPayLinkRequestEmail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PushPayLinkRequestEmail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PushPayLinkRequestEmail) MarshalJSON() ([]byte, error) {
	type embed PushPayLinkRequestEmail
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PushPayLinkRequestEmail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PushPayLinkRequestSms struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PushPayLinkRequestSms) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PushPayLinkRequestSms) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

func (p *PushPayLinkRequestSms) UnmarshalJSON(data []byte) error {
	type unmarshaler PushPayLinkRequestSms
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PushPayLinkRequestSms(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PushPayLinkRequestSms) MarshalJSON() ([]byte, error) {
	type embed PushPayLinkRequestSms
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PushPayLinkRequestSms) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	getPayLinkFromIdResponseFieldIsSuccess    = big.NewInt(1 << 0)
	getPayLinkFromIdResponseFieldResponseText = big.NewInt(1 << 1)
	getPayLinkFromIdResponseFieldResponseData = big.NewInt(1 << 2)
)

type GetPayLinkFromIdResponse struct {
	IsSuccess    *IsSuccess                            `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	ResponseText ResponseText                          `json:"responseText" url:"responseText"`
	ResponseData *GetPayLinkFromIdResponseResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetPayLinkFromIdResponse) GetIsSuccess() *IsSuccess {
	if g == nil {
		return nil
	}
	return g.IsSuccess
}

func (g *GetPayLinkFromIdResponse) GetResponseText() ResponseText {
	if g == nil {
		return ""
	}
	return g.ResponseText
}

func (g *GetPayLinkFromIdResponse) GetResponseData() *GetPayLinkFromIdResponseResponseData {
	if g == nil {
		return nil
	}
	return g.ResponseData
}

func (g *GetPayLinkFromIdResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPayLinkFromIdResponse) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetIsSuccess sets the IsSuccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponse) SetIsSuccess(isSuccess *IsSuccess) {
	g.IsSuccess = isSuccess
	g.require(getPayLinkFromIdResponseFieldIsSuccess)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponse) SetResponseText(responseText ResponseText) {
	g.ResponseText = responseText
	g.require(getPayLinkFromIdResponseFieldResponseText)
}

// SetResponseData sets the ResponseData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponse) SetResponseData(responseData *GetPayLinkFromIdResponseResponseData) {
	g.ResponseData = responseData
	g.require(getPayLinkFromIdResponseFieldResponseData)
}

func (g *GetPayLinkFromIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPayLinkFromIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPayLinkFromIdResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPayLinkFromIdResponse) MarshalJSON() ([]byte, error) {
	type embed GetPayLinkFromIdResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GetPayLinkFromIdResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	getPayLinkFromIdResponseResponseDataFieldAdditionalData = big.NewInt(1 << 0)
	getPayLinkFromIdResponseResponseDataFieldCredentials    = big.NewInt(1 << 1)
	getPayLinkFromIdResponseResponseDataFieldLastAccess     = big.NewInt(1 << 2)
	getPayLinkFromIdResponseResponseDataFieldPageContent    = big.NewInt(1 << 3)
	getPayLinkFromIdResponseResponseDataFieldPageIdentifier = big.NewInt(1 << 4)
	getPayLinkFromIdResponseResponseDataFieldPageSettings   = big.NewInt(1 << 5)
	getPayLinkFromIdResponseResponseDataFieldPublished      = big.NewInt(1 << 6)
	getPayLinkFromIdResponseResponseDataFieldReceiptContent = big.NewInt(1 << 7)
	getPayLinkFromIdResponseResponseDataFieldSubdomain      = big.NewInt(1 << 8)
	getPayLinkFromIdResponseResponseDataFieldTotalAmount    = big.NewInt(1 << 9)
	getPayLinkFromIdResponseResponseDataFieldValidationCode = big.NewInt(1 << 10)
)

type GetPayLinkFromIdResponseResponseData struct {
	AdditionalData *AdditionalData `json:"AdditionalData,omitempty" url:"AdditionalData,omitempty"`
	// Array of credential objects with active services for the page
	Credentials []*PayabliCredentials `json:"credentials,omitempty" url:"credentials,omitempty"`
	// Timestamp of last access to page structure
	LastAccess *time.Time `json:"lastAccess,omitempty" url:"lastAccess,omitempty"`
	// Sections of page
	PageContent    *PageContent    `json:"pageContent,omitempty" url:"pageContent,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	// Settings of page
	PageSettings *PageSetting `json:"pageSettings,omitempty" url:"pageSettings,omitempty"`
	// Flag indicating if page is active to accept payments. `0` for false, `1` for true.
	Published *int `json:"published,omitempty" url:"published,omitempty"`
	// Sections of payment receipt
	ReceiptContent *ReceiptContent `json:"receiptContent,omitempty" url:"receiptContent,omitempty"`
	// Page identifier. Must be unique in platform.
	Subdomain *Subdomain `json:"subdomain,omitempty" url:"subdomain,omitempty"`
	// Total amount to pay in this page
	TotalAmount *float64 `json:"totalAmount,omitempty" url:"totalAmount,omitempty"`
	// Base64 encoded image of CAPTCHA associated to this page load
	ValidationCode *string `json:"validationCode,omitempty" url:"validationCode,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetPayLinkFromIdResponseResponseData) GetAdditionalData() *AdditionalData {
	if g == nil {
		return nil
	}
	return g.AdditionalData
}

func (g *GetPayLinkFromIdResponseResponseData) GetCredentials() []*PayabliCredentials {
	if g == nil {
		return nil
	}
	return g.Credentials
}

func (g *GetPayLinkFromIdResponseResponseData) GetLastAccess() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastAccess
}

func (g *GetPayLinkFromIdResponseResponseData) GetPageContent() *PageContent {
	if g == nil {
		return nil
	}
	return g.PageContent
}

func (g *GetPayLinkFromIdResponseResponseData) GetPageIdentifier() *PageIdentifier {
	if g == nil {
		return nil
	}
	return g.PageIdentifier
}

func (g *GetPayLinkFromIdResponseResponseData) GetPageSettings() *PageSetting {
	if g == nil {
		return nil
	}
	return g.PageSettings
}

func (g *GetPayLinkFromIdResponseResponseData) GetPublished() *int {
	if g == nil {
		return nil
	}
	return g.Published
}

func (g *GetPayLinkFromIdResponseResponseData) GetReceiptContent() *ReceiptContent {
	if g == nil {
		return nil
	}
	return g.ReceiptContent
}

func (g *GetPayLinkFromIdResponseResponseData) GetSubdomain() *Subdomain {
	if g == nil {
		return nil
	}
	return g.Subdomain
}

func (g *GetPayLinkFromIdResponseResponseData) GetTotalAmount() *float64 {
	if g == nil {
		return nil
	}
	return g.TotalAmount
}

func (g *GetPayLinkFromIdResponseResponseData) GetValidationCode() *string {
	if g == nil {
		return nil
	}
	return g.ValidationCode
}

func (g *GetPayLinkFromIdResponseResponseData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPayLinkFromIdResponseResponseData) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetAdditionalData sets the AdditionalData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetAdditionalData(additionalData *AdditionalData) {
	g.AdditionalData = additionalData
	g.require(getPayLinkFromIdResponseResponseDataFieldAdditionalData)
}

// SetCredentials sets the Credentials field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetCredentials(credentials []*PayabliCredentials) {
	g.Credentials = credentials
	g.require(getPayLinkFromIdResponseResponseDataFieldCredentials)
}

// SetLastAccess sets the LastAccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetLastAccess(lastAccess *time.Time) {
	g.LastAccess = lastAccess
	g.require(getPayLinkFromIdResponseResponseDataFieldLastAccess)
}

// SetPageContent sets the PageContent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetPageContent(pageContent *PageContent) {
	g.PageContent = pageContent
	g.require(getPayLinkFromIdResponseResponseDataFieldPageContent)
}

// SetPageIdentifier sets the PageIdentifier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetPageIdentifier(pageIdentifier *PageIdentifier) {
	g.PageIdentifier = pageIdentifier
	g.require(getPayLinkFromIdResponseResponseDataFieldPageIdentifier)
}

// SetPageSettings sets the PageSettings field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetPageSettings(pageSettings *PageSetting) {
	g.PageSettings = pageSettings
	g.require(getPayLinkFromIdResponseResponseDataFieldPageSettings)
}

// SetPublished sets the Published field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetPublished(published *int) {
	g.Published = published
	g.require(getPayLinkFromIdResponseResponseDataFieldPublished)
}

// SetReceiptContent sets the ReceiptContent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetReceiptContent(receiptContent *ReceiptContent) {
	g.ReceiptContent = receiptContent
	g.require(getPayLinkFromIdResponseResponseDataFieldReceiptContent)
}

// SetSubdomain sets the Subdomain field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetSubdomain(subdomain *Subdomain) {
	g.Subdomain = subdomain
	g.require(getPayLinkFromIdResponseResponseDataFieldSubdomain)
}

// SetTotalAmount sets the TotalAmount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetTotalAmount(totalAmount *float64) {
	g.TotalAmount = totalAmount
	g.require(getPayLinkFromIdResponseResponseDataFieldTotalAmount)
}

// SetValidationCode sets the ValidationCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetPayLinkFromIdResponseResponseData) SetValidationCode(validationCode *string) {
	g.ValidationCode = validationCode
	g.require(getPayLinkFromIdResponseResponseDataFieldValidationCode)
}

func (g *GetPayLinkFromIdResponseResponseData) UnmarshalJSON(data []byte) error {
	type embed GetPayLinkFromIdResponseResponseData
	var unmarshaler = struct {
		embed
		LastAccess *internal.DateTime `json:"lastAccess,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GetPayLinkFromIdResponseResponseData(unmarshaler.embed)
	g.LastAccess = unmarshaler.LastAccess.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPayLinkFromIdResponseResponseData) MarshalJSON() ([]byte, error) {
	type embed GetPayLinkFromIdResponseResponseData
	var marshaler = struct {
		embed
		LastAccess *internal.DateTime `json:"lastAccess,omitempty"`
	}{
		embed:      embed(*g),
		LastAccess: internal.NewOptionalDateTime(g.LastAccess),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GetPayLinkFromIdResponseResponseData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	payabliApiResponsePaymentLinksFieldIsSuccess    = big.NewInt(1 << 0)
	payabliApiResponsePaymentLinksFieldResponseData = big.NewInt(1 << 1)
	payabliApiResponsePaymentLinksFieldResponseText = big.NewInt(1 << 2)
)

type PayabliApiResponsePaymentLinks struct {
	IsSuccess IsSuccess `json:"isSuccess" url:"isSuccess"`
	// If `isSuccess` = true, this contains the payment link identifier. If `isSuccess` = false, this contains the reason of the error.
	ResponseData *string      `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText ResponseText `json:"responseText" url:"responseText"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponsePaymentLinks) GetIsSuccess() IsSuccess {
	if p == nil {
		return false
	}
	return p.IsSuccess
}

func (p *PayabliApiResponsePaymentLinks) GetResponseData() *string {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponsePaymentLinks) GetResponseText() ResponseText {
	if p == nil {
		return ""
	}
	return p.ResponseText
}

func (p *PayabliApiResponsePaymentLinks) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponsePaymentLinks) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetIsSuccess sets the IsSuccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponsePaymentLinks) SetIsSuccess(isSuccess IsSuccess) {
	p.IsSuccess = isSuccess
	p.require(payabliApiResponsePaymentLinksFieldIsSuccess)
}

// SetResponseData sets the ResponseData field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponsePaymentLinks) SetResponseData(responseData *string) {
	p.ResponseData = responseData
	p.require(payabliApiResponsePaymentLinksFieldResponseData)
}

// SetResponseText sets the ResponseText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayabliApiResponsePaymentLinks) SetResponseText(responseText ResponseText) {
	p.ResponseText = responseText
	p.require(payabliApiResponsePaymentLinksFieldResponseText)
}

func (p *PayabliApiResponsePaymentLinks) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponsePaymentLinks
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponsePaymentLinks(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponsePaymentLinks) MarshalJSON() ([]byte, error) {
	type embed PayabliApiResponsePaymentLinks
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PayabliApiResponsePaymentLinks) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	paymentPageRequestBodyFieldContactUs           = big.NewInt(1 << 0)
	paymentPageRequestBodyFieldInvoices            = big.NewInt(1 << 1)
	paymentPageRequestBodyFieldLogo                = big.NewInt(1 << 2)
	paymentPageRequestBodyFieldMessageBeforePaying = big.NewInt(1 << 3)
	paymentPageRequestBodyFieldNotes               = big.NewInt(1 << 4)
	paymentPageRequestBodyFieldPage                = big.NewInt(1 << 5)
	paymentPageRequestBodyFieldPaymentButton       = big.NewInt(1 << 6)
	paymentPageRequestBodyFieldPaymentMethods      = big.NewInt(1 << 7)
	paymentPageRequestBodyFieldPayor               = big.NewInt(1 << 8)
	paymentPageRequestBodyFieldReview              = big.NewInt(1 << 9)
	paymentPageRequestBodyFieldSettings            = big.NewInt(1 << 10)
)

type PaymentPageRequestBody struct {
	// ContactUs section of payment link page
	ContactUs *ContactElement `json:"contactUs,omitempty" url:"contactUs,omitempty"`
	// Invoices section of payment link page
	Invoices *InvoiceElement `json:"invoices,omitempty" url:"invoices,omitempty"`
	// Logo section of payment link page
	Logo *Element `json:"logo,omitempty" url:"logo,omitempty"`
	// Message section of payment link page
	MessageBeforePaying *LabelElement `json:"messageBeforePaying,omitempty" url:"messageBeforePaying,omitempty"`
	// Notes section of payment link page
	Notes *NoteElement `json:"notes,omitempty" url:"notes,omitempty"`
	// Page header section of payment link page
	Page *PageElement `json:"page,omitempty" url:"page,omitempty"`
	// Payment button section of payment link page
	PaymentButton *LabelElement `json:"paymentButton,omitempty" url:"paymentButton,omitempty"`
	// Payment methods section of payment link page
	PaymentMethods *MethodElement `json:"paymentMethods,omitempty" url:"paymentMethods,omitempty"`
	// Customer/Payor section of payment link page
	Payor *PayorElement `json:"payor,omitempty" url:"payor,omitempty"`
	// Review section of payment link page
	Review *HeaderElement `json:"review,omitempty" url:"review,omitempty"`
	// Settings section of payment link page
	Settings *PagelinkSetting `json:"settings,omitempty" url:"settings,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentPageRequestBody) GetContactUs() *ContactElement {
	if p == nil {
		return nil
	}
	return p.ContactUs
}

func (p *PaymentPageRequestBody) GetInvoices() *InvoiceElement {
	if p == nil {
		return nil
	}
	return p.Invoices
}

func (p *PaymentPageRequestBody) GetLogo() *Element {
	if p == nil {
		return nil
	}
	return p.Logo
}

func (p *PaymentPageRequestBody) GetMessageBeforePaying() *LabelElement {
	if p == nil {
		return nil
	}
	return p.MessageBeforePaying
}

func (p *PaymentPageRequestBody) GetNotes() *NoteElement {
	if p == nil {
		return nil
	}
	return p.Notes
}

func (p *PaymentPageRequestBody) GetPage() *PageElement {
	if p == nil {
		return nil
	}
	return p.Page
}

func (p *PaymentPageRequestBody) GetPaymentButton() *LabelElement {
	if p == nil {
		return nil
	}
	return p.PaymentButton
}

func (p *PaymentPageRequestBody) GetPaymentMethods() *MethodElement {
	if p == nil {
		return nil
	}
	return p.PaymentMethods
}

func (p *PaymentPageRequestBody) GetPayor() *PayorElement {
	if p == nil {
		return nil
	}
	return p.Payor
}

func (p *PaymentPageRequestBody) GetReview() *HeaderElement {
	if p == nil {
		return nil
	}
	return p.Review
}

func (p *PaymentPageRequestBody) GetSettings() *PagelinkSetting {
	if p == nil {
		return nil
	}
	return p.Settings
}

func (p *PaymentPageRequestBody) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentPageRequestBody) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetContactUs sets the ContactUs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetContactUs(contactUs *ContactElement) {
	p.ContactUs = contactUs
	p.require(paymentPageRequestBodyFieldContactUs)
}

// SetInvoices sets the Invoices field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetInvoices(invoices *InvoiceElement) {
	p.Invoices = invoices
	p.require(paymentPageRequestBodyFieldInvoices)
}

// SetLogo sets the Logo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetLogo(logo *Element) {
	p.Logo = logo
	p.require(paymentPageRequestBodyFieldLogo)
}

// SetMessageBeforePaying sets the MessageBeforePaying field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetMessageBeforePaying(messageBeforePaying *LabelElement) {
	p.MessageBeforePaying = messageBeforePaying
	p.require(paymentPageRequestBodyFieldMessageBeforePaying)
}

// SetNotes sets the Notes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetNotes(notes *NoteElement) {
	p.Notes = notes
	p.require(paymentPageRequestBodyFieldNotes)
}

// SetPage sets the Page field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetPage(page *PageElement) {
	p.Page = page
	p.require(paymentPageRequestBodyFieldPage)
}

// SetPaymentButton sets the PaymentButton field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetPaymentButton(paymentButton *LabelElement) {
	p.PaymentButton = paymentButton
	p.require(paymentPageRequestBodyFieldPaymentButton)
}

// SetPaymentMethods sets the PaymentMethods field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetPaymentMethods(paymentMethods *MethodElement) {
	p.PaymentMethods = paymentMethods
	p.require(paymentPageRequestBodyFieldPaymentMethods)
}

// SetPayor sets the Payor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetPayor(payor *PayorElement) {
	p.Payor = payor
	p.require(paymentPageRequestBodyFieldPayor)
}

// SetReview sets the Review field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetReview(review *HeaderElement) {
	p.Review = review
	p.require(paymentPageRequestBodyFieldReview)
}

// SetSettings sets the Settings field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentPageRequestBody) SetSettings(settings *PagelinkSetting) {
	p.Settings = settings
	p.require(paymentPageRequestBodyFieldSettings)
}

func (p *PaymentPageRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentPageRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentPageRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentPageRequestBody) MarshalJSON() ([]byte, error) {
	type embed PaymentPageRequestBody
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PaymentPageRequestBody) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	payLinkUpdateDataFieldContactUs           = big.NewInt(1 << 0)
	payLinkUpdateDataFieldLogo                = big.NewInt(1 << 1)
	payLinkUpdateDataFieldMessageBeforePaying = big.NewInt(1 << 2)
	payLinkUpdateDataFieldNotes               = big.NewInt(1 << 3)
	payLinkUpdateDataFieldPage                = big.NewInt(1 << 4)
	payLinkUpdateDataFieldPaymentButton       = big.NewInt(1 << 5)
	payLinkUpdateDataFieldPaymentMethods      = big.NewInt(1 << 6)
	payLinkUpdateDataFieldReview              = big.NewInt(1 << 7)
	payLinkUpdateDataFieldSettings            = big.NewInt(1 << 8)
)

type PayLinkUpdateData struct {
	// ContactUs section of payment link page
	ContactUs *ContactElement `json:"contactUs,omitempty" url:"-"`
	// Logo section of payment link page
	Logo *Element `json:"logo,omitempty" url:"-"`
	// Message section of payment link page
	MessageBeforePaying *LabelElement `json:"messageBeforePaying,omitempty" url:"-"`
	// Notes section of payment link page
	Notes *NoteElement `json:"notes,omitempty" url:"-"`
	// Page header section of payment link page
	Page *PageElement `json:"page,omitempty" url:"-"`
	// Payment button section of payment link page
	PaymentButton *LabelElement `json:"paymentButton,omitempty" url:"-"`
	// Payment methods section of payment link page
	PaymentMethods *MethodElement `json:"paymentMethods,omitempty" url:"-"`
	// Review section of payment link page
	Review *HeaderElement `json:"review,omitempty" url:"-"`
	// Settings section of payment link page
	Settings *PagelinkSetting `json:"settings,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (p *PayLinkUpdateData) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetContactUs sets the ContactUs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkUpdateData) SetContactUs(contactUs *ContactElement) {
	p.ContactUs = contactUs
	p.require(payLinkUpdateDataFieldContactUs)
}

// SetLogo sets the Logo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkUpdateData) SetLogo(logo *Element) {
	p.Logo = logo
	p.require(payLinkUpdateDataFieldLogo)
}

// SetMessageBeforePaying sets the MessageBeforePaying field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkUpdateData) SetMessageBeforePaying(messageBeforePaying *LabelElement) {
	p.MessageBeforePaying = messageBeforePaying
	p.require(payLinkUpdateDataFieldMessageBeforePaying)
}

// SetNotes sets the Notes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkUpdateData) SetNotes(notes *NoteElement) {
	p.Notes = notes
	p.require(payLinkUpdateDataFieldNotes)
}

// SetPage sets the Page field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkUpdateData) SetPage(page *PageElement) {
	p.Page = page
	p.require(payLinkUpdateDataFieldPage)
}

// SetPaymentButton sets the PaymentButton field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkUpdateData) SetPaymentButton(paymentButton *LabelElement) {
	p.PaymentButton = paymentButton
	p.require(payLinkUpdateDataFieldPaymentButton)
}

// SetPaymentMethods sets the PaymentMethods field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkUpdateData) SetPaymentMethods(paymentMethods *MethodElement) {
	p.PaymentMethods = paymentMethods
	p.require(payLinkUpdateDataFieldPaymentMethods)
}

// SetReview sets the Review field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkUpdateData) SetReview(review *HeaderElement) {
	p.Review = review
	p.require(payLinkUpdateDataFieldReview)
}

// SetSettings sets the Settings field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PayLinkUpdateData) SetSettings(settings *PagelinkSetting) {
	p.Settings = settings
	p.require(payLinkUpdateDataFieldSettings)
}
