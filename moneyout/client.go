// Code generated by Fern. DO NOT EDIT.

package moneyout

import (
	context "context"
	http "net/http"
	sdk "sdk"
	core "sdk/core"
	internal "sdk/internal"
	option "sdk/option"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Authorizes transaction for payout. Authorized transactions aren't flagged for settlement until captured. Use `referenceId` returned in the response to capture the transaction.
func (c *Client) AuthorizeOut(
	ctx context.Context,
	request *sdk.RequestOutAuthorize,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponse11, error) {
	response, err := c.WithRawResponse.AuthorizeOut(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Cancels an array of payout transactions.
func (c *Client) CancelAllOut(
	ctx context.Context,
	request []string,
	opts ...option.RequestOption,
) (*sdk.CaptureAllOutResponse, error) {
	response, err := c.WithRawResponse.CancelAllOut(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Cancel a payout transaction by ID.
func (c *Client) CancelOut(
	ctx context.Context,
	// The ID for the payout transaction.
	referenceId string,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponse0000, error) {
	response, err := c.WithRawResponse.CancelOut(
		ctx,
		referenceId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Captures an array of authorized payout transactions for settlement.
func (c *Client) CaptureAllOut(
	ctx context.Context,
	request *sdk.CaptureAllOutRequest,
	opts ...option.RequestOption,
) (*sdk.CaptureAllOutResponse, error) {
	response, err := c.WithRawResponse.CaptureAllOut(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Captures a single authorized payout transaction by ID.
func (c *Client) CaptureOut(
	ctx context.Context,
	// The ID for the payout transaction.
	referenceId string,
	request *sdk.CaptureOutRequest,
	opts ...option.RequestOption,
) (*sdk.PayabliApiResponse11, error) {
	response, err := c.WithRawResponse.CaptureOut(
		ctx,
		referenceId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns details for a processed money out transaction.
func (c *Client) PayoutDetails(
	ctx context.Context,
	// ReferenceId for the transaction (PaymentId).
	transId string,
	opts ...option.RequestOption,
) (*sdk.BillDetailResponse, error) {
	response, err := c.WithRawResponse.PayoutDetails(
		ctx,
		transId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves vCard details for a single card in an entrypoint.
func (c *Client) VCardGet(
	ctx context.Context,
	// ID for a virtual card.
	cardToken string,
	opts ...option.RequestOption,
) (*sdk.VCardGetResponse, error) {
	response, err := c.WithRawResponse.VCardGet(
		ctx,
		cardToken,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieve the image of a check associated with a processed transaction.
// The check image is returned in the response body as a base64-encoded string.
// The check image is only available for payouts that have been processed.
func (c *Client) GetCheckImage(
	ctx context.Context,
	// Name of the check asset to retrieve. This is returned as `filename` in the `CheckData` object
	// in the response when you make a GET request to `/MoneyOut/details/{transId}`.
	// ```
	//     "CheckData": {
	//       "ftype": "PDF",
	//       "filename": "check133832686289732320_01JKBNZ5P32JPTZY8XXXX000000.pdf",
	//       "furl": "",
	//       "fContent": ""
	//   }
	// ```
	assetName string,
	opts ...option.RequestOption,
) (string, error) {
	response, err := c.WithRawResponse.GetCheckImage(
		ctx,
		assetName,
		opts...,
	)
	if err != nil {
		return "", err
	}
	return response.Body, nil
}
