// Code generated by Fern. DO NOT EDIT.

package client

import (
	bill "github.com/payabli/sdk-go/bill"
	boarding "github.com/payabli/sdk-go/boarding"
	chargebacks "github.com/payabli/sdk-go/chargebacks"
	checkcapture "github.com/payabli/sdk-go/checkcapture"
	cloud "github.com/payabli/sdk-go/cloud"
	core "github.com/payabli/sdk-go/core"
	customer "github.com/payabli/sdk-go/customer"
	export "github.com/payabli/sdk-go/export"
	hostedpaymentpages "github.com/payabli/sdk-go/hostedpaymentpages"
	import_ "github.com/payabli/sdk-go/import_"
	internal "github.com/payabli/sdk-go/internal"
	invoice "github.com/payabli/sdk-go/invoice"
	lineitem "github.com/payabli/sdk-go/lineitem"
	moneyin "github.com/payabli/sdk-go/moneyin"
	moneyout "github.com/payabli/sdk-go/moneyout"
	notification "github.com/payabli/sdk-go/notification"
	ocr "github.com/payabli/sdk-go/ocr"
	option "github.com/payabli/sdk-go/option"
	organization "github.com/payabli/sdk-go/organization"
	paymentlink "github.com/payabli/sdk-go/paymentlink"
	paymentmethoddomain "github.com/payabli/sdk-go/paymentmethoddomain"
	paypoint "github.com/payabli/sdk-go/paypoint"
	query "github.com/payabli/sdk-go/query"
	statistic "github.com/payabli/sdk-go/statistic"
	subscription "github.com/payabli/sdk-go/subscription"
	templates "github.com/payabli/sdk-go/templates"
	tokenstorage "github.com/payabli/sdk-go/tokenstorage"
	user "github.com/payabli/sdk-go/user"
	vendor_ "github.com/payabli/sdk-go/vendor_"
	wallet "github.com/payabli/sdk-go/wallet"
	http "net/http"
)

type Client struct {
	Bill                *bill.Client
	Boarding            *boarding.Client
	ChargeBacks         *chargebacks.Client
	CheckCapture        *checkcapture.Client
	Cloud               *cloud.Client
	Customer            *customer.Client
	Export              *export.Client
	HostedPaymentPages  *hostedpaymentpages.Client
	Import              *import_.Client
	Invoice             *invoice.Client
	LineItem            *lineitem.Client
	MoneyIn             *moneyin.Client
	MoneyOut            *moneyout.Client
	Notification        *notification.Client
	Ocr                 *ocr.Client
	Organization        *organization.Client
	PaymentLink         *paymentlink.Client
	PaymentMethodDomain *paymentmethoddomain.Client
	Paypoint            *paypoint.Client
	Query               *query.Client
	Statistic           *statistic.Client
	Subscription        *subscription.Client
	Templates           *templates.Client
	TokenStorage        *tokenstorage.Client
	User                *user.Client
	Vendor              *vendor_.Client
	Wallet              *wallet.Client

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		Bill:                bill.NewClient(opts...),
		Boarding:            boarding.NewClient(opts...),
		ChargeBacks:         chargebacks.NewClient(opts...),
		CheckCapture:        checkcapture.NewClient(opts...),
		Cloud:               cloud.NewClient(opts...),
		Customer:            customer.NewClient(opts...),
		Export:              export.NewClient(opts...),
		HostedPaymentPages:  hostedpaymentpages.NewClient(opts...),
		Import:              import_.NewClient(opts...),
		Invoice:             invoice.NewClient(opts...),
		LineItem:            lineitem.NewClient(opts...),
		MoneyIn:             moneyin.NewClient(opts...),
		MoneyOut:            moneyout.NewClient(opts...),
		Notification:        notification.NewClient(opts...),
		Ocr:                 ocr.NewClient(opts...),
		Organization:        organization.NewClient(opts...),
		PaymentLink:         paymentlink.NewClient(opts...),
		PaymentMethodDomain: paymentmethoddomain.NewClient(opts...),
		Paypoint:            paypoint.NewClient(opts...),
		Query:               query.NewClient(opts...),
		Statistic:           statistic.NewClient(opts...),
		Subscription:        subscription.NewClient(opts...),
		Templates:           templates.NewClient(opts...),
		TokenStorage:        tokenstorage.NewClient(opts...),
		User:                user.NewClient(opts...),
		Vendor:              vendor_.NewClient(opts...),
		Wallet:              wallet.NewClient(opts...),
		baseURL:             options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}
