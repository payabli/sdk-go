// Code generated by Fern. DO NOT EDIT.

package notificationlogs

import (
	context "context"
	uuid "github.com/google/uuid"
	sdk "github.com/payabli/sdk-go"
	core "github.com/payabli/sdk-go/core"
	internal "github.com/payabli/sdk-go/internal"
	option "github.com/payabli/sdk-go/option"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Search notification logs with filtering and pagination.
//   - Start date and end date cannot be more than 30 days apart
//   - Either `orgId` or `paypointId` must be provided
//
// This endpoint requires the `notifications_create` OR `notifications_read` permission.
func (c *Client) SearchNotificationLogs(
	ctx context.Context,
	request *sdk.SearchNotificationLogsRequest,
	opts ...option.RequestOption,
) ([]*sdk.NotificationLog, error) {
	response, err := c.WithRawResponse.SearchNotificationLogs(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get detailed information for a specific notification log entry.
// This endpoint requires the `notifications_create` OR `notifications_read` permission.
func (c *Client) GetNotificationLog(
	ctx context.Context,
	// The notification log entry.
	uuid uuid.UUID,
	opts ...option.RequestOption,
) (*sdk.NotificationLogDetail, error) {
	response, err := c.WithRawResponse.GetNotificationLog(
		ctx,
		uuid,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retry sending a specific notification.
//
// **Permissions:** notifications_create
func (c *Client) RetryNotificationLog(
	ctx context.Context,
	// Unique id
	uuid uuid.UUID,
	opts ...option.RequestOption,
) (*sdk.NotificationLogDetail, error) {
	response, err := c.WithRawResponse.RetryNotificationLog(
		ctx,
		uuid,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retry sending multiple notifications (maximum 50 IDs).
// This is an async process, so use the search endpoint again to check the notification status.
//
// This endpoint requires the `notifications_create` permission.
func (c *Client) BulkRetryNotificationLogs(
	ctx context.Context,
	request sdk.BulkRetryRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.BulkRetryNotificationLogs(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
