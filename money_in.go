// Code generated by Fern. DO NOT EDIT.

package payabli

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/payabli/sdk-go/internal"
	time "time"
)

type RequestPaymentAuthorize struct {
	IdempotencyKey        *IdempotencyKey        `json:"-" url:"-"`
	ForceCustomerCreation *ForceCustomerCreation `json:"-" url:"forceCustomerCreation,omitempty"`
	Body                  *TransRequestBody      `json:"-" url:"-"`
}

func (r *RequestPaymentAuthorize) UnmarshalJSON(data []byte) error {
	body := new(TransRequestBody)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	r.Body = body
	return nil
}

func (r *RequestPaymentAuthorize) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.Body)
}

type RequestCredit struct {
	IdempotencyKey        *IdempotencyKey        `json:"-" url:"-"`
	ForceCustomerCreation *ForceCustomerCreation `json:"-" url:"forceCustomerCreation,omitempty"`
	AccountId             *Accountid             `json:"accountId,omitempty" url:"-"`
	// Object describing the customer/payor.
	CustomerData     *PayorDataRequest    `json:"customerData,omitempty" url:"-"`
	Entrypoint       *Entrypointfield     `json:"entrypoint,omitempty" url:"-"`
	OrderDescription *Orderdescription    `json:"orderDescription,omitempty" url:"-"`
	OrderId          *OrderId             `json:"orderId,omitempty" url:"-"`
	PaymentDetails   *PaymentDetailCredit `json:"paymentDetails,omitempty" url:"-"`
	// Object describing the ACH payment method to use for transaction.
	PaymentMethod *RequestCreditPaymentMethod `json:"paymentMethod,omitempty" url:"-"`
	Source        *Source                     `json:"source,omitempty" url:"-"`
	Subdomain     *Subdomain                  `json:"subdomain,omitempty" url:"-"`
}

type RequestRefund struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	// Amount to refund from original transaction, minus any service fees charged on the original transaction.
	//
	// The amount provided can't be greater than the original total amount of the transaction, minus service fees. For example, if a transaction was $90 plus a $10 service fee, you can refund up to $90.
	//
	// An amount equal to zero will refund the total amount authorized minus any service fee.
	Amount           *float64          `json:"amount,omitempty" url:"-"`
	Ipaddress        *IpAddress        `json:"ipaddress,omitempty" url:"-"`
	OrderDescription *Orderdescription `json:"orderDescription,omitempty" url:"-"`
	OrderId          *OrderId          `json:"orderId,omitempty" url:"-"`
	RefundDetails    *RefundDetail     `json:"refundDetails,omitempty" url:"-"`
	Source           *Source           `json:"source,omitempty" url:"-"`
}

type SendReceipt2TransRequest struct {
	// Email address where the payment receipt should be sent.
	//
	// If not provided, the email address on file for the user owner of the transaction is used.
	Email *string `json:"-" url:"email,omitempty"`
}

type RequestPaymentValidate struct {
	IdempotencyKey   *IdempotencyKey   `json:"-" url:"-"`
	AccountId        *Accountid        `json:"accountId,omitempty" url:"-"`
	EntryPoint       Entrypointfield   `json:"entryPoint" url:"-"`
	OrderDescription *Orderdescription `json:"orderDescription,omitempty" url:"-"`
	OrderId          *OrderId          `json:"orderId,omitempty" url:"-"`
	// Object describing payment method to use for transaction.
	PaymentMethod *RequestPaymentValidatePaymentMethod `json:"paymentMethod,omitempty" url:"-"`
}

type RequestPayment struct {
	IdempotencyKey *IdempotencyKey `json:"-" url:"-"`
	// Value obtained from user when an API generated CAPTCHA is used in payment page
	ValidationCode        *string                `json:"-" url:"-"`
	AchValidation         *AchValidation         `json:"-" url:"achValidation,omitempty"`
	ForceCustomerCreation *ForceCustomerCreation `json:"-" url:"forceCustomerCreation,omitempty"`
	Body                  *TransRequestBody      `json:"-" url:"-"`
}

func (r *RequestPayment) UnmarshalJSON(data []byte) error {
	body := new(TransRequestBody)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	r.Body = body
	return nil
}

func (r *RequestPayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.Body)
}

type Cash struct {
	// Method to use for the transaction. For cash transactions, use `cash`.
	method string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Cash) Method() string {
	return c.method
}

func (c *Cash) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Cash) UnmarshalJSON(data []byte) error {
	type embed Cash
	var unmarshaler = struct {
		embed
		Method string `json:"method"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = Cash(unmarshaler.embed)
	if unmarshaler.Method != "cash" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "cash", unmarshaler.Method)
	}
	c.method = unmarshaler.Method
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "method")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Cash) MarshalJSON() ([]byte, error) {
	type embed Cash
	var marshaler = struct {
		embed
		Method string `json:"method"`
	}{
		embed:  embed(*c),
		Method: "cash",
	}
	return json.Marshal(marshaler)
}

func (c *Cash) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Check struct {
	// The checking accountholder's name.
	AchHolder AchHolder `json:"achHolder" url:"achHolder"`
	// Method to use for the transaction. Use `check` for a paper check transaction. When the method is `check`, then `paymentDetails.checkNumber` is required.
	method string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Check) GetAchHolder() AchHolder {
	if c == nil {
		return ""
	}
	return c.AchHolder
}

func (c *Check) Method() string {
	return c.method
}

func (c *Check) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Check) UnmarshalJSON(data []byte) error {
	type embed Check
	var unmarshaler = struct {
		embed
		Method string `json:"method"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = Check(unmarshaler.embed)
	if unmarshaler.Method != "check" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "check", unmarshaler.Method)
	}
	c.method = unmarshaler.Method
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "method")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Check) MarshalJSON() ([]byte, error) {
	type embed Check
	var marshaler = struct {
		embed
		Method string `json:"method"`
	}{
		embed:  embed(*c),
		Method: "check",
	}
	return json.Marshal(marshaler)
}

func (c *Check) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The expected time that the refund will be processed. This value only appears when the `resultCode` is `10`, which means that the refund has been initiated and is queued for processing. See [Enhanced Refund Flow](/guides/pay-in-enhanced-refund-flow) for more information about refund processing.
type ExpectedProcessingDateTime = *time.Time

// Method to use for the transaction.
type Methodall string

const (
	MethodallCard  Methodall = "card"
	MethodallAch   Methodall = "ach"
	MethodallCloud Methodall = "cloud"
	MethodallCheck Methodall = "check"
	MethodallCash  Methodall = "cash"
)

func NewMethodallFromString(s string) (Methodall, error) {
	switch s {
	case "card":
		return MethodallCard, nil
	case "ach":
		return MethodallAch, nil
	case "cloud":
		return MethodallCloud, nil
	case "check":
		return MethodallCheck, nil
	case "cash":
		return MethodallCash, nil
	}
	var t Methodall
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m Methodall) Ptr() *Methodall {
	return &m
}

// Model for the PaymentMethod object, includes all method types.
type PayMethodBodyAllFields struct {
	// Bank account number. This field is **required** when method = 'ach'.
	AchAccount     Achaccount      `json:"achAccount" url:"achAccount"`
	AchAccountType *Achaccounttype `json:"achAccountType,omitempty" url:"achAccountType,omitempty"`
	AchCode        *AchSecCode     `json:"achCode,omitempty" url:"achCode,omitempty"`
	AchHolder      AchHolder       `json:"achHolder" url:"achHolder"`
	// ABA/routing number of Bank account. This field is **required** when method = 'ach'.
	AchRouting            Achrouting             `json:"achRouting" url:"achRouting"`
	Cardcvv               *Cardcvv               `json:"cardcvv,omitempty" url:"cardcvv,omitempty"`
	Cardexp               *Cardexp               `json:"cardexp,omitempty" url:"cardexp,omitempty"`
	CardHolder            *Cardholder            `json:"cardHolder,omitempty" url:"cardHolder,omitempty"`
	Cardnumber            *Cardnumber            `json:"cardnumber,omitempty" url:"cardnumber,omitempty"`
	Cardzip               *Cardzip               `json:"cardzip,omitempty" url:"cardzip,omitempty"`
	Device                *Device                `json:"device,omitempty" url:"device,omitempty"`
	Initator              *Initiator             `json:"initator,omitempty" url:"initator,omitempty"`
	Method                *Methodall             `json:"method,omitempty" url:"method,omitempty"`
	SaveIfSuccess         *SaveIfSuccess         `json:"saveIfSuccess,omitempty" url:"saveIfSuccess,omitempty"`
	StoredMethodId        *Storedmethodid        `json:"storedMethodId,omitempty" url:"storedMethodId,omitempty"`
	StoredMethodUsageType *StoredMethodUsageType `json:"storedMethodUsageType,omitempty" url:"storedMethodUsageType,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayMethodBodyAllFields) GetAchAccount() Achaccount {
	if p == nil {
		return ""
	}
	return p.AchAccount
}

func (p *PayMethodBodyAllFields) GetAchAccountType() *Achaccounttype {
	if p == nil {
		return nil
	}
	return p.AchAccountType
}

func (p *PayMethodBodyAllFields) GetAchCode() *AchSecCode {
	if p == nil {
		return nil
	}
	return p.AchCode
}

func (p *PayMethodBodyAllFields) GetAchHolder() AchHolder {
	if p == nil {
		return ""
	}
	return p.AchHolder
}

func (p *PayMethodBodyAllFields) GetAchRouting() Achrouting {
	if p == nil {
		return ""
	}
	return p.AchRouting
}

func (p *PayMethodBodyAllFields) GetCardcvv() *Cardcvv {
	if p == nil {
		return nil
	}
	return p.Cardcvv
}

func (p *PayMethodBodyAllFields) GetCardexp() *Cardexp {
	if p == nil {
		return nil
	}
	return p.Cardexp
}

func (p *PayMethodBodyAllFields) GetCardHolder() *Cardholder {
	if p == nil {
		return nil
	}
	return p.CardHolder
}

func (p *PayMethodBodyAllFields) GetCardnumber() *Cardnumber {
	if p == nil {
		return nil
	}
	return p.Cardnumber
}

func (p *PayMethodBodyAllFields) GetCardzip() *Cardzip {
	if p == nil {
		return nil
	}
	return p.Cardzip
}

func (p *PayMethodBodyAllFields) GetDevice() *Device {
	if p == nil {
		return nil
	}
	return p.Device
}

func (p *PayMethodBodyAllFields) GetInitator() *Initiator {
	if p == nil {
		return nil
	}
	return p.Initator
}

func (p *PayMethodBodyAllFields) GetMethod() *Methodall {
	if p == nil {
		return nil
	}
	return p.Method
}

func (p *PayMethodBodyAllFields) GetSaveIfSuccess() *SaveIfSuccess {
	if p == nil {
		return nil
	}
	return p.SaveIfSuccess
}

func (p *PayMethodBodyAllFields) GetStoredMethodId() *Storedmethodid {
	if p == nil {
		return nil
	}
	return p.StoredMethodId
}

func (p *PayMethodBodyAllFields) GetStoredMethodUsageType() *StoredMethodUsageType {
	if p == nil {
		return nil
	}
	return p.StoredMethodUsageType
}

func (p *PayMethodBodyAllFields) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayMethodBodyAllFields) UnmarshalJSON(data []byte) error {
	type unmarshaler PayMethodBodyAllFields
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayMethodBodyAllFields(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayMethodBodyAllFields) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayMethodCloud struct {
	Device *Device `json:"device,omitempty" url:"device,omitempty"`
	// Method to use for the transaction. For cloud device transactions, the method is `cloud`.
	SaveIfSuccess *SaveIfSuccess `json:"saveIfSuccess,omitempty" url:"saveIfSuccess,omitempty"`
	method        string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayMethodCloud) GetDevice() *Device {
	if p == nil {
		return nil
	}
	return p.Device
}

func (p *PayMethodCloud) GetSaveIfSuccess() *SaveIfSuccess {
	if p == nil {
		return nil
	}
	return p.SaveIfSuccess
}

func (p *PayMethodCloud) Method() string {
	return p.method
}

func (p *PayMethodCloud) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayMethodCloud) UnmarshalJSON(data []byte) error {
	type embed PayMethodCloud
	var unmarshaler = struct {
		embed
		Method string `json:"method"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PayMethodCloud(unmarshaler.embed)
	if unmarshaler.Method != "cloud" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "cloud", unmarshaler.Method)
	}
	p.method = unmarshaler.Method
	extraProperties, err := internal.ExtractExtraProperties(data, *p, "method")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayMethodCloud) MarshalJSON() ([]byte, error) {
	type embed PayMethodCloud
	var marshaler = struct {
		embed
		Method string `json:"method"`
	}{
		embed:  embed(*p),
		Method: "cloud",
	}
	return json.Marshal(marshaler)
}

func (p *PayMethodCloud) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The required and recommended fields for a payment made with a stored payment method.
type PayMethodStoredMethod struct {
	Initiator *Initiator `json:"initiator,omitempty" url:"initiator,omitempty"`
	// Method to use for the transaction. Use either `card` or `ach`, depending on what kind of method was tokenized to use a saved payment method for this transaction.
	Method PayMethodStoredMethodMethod `json:"method" url:"method"`
	// Payabli identifier of a tokenized payment method.
	StoredMethodId        *Storedmethodid        `json:"storedMethodId,omitempty" url:"storedMethodId,omitempty"`
	StoredMethodUsageType *StoredMethodUsageType `json:"storedMethodUsageType,omitempty" url:"storedMethodUsageType,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayMethodStoredMethod) GetInitiator() *Initiator {
	if p == nil {
		return nil
	}
	return p.Initiator
}

func (p *PayMethodStoredMethod) GetMethod() PayMethodStoredMethodMethod {
	if p == nil {
		return ""
	}
	return p.Method
}

func (p *PayMethodStoredMethod) GetStoredMethodId() *Storedmethodid {
	if p == nil {
		return nil
	}
	return p.StoredMethodId
}

func (p *PayMethodStoredMethod) GetStoredMethodUsageType() *StoredMethodUsageType {
	if p == nil {
		return nil
	}
	return p.StoredMethodUsageType
}

func (p *PayMethodStoredMethod) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayMethodStoredMethod) UnmarshalJSON(data []byte) error {
	type unmarshaler PayMethodStoredMethod
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayMethodStoredMethod(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayMethodStoredMethod) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Method to use for the transaction. Use either `card` or `ach`, depending on what kind of method was tokenized to use a saved payment method for this transaction.
type PayMethodStoredMethodMethod string

const (
	PayMethodStoredMethodMethodCard PayMethodStoredMethodMethod = "card"
	PayMethodStoredMethodMethodAch  PayMethodStoredMethodMethod = "ach"
)

func NewPayMethodStoredMethodMethodFromString(s string) (PayMethodStoredMethodMethod, error) {
	switch s {
	case "card":
		return PayMethodStoredMethodMethodCard, nil
	case "ach":
		return PayMethodStoredMethodMethodAch, nil
	}
	var t PayMethodStoredMethodMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PayMethodStoredMethodMethod) Ptr() *PayMethodStoredMethodMethod {
	return &p
}

// General response for certain `moneyIn` and `moneyOut` endpoints.
type PayabliApiResponse0 struct {
	IsSuccess      *IsSuccess                       `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier                  `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseData   *PayabliApiResponse0ResponseData `json:"responseData,omitempty" url:"responseData,omitempty"`
	ResponseText   *ResponseText                    `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponse0) GetIsSuccess() *IsSuccess {
	if p == nil {
		return nil
	}
	return p.IsSuccess
}

func (p *PayabliApiResponse0) GetPageIdentifier() *PageIdentifier {
	if p == nil {
		return nil
	}
	return p.PageIdentifier
}

func (p *PayabliApiResponse0) GetResponseData() *PayabliApiResponse0ResponseData {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponse0) GetResponseText() *ResponseText {
	if p == nil {
		return nil
	}
	return p.ResponseText
}

func (p *PayabliApiResponse0) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponse0) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponse0
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponse0(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponse0) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The PaymentDetail object for microdeposit (MakeCredit) transactions.
type PaymentDetailCredit struct {
	// Currency code ISO-4217. If not code is provided the currency in the paypoint setting is taken. Default is **USD**
	Currency *string `json:"currency,omitempty" url:"currency,omitempty"`
	// Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.
	ServiceFee *float64 `json:"serviceFee,omitempty" url:"serviceFee,omitempty"`
	// Total amount to be charged. If a service fee is provided, then this amount should include the service fee.
	TotalAmount float64 `json:"totalAmount" url:"totalAmount"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentDetailCredit) GetCurrency() *string {
	if p == nil {
		return nil
	}
	return p.Currency
}

func (p *PaymentDetailCredit) GetServiceFee() *float64 {
	if p == nil {
		return nil
	}
	return p.ServiceFee
}

func (p *PaymentDetailCredit) GetTotalAmount() float64 {
	if p == nil {
		return 0
	}
	return p.TotalAmount
}

func (p *PaymentDetailCredit) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentDetailCredit) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentDetailCredit
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentDetailCredit(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentDetailCredit) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Information about the payment method for the transaction.
type PaymentMethod struct {
	PayMethodCredit        *PayMethodCredit
	PayMethodAch           *PayMethodAch
	PayMethodStoredMethod  *PayMethodStoredMethod
	PayMethodCloud         *PayMethodCloud
	Check                  *Check
	Cash                   *Cash
	PayMethodBodyAllFields *PayMethodBodyAllFields

	typ string
}

func (p *PaymentMethod) GetPayMethodCredit() *PayMethodCredit {
	if p == nil {
		return nil
	}
	return p.PayMethodCredit
}

func (p *PaymentMethod) GetPayMethodAch() *PayMethodAch {
	if p == nil {
		return nil
	}
	return p.PayMethodAch
}

func (p *PaymentMethod) GetPayMethodStoredMethod() *PayMethodStoredMethod {
	if p == nil {
		return nil
	}
	return p.PayMethodStoredMethod
}

func (p *PaymentMethod) GetPayMethodCloud() *PayMethodCloud {
	if p == nil {
		return nil
	}
	return p.PayMethodCloud
}

func (p *PaymentMethod) GetCheck() *Check {
	if p == nil {
		return nil
	}
	return p.Check
}

func (p *PaymentMethod) GetCash() *Cash {
	if p == nil {
		return nil
	}
	return p.Cash
}

func (p *PaymentMethod) GetPayMethodBodyAllFields() *PayMethodBodyAllFields {
	if p == nil {
		return nil
	}
	return p.PayMethodBodyAllFields
}

func (p *PaymentMethod) UnmarshalJSON(data []byte) error {
	valuePayMethodCredit := new(PayMethodCredit)
	if err := json.Unmarshal(data, &valuePayMethodCredit); err == nil {
		p.typ = "PayMethodCredit"
		p.PayMethodCredit = valuePayMethodCredit
		return nil
	}
	valuePayMethodAch := new(PayMethodAch)
	if err := json.Unmarshal(data, &valuePayMethodAch); err == nil {
		p.typ = "PayMethodAch"
		p.PayMethodAch = valuePayMethodAch
		return nil
	}
	valuePayMethodStoredMethod := new(PayMethodStoredMethod)
	if err := json.Unmarshal(data, &valuePayMethodStoredMethod); err == nil {
		p.typ = "PayMethodStoredMethod"
		p.PayMethodStoredMethod = valuePayMethodStoredMethod
		return nil
	}
	valuePayMethodCloud := new(PayMethodCloud)
	if err := json.Unmarshal(data, &valuePayMethodCloud); err == nil {
		p.typ = "PayMethodCloud"
		p.PayMethodCloud = valuePayMethodCloud
		return nil
	}
	valueCheck := new(Check)
	if err := json.Unmarshal(data, &valueCheck); err == nil {
		p.typ = "Check"
		p.Check = valueCheck
		return nil
	}
	valueCash := new(Cash)
	if err := json.Unmarshal(data, &valueCash); err == nil {
		p.typ = "Cash"
		p.Cash = valueCash
		return nil
	}
	valuePayMethodBodyAllFields := new(PayMethodBodyAllFields)
	if err := json.Unmarshal(data, &valuePayMethodBodyAllFields); err == nil {
		p.typ = "PayMethodBodyAllFields"
		p.PayMethodBodyAllFields = valuePayMethodBodyAllFields
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentMethod) MarshalJSON() ([]byte, error) {
	if p.typ == "PayMethodCredit" || p.PayMethodCredit != nil {
		return json.Marshal(p.PayMethodCredit)
	}
	if p.typ == "PayMethodAch" || p.PayMethodAch != nil {
		return json.Marshal(p.PayMethodAch)
	}
	if p.typ == "PayMethodStoredMethod" || p.PayMethodStoredMethod != nil {
		return json.Marshal(p.PayMethodStoredMethod)
	}
	if p.typ == "PayMethodCloud" || p.PayMethodCloud != nil {
		return json.Marshal(p.PayMethodCloud)
	}
	if p.typ == "Check" || p.Check != nil {
		return json.Marshal(p.Check)
	}
	if p.typ == "Cash" || p.Cash != nil {
		return json.Marshal(p.Cash)
	}
	if p.typ == "PayMethodBodyAllFields" || p.PayMethodBodyAllFields != nil {
		return json.Marshal(p.PayMethodBodyAllFields)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PaymentMethodVisitor interface {
	VisitPayMethodCredit(*PayMethodCredit) error
	VisitPayMethodAch(*PayMethodAch) error
	VisitPayMethodStoredMethod(*PayMethodStoredMethod) error
	VisitPayMethodCloud(*PayMethodCloud) error
	VisitCheck(*Check) error
	VisitCash(*Cash) error
	VisitPayMethodBodyAllFields(*PayMethodBodyAllFields) error
}

func (p *PaymentMethod) Accept(visitor PaymentMethodVisitor) error {
	if p.typ == "PayMethodCredit" || p.PayMethodCredit != nil {
		return visitor.VisitPayMethodCredit(p.PayMethodCredit)
	}
	if p.typ == "PayMethodAch" || p.PayMethodAch != nil {
		return visitor.VisitPayMethodAch(p.PayMethodAch)
	}
	if p.typ == "PayMethodStoredMethod" || p.PayMethodStoredMethod != nil {
		return visitor.VisitPayMethodStoredMethod(p.PayMethodStoredMethod)
	}
	if p.typ == "PayMethodCloud" || p.PayMethodCloud != nil {
		return visitor.VisitPayMethodCloud(p.PayMethodCloud)
	}
	if p.typ == "Check" || p.Check != nil {
		return visitor.VisitCheck(p.Check)
	}
	if p.typ == "Cash" || p.Cash != nil {
		return visitor.VisitCash(p.Cash)
	}
	if p.typ == "PayMethodBodyAllFields" || p.PayMethodBodyAllFields != nil {
		return visitor.VisitPayMethodBodyAllFields(p.PayMethodBodyAllFields)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// Object containing details about the refund, including line items and optional split instructions.
type RefundDetail struct {
	// Array of payment categories/line items describing the amount to be paid. Note: These categories are for information only and aren't validated against the total amount provided.
	Categories []*PaymentCategories `json:"categories,omitempty" url:"categories,omitempty"`
	// Array of objects containing split instructions for the refund.
	SplitRefunding []*SplitFundingRefundContent `json:"splitRefunding,omitempty" url:"splitRefunding,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RefundDetail) GetCategories() []*PaymentCategories {
	if r == nil {
		return nil
	}
	return r.Categories
}

func (r *RefundDetail) GetSplitRefunding() []*SplitFundingRefundContent {
	if r == nil {
		return nil
	}
	return r.SplitRefunding
}

func (r *RefundDetail) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RefundDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler RefundDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RefundDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RefundDetail) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SplitFundingRefundContent struct {
	// The accountId for the account the transaction was routed to.
	AccountId *string `json:"accountId,omitempty" url:"accountId,omitempty"`
	// The amount to refund to this account.
	Amount *float64 `json:"amount,omitempty" url:"amount,omitempty"`
	// Refund description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The entrypoint the transaction belongs to.
	OriginationEntryPoint *string `json:"originationEntryPoint,omitempty" url:"originationEntryPoint,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SplitFundingRefundContent) GetAccountId() *string {
	if s == nil {
		return nil
	}
	return s.AccountId
}

func (s *SplitFundingRefundContent) GetAmount() *float64 {
	if s == nil {
		return nil
	}
	return s.Amount
}

func (s *SplitFundingRefundContent) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *SplitFundingRefundContent) GetOriginationEntryPoint() *string {
	if s == nil {
		return nil
	}
	return s.OriginationEntryPoint
}

func (s *SplitFundingRefundContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SplitFundingRefundContent) UnmarshalJSON(data []byte) error {
	type unmarshaler SplitFundingRefundContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SplitFundingRefundContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SplitFundingRefundContent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Response for MoneyIn/authorize.
type AuthResponse struct {
	ResponseText   ResponseText              `json:"responseText" url:"responseText"`
	IsSuccess      IsSuccess                 `json:"isSuccess" url:"isSuccess"`
	PageIdentifier *PageIdentifier           `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseData   *AuthResponseResponseData `json:"responseData" url:"responseData"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthResponse) GetResponseText() ResponseText {
	if a == nil {
		return ""
	}
	return a.ResponseText
}

func (a *AuthResponse) GetIsSuccess() IsSuccess {
	if a == nil {
		return false
	}
	return a.IsSuccess
}

func (a *AuthResponse) GetPageIdentifier() *PageIdentifier {
	if a == nil {
		return nil
	}
	return a.PageIdentifier
}

func (a *AuthResponse) GetResponseData() *AuthResponseResponseData {
	if a == nil {
		return nil
	}
	return a.ResponseData
}

func (a *AuthResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthResponseResponseData struct {
	AuthCode          Authcode           `json:"authCode" url:"authCode"`
	ReferenceId       Referenceidtrans   `json:"referenceId" url:"referenceId"`
	ResultCode        ResultCode         `json:"resultCode" url:"resultCode"`
	ResultText        Resulttext         `json:"resultText" url:"resultText"`
	AvsResponseText   Avsresponsetext    `json:"avsResponseText" url:"avsResponseText"`
	CvvResponseText   Cvvresponsetext    `json:"cvvResponseText" url:"cvvResponseText"`
	CustomerId        Customeridtrans    `json:"customerId" url:"customerId"`
	MethodReferenceId *MethodReferenceId `json:"methodReferenceId,omitempty" url:"methodReferenceId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthResponseResponseData) GetAuthCode() Authcode {
	if a == nil {
		return ""
	}
	return a.AuthCode
}

func (a *AuthResponseResponseData) GetReferenceId() Referenceidtrans {
	if a == nil {
		return ""
	}
	return a.ReferenceId
}

func (a *AuthResponseResponseData) GetResultCode() ResultCode {
	if a == nil {
		return 0
	}
	return a.ResultCode
}

func (a *AuthResponseResponseData) GetResultText() Resulttext {
	if a == nil {
		return ""
	}
	return a.ResultText
}

func (a *AuthResponseResponseData) GetAvsResponseText() Avsresponsetext {
	if a == nil {
		return ""
	}
	return a.AvsResponseText
}

func (a *AuthResponseResponseData) GetCvvResponseText() Cvvresponsetext {
	if a == nil {
		return ""
	}
	return a.CvvResponseText
}

func (a *AuthResponseResponseData) GetCustomerId() Customeridtrans {
	if a == nil {
		return 0
	}
	return a.CustomerId
}

func (a *AuthResponseResponseData) GetMethodReferenceId() *MethodReferenceId {
	if a == nil {
		return nil
	}
	return a.MethodReferenceId
}

func (a *AuthResponseResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthResponseResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthResponseResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthResponseResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthResponseResponseData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CapturePaymentDetails struct {
	// Total amount to be captured, including the `serviceFee` amount. The amount can't be greater the original
	// total amount of the transaction, and can't be more than 15% lower than the original amount.
	TotalAmount float64 `json:"totalAmount" url:"totalAmount"`
	// Service fee to capture for the transaction.
	ServiceFee *float64 `json:"serviceFee,omitempty" url:"serviceFee,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CapturePaymentDetails) GetTotalAmount() float64 {
	if c == nil {
		return 0
	}
	return c.TotalAmount
}

func (c *CapturePaymentDetails) GetServiceFee() *float64 {
	if c == nil {
		return nil
	}
	return c.ServiceFee
}

func (c *CapturePaymentDetails) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CapturePaymentDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler CapturePaymentDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CapturePaymentDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CapturePaymentDetails) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CaptureRequest struct {
	PaymentDetails *CapturePaymentDetails `json:"paymentDetails" url:"paymentDetails"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CaptureRequest) GetPaymentDetails() *CapturePaymentDetails {
	if c == nil {
		return nil
	}
	return c.PaymentDetails
}

func (c *CaptureRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CaptureRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CaptureRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CaptureRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CaptureRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Response for MoneyIn/capture endpoint
type CaptureResponse struct {
	ResponseCode   Responsecode         `json:"responseCode" url:"responseCode"`
	PageIdentifier *PageIdentifier      `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	RoomId         RoomIdNotInUse       `json:"roomId" url:"roomId"`
	IsSuccess      IsSuccess            `json:"isSuccess" url:"isSuccess"`
	ResponseText   ResponseText         `json:"responseText" url:"responseText"`
	ResponseData   *CaptureResponseData `json:"responseData" url:"responseData"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CaptureResponse) GetResponseCode() Responsecode {
	if c == nil {
		return 0
	}
	return c.ResponseCode
}

func (c *CaptureResponse) GetPageIdentifier() *PageIdentifier {
	if c == nil {
		return nil
	}
	return c.PageIdentifier
}

func (c *CaptureResponse) GetRoomId() RoomIdNotInUse {
	if c == nil {
		return 0
	}
	return c.RoomId
}

func (c *CaptureResponse) GetIsSuccess() IsSuccess {
	if c == nil {
		return false
	}
	return c.IsSuccess
}

func (c *CaptureResponse) GetResponseText() ResponseText {
	if c == nil {
		return ""
	}
	return c.ResponseText
}

func (c *CaptureResponse) GetResponseData() *CaptureResponseData {
	if c == nil {
		return nil
	}
	return c.ResponseData
}

func (c *CaptureResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CaptureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CaptureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CaptureResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CaptureResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Response data for capture transactions
type CaptureResponseData struct {
	AuthCode          Authcode           `json:"authCode" url:"authCode"`
	ReferenceId       Referenceidtrans   `json:"referenceId" url:"referenceId"`
	ResultCode        ResultCode         `json:"resultCode" url:"resultCode"`
	ResultText        Resulttext         `json:"resultText" url:"resultText"`
	AvsResponseText   *Avsresponsetext   `json:"avsResponseText,omitempty" url:"avsResponseText,omitempty"`
	CvvResponseText   *Cvvresponsetext   `json:"cvvResponseText,omitempty" url:"cvvResponseText,omitempty"`
	CustomerId        *Customeridtrans   `json:"customerId,omitempty" url:"customerId,omitempty"`
	MethodReferenceId *MethodReferenceId `json:"methodReferenceId,omitempty" url:"methodReferenceId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CaptureResponseData) GetAuthCode() Authcode {
	if c == nil {
		return ""
	}
	return c.AuthCode
}

func (c *CaptureResponseData) GetReferenceId() Referenceidtrans {
	if c == nil {
		return ""
	}
	return c.ReferenceId
}

func (c *CaptureResponseData) GetResultCode() ResultCode {
	if c == nil {
		return 0
	}
	return c.ResultCode
}

func (c *CaptureResponseData) GetResultText() Resulttext {
	if c == nil {
		return ""
	}
	return c.ResultText
}

func (c *CaptureResponseData) GetAvsResponseText() *Avsresponsetext {
	if c == nil {
		return nil
	}
	return c.AvsResponseText
}

func (c *CaptureResponseData) GetCvvResponseText() *Cvvresponsetext {
	if c == nil {
		return nil
	}
	return c.CvvResponseText
}

func (c *CaptureResponseData) GetCustomerId() *Customeridtrans {
	if c == nil {
		return nil
	}
	return c.CustomerId
}

func (c *CaptureResponseData) GetMethodReferenceId() *MethodReferenceId {
	if c == nil {
		return nil
	}
	return c.MethodReferenceId
}

func (c *CaptureResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CaptureResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CaptureResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CaptureResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CaptureResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Response data for GetPaid transactions
type GetPaidResponseData struct {
	AuthCode          *Authcode          `json:"authCode,omitempty" url:"authCode,omitempty"`
	ReferenceId       Referenceidtrans   `json:"referenceId" url:"referenceId"`
	ResultCode        ResultCode         `json:"resultCode" url:"resultCode"`
	ResultText        Resulttext         `json:"resultText" url:"resultText"`
	AvsResponseText   Avsresponsetext    `json:"avsResponseText" url:"avsResponseText"`
	CvvResponseText   Cvvresponsetext    `json:"cvvResponseText" url:"cvvResponseText"`
	CustomerId        Customeridtrans    `json:"customerId" url:"customerId"`
	MethodReferenceId *MethodReferenceId `json:"methodReferenceId,omitempty" url:"methodReferenceId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetPaidResponseData) GetAuthCode() *Authcode {
	if g == nil {
		return nil
	}
	return g.AuthCode
}

func (g *GetPaidResponseData) GetReferenceId() Referenceidtrans {
	if g == nil {
		return ""
	}
	return g.ReferenceId
}

func (g *GetPaidResponseData) GetResultCode() ResultCode {
	if g == nil {
		return 0
	}
	return g.ResultCode
}

func (g *GetPaidResponseData) GetResultText() Resulttext {
	if g == nil {
		return ""
	}
	return g.ResultText
}

func (g *GetPaidResponseData) GetAvsResponseText() Avsresponsetext {
	if g == nil {
		return ""
	}
	return g.AvsResponseText
}

func (g *GetPaidResponseData) GetCvvResponseText() Cvvresponsetext {
	if g == nil {
		return ""
	}
	return g.CvvResponseText
}

func (g *GetPaidResponseData) GetCustomerId() Customeridtrans {
	if g == nil {
		return 0
	}
	return g.CustomerId
}

func (g *GetPaidResponseData) GetMethodReferenceId() *MethodReferenceId {
	if g == nil {
		return nil
	}
	return g.MethodReferenceId
}

func (g *GetPaidResponseData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPaidResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPaidResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPaidResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPaidResponseData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type InvalidTransStatusErrorType struct {
	// Error message describing the reason for the decline
	ResponseText string `json:"responseText" url:"responseText"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvalidTransStatusErrorType) GetResponseText() string {
	if i == nil {
		return ""
	}
	return i.ResponseText
}

func (i *InvalidTransStatusErrorType) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvalidTransStatusErrorType) UnmarshalJSON(data []byte) error {
	type unmarshaler InvalidTransStatusErrorType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvalidTransStatusErrorType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvalidTransStatusErrorType) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// General response for GetPaid endpoint supporting multiple payment methods
type PayabliApiResponseGetPaid struct {
	ResponseText   ResponseText         `json:"responseText" url:"responseText"`
	IsSuccess      IsSuccess            `json:"isSuccess" url:"isSuccess"`
	PageIdentifier *string              `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseData   *GetPaidResponseData `json:"responseData" url:"responseData"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayabliApiResponseGetPaid) GetResponseText() ResponseText {
	if p == nil {
		return ""
	}
	return p.ResponseText
}

func (p *PayabliApiResponseGetPaid) GetIsSuccess() IsSuccess {
	if p == nil {
		return false
	}
	return p.IsSuccess
}

func (p *PayabliApiResponseGetPaid) GetPageIdentifier() *string {
	if p == nil {
		return nil
	}
	return p.PageIdentifier
}

func (p *PayabliApiResponseGetPaid) GetResponseData() *GetPaidResponseData {
	if p == nil {
		return nil
	}
	return p.ResponseData
}

func (p *PayabliApiResponseGetPaid) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayabliApiResponseGetPaid) UnmarshalJSON(data []byte) error {
	type unmarshaler PayabliApiResponseGetPaid
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayabliApiResponseGetPaid(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayabliApiResponseGetPaid) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Response for SendReceipt endpoint.
type ReceiptResponse struct {
	IsSuccess      *IsSuccess      `json:"isSuccess,omitempty" url:"isSuccess,omitempty"`
	PageIdentifier *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	ResponseText   *ResponseText   `json:"responseText,omitempty" url:"responseText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceiptResponse) GetIsSuccess() *IsSuccess {
	if r == nil {
		return nil
	}
	return r.IsSuccess
}

func (r *ReceiptResponse) GetPageIdentifier() *PageIdentifier {
	if r == nil {
		return nil
	}
	return r.PageIdentifier
}

func (r *ReceiptResponse) GetResponseText() *ResponseText {
	if r == nil {
		return nil
	}
	return r.ResponseText
}

func (r *ReceiptResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceiptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceiptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceiptResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceiptResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RefundResponse struct {
	ResponseText   ResponseText         `json:"responseText" url:"responseText"`
	IsSuccess      IsSuccess            `json:"isSuccess" url:"isSuccess"`
	ResponseData   *ResponseDataRefunds `json:"responseData" url:"responseData"`
	Pageidentifier *PageIdentifier      `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RefundResponse) GetResponseText() ResponseText {
	if r == nil {
		return ""
	}
	return r.ResponseText
}

func (r *RefundResponse) GetIsSuccess() IsSuccess {
	if r == nil {
		return false
	}
	return r.IsSuccess
}

func (r *RefundResponse) GetResponseData() *ResponseDataRefunds {
	if r == nil {
		return nil
	}
	return r.ResponseData
}

func (r *RefundResponse) GetPageidentifier() *PageIdentifier {
	if r == nil {
		return nil
	}
	return r.Pageidentifier
}

func (r *RefundResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RefundResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RefundResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RefundResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RefundResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RefundWithInstructionsResponse struct {
	ResponseText   ResponseText         `json:"responseText" url:"responseText"`
	IsSuccess      IsSuccess            `json:"isSuccess" url:"isSuccess"`
	ResponseData   *ResponseDataRefunds `json:"responseData" url:"responseData"`
	Pageidentifier *PageIdentifier      `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RefundWithInstructionsResponse) GetResponseText() ResponseText {
	if r == nil {
		return ""
	}
	return r.ResponseText
}

func (r *RefundWithInstructionsResponse) GetIsSuccess() IsSuccess {
	if r == nil {
		return false
	}
	return r.IsSuccess
}

func (r *RefundWithInstructionsResponse) GetResponseData() *ResponseDataRefunds {
	if r == nil {
		return nil
	}
	return r.ResponseData
}

func (r *RefundWithInstructionsResponse) GetPageidentifier() *PageIdentifier {
	if r == nil {
		return nil
	}
	return r.Pageidentifier
}

func (r *RefundWithInstructionsResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RefundWithInstructionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RefundWithInstructionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RefundWithInstructionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RefundWithInstructionsResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Object describing the ACH payment method to use for transaction.
type RequestCreditPaymentMethod struct {
	AchAccount     *Achaccount     `json:"achAccount,omitempty" url:"achAccount,omitempty"`
	AchAccountType *Achaccounttype `json:"achAccountType,omitempty" url:"achAccountType,omitempty"`
	AchCode        *AchSecCode     `json:"achCode,omitempty" url:"achCode,omitempty"`
	// Bank account holder.
	AchHolder  *AchHolder  `json:"achHolder,omitempty" url:"achHolder,omitempty"`
	AchRouting *Achrouting `json:"achRouting,omitempty" url:"achRouting,omitempty"`
	// Method to use for the transaction. Must be ACH.
	method string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestCreditPaymentMethod) GetAchAccount() *Achaccount {
	if r == nil {
		return nil
	}
	return r.AchAccount
}

func (r *RequestCreditPaymentMethod) GetAchAccountType() *Achaccounttype {
	if r == nil {
		return nil
	}
	return r.AchAccountType
}

func (r *RequestCreditPaymentMethod) GetAchCode() *AchSecCode {
	if r == nil {
		return nil
	}
	return r.AchCode
}

func (r *RequestCreditPaymentMethod) GetAchHolder() *AchHolder {
	if r == nil {
		return nil
	}
	return r.AchHolder
}

func (r *RequestCreditPaymentMethod) GetAchRouting() *Achrouting {
	if r == nil {
		return nil
	}
	return r.AchRouting
}

func (r *RequestCreditPaymentMethod) Method() string {
	return r.method
}

func (r *RequestCreditPaymentMethod) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestCreditPaymentMethod) UnmarshalJSON(data []byte) error {
	type embed RequestCreditPaymentMethod
	var unmarshaler = struct {
		embed
		Method string `json:"method"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RequestCreditPaymentMethod(unmarshaler.embed)
	if unmarshaler.Method != "ach" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "ach", unmarshaler.Method)
	}
	r.method = unmarshaler.Method
	extraProperties, err := internal.ExtractExtraProperties(data, *r, "method")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestCreditPaymentMethod) MarshalJSON() ([]byte, error) {
	type embed RequestCreditPaymentMethod
	var marshaler = struct {
		embed
		Method string `json:"method"`
	}{
		embed:  embed(*r),
		Method: "ach",
	}
	return json.Marshal(marshaler)
}

func (r *RequestCreditPaymentMethod) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Object describing payment method to use for transaction.
type RequestPaymentAuthorizePaymentMethod struct {
	// Object describing a credit card payment method
	PayMethodCredit *PayMethodCredit
	// Object describing a stored method payment method
	PayMethodStoredMethod *PayMethodStoredMethod
	// Object describing a cloud payment method
	PayMethodCloud *PayMethodCloud

	typ string
}

func (r *RequestPaymentAuthorizePaymentMethod) GetPayMethodCredit() *PayMethodCredit {
	if r == nil {
		return nil
	}
	return r.PayMethodCredit
}

func (r *RequestPaymentAuthorizePaymentMethod) GetPayMethodStoredMethod() *PayMethodStoredMethod {
	if r == nil {
		return nil
	}
	return r.PayMethodStoredMethod
}

func (r *RequestPaymentAuthorizePaymentMethod) GetPayMethodCloud() *PayMethodCloud {
	if r == nil {
		return nil
	}
	return r.PayMethodCloud
}

func (r *RequestPaymentAuthorizePaymentMethod) UnmarshalJSON(data []byte) error {
	valuePayMethodCredit := new(PayMethodCredit)
	if err := json.Unmarshal(data, &valuePayMethodCredit); err == nil {
		r.typ = "PayMethodCredit"
		r.PayMethodCredit = valuePayMethodCredit
		return nil
	}
	valuePayMethodStoredMethod := new(PayMethodStoredMethod)
	if err := json.Unmarshal(data, &valuePayMethodStoredMethod); err == nil {
		r.typ = "PayMethodStoredMethod"
		r.PayMethodStoredMethod = valuePayMethodStoredMethod
		return nil
	}
	valuePayMethodCloud := new(PayMethodCloud)
	if err := json.Unmarshal(data, &valuePayMethodCloud); err == nil {
		r.typ = "PayMethodCloud"
		r.PayMethodCloud = valuePayMethodCloud
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestPaymentAuthorizePaymentMethod) MarshalJSON() ([]byte, error) {
	if r.typ == "PayMethodCredit" || r.PayMethodCredit != nil {
		return json.Marshal(r.PayMethodCredit)
	}
	if r.typ == "PayMethodStoredMethod" || r.PayMethodStoredMethod != nil {
		return json.Marshal(r.PayMethodStoredMethod)
	}
	if r.typ == "PayMethodCloud" || r.PayMethodCloud != nil {
		return json.Marshal(r.PayMethodCloud)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestPaymentAuthorizePaymentMethodVisitor interface {
	VisitPayMethodCredit(*PayMethodCredit) error
	VisitPayMethodStoredMethod(*PayMethodStoredMethod) error
	VisitPayMethodCloud(*PayMethodCloud) error
}

func (r *RequestPaymentAuthorizePaymentMethod) Accept(visitor RequestPaymentAuthorizePaymentMethodVisitor) error {
	if r.typ == "PayMethodCredit" || r.PayMethodCredit != nil {
		return visitor.VisitPayMethodCredit(r.PayMethodCredit)
	}
	if r.typ == "PayMethodStoredMethod" || r.PayMethodStoredMethod != nil {
		return visitor.VisitPayMethodStoredMethod(r.PayMethodStoredMethod)
	}
	if r.typ == "PayMethodCloud" || r.PayMethodCloud != nil {
		return visitor.VisitPayMethodCloud(r.PayMethodCloud)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// Object describing payment method to use for validation.
type RequestPaymentValidatePaymentMethod struct {
	Method     RequestPaymentValidatePaymentMethodMethod `json:"method" url:"method"`
	Cardnumber Cardnumber                                `json:"cardnumber" url:"cardnumber"`
	Cardexp    Cardexp                                   `json:"cardexp" url:"cardexp"`
	Cardzip    Cardzip                                   `json:"cardzip" url:"cardzip"`
	CardHolder Cardholder                                `json:"cardHolder" url:"cardHolder"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestPaymentValidatePaymentMethod) GetMethod() RequestPaymentValidatePaymentMethodMethod {
	if r == nil {
		return ""
	}
	return r.Method
}

func (r *RequestPaymentValidatePaymentMethod) GetCardnumber() Cardnumber {
	if r == nil {
		return ""
	}
	return r.Cardnumber
}

func (r *RequestPaymentValidatePaymentMethod) GetCardexp() Cardexp {
	if r == nil {
		return ""
	}
	return r.Cardexp
}

func (r *RequestPaymentValidatePaymentMethod) GetCardzip() Cardzip {
	if r == nil {
		return ""
	}
	return r.Cardzip
}

func (r *RequestPaymentValidatePaymentMethod) GetCardHolder() Cardholder {
	if r == nil {
		return ""
	}
	return r.CardHolder
}

func (r *RequestPaymentValidatePaymentMethod) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestPaymentValidatePaymentMethod) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestPaymentValidatePaymentMethod
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestPaymentValidatePaymentMethod(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestPaymentValidatePaymentMethod) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The card validation method.
type RequestPaymentValidatePaymentMethodMethod string

const (
	RequestPaymentValidatePaymentMethodMethodCard  RequestPaymentValidatePaymentMethodMethod = "card"
	RequestPaymentValidatePaymentMethodMethodCloud RequestPaymentValidatePaymentMethodMethod = "cloud"
)

func NewRequestPaymentValidatePaymentMethodMethodFromString(s string) (RequestPaymentValidatePaymentMethodMethod, error) {
	switch s {
	case "card":
		return RequestPaymentValidatePaymentMethodMethodCard, nil
	case "cloud":
		return RequestPaymentValidatePaymentMethodMethodCloud, nil
	}
	var t RequestPaymentValidatePaymentMethodMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestPaymentValidatePaymentMethodMethod) Ptr() *RequestPaymentValidatePaymentMethodMethod {
	return &r
}

type ResponseDataRefunds struct {
	AuthCode                   Authcode                    `json:"authCode" url:"authCode"`
	ExpectedProcessingDateTime *ExpectedProcessingDateTime `json:"expectedProcessingDateTime,omitempty" url:"expectedProcessingDateTime,omitempty"`
	// This field isn't applicable to refund operations.
	AvsResponseText *Avsresponsetext `json:"avsResponseText,omitempty" url:"avsResponseText,omitempty"`
	CustomerId      *CustomerId      `json:"customerId,omitempty" url:"customerId,omitempty"`
	// This field isn't applicable to refund operations.
	CvvResponseText *Cvvresponsetext `json:"cvvResponseText,omitempty" url:"cvvResponseText,omitempty"`
	// This field isn't applicable to refund operations.
	MethodReferenceId *MethodReferenceId `json:"methodReferenceId,omitempty" url:"methodReferenceId,omitempty"`
	ReferenceId       Referenceidtrans   `json:"referenceId" url:"referenceId"`
	ResultCode        ResultCode         `json:"resultCode" url:"resultCode"`
	// Text description of the transaction result
	ResultText string `json:"resultText" url:"resultText"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseDataRefunds) GetAuthCode() Authcode {
	if r == nil {
		return ""
	}
	return r.AuthCode
}

func (r *ResponseDataRefunds) GetExpectedProcessingDateTime() *ExpectedProcessingDateTime {
	if r == nil {
		return nil
	}
	return r.ExpectedProcessingDateTime
}

func (r *ResponseDataRefunds) GetAvsResponseText() *Avsresponsetext {
	if r == nil {
		return nil
	}
	return r.AvsResponseText
}

func (r *ResponseDataRefunds) GetCustomerId() *CustomerId {
	if r == nil {
		return nil
	}
	return r.CustomerId
}

func (r *ResponseDataRefunds) GetCvvResponseText() *Cvvresponsetext {
	if r == nil {
		return nil
	}
	return r.CvvResponseText
}

func (r *ResponseDataRefunds) GetMethodReferenceId() *MethodReferenceId {
	if r == nil {
		return nil
	}
	return r.MethodReferenceId
}

func (r *ResponseDataRefunds) GetReferenceId() Referenceidtrans {
	if r == nil {
		return ""
	}
	return r.ReferenceId
}

func (r *ResponseDataRefunds) GetResultCode() ResultCode {
	if r == nil {
		return 0
	}
	return r.ResultCode
}

func (r *ResponseDataRefunds) GetResultText() string {
	if r == nil {
		return ""
	}
	return r.ResultText
}

func (r *ResponseDataRefunds) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseDataRefunds) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseDataRefunds
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseDataRefunds(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseDataRefunds) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReverseResponse struct {
	ResponseCode   Responsecode         `json:"responseCode" url:"responseCode"`
	PageIdentifier *PageIdentifier      `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	RoomId         int                  `json:"roomId" url:"roomId"`
	IsSuccess      IsSuccess            `json:"isSuccess" url:"isSuccess"`
	ResponseText   ResponseText         `json:"responseText" url:"responseText"`
	ResponseData   *ResponseDataRefunds `json:"responseData" url:"responseData"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReverseResponse) GetResponseCode() Responsecode {
	if r == nil {
		return 0
	}
	return r.ResponseCode
}

func (r *ReverseResponse) GetPageIdentifier() *PageIdentifier {
	if r == nil {
		return nil
	}
	return r.PageIdentifier
}

func (r *ReverseResponse) GetRoomId() int {
	if r == nil {
		return 0
	}
	return r.RoomId
}

func (r *ReverseResponse) GetIsSuccess() IsSuccess {
	if r == nil {
		return false
	}
	return r.IsSuccess
}

func (r *ReverseResponse) GetResponseText() ResponseText {
	if r == nil {
		return ""
	}
	return r.ResponseText
}

func (r *ReverseResponse) GetResponseData() *ResponseDataRefunds {
	if r == nil {
		return nil
	}
	return r.ResponseData
}

func (r *ReverseResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReverseResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReverseResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReverseResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReverseResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type TransRequestBody struct {
	AccountId *Accountid `json:"accountId,omitempty" url:"accountId,omitempty"`
	// Object describing the Customer/Payor. Which fields are required depends on the paypoint's custom identifier settings.
	CustomerData *PayorDataRequest `json:"customerData,omitempty" url:"customerData,omitempty"`
	EntryPoint   *Entrypointfield  `json:"entryPoint,omitempty" url:"entryPoint,omitempty"`
	// Object describing an Invoice linked to the transaction.
	InvoiceData      *BillData         `json:"invoiceData,omitempty" url:"invoiceData,omitempty"`
	Ipaddress        *IpAddress        `json:"ipaddress,omitempty" url:"ipaddress,omitempty"`
	OrderDescription *Orderdescription `json:"orderDescription,omitempty" url:"orderDescription,omitempty"`
	OrderId          *OrderId          `json:"orderId,omitempty" url:"orderId,omitempty"`
	// Object describing details of the payment. Required.
	PaymentDetails *PaymentDetail `json:"paymentDetails" url:"paymentDetails"`
	// Information about the payment method for the transaction. Required and recommended fields for each payment method type are described in each schema below.
	PaymentMethod  *PaymentMethod  `json:"paymentMethod" url:"paymentMethod"`
	Source         *Source         `json:"source,omitempty" url:"source,omitempty"`
	Subdomain      *Subdomain      `json:"subdomain,omitempty" url:"subdomain,omitempty"`
	SubscriptionId *Subscriptionid `json:"subscriptionId,omitempty" url:"subscriptionId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransRequestBody) GetAccountId() *Accountid {
	if t == nil {
		return nil
	}
	return t.AccountId
}

func (t *TransRequestBody) GetCustomerData() *PayorDataRequest {
	if t == nil {
		return nil
	}
	return t.CustomerData
}

func (t *TransRequestBody) GetEntryPoint() *Entrypointfield {
	if t == nil {
		return nil
	}
	return t.EntryPoint
}

func (t *TransRequestBody) GetInvoiceData() *BillData {
	if t == nil {
		return nil
	}
	return t.InvoiceData
}

func (t *TransRequestBody) GetIpaddress() *IpAddress {
	if t == nil {
		return nil
	}
	return t.Ipaddress
}

func (t *TransRequestBody) GetOrderDescription() *Orderdescription {
	if t == nil {
		return nil
	}
	return t.OrderDescription
}

func (t *TransRequestBody) GetOrderId() *OrderId {
	if t == nil {
		return nil
	}
	return t.OrderId
}

func (t *TransRequestBody) GetPaymentDetails() *PaymentDetail {
	if t == nil {
		return nil
	}
	return t.PaymentDetails
}

func (t *TransRequestBody) GetPaymentMethod() *PaymentMethod {
	if t == nil {
		return nil
	}
	return t.PaymentMethod
}

func (t *TransRequestBody) GetSource() *Source {
	if t == nil {
		return nil
	}
	return t.Source
}

func (t *TransRequestBody) GetSubdomain() *Subdomain {
	if t == nil {
		return nil
	}
	return t.Subdomain
}

func (t *TransRequestBody) GetSubscriptionId() *Subscriptionid {
	if t == nil {
		return nil
	}
	return t.SubscriptionId
}

func (t *TransRequestBody) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler TransRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransRequestBody) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Response for card validation endpoint
type ValidateResponse struct {
	ResponseText ResponseText          `json:"responseText" url:"responseText"`
	IsSuccess    IsSuccess             `json:"isSuccess" url:"isSuccess"`
	ResponseData *ValidateResponseData `json:"responseData" url:"responseData"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidateResponse) GetResponseText() ResponseText {
	if v == nil {
		return ""
	}
	return v.ResponseText
}

func (v *ValidateResponse) GetIsSuccess() IsSuccess {
	if v == nil {
		return false
	}
	return v.IsSuccess
}

func (v *ValidateResponse) GetResponseData() *ValidateResponseData {
	if v == nil {
		return nil
	}
	return v.ResponseData
}

func (v *ValidateResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Response data for card validation
type ValidateResponseData struct {
	AuthCode          Authcode           `json:"authCode" url:"authCode"`
	ReferenceId       Referenceidtrans   `json:"referenceId" url:"referenceId"`
	ResultCode        ResultCode         `json:"resultCode" url:"resultCode"`
	ResultText        Resulttext         `json:"resultText" url:"resultText"`
	AvsResponseText   Avsresponsetext    `json:"avsResponseText" url:"avsResponseText"`
	CvvResponseText   Cvvresponsetext    `json:"cvvResponseText" url:"cvvResponseText"`
	CustomerId        Customeridtrans    `json:"customerId" url:"customerId"`
	MethodReferenceId *MethodReferenceId `json:"methodReferenceId,omitempty" url:"methodReferenceId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidateResponseData) GetAuthCode() Authcode {
	if v == nil {
		return ""
	}
	return v.AuthCode
}

func (v *ValidateResponseData) GetReferenceId() Referenceidtrans {
	if v == nil {
		return ""
	}
	return v.ReferenceId
}

func (v *ValidateResponseData) GetResultCode() ResultCode {
	if v == nil {
		return 0
	}
	return v.ResultCode
}

func (v *ValidateResponseData) GetResultText() Resulttext {
	if v == nil {
		return ""
	}
	return v.ResultText
}

func (v *ValidateResponseData) GetAvsResponseText() Avsresponsetext {
	if v == nil {
		return ""
	}
	return v.AvsResponseText
}

func (v *ValidateResponseData) GetCvvResponseText() Cvvresponsetext {
	if v == nil {
		return ""
	}
	return v.CvvResponseText
}

func (v *ValidateResponseData) GetCustomerId() Customeridtrans {
	if v == nil {
		return 0
	}
	return v.CustomerId
}

func (v *ValidateResponseData) GetMethodReferenceId() *MethodReferenceId {
	if v == nil {
		return nil
	}
	return v.MethodReferenceId
}

func (v *ValidateResponseData) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidateResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateResponseData) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Response for MoneyIn/void endpoint
type VoidResponse struct {
	ResponseCode   Responsecode      `json:"responseCode" url:"responseCode"`
	PageIdentifier *PageIdentifier   `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	RoomId         RoomIdNotInUse    `json:"roomId" url:"roomId"`
	IsSuccess      IsSuccess         `json:"isSuccess" url:"isSuccess"`
	ResponseText   ResponseText      `json:"responseText" url:"responseText"`
	ResponseData   *VoidResponseData `json:"responseData" url:"responseData"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VoidResponse) GetResponseCode() Responsecode {
	if v == nil {
		return 0
	}
	return v.ResponseCode
}

func (v *VoidResponse) GetPageIdentifier() *PageIdentifier {
	if v == nil {
		return nil
	}
	return v.PageIdentifier
}

func (v *VoidResponse) GetRoomId() RoomIdNotInUse {
	if v == nil {
		return 0
	}
	return v.RoomId
}

func (v *VoidResponse) GetIsSuccess() IsSuccess {
	if v == nil {
		return false
	}
	return v.IsSuccess
}

func (v *VoidResponse) GetResponseText() ResponseText {
	if v == nil {
		return ""
	}
	return v.ResponseText
}

func (v *VoidResponse) GetResponseData() *VoidResponseData {
	if v == nil {
		return nil
	}
	return v.ResponseData
}

func (v *VoidResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VoidResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler VoidResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VoidResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VoidResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// Response data for void transactions
type VoidResponseData struct {
	AuthCode          Authcode           `json:"authCode" url:"authCode"`
	ReferenceId       Referenceidtrans   `json:"referenceId" url:"referenceId"`
	ResultCode        ResultCode         `json:"resultCode" url:"resultCode"`
	ResultText        Resulttext         `json:"resultText" url:"resultText"`
	AvsResponseText   *Avsresponsetext   `json:"avsResponseText,omitempty" url:"avsResponseText,omitempty"`
	CvvResponseText   *Cvvresponsetext   `json:"cvvResponseText,omitempty" url:"cvvResponseText,omitempty"`
	CustomerId        *Customeridtrans   `json:"customerId,omitempty" url:"customerId,omitempty"`
	MethodReferenceId *MethodReferenceId `json:"methodReferenceId,omitempty" url:"methodReferenceId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VoidResponseData) GetAuthCode() Authcode {
	if v == nil {
		return ""
	}
	return v.AuthCode
}

func (v *VoidResponseData) GetReferenceId() Referenceidtrans {
	if v == nil {
		return ""
	}
	return v.ReferenceId
}

func (v *VoidResponseData) GetResultCode() ResultCode {
	if v == nil {
		return 0
	}
	return v.ResultCode
}

func (v *VoidResponseData) GetResultText() Resulttext {
	if v == nil {
		return ""
	}
	return v.ResultText
}

func (v *VoidResponseData) GetAvsResponseText() *Avsresponsetext {
	if v == nil {
		return nil
	}
	return v.AvsResponseText
}

func (v *VoidResponseData) GetCvvResponseText() *Cvvresponsetext {
	if v == nil {
		return nil
	}
	return v.CvvResponseText
}

func (v *VoidResponseData) GetCustomerId() *Customeridtrans {
	if v == nil {
		return nil
	}
	return v.CustomerId
}

func (v *VoidResponseData) GetMethodReferenceId() *MethodReferenceId {
	if v == nil {
		return nil
	}
	return v.MethodReferenceId
}

func (v *VoidResponseData) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VoidResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler VoidResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VoidResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VoidResponseData) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
