// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "sdk/internal"
	time "time"
)

type ListBatchDetailsRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted:**
	//
	// - `settlementDate` (gt, ge, lt, le, eq, ne)
	// - `depositDate` (gt, ge, lt, le, eq, ne)
	// - `transId`  (ne, eq, ct, nct)
	// - `gatewayTransId`  (ne, eq, ct, nct)
	// - `method`   (in, nin, eq, ne)
	// - `settledAmount`  (gt, ge, lt, le, eq, ne)
	// - `operation`    (in, nin, eq, ne)
	// - `source`   (in, nin, eq, ne)
	// - `batchNumber`  (ct, nct, eq, ne)
	// - `payaccountLastfour`   (nct, ct)
	// - `payaccountType`   (ne, eq, in, nin)
	// - `customerFirstname`   (ct, nct, eq, ne)
	// - `customerLastname`    (ct, nct, eq, ne)
	// - `customerName`   (ct, nct)
	// - `customerId`  (eq, ne)
	// - `customerNumber`  (ct, nct, eq, ne)
	// - `customerCompanyname`    (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity`    (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity`    (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId`  (eq) *mandatory when entry=org*
	// - `isHold` (eq, ne)
	// - `paypointId`  (ne, eq)
	// - `paypointLegal`  (ne, eq, ct, nct)
	// - `paypointDba`  (ne, eq, ct, nct)
	// - `orgName`  (ne, eq, ct, nct)
	// - `batchId` (ct, nct, eq, neq)
	// - `additional-xxx`  (ne, eq, ct, nct) where xxx is the additional field name
	//
	// **List of comparison accepted:**
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array separated by "|"
	// - `nin` => not inside array separated by "|"
	//
	// **List of parameters accepted:**
	//
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	//
	// Example: `settledAmount(gt)=20` returns all records with a `settledAmount` greater than 20.00.
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListBatchDetailsOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted:**
	//
	// - `settlementDate` (gt, ge, lt, le, eq, ne)
	// - `depositDate` (gt, ge, lt, le, eq, ne)
	// - `transId`  (ne, eq, ct, nct)
	// - `gatewayTransId`  (ne, eq, ct, nct)
	// - `method`   (in, nin, eq, ne)
	// - `settledAmount`  (gt, ge, lt, le, eq, ne)
	// - `operation`    (in, nin, eq, ne)
	// - `source`   (in, nin, eq, ne)
	// - `batchNumber`  (ct, nct, eq, ne)
	// - `payaccountLastfour`   (nct, ct)
	// - `payaccountType`   (ne, eq, in, nin)
	// - `customerFirstname`   (ct, nct, eq, ne)
	// - `customerLastname`    (ct, nct, eq, ne)
	// - `customerName`   (ct, nct)
	// - `customerId`  (eq, ne)
	// - `customerNumber`  (ct, nct, eq, ne)
	// - `customerCompanyname`    (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity`    (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity`    (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId`  (eq) *mandatory when entry=org*
	// - `isHold` (eq, ne)
	// - `paypointId`  (ne, eq)
	// - `paypointLegal`  (ne, eq, ct, nct)
	// - `paypointDba`  (ne, eq, ct, nct)
	// - `orgName`  (ne, eq, ct, nct)
	// - `batchId` (ct, nct, eq, neq)
	// - `additional-xxx`  (ne, eq, ct, nct) where xxx is the additional field name
	//
	// **List of comparison accepted:**
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array separated by "|"
	// - `nin` => not inside array separated by "|"
	//
	// **List of parameters accepted:**
	//
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	//
	// Example: `settledAmount(gt)=20` returns all records with a `settledAmount` greater than 20.00.
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListBatchesRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted:**
	//
	// - `batchDate` (gt, ge, lt, le, eq, ne)
	// - `batchNumber` (ne, eq)
	// - `method` (in, nin, eq, ne)
	// - `connectorName` (ne, eq, ct, nct)
	// - `batchAmount` (gt, ge, lt, le, eq, ne)
	// - `feeBatchAmount` (gt, ge, lt, le, eq, ne)
	// - `netBatchAmount` (gt, ge, lt, le, eq, ne)
	// - `releaseAmount` (gt, ge, lt, le, eq, ne)
	// - `heldAmount` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `paypointId` (ne, eq)
	// - `externalPaypointID` (ct, nct, eq, ne)
	// - `expectedDepositDate` (gt, ge, lt, le, eq, ne)
	// - `depositDate` (gt, ge, lt, le, eq, ne)
	// - `batchRecords` (gt, ge, lt, le, eq, ne)
	// - `transferId` (ne, eq)
	// - `transferDate` (gt, ge, lt, le, eq, ne)
	// - `grossAmount` (gt, ge, lt, le, eq, ne)
	// - `chargeBackAmount` (gt, ge, lt, le, eq, ne)
	// - `returnedAmount` (gt, ge, lt, le, eq, ne)
	// - `billingFeeAmount` (gt, ge, lt, le, eq, ne)
	// - `thirdPartyPaidAmount` (gt, ge, lt, le, eq, ne)
	// - `netFundedAmount` (gt, ge, lt, le, eq, ne)
	// - `adjustmentAmount` (gt, ge, lt, le, eq, ne)
	// - `processor` (ne, eq, ct, nct)
	// - `transferStatus` (ne, eq, in, nin)
	//
	// **List of parameters accepted:**
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	//
	// Example: `batchAmount(gt)=20` returns all records with a `batchAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListBatchesOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted:**
	//
	// - `batchDate` (gt, ge, lt, le, eq, ne)
	// - `batchNumber` (ne, eq)
	// - `method` (in, nin, eq, ne)
	// - `connectorName` (ne, eq, ct, nct)
	// - `batchAmount` (gt, ge, lt, le, eq, ne)
	// - `feeBatchAmount` (gt, ge, lt, le, eq, ne)
	// - `netBatchAmount` (gt, ge, lt, le, eq, ne)
	// - `releaseAmount` (gt, ge, lt, le, eq, ne)
	// - `heldAmount` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `paypointId` (ne, eq)
	// - `externalPaypointID` (ct, nct, eq, ne)
	// - `expectedDepositDate` (gt, ge, lt, le, eq, ne)
	// - `depositDate` (gt, ge, lt, le, eq, ne)
	// - `batchRecords` (gt, ge, lt, le, eq, ne)
	// - `transferId` (ne, eq)
	// - `transferDate` (gt, ge, lt, le, eq, ne)
	// - `grossAmount` (gt, ge, lt, le, eq, ne)
	// - `chargeBackAmount` (gt, ge, lt, le, eq, ne)
	// - `returnedAmount` (gt, ge, lt, le, eq, ne)
	// - `billingFeeAmount` (gt, ge, lt, le, eq, ne)
	// - `thirdPartyPaidAmount` (gt, ge, lt, le, eq, ne)
	// - `netFundedAmount` (gt, ge, lt, le, eq, ne)
	// - `adjustmentAmount` (gt, ge, lt, le, eq, ne)
	// - `processor` (ne, eq, ct, nct)
	// - `transferStatus` (ne, eq, in, nin)
	//
	// **List of parameters accepted:**
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	//
	// Example: `batchAmount(gt)=20` returns all records with a `batchAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListBatchesOutRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query. See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted**:
	//
	// - `batchDate` (gt, ge, lt, le, eq, ne)
	// - `batchNumber` (ne, eq)
	// - `batchAmount` (gt, ge, lt, le, eq, ne)
	// - `parentOrgId` (ne, eq, nin, in)
	// - `status` (in, nin, eq, ne)
	// - `orgId` (eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `paypointId` (ne, eq)
	// - `externalPaypointID` (ct, nct, eq, ne)
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListBatchesOutOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted**:
	//
	// - `batchDate` (gt, ge, lt, le, eq, ne)
	// - `batchNumber` (ne, eq)
	// - `batchAmount` (gt, ge, lt, le, eq, ne)
	// - `parentOrgId` (ne, eq, nin, in)
	// - `status` (in, nin, eq, ne)
	// - `orgId` (eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `paypointId` (ne, eq)
	// - `externalPaypointID` (ct, nct, eq, ne)
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListChargebacksRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// **List of field names accepted:**
	// - `chargebackDate` (gt, ge, lt, le, eq, ne)
	// - `transId`  (ne, eq, ct, nct)
	// - `method`   (in, nin, eq, ne)
	// - `netAmount`  (gt, ge, lt, le, eq, ne)
	// - `reasonCode`   (in, nin, eq, ne)
	// - `reason`  (ct, nct, eq, ne)
	// - `replyDate` (gt, ge, lt, le, eq, ne)
	// - `caseNumber`  (ct, nct, eq, ne)
	// - `status`   (in, nin, eq, ne)
	// - `accountType`   (in, nin, eq, ne)
	// - `payaccountLastfour`   (nct, ct)
	// - `payaccountType`   (ne, eq, in, nin)
	// - `customerFirstname`   (ct, nct, eq, ne)
	// - `customerLastname`    (ct, nct, eq, ne)
	// - `customerName`   (ct, nct)
	// - `customerId`  (eq, ne)
	// - `customerNumber`  (ct, nct, eq, ne)
	// - `customerCompanyname`    (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity`    (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity`    (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId`  (eq) *mandatory when entry=org*
	// - `paypointId`  (ne, eq)
	// - `paypointLegal`  (ne, eq, ct, nct)
	// - `paypointDba`  (ne, eq, ct, nct)
	// - `orgName`  (ne, eq, ct, nct)
	// - `additional-xxx`  (ne, eq, ct, nct) where xxx is the additional field name
	//
	// **List of comparison accepted - enclosed between parentheses:**
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array separated by "|"
	// - `nin` => not inside array separated by "|"
	//
	// **List of parameters accepted:**
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListChargebacksOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info> See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// **List of field names accepted:**
	//
	// - `chargebackDate` (gt, ge, lt, le, eq, ne)
	// - `transId`  (ne, eq, ct, nct)
	// - `method`   (in, nin, eq, ne)
	// - `netAmount`  (gt, ge, lt, le, eq, ne)
	// - `reasonCode`   (in, nin, eq, ne)
	// - `reason`  (ct, nct, eq, ne)
	// - `replyDate` (gt, ge, lt, le, eq, ne)
	// - `caseNumber`  (ct, nct, eq, ne)
	// - `status`   (in, nin, eq, ne)
	// - `accountType`   (in, nin, eq, ne)
	// - `payaccountLastfour`   (nct, ct)
	// - `payaccountType`   (ne, eq, in, nin)
	// - `customerFirstname`   (ct, nct, eq, ne)
	// - `customerLastname`    (ct, nct, eq, ne)
	// - `customerName`   (ct, nct)
	// - `customerId`  (eq, ne)
	// - `customerNumber`  (ct, nct, eq, ne)
	// - `customerCompanyname`    (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity`    (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity`    (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId`  (eq) *mandatory when entry=org*
	// - `paypointId`  (ne, eq)
	// - `paypointLegal`  (ne, eq, ct, nct)
	// - `paypointDba`  (ne, eq, ct, nct)
	// - `orgName`  (ne, eq, ct, nct)
	// - `additional-xxx`  (ne, eq, ct, nct) where xxx is the additional field name
	//
	// **List of comparison accepted - enclosed between parentheses:**
	//
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array separated by "|"
	// - `nin` => not inside array separated by "|"
	//
	// **List of parameters accepted:**
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListCustomersRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more details.
	//
	// **List of Accepted Field Names:**
	//
	// - `createdDate` (gt, ge, lt, le, eq, ne)
	// - `customernumber` (ne, eq, ct, nct)
	// - `firstname` (ne, eq, ct, nct)
	// - `lastname` (ne, eq, ct, nct)
	// - `name` (ct, nct)
	// - `address` (ne, eq, ct, nct)
	// - `city` (ne, eq, ct, nct)
	// - `country` (ne, eq, ct, nct)
	// - `zip` (ne, eq, ct, nct)
	// - `state` (ne, eq, ct, nct)
	// - `shippingaddress` (ne, eq, ct, nct)
	// - `shippingcity` (ne, eq, ct, nct)
	// - `shippingcountry` (ne, eq, ct, nct)
	// - `shippingzip` (ne, eq, ct, nct)
	// - `shippingstate` (ne, eq, ct, nct)
	// - `phone` (ne, eq, ct, nct)
	// - `email` (ne, eq, ct, nct)
	// - `company` (ne, eq, ct, nct)
	// - `username` (ne, eq, ct, nct)
	// - `balance` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	// - `orgId` (eq) *mandatory when entry=org*
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// **List of Accepted Comparisons:**
	//
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array separated by "|"
	// - `nin` => not inside array separated by "|"
	//
	// **Accepted Parameters:**
	// - `limitRecord`: Max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: Initial record in query
	//
	// **Example Usage:**
	// `balance(gt)=20` will return all records with a balance greater than 20.00.
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListCustomersOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more details.
	//
	// **List of Accepted Field Names:**
	//
	// - `createdDate` (gt, ge, lt, le, eq, ne)
	// - `customernumber` (ne, eq, ct, nct)
	// - `firstname` (ne, eq, ct, nct)
	// - `lastname` (ne, eq, ct, nct)
	// - `name` (ct, nct)
	// - `address` (ne, eq, ct, nct)
	// - `city` (ne, eq, ct, nct)
	// - `country` (ne, eq, ct, nct)
	// - `zip` (ne, eq, ct, nct)
	// - `state` (ne, eq, ct, nct)
	// - `shippingaddress` (ne, eq, ct, nct)
	// - `shippingcity` (ne, eq, ct, nct)
	// - `shippingcountry` (ne, eq, ct, nct)
	// - `shippingzip` (ne, eq, ct, nct)
	// - `shippingstate` (ne, eq, ct, nct)
	// - `phone` (ne, eq, ct, nct)
	// - `email` (ne, eq, ct, nct)
	// - `company` (ne, eq, ct, nct)
	// - `username` (ne, eq, ct, nct)
	// - `balance` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	// - `orgId` (eq) *mandatory when entry=org*
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// **List of Accepted Comparisons:**
	//
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array separated by "|"
	// - `nin` => not inside array separated by "|"
	//
	// **Accepted Parameters:**
	// - `limitRecord`: Max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: Initial record in query
	//
	// **Example Usage:**
	// `balance(gt)=20` will return all records with a balance greater than 20.00.
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListNotificationReportsRequest struct {
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `reportName` (ct, nct, eq, ne)
	// - `createdAt` (gt, ge, lt, le, eq, ne)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: reportName(ct)=tr  return all records containing the string "tr"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListNotificationReportsOrgRequest struct {
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `reportName` (ct, nct, eq, ne)
	// - `createdAt` (gt, ge, lt, le, eq, ne)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: reportName(ct)=tr  return all records containing the string "tr"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListNotificationsRequest struct {
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `frequency` (in, nin,ne, eq)
	// - `method` (in, nin, eq, ne)
	// - `event` (in, nin, eq, ne)
	// - `target` (ct, nct, eq, ne)
	// - `status` (eq, ne)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: totalAmount(gt)=20  return all records with totalAmount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListNotificationsOrgRequest struct {
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `frequency` (in, nin,ne, eq)
	// - `method` (in, nin, eq, ne)
	// - `event` (in, nin, eq, ne)
	// - `target` (ct, nct, eq, ne)
	// - `status` (eq, ne)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array
	// - nin => not inside array
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: totalAmount(gt)=20  return all records with totalAmount greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListOrganizationsRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// **List of field names accepted:**
	//
	// - `createdAt` (gt, ge, lt, le, eq, ne)
	// - `startDate` (gt, ge, lt, le, eq, ne)
	// - `dbaname`  (ct, nct)
	// - `legalname`  (ct, nct)
	// - `ein`  (ct, nct)
	// - `address`  (ct, nct)
	// - `city`  (ct, nct)
	// - `state`  (ct, nct)
	// - `phone`  (ct, nct)
	// - `mcc`  (ct, nct)
	// - `owntype`  (ct, nct)
	// - `ownerName`  (ct, nct)
	// - `contactName`  (ct, nct)
	// - `orgParentname`  (ct, nct)
	// - `boardingId` (eq, ne)
	// - `entryName`  (ct, nct)
	//
	// **List of comparison accepted - enclosed between parentheses:**
	//
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array
	// - `nin` => not inside array
	//
	// **List of parameters accepted:**
	//
	// - `limitRecord` : max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord` : initial record in query
	//
	// Example: `dbaname(ct)=hoa` returns all records with a `dbaname` containing "hoa"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListPayoutRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// List of field names accepted:
	//
	//   - `status` (in, nin, eq, ne)
	//
	//   - `transactionDate` (gt, ge, lt, le, eq, ne)
	//
	//   - `billNumber` (ct, nct)
	//
	//   - `vendorNumber` (ct, nct, eq, ne)
	//
	//   - `vendorName` (ct, nct, eq, ne)
	//
	//   - `paymentMethod` (ct, nct, eq, ne, in, nin)
	//
	//   - `paymentId` (ct, nct, eq, ne)
	//
	//   - `parentOrgId` (ne, eq, nin, in)
	//
	//   - `batchNumber` (ct, nct, eq, ne)
	//
	//   - `totalAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `paypointLegal` (ne, eq, ct, nct)
	//
	//   - `paypointDba` (ne, eq, ct, nct)
	//
	//   - `accountId` (ne, eq, ct, nct)
	//
	//   - `orgName` (ne, eq, ct, nct)
	//
	//   - `externalPaypointID` (ct, nct, eq, ne)
	//
	//   - `paypointId` (eq, ne)
	//
	//   - `vendorId` (eq, ne)
	//
	//   - `vendorEIN` (ct, nct, eq, ne)
	//
	//   - `vendorPhone` (ct, nct, eq, ne)
	//
	//   - `vendorEmail` (ct, nct, eq, ne)
	//
	//   - `vendorAddress` (ct, nct, eq, ne)
	//
	//   - `vendorCity` (ct, nct, eq, ne)
	//
	//   - `vendorState` (ct, nct, eq, ne)
	//
	//   - `vendorCountry` (ct, nct, eq, ne)
	//
	//   - `vendorZip` (ct, nct, eq, ne)
	//
	//   - `vendorMCC` (ct, nct, eq, ne)
	//
	//   - `vendorLocationCode` (ct, nct, eq, ne)
	//
	//   - `vendorCustomField1` (ct, nct, eq, ne)
	//
	//   - `vendorCustomField2` (ct, nct, eq, ne)
	//
	//   - `comments` (ct, nct)
	//
	//   - `payaccountCurrency` (ne, eq, in, nin)
	//
	//   - `remitAddress` (ct, nct)
	//
	//   - `source` (ct, nct, eq, ne)
	//
	//   - `updatedOn` (gt, ge, lt, le, eq, ne)
	//
	//   - `feeAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `lotNumber` (ct, nct)
	//
	//   - `customerVendorAccount` (ct, nct, eq, ne)
	//
	//   - `batchId` (eq, ne)
	//
	//   - `payoutProgram`(eq, ne) the options are `managed` or `odp`. For example, `payoutProgram(eq)=managed` returns all records with a `payoutProgram` equal to `managed`.
	//
	//     List of comparison accepted - enclosed between parentheses:
	//
	//   - eq or empty => equal
	//
	//   - gt => greater than
	//
	//   - ge => greater or equal
	//
	//   - lt => less than
	//
	//   - le => less or equal
	//
	//   - ne => not equal
	//
	//   - ct => contains
	//
	//   - nct => not contains
	//
	//   - in => inside array separated by \"|\"
	//
	//   - nin => not inside array separated by \"|\"
	//
	//     List of parameters accepted:
	//
	//   - limitRecord : max number of records for query (default=\"20\", \"0\" or negative value for all)
	//
	//   - fromRecord : initial record in query
	//
	//   - sortBy : indicate field name and direction to sort the results
	//
	//     Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	//
	//     Example: `sortBy=desc(netamount)` returns all records sorted by `netAmount` descending
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListPayoutOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// List of field names accepted:
	//
	//   - `status` (in, nin, eq, ne)
	//
	//   - `transactionDate` (gt, ge, lt, le, eq, ne)
	//
	//   - `billNumber` (ct, nct)
	//
	//   - `vendorNumber` (ct, nct, eq, ne)
	//
	//   - `vendorName` (ct, nct, eq, ne)
	//
	//   - `parentOrgId` (ne, eq, nin, in)
	//
	//   - `paymentMethod` (ct, nct, eq, ne, in, nin)
	//
	//   - `paymentId` (ct, nct, eq, ne)
	//
	//   - `batchNumber` (ct, nct, eq, ne)
	//
	//   - `totalAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `paypointLegal` (ne, eq, ct, nct)
	//
	//   - `paypointDba` (ne, eq, ct, nct)
	//
	//   - `accountId` (ne, eq, ct, nct)
	//
	//   - `orgName` (ne, eq, ct, nct)
	//
	//   - `externalPaypointID` (ct, nct, eq, ne)
	//
	//   - `paypointId` (eq, ne)
	//
	//   - `vendorId` (eq, ne)
	//
	//   - `vendorEIN` (ct, nct, eq, ne)
	//
	//   - `vendorPhone` (ct, nct, eq, ne)
	//
	//   - `vendorEmail` (ct, nct, eq, ne)
	//
	//   - `vendorAddress` (ct, nct, eq, ne)
	//
	//   - `vendorCity` (ct, nct, eq, ne)
	//
	//   - `vendorState` (ct, nct, eq, ne)
	//
	//   - `vendorCountry` (ct, nct, eq, ne)
	//
	//   - `vendorZip` (ct, nct, eq, ne)
	//
	//   - `vendorMCC` (ct, nct, eq, ne)
	//
	//   - `vendorLocationCode` (ct, nct, eq, ne)
	//
	//   - `vendorCustomField1` (ct, nct, eq, ne)
	//
	//   - `vendorCustomField2` (ct, nct, eq, ne)
	//
	//   - `comments` (ct, nct)
	//
	//   - `payaccountCurrency` (ne, eq, in, nin)
	//
	//   - `remitAddress` (ct, nct)
	//
	//   - `source` (ct, nct, eq, ne)
	//
	//   - `updatedOn` (gt, ge, lt, le, eq, ne)
	//
	//   - `feeAmount` (gt, ge, lt, le, eq, ne)
	//
	//   - `lotNumber` (ct, nct)
	//
	//   - `customerVendorAccount` (ct, nct, eq, ne)
	//
	//   - `batchId` (eq, ne)
	//
	//   - `payoutProgram`(eq, ne) the options are `managed` or `odp`. For example, `payoutProgram(eq)=managed` returns all records with a `payoutProgram` equal to `managed`.
	//
	//     List of comparison accepted - enclosed between parentheses:
	//
	//   - eq or empty => equal
	//
	//   - gt => greater than
	//
	//   - ge => greater or equal
	//
	//   - lt => less than
	//
	//   - le => less or equal
	//
	//   - ne => not equal
	//
	//   - ct => contains
	//
	//   - nct => not contains
	//
	//   - in => inside array separated by \"|\"
	//
	//   - nin => not inside array separated by \"|\"
	//
	//     List of parameters accepted:
	//
	//   - limitRecord : max number of records for query (default=\"20\", \"0\" or negative value for all)
	//
	//   - fromRecord : initial record in query
	//
	//   - sortBy : indicate field name and direction to sort the results
	//
	//     Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	//
	//     Example: `sortBy=desc(netamount)` returns all records sorted by `netAmount` descending
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListPaypointsRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// **List of field names accepted:**
	//
	// - `createdAt` (gt, ge, lt, le, eq, ne)
	// - `lastModified` (gt, ge, lt, le, eq, ne)
	// - `startDate` (gt, ge, lt, le, eq, ne)
	// - `dbaname`  (ct, nct)
	// - `status` (eq, ne)
	// - `legalname`  (ct, nct)
	// - `externalPaypointID` (ct, nct)
	// - `ein`  (ct, nct)
	// - `address`  (ct, nct)
	// - `city`  (ct, nct)
	// - `state`  (ct, nct)
	// - `phone`  (ct, nct)
	// - `mcc`  (ct, nct)
	// - `owntype`  (ct, nct)
	// - `ownerName`  (ct, nct)
	// - `contactName`  (ct, nct)
	// - `paypointId` (eq, ne)
	// - `orgParentname`  (ct, nct, in, nin)
	// - `boardingId` (eq, ne)
	// - `entryName`  (ct, nct)
	// - `externalOrgID` (ct, nct)
	//
	// **List of comparison accepted - enclosed between parentheses:**
	//
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array
	// - `nin` => not inside array
	//
	// **List of parameters accepted:**
	//
	// - `limitRecord` : max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord` : initial record in query
	//
	// Example: `dbaname(ct)=hoa` returns all records with a `dbaname` containing "hoa"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListSettlementsRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted:**
	//
	// - `settlementDate` (gt, ge, lt, le, eq, ne)
	// - `depositDate` (gt, ge, lt, le, eq, ne)
	// - `transId`  (ne, eq, ct, nct)
	// - `gatewayTransId`  (ne, eq, ct, nct)
	// - `method`   (in, nin, eq, ne)
	// - `settledAmount`  (gt, ge, lt, le, eq, ne)
	// - `operation`    (in, nin, eq, ne)
	// - `source`   (in, nin, eq, ne)
	// - `batchNumber`  (ct, nct, eq, ne)
	// - `payaccountLastfour`   (nct, ct)
	// - `payaccountType`   (ne, eq, in, nin)
	// - `customerFirstname`   (ct, nct, eq, ne)
	// - `customerLastname`    (ct, nct, eq, ne)
	// - `customerName`   (ct, nct)
	// - `customerId`  (eq, ne)
	// - `customerNumber`  (ct, nct, eq, ne)
	// - `customerCompanyname`    (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity`    (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity`    (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId`  (eq) *mandatory when entry=org*
	// - `isHold` (eq, ne)
	// - `paypointId`  (ne, eq)
	// - `paypointLegal`  (ne, eq, ct, nct)
	// - `paypointDba`  (ne, eq, ct, nct)
	// - `orgName`  (ne, eq, ct, nct)
	// - `batchId` (ct, nct, eq, neq)
	// - `additional-xxx`  (ne, eq, ct, nct) where xxx is the additional field name
	//
	// **List of comparison accepted:**
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array separated by "|"
	// - `nin` => not inside array separated by "|"
	//
	// **List of parameters accepted:**
	//
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	//
	// Example: `settledAmount(gt)=20` returns all records with a `settledAmount` greater than 20.00.
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListSettlementsOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted:**
	//
	// - `settlementDate` (gt, ge, lt, le, eq, ne)
	// - `depositDate` (gt, ge, lt, le, eq, ne)
	// - `transId`  (ne, eq, ct, nct)
	// - `gatewayTransId`  (ne, eq, ct, nct)
	// - `method`   (in, nin, eq, ne)
	// - `settledAmount`  (gt, ge, lt, le, eq, ne)
	// - `operation`    (in, nin, eq, ne)
	// - `source`   (in, nin, eq, ne)
	// - `batchNumber`  (ct, nct, eq, ne)
	// - `payaccountLastfour`   (nct, ct)
	// - `payaccountType`   (ne, eq, in, nin)
	// - `customerFirstname`   (ct, nct, eq, ne)
	// - `customerLastname`    (ct, nct, eq, ne)
	// - `customerName`   (ct, nct)
	// - `customerId`  (eq, ne)
	// - `customerNumber`  (ct, nct, eq, ne)
	// - `customerCompanyname`    (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity`    (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity`    (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId`  (eq) *mandatory when entry=org*
	// - `isHold` (eq, ne)
	// - `paypointId`  (ne, eq)
	// - `paypointLegal`  (ne, eq, ct, nct)
	// - `paypointDba`  (ne, eq, ct, nct)
	// - `orgName`  (ne, eq, ct, nct)
	// - `batchId` (ct, nct, eq, neq)
	// - `additional-xxx`  (ne, eq, ct, nct) where xxx is the additional field name
	//
	// **List of comparison accepted:**
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array separated by "|"
	// - `nin` => not inside array separated by "|"
	//
	// **List of parameters accepted:**
	//
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	//
	// Example: `settledAmount(gt)=20` returns all records with a `settledAmount` greater than 20.00.
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListSubscriptionsRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted:**
	//
	// - `startDate` (gt, ge, lt, le, eq, ne)
	// - `endDate` (gt, ge, lt, le, eq, ne)
	// - `nextDate` (gt, ge, lt, le, eq, ne)
	// - `frequency` (in, nin, ne, eq)
	// - `method` (in, nin, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `netAmount` (gt, ge, lt, le, eq, ne)
	// - `feeAmount` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `untilcancelled` (eq, ne)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `payaccountCurrency` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId` (eq)
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `externalPaypointId` (ct, nct, ne, eq)
	// - `subId` (eq, ne)
	// - `orderDescription` (ct, nct)
	// - `cycles` (eq, ne, gt, ge, lt, le)
	// - `leftcycles` (eq, ne, gt, ge, lt, le)
	// - `createdAt` (eq, ne, gt, ge, lt, le)
	// - `updatedOn` (eq, ne, gt, ge, lt, le)
	// - `invoiceNumber` (ct, nct)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// **List of comparison operators accepted:**
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array
	// - `nin` => not inside array
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListSubscriptionsOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted:**
	//
	// - `startDate` (gt, ge, lt, le, eq, ne)
	// - `endDate` (gt, ge, lt, le, eq, ne)
	// - `nextDate` (gt, ge, lt, le, eq, ne)
	// - `frequency` (in, nin, ne, eq)
	// - `method` (in, nin, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `netAmount` (gt, ge, lt, le, eq, ne)
	// - `feeAmount` (gt, ge, lt, le, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `untilcancelled` (eq, ne)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `payaccountCurrency` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `orgId` (eq)
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `externalPaypointId` (ct, nct, ne, eq)
	// - `subId` (eq, ne)
	// - `orderDescription` (ct, nct)
	// - `cycles` (eq, ne, gt, ge, lt, le)
	// - `leftcycles` (eq, ne, gt, ge, lt, le)
	// - `createdAt` (eq, ne, gt, ge, lt, le)
	// - `updatedOn` (eq, ne, gt, ge, lt, le)
	// - `invoiceNumber` (ct, nct)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name
	//
	// **List of comparison operators accepted:**
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array
	// - `nin` => not inside array
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListTransactionsRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted:**
	//
	// - `transactionDate` (gt, ge, lt, le, eq, ne)
	// - `transId` (ne, eq, ct, nct, in, nin)
	// - `gatewayTransId` (ne, eq, ct, nct)
	// - `orderId` (ne, eq)
	// - `scheduleId` (ne, eq)
	// - `returnId` (ne, eq)
	// - `refundId` (ne, eq)
	// - `idTrans` (ne, eq)
	// - `orgId` (ne, eq)
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `externalPaypointId` (ct, nct, eq, ne)
	// - `method` (in, nin, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `netAmount` (gt, ge, lt, le, eq, ne)
	// - `feeAmount` (gt, ge, lt, le, eq, ne)
	// - `operation` (in, nin, eq, ne)
	// - `source` (in, nin, eq, ne, ct, nct)
	// - `status` (in, nin, eq, ne)
	// - `settlementStatus` (in, nin, eq, ne)
	// - `batchNumber` (nct, ct)
	// - `invoiceNumber` (ct, nct)
	// - `authCode` (ct, nct)
	// - `orderDescription` (ct, nct)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `payaccountCurrency` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `deviceId` (ct, nct, in, nin, eq, ne)
	// - `AchSecCode` ( ct, nct, in, nin, eq, ne)
	// - `AchHolderType` (ct, nct, in, nin, eq, and ne)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name related to customer data - 'invoiceAdditional-xxx' (ne, eq, ct, nct) where xxx is the additional field name related to invoice data
	//
	// **List of comparison operators accepted:**
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array
	// - `nin` => not inside array
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListTransactionsOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	//
	// **List of field names accepted:**
	//
	// - `transactionDate` (gt, ge, lt, le, eq, ne)
	// - `transId` (ne, eq, ct, nct, in, nin)
	// - `gatewayTransId` (ne, eq, ct, nct)
	// - `orderId` (ne, eq)
	// - `scheduleId` (ne, eq)
	// - `returnId` (ne, eq)
	// - `refundId` (ne, eq)
	// - `idTrans` (ne, eq)
	// - `orgId` (ne, eq)
	// - `paypointId` (ne, eq)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	// - `externalPaypointId` (ct, nct, eq, ne)
	// - `method` (in, nin, eq, ne)
	// - `totalAmount` (gt, ge, lt, le, eq, ne)
	// - `netAmount` (gt, ge, lt, le, eq, ne)
	// - `feeAmount` (gt, ge, lt, le, eq, ne)
	// - `operation` (in, nin, eq, ne)
	// - `source` (in, nin, eq, ne, ct, nct)
	// - `status` (in, nin, eq, ne)
	// - `settlementStatus` (in, nin, eq, ne)
	// - `batchNumber` (nct, ct)
	// - `invoiceNumber` (ct, nct)
	// - `authCode` (ct, nct)
	// - `orderDescription` (ct, nct)
	// - `payaccountLastfour` (nct, ct)
	// - `payaccountType` (ne, eq, in, nin)
	// - `payaccountCurrency` (ne, eq, in, nin)
	// - `customerFirstname` (ct, nct, eq, ne)
	// - `customerLastname` (ct, nct, eq, ne)
	// - `customerName` (ct, nct)
	// - `customerId` (eq, ne)
	// - `customerNumber` (ct, nct, eq, ne)
	// - `customerCompanyname` (ct, nct, eq, ne)
	// - `customerAddress` (ct, nct, eq, ne)
	// - `customerCity` (ct, nct, eq, ne)
	// - `customerZip` (ct, nct, eq, ne)
	// - `customerState` (ct, nct, eq, ne)
	// - `customerCountry` (ct, nct, eq, ne)
	// - `customerPhone` (ct, nct, eq, ne)
	// - `customerEmail` (ct, nct, eq, ne)
	// - `customerShippingAddress` (ct, nct, eq, ne)
	// - `customerShippingCity` (ct, nct, eq, ne)
	// - `customerShippingZip` (ct, nct, eq, ne)
	// - `customerShippingState` (ct, nct, eq, ne)
	// - `customerShippingCountry` (ct, nct, eq, ne)
	// - `deviceId` (ct, nct, in, nin, eq, ne)
	// - `AchSecCode` ( ct, nct, in, nin, eq, ne)
	// - `AchHolderType“ (ct, nct, in, nin, eq, and ne)
	// - `additional-xxx` (ne, eq, ct, nct) where xxx is the additional field name related to customer data
	// - 'invoiceAdditional-xxx' (ne, eq, ct, nct) where xxx is the additional field name related to invoice data
	//
	// **List of comparison operators accepted:**
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array
	// - `nin` => not inside array
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListTransfersPaypointRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord  *int        `json:"-" url:"fromRecord,omitempty"`
	LimitRecord LimitRecord `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter
	// the query.
	//
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	//
	// See [Filters and Conditions
	// Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference)
	// for more information.
	//
	// **List of field names accepted:**
	//
	//   - `grossAmount` (gt, ge, lt, le, eq, ne)
	//   - `chargeBackAmount` (gt, ge, lt, le, eq, ne)
	//   - `returnedAmount` (gt, ge, lt, le, eq, ne)
	//   - `billingFeeAmount` (gt, ge, lt, le, eq, ne)
	//   - `thirdPartyPaidAmount` (gt, ge, lt, le, eq, ne)
	//   - `netFundedAmount` (gt, ge, lt, le, eq, ne)
	//   - `adjustmentAmount` (gt, ge, lt, le, eq, ne)
	//   - `splitFundingAmount` (gt, ge, lt, le, eq, ne)
	//   - `operation` (in, nin, eq, ne)
	//   - `transactionId` (eq, ne, in, nin)
	//   - `category` (eq, ne, ct, nct)
	//   - `type` (eq, ne, in, nin)
	//   - `method` (eq, ne, in, nin)
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListTransfersRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query. See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// List of field names accepted:
	//
	//   - `transferDate` (gt, ge, lt, le, eq, ne)
	//   - `grossAmount` (gt, ge, lt, le, eq, ne)
	//   - `chargeBackAmount` (gt, ge, lt, le, eq, ne)
	//   - `returnedAmount` (gt, ge, lt, le, eq, ne)
	//   - `billingFeeAmount` (gt, ge, lt, le, eq, ne)
	//   - `thirdPartyPaidAmount` (gt, ge, lt, le, eq, ne)
	//   - `netFundedAmount` (gt, ge, lt, le, eq, ne)
	//   - `adjustmentAmount` (gt, ge, lt, le, eq, ne)
	//   - `processor` (ne, eq, ct, nct)
	//   - `transferStatus` (ne, eq, in, nin)
	//   - `batchNumber` (ne, eq, ct, nct)
	//   - `batchId` (ne, eq, in, nin)
	//   - `transferId` (in, nin, eq, ne)
	//   - `bankAccountNumber` (ct, nct, ne, eq)
	//   - `bankRoutingNumber` (ct, nct, ne, eq)
	//   - `batchCurrency` (in, nin, ne, eq)
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListTransfersRequestOrg struct {
	OrgId        Orgid         `json:"-" url:"-"`
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query. See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for more information.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// List of field names accepted:
	//
	//   - `transferDate` (gt, ge, lt, le, eq, ne)
	//   - `grossAmount` (gt, ge, lt, le, eq, ne)
	//   - `chargeBackAmount` (gt, ge, lt, le, eq, ne)
	//   - `returnedAmount` (gt, ge, lt, le, eq, ne)
	//   - `billingFeeAmount` (gt, ge, lt, le, eq, ne)
	//   - `thirdPartyPaidAmount` (gt, ge, lt, le, eq, ne)
	//   - `netFundedAmount` (gt, ge, lt, le, eq, ne)
	//   - `adjustmentAmount` (gt, ge, lt, le, eq, ne)
	//   - `processor` (ne, eq, ct, nct)
	//   - `transferStatus` (ne, eq, in, nin)
	//   - `batchNumber` (ne, eq, ct, nct)
	//   - `batchId` (ne, eq, in, nin)
	//   - `transferId` (in, nin, eq, ne)
	//   - `bankAccountNumber` (ct, nct, ne, eq)
	//   - `bankRoutingNumber` (ct, nct, ne, eq)
	//   - `batchCurrency` (in, nin, ne, eq)
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListUsersOrgRequest struct {
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// **List of field names accepted:**
	//
	// - `createdDate` (gt, ge, lt, le, eq, ne)
	// - `name`  (ne, eq, ct, nct)
	// - `email`  (ne, eq, ct, nct)
	// - `status`   (in, nin, eq, ne)
	// - `role.xxx`  (ne, eq, ct, nct) where xxx is the role field: `roleLabel` or `roleValue`
	//
	// **List of comparison accepted - enclosed between parentheses:**
	//
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array separated by "|"
	// - `nin` => not inside array separated by "|"
	//
	// **List of parameters accepted:**
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	//
	// Example: `name(ct)=john`  return all records with name containing 'john'.
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListUsersPaypointRequest struct {
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// **List of field names accepted:**
	//
	// - `createdDate` (gt, ge, lt, le, eq, ne)
	// - `name`  (ne, eq, ct, nct)
	// - `email`  (ne, eq, ct, nct)
	// - `status`   (in, nin, eq, ne)
	// - `role.xxx`  (ne, eq, ct, nct) where xxx is the role field: `roleLabel` or `roleValue`
	//
	// **List of comparison accepted - enclosed between parentheses:**
	//
	// - `eq` or empty => equal
	// - `gt` => greater than
	// - `ge` => greater or equal
	// - `lt` => less than
	// - `le` => less or equal
	// - `ne` => not equal
	// - `ct` => contains
	// - `nct` => not contains
	// - `in` => inside array separated by "|"
	// - `nin` => not inside array separated by "|"
	//
	// **List of parameters accepted:**
	// - `limitRecord`: max number of records for query (default="20", "0" or negative value for all)
	// - `fromRecord`: initial record in query
	//
	// Example: `name(ct)=john`  return all records with name containing 'john'
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListVcardsRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// List of field names accepted:
	//
	//   - `status` (in, nin, eq, ne)
	//   - `createdAt` (gt, ge, lt, le, eq, ne)
	//   - `cardToken` (ct, nct, eq, ne)
	//   - `lastFour` (ct, nct, eq, ne)
	//   - `expirationDate` (ct, nct, eq, ne)
	//   - `mcc` (ct, nct, eq, ne)
	//   - `payoutId` (ct, nct, eq, ne, in, nin)
	//   - `customerId` (ct, nct, eq, ne, in, nin)
	//   - `vendorId` (ct, nct, eq, ne, in, nin)
	//   - `miscData1` (ct, nct, eq, ne)
	//   - `miscData2` (ct, nct, eq, ne)
	//   - `currentUses` (gt, ge, lt, le, eq, ne)
	//   - `amount` (gt, ge, lt, le, eq, ne)
	//   - `balance` (gt, ge, lt, le, eq, ne)
	//   - `paypointLegal` (ne, eq, ct, nct)
	//   - `paypointDba` (ne, eq, ct, nct)
	//   - `orgName` (ne, eq, ct, nct)
	//   - `externalPaypointId` (ct, nct, eq, ne)
	//   - `paypointId` (in, nin, eq, ne)
	//
	// List of comparison accepted - enclosed between parentheses:
	//
	//   - eq or empty => equal
	//   - gt => greater than
	//   - ge => greater or equal
	//   - lt => less than
	//   - le => less or equal
	//   - ne => not equal
	//   - ct => contains
	//   - nct => not contains
	//   - in => inside array separated by "|"
	//   - nin => not inside array separated by "|"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListVcardsOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query.
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// List of field names accepted:
	//
	//   - `status` (in, nin, eq, ne)
	//   - `createdAt` (gt, ge, lt, le, eq, ne)
	//   - `cardToken` (ct, nct, eq, ne)
	//   - `lastFour` (ct, nct, eq, ne)
	//   - `expirationDate` (ct, nct, eq, ne)
	//   - `mcc` (ct, nct, eq, ne)
	//   - `payoutId` (ct, nct, eq, ne, in, nin)
	//   - `customerId` (ct, nct, eq, ne, in, nin)
	//   - `vendorId` (ct, nct, eq, ne, in, nin)
	//   - `miscData1` (ct, nct, eq, ne)
	//   - `miscData2` (ct, nct, eq, ne)
	//   - `currentUses` (gt, ge, lt, le, eq, ne)
	//   - `amount` (gt, ge, lt, le, eq, ne)
	//   - `balance` (gt, ge, lt, le, eq, ne)
	//   - `paypointLegal` (ne, eq, ct, nct)
	//   - `paypointDba` (ne, eq, ct, nct)
	//   - `orgName` (ne, eq, ct, nct)
	//   - `externalPaypointId` (ct, nct, eq, ne)
	//   - `paypointId` (in, nin, eq, ne)
	//
	// List of comparison accepted - enclosed between parentheses:
	//
	//   - eq or empty => equal
	//   - gt => greater than
	//   - ge => greater or equal
	//   - lt => less than
	//   - le => less or equal
	//   - ne => not equal
	//   - ct => contains
	//   - nct => not contains
	//   - in => inside array separated by "|"
	//   - nin => not inside array separated by "|"
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListVendorsRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `method` (in, nin, eq, ne)
	// - `enrollmentStatus` (in,nin, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `vendorNumber` (ct, nct, eq, ne)
	// - `name` (ct, nct, eq, ne)
	// - `ein` (ct, nct, eq, ne)
	// - `phone` (ct, nct, eq, ne)
	// - `email` (ct, nct, eq, ne)
	// - `address` (ct, nct, eq, ne)
	// - `city` (ct, nct, eq, ne)
	// - `state` (ct, nct, eq, ne)
	// - `country` (ct, nct, eq, ne)
	// - `zip` (ct, nct, eq, ne)
	// - `mcc` (ct, nct, eq, ne)
	// - `locationCode` (ct, nct, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `parentOrgId` (ne, eq, nin, in)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `orgName` (ne, eq, ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type ListVendorsOrgRequest struct {
	ExportFormat *ExportFormat `json:"-" url:"exportFormat,omitempty"`
	// The number of records to skip before starting to collect the result set.
	FromRecord *int `json:"-" url:"fromRecord,omitempty"`
	// Max number of records to return for the query. Use `0` or negative value to return all records.
	LimitRecord *int `json:"-" url:"limitRecord,omitempty"`
	// Collection of field names, conditions, and values used to filter the query
	// <Info>
	//
	//	**You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**
	//
	//	Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove `parameters=` and run the request in a different client.
	//
	//	For example:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&limitRecord=20
	//
	//	should become:
	//
	//	--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&limitRecord=20
	//
	// </Info>
	// See [Filters and Conditions Reference](/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference) for help.
	//
	// List of field names accepted:
	// - `method` (in, nin, eq, ne)
	// - `enrollmentStatus` (in,nin, eq, ne)
	// - `status` (in, nin, eq, ne)
	// - `vendorNumber` (ct, nct, eq, ne)
	// - `name` (ct, nct, eq, ne)
	// - `ein` (ct, nct, eq, ne)
	// - `phone` (ct, nct, eq, ne)
	// - `email` (ct, nct, eq, ne)
	// - `address` (ct, nct, eq, ne)
	// - `city` (ct, nct, eq, ne)
	// - `state` (ct, nct, eq, ne)
	// - `country` (ct, nct, eq, ne)
	// - `zip` (ct, nct, eq, ne)
	// - `mcc` (ct, nct, eq, ne)
	// - `locationCode` (ct, nct, eq, ne)
	// - `paypointLegal` (ne, eq, ct, nct)
	// - `paypointDba` (ne, eq, ct, nct)
	// - `parentOrgId` (ne, eq, nin, in)
	// - `orgName` (ne, eq, ct, nct)
	//
	// List of comparison accepted - enclosed between parentheses:
	// - eq or empty => equal
	// - gt => greater than
	// - ge => greater or equal
	// - lt => less than
	// - le => less or equal
	// - ne => not equal
	// - ct => contains
	// - nct => not contains
	// - in => inside array separated by "|"
	// - nin => not inside array separated by "|"
	//
	// List of parameters accepted:
	// - limitRecord : max number of records for query (default="20", "0" or negative value for all)
	// - fromRecord : initial record in query
	//
	// Example: `netAmount(gt)=20` returns all records with a `netAmount` greater than 20.00
	Parameters map[string]*string `json:"-" url:"parameters,omitempty"`
	// The field name to use for sorting results. Use `desc(field_name)` to sort descending by `field_name`, and use `asc(field_name)` to sort ascending by `field_name`.
	SortBy *string `json:"-" url:"sortBy,omitempty"`
}

type AssociatedVendor struct {
	VendorNumber *VendorNumber `json:"VendorNumber,omitempty" url:"VendorNumber,omitempty"`
	// Primary name for vendor.
	Name1 *string `json:"Name1,omitempty" url:"Name1,omitempty"`
	// Secondary name for vendor.
	Name2 *string `json:"Name2,omitempty" url:"Name2,omitempty"`
	Ein   *Ein    `json:"EIN,omitempty" url:"EIN,omitempty"`
	// Vendor's phone number.
	Phone *string `json:"Phone,omitempty" url:"Phone,omitempty"`
	// Vendor's email address.
	Email *Email `json:"Email,omitempty" url:"Email,omitempty"`
	// Vendor's address.
	Address1 *string `json:"Address1,omitempty" url:"Address1,omitempty"`
	// Additional line for vendor's address.
	Address2 *string `json:"Address2,omitempty" url:"Address2,omitempty"`
	// Vendor's city.
	City *string `json:"City,omitempty" url:"City,omitempty"`
	// Vendor's state.
	State *string `json:"State,omitempty" url:"State,omitempty"`
	// Vendor's postal code.
	Zip *string `json:"Zip,omitempty" url:"Zip,omitempty"`
	// Vendor's country.
	Country      *string       `json:"Country,omitempty" url:"Country,omitempty"`
	Mcc          *Mcc          `json:"Mcc,omitempty" url:"Mcc,omitempty"`
	LocationCode *LocationCode `json:"LocationCode,omitempty" url:"LocationCode,omitempty"`
	// Array of objects describing the vendor's contacts.
	Contacts         []*Contacts          `json:"Contacts,omitempty" url:"Contacts,omitempty"`
	BillingData      *BillingDataResponse `json:"BillingData,omitempty" url:"BillingData,omitempty"`
	PaymentMethod    *string              `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	VendorStatus     *Vendorstatus        `json:"VendorStatus,omitempty" url:"VendorStatus,omitempty"`
	VendorId         *int                 `json:"VendorId,omitempty" url:"VendorId,omitempty"`
	EnrollmentStatus *EnrollmentStatus    `json:"EnrollmentStatus,omitempty" url:"EnrollmentStatus,omitempty"`
	Summary          *VendorSummary       `json:"Summary,omitempty" url:"Summary,omitempty"`
	// The paypoint's legal name.
	PaypointLegalname *Legalname `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// The paypoint's DBA name.
	PaypointDbaname *Dbaname `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// Paypoint's entryname.
	PaypointEntryname     *Entrypointfield     `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	ParentOrgName         *OrgParentName       `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	CreatedDate           *CreatedAt           `json:"CreatedDate,omitempty" url:"CreatedDate,omitempty"`
	LastUpdated           *LastModified        `json:"LastUpdated,omitempty" url:"LastUpdated,omitempty"`
	RemitAddress1         *Remitaddress1       `json:"remitAddress1,omitempty" url:"remitAddress1,omitempty"`
	RemitAddress2         *Remitaddress2       `json:"remitAddress2,omitempty" url:"remitAddress2,omitempty"`
	RemitCity             *Remitcity           `json:"remitCity,omitempty" url:"remitCity,omitempty"`
	RemitState            *Remitstate          `json:"remitState,omitempty" url:"remitState,omitempty"`
	RemitZip              *Remitzip            `json:"remitZip,omitempty" url:"remitZip,omitempty"`
	RemitCountry          *Remitcountry        `json:"remitCountry,omitempty" url:"remitCountry,omitempty"`
	PayeeName1            *PayeeName           `json:"payeeName1,omitempty" url:"payeeName1,omitempty"`
	PayeeName2            *PayeeName           `json:"payeeName2,omitempty" url:"payeeName2,omitempty"`
	CustomField1          *string              `json:"customField1,omitempty" url:"customField1,omitempty"`
	CustomField2          *string              `json:"customField2,omitempty" url:"customField2,omitempty"`
	CustomerVendorAccount *string              `json:"customerVendorAccount,omitempty" url:"customerVendorAccount,omitempty"`
	InternalReferenceId   *InternalReferenceId `json:"InternalReferenceId,omitempty" url:"InternalReferenceId,omitempty"`
	AdditionalData        *AdditionalData      `json:"additionalData,omitempty" url:"additionalData,omitempty"`
	ExternalPaypointId    *string              `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AssociatedVendor) GetVendorNumber() *VendorNumber {
	if a == nil {
		return nil
	}
	return a.VendorNumber
}

func (a *AssociatedVendor) GetName1() *string {
	if a == nil {
		return nil
	}
	return a.Name1
}

func (a *AssociatedVendor) GetName2() *string {
	if a == nil {
		return nil
	}
	return a.Name2
}

func (a *AssociatedVendor) GetEin() *Ein {
	if a == nil {
		return nil
	}
	return a.Ein
}

func (a *AssociatedVendor) GetPhone() *string {
	if a == nil {
		return nil
	}
	return a.Phone
}

func (a *AssociatedVendor) GetEmail() *Email {
	if a == nil {
		return nil
	}
	return a.Email
}

func (a *AssociatedVendor) GetAddress1() *string {
	if a == nil {
		return nil
	}
	return a.Address1
}

func (a *AssociatedVendor) GetAddress2() *string {
	if a == nil {
		return nil
	}
	return a.Address2
}

func (a *AssociatedVendor) GetCity() *string {
	if a == nil {
		return nil
	}
	return a.City
}

func (a *AssociatedVendor) GetState() *string {
	if a == nil {
		return nil
	}
	return a.State
}

func (a *AssociatedVendor) GetZip() *string {
	if a == nil {
		return nil
	}
	return a.Zip
}

func (a *AssociatedVendor) GetCountry() *string {
	if a == nil {
		return nil
	}
	return a.Country
}

func (a *AssociatedVendor) GetMcc() *Mcc {
	if a == nil {
		return nil
	}
	return a.Mcc
}

func (a *AssociatedVendor) GetLocationCode() *LocationCode {
	if a == nil {
		return nil
	}
	return a.LocationCode
}

func (a *AssociatedVendor) GetContacts() []*Contacts {
	if a == nil {
		return nil
	}
	return a.Contacts
}

func (a *AssociatedVendor) GetBillingData() *BillingDataResponse {
	if a == nil {
		return nil
	}
	return a.BillingData
}

func (a *AssociatedVendor) GetPaymentMethod() *string {
	if a == nil {
		return nil
	}
	return a.PaymentMethod
}

func (a *AssociatedVendor) GetVendorStatus() *Vendorstatus {
	if a == nil {
		return nil
	}
	return a.VendorStatus
}

func (a *AssociatedVendor) GetVendorId() *int {
	if a == nil {
		return nil
	}
	return a.VendorId
}

func (a *AssociatedVendor) GetEnrollmentStatus() *EnrollmentStatus {
	if a == nil {
		return nil
	}
	return a.EnrollmentStatus
}

func (a *AssociatedVendor) GetSummary() *VendorSummary {
	if a == nil {
		return nil
	}
	return a.Summary
}

func (a *AssociatedVendor) GetPaypointLegalname() *Legalname {
	if a == nil {
		return nil
	}
	return a.PaypointLegalname
}

func (a *AssociatedVendor) GetPaypointDbaname() *Dbaname {
	if a == nil {
		return nil
	}
	return a.PaypointDbaname
}

func (a *AssociatedVendor) GetPaypointEntryname() *Entrypointfield {
	if a == nil {
		return nil
	}
	return a.PaypointEntryname
}

func (a *AssociatedVendor) GetParentOrgName() *OrgParentName {
	if a == nil {
		return nil
	}
	return a.ParentOrgName
}

func (a *AssociatedVendor) GetCreatedDate() *CreatedAt {
	if a == nil {
		return nil
	}
	return a.CreatedDate
}

func (a *AssociatedVendor) GetLastUpdated() *LastModified {
	if a == nil {
		return nil
	}
	return a.LastUpdated
}

func (a *AssociatedVendor) GetRemitAddress1() *Remitaddress1 {
	if a == nil {
		return nil
	}
	return a.RemitAddress1
}

func (a *AssociatedVendor) GetRemitAddress2() *Remitaddress2 {
	if a == nil {
		return nil
	}
	return a.RemitAddress2
}

func (a *AssociatedVendor) GetRemitCity() *Remitcity {
	if a == nil {
		return nil
	}
	return a.RemitCity
}

func (a *AssociatedVendor) GetRemitState() *Remitstate {
	if a == nil {
		return nil
	}
	return a.RemitState
}

func (a *AssociatedVendor) GetRemitZip() *Remitzip {
	if a == nil {
		return nil
	}
	return a.RemitZip
}

func (a *AssociatedVendor) GetRemitCountry() *Remitcountry {
	if a == nil {
		return nil
	}
	return a.RemitCountry
}

func (a *AssociatedVendor) GetPayeeName1() *PayeeName {
	if a == nil {
		return nil
	}
	return a.PayeeName1
}

func (a *AssociatedVendor) GetPayeeName2() *PayeeName {
	if a == nil {
		return nil
	}
	return a.PayeeName2
}

func (a *AssociatedVendor) GetCustomField1() *string {
	if a == nil {
		return nil
	}
	return a.CustomField1
}

func (a *AssociatedVendor) GetCustomField2() *string {
	if a == nil {
		return nil
	}
	return a.CustomField2
}

func (a *AssociatedVendor) GetCustomerVendorAccount() *string {
	if a == nil {
		return nil
	}
	return a.CustomerVendorAccount
}

func (a *AssociatedVendor) GetInternalReferenceId() *InternalReferenceId {
	if a == nil {
		return nil
	}
	return a.InternalReferenceId
}

func (a *AssociatedVendor) GetAdditionalData() *AdditionalData {
	if a == nil {
		return nil
	}
	return a.AdditionalData
}

func (a *AssociatedVendor) GetExternalPaypointId() *string {
	if a == nil {
		return nil
	}
	return a.ExternalPaypointId
}

func (a *AssociatedVendor) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AssociatedVendor) UnmarshalJSON(data []byte) error {
	type unmarshaler AssociatedVendor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AssociatedVendor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssociatedVendor) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Average ticket amount.
type Avgticketamt = *float64

type BatchDetailResponseRecord struct {
	Id                       int                        `json:"Id" url:"Id"`
	Method                   string                     `json:"Method" url:"Method"`
	WalletType               *string                    `json:"WalletType,omitempty" url:"WalletType,omitempty"`
	SettledAmount            float64                    `json:"SettledAmount" url:"SettledAmount"`
	Type                     string                     `json:"Type" url:"Type"`
	BatchNumber              BatchNumber                `json:"BatchNumber" url:"BatchNumber"`
	BatchAmount              float64                    `json:"BatchAmount" url:"BatchAmount"`
	PaymentTransId           string                     `json:"PaymentTransId" url:"PaymentTransId"`
	PaymentTransStatus       int                        `json:"PaymentTransStatus" url:"PaymentTransStatus"`
	ScheduleReference        int                        `json:"ScheduleReference" url:"ScheduleReference"`
	GatewayTransId           string                     `json:"GatewayTransId" url:"GatewayTransId"`
	OrderId                  Orderid                    `json:"OrderId" url:"OrderId"`
	TransMethod              string                     `json:"TransMethod" url:"TransMethod"`
	PaymentData              *QueryPaymentData          `json:"PaymentData,omitempty" url:"PaymentData,omitempty"`
	NetAmount                Netamountnullable          `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	Operation                Operation                  `json:"Operation" url:"Operation"`
	Category                 Category                   `json:"Category" url:"Category"`
	Source                   *Source                    `json:"Source,omitempty" url:"Source,omitempty"`
	Status                   int                        `json:"Status" url:"Status"`
	TransactionTime          TransactionTime            `json:"TransactionTime" url:"TransactionTime"`
	Customer                 *QueryTransactionPayorData `json:"Customer,omitempty" url:"Customer,omitempty"`
	SettlementDate           time.Time                  `json:"SettlementDate" url:"SettlementDate"`
	PaymentSettlementStatus  int                        `json:"PaymentSettlementStatus" url:"PaymentSettlementStatus"`
	BatchStatus              int                        `json:"BatchStatus" url:"BatchStatus"`
	DepositDate              DepositDate                `json:"DepositDate" url:"DepositDate"`
	ExpectedDepositDate      ExpectedDepositDate        `json:"ExpectedDepositDate" url:"ExpectedDepositDate"`
	MaskedAccount            Maskedaccount              `json:"MaskedAccount" url:"MaskedAccount"`
	CreatedAt                CreatedAt                  `json:"CreatedAt" url:"CreatedAt"`
	PaypointLegalname        Legalname                  `json:"PaypointLegalname" url:"PaypointLegalname"`
	ResponseData             *QueryResponseData         `json:"ResponseData,omitempty" url:"ResponseData,omitempty"`
	PaypointDbaname          Dbaname                    `json:"PaypointDbaname" url:"PaypointDbaname"`
	ParentOrgName            OrgParentName              `json:"ParentOrgName" url:"ParentOrgName"`
	ParentOrgId              int                        `json:"ParentOrgId" url:"ParentOrgId"`
	PaypointEntryname        Entrypointfield            `json:"PaypointEntryname" url:"PaypointEntryname"`
	DeviceId                 *Device                    `json:"DeviceId,omitempty" url:"DeviceId,omitempty"`
	RetrievalId              RetrievalId                `json:"RetrievalId" url:"RetrievalId"`
	ChargebackId             ChargebackId               `json:"ChargebackId,omitempty" url:"ChargebackId,omitempty"`
	AchHolderType            AchHolderType              `json:"AchHolderType" url:"AchHolderType"`
	AchSecCode               AchSecCode                 `json:"AchSecCode" url:"AchSecCode"`
	ConnectorName            string                     `json:"ConnectorName" url:"ConnectorName"`
	EntrypageId              EntrypageId                `json:"EntrypageId,omitempty" url:"EntrypageId,omitempty"`
	FeeAmount                FeeAmount                  `json:"FeeAmount" url:"FeeAmount"`
	OrgId                    Orgid                      `json:"OrgId,omitempty" url:"OrgId,omitempty"`
	PayorId                  PayorId                    `json:"PayorId,omitempty" url:"PayorId,omitempty"`
	PaypointId               PaypointId                 `json:"PaypointId,omitempty" url:"PaypointId,omitempty"`
	PendingFeeAmount         PendingFeeAmount           `json:"PendingFeeAmount,omitempty" url:"PendingFeeAmount,omitempty"`
	RefundId                 RefundId                   `json:"RefundId,omitempty" url:"RefundId,omitempty"`
	ReturnedId               ReturnedId                 `json:"ReturnedId" url:"ReturnedId"`
	SplitFundingInstructions SplitFunding               `json:"splitFundingInstructions,omitempty" url:"splitFundingInstructions,omitempty"`
	TotalAmount              float64                    `json:"TotalAmount" url:"TotalAmount"`
	CfeeTransactions         []*QueryCFeeTransaction    `json:"CfeeTransactions" url:"CfeeTransactions"`
	InvoiceData              *BillData                  `json:"invoiceData,omitempty" url:"invoiceData,omitempty"`
	TransactionEvents        []*QueryTransactionEvents  `json:"TransactionEvents" url:"TransactionEvents"`
	ExternalPaypointId       ExternalPaypointId         `json:"externalPaypointID" url:"externalPaypointID"`
	IsHold                   int                        `json:"isHold" url:"isHold"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchDetailResponseRecord) GetId() int {
	if b == nil {
		return 0
	}
	return b.Id
}

func (b *BatchDetailResponseRecord) GetMethod() string {
	if b == nil {
		return ""
	}
	return b.Method
}

func (b *BatchDetailResponseRecord) GetWalletType() *string {
	if b == nil {
		return nil
	}
	return b.WalletType
}

func (b *BatchDetailResponseRecord) GetSettledAmount() float64 {
	if b == nil {
		return 0
	}
	return b.SettledAmount
}

func (b *BatchDetailResponseRecord) GetType() string {
	if b == nil {
		return ""
	}
	return b.Type
}

func (b *BatchDetailResponseRecord) GetBatchNumber() BatchNumber {
	if b == nil {
		return ""
	}
	return b.BatchNumber
}

func (b *BatchDetailResponseRecord) GetBatchAmount() float64 {
	if b == nil {
		return 0
	}
	return b.BatchAmount
}

func (b *BatchDetailResponseRecord) GetPaymentTransId() string {
	if b == nil {
		return ""
	}
	return b.PaymentTransId
}

func (b *BatchDetailResponseRecord) GetPaymentTransStatus() int {
	if b == nil {
		return 0
	}
	return b.PaymentTransStatus
}

func (b *BatchDetailResponseRecord) GetScheduleReference() int {
	if b == nil {
		return 0
	}
	return b.ScheduleReference
}

func (b *BatchDetailResponseRecord) GetGatewayTransId() string {
	if b == nil {
		return ""
	}
	return b.GatewayTransId
}

func (b *BatchDetailResponseRecord) GetOrderId() Orderid {
	if b == nil {
		return ""
	}
	return b.OrderId
}

func (b *BatchDetailResponseRecord) GetTransMethod() string {
	if b == nil {
		return ""
	}
	return b.TransMethod
}

func (b *BatchDetailResponseRecord) GetPaymentData() *QueryPaymentData {
	if b == nil {
		return nil
	}
	return b.PaymentData
}

func (b *BatchDetailResponseRecord) GetNetAmount() Netamountnullable {
	if b == nil {
		return nil
	}
	return b.NetAmount
}

func (b *BatchDetailResponseRecord) GetOperation() Operation {
	if b == nil {
		return ""
	}
	return b.Operation
}

func (b *BatchDetailResponseRecord) GetCategory() Category {
	if b == nil {
		return ""
	}
	return b.Category
}

func (b *BatchDetailResponseRecord) GetSource() *Source {
	if b == nil {
		return nil
	}
	return b.Source
}

func (b *BatchDetailResponseRecord) GetStatus() int {
	if b == nil {
		return 0
	}
	return b.Status
}

func (b *BatchDetailResponseRecord) GetTransactionTime() TransactionTime {
	if b == nil {
		return time.Time{}
	}
	return b.TransactionTime
}

func (b *BatchDetailResponseRecord) GetCustomer() *QueryTransactionPayorData {
	if b == nil {
		return nil
	}
	return b.Customer
}

func (b *BatchDetailResponseRecord) GetSettlementDate() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.SettlementDate
}

func (b *BatchDetailResponseRecord) GetPaymentSettlementStatus() int {
	if b == nil {
		return 0
	}
	return b.PaymentSettlementStatus
}

func (b *BatchDetailResponseRecord) GetBatchStatus() int {
	if b == nil {
		return 0
	}
	return b.BatchStatus
}

func (b *BatchDetailResponseRecord) GetDepositDate() DepositDate {
	if b == nil {
		return time.Time{}
	}
	return b.DepositDate
}

func (b *BatchDetailResponseRecord) GetExpectedDepositDate() ExpectedDepositDate {
	if b == nil {
		return time.Time{}
	}
	return b.ExpectedDepositDate
}

func (b *BatchDetailResponseRecord) GetMaskedAccount() Maskedaccount {
	if b == nil {
		return ""
	}
	return b.MaskedAccount
}

func (b *BatchDetailResponseRecord) GetCreatedAt() CreatedAt {
	if b == nil {
		return time.Time{}
	}
	return b.CreatedAt
}

func (b *BatchDetailResponseRecord) GetPaypointLegalname() Legalname {
	if b == nil {
		return ""
	}
	return b.PaypointLegalname
}

func (b *BatchDetailResponseRecord) GetResponseData() *QueryResponseData {
	if b == nil {
		return nil
	}
	return b.ResponseData
}

func (b *BatchDetailResponseRecord) GetPaypointDbaname() Dbaname {
	if b == nil {
		return ""
	}
	return b.PaypointDbaname
}

func (b *BatchDetailResponseRecord) GetParentOrgName() OrgParentName {
	if b == nil {
		return ""
	}
	return b.ParentOrgName
}

func (b *BatchDetailResponseRecord) GetParentOrgId() int {
	if b == nil {
		return 0
	}
	return b.ParentOrgId
}

func (b *BatchDetailResponseRecord) GetPaypointEntryname() Entrypointfield {
	if b == nil {
		return ""
	}
	return b.PaypointEntryname
}

func (b *BatchDetailResponseRecord) GetDeviceId() *Device {
	if b == nil {
		return nil
	}
	return b.DeviceId
}

func (b *BatchDetailResponseRecord) GetRetrievalId() RetrievalId {
	if b == nil {
		return 0
	}
	return b.RetrievalId
}

func (b *BatchDetailResponseRecord) GetChargebackId() ChargebackId {
	if b == nil {
		return nil
	}
	return b.ChargebackId
}

func (b *BatchDetailResponseRecord) GetAchHolderType() AchHolderType {
	if b == nil {
		return ""
	}
	return b.AchHolderType
}

func (b *BatchDetailResponseRecord) GetAchSecCode() AchSecCode {
	if b == nil {
		return ""
	}
	return b.AchSecCode
}

func (b *BatchDetailResponseRecord) GetConnectorName() string {
	if b == nil {
		return ""
	}
	return b.ConnectorName
}

func (b *BatchDetailResponseRecord) GetEntrypageId() EntrypageId {
	if b == nil {
		return nil
	}
	return b.EntrypageId
}

func (b *BatchDetailResponseRecord) GetFeeAmount() FeeAmount {
	if b == nil {
		return 0
	}
	return b.FeeAmount
}

func (b *BatchDetailResponseRecord) GetOrgId() Orgid {
	if b == nil {
		return nil
	}
	return b.OrgId
}

func (b *BatchDetailResponseRecord) GetPayorId() PayorId {
	if b == nil {
		return nil
	}
	return b.PayorId
}

func (b *BatchDetailResponseRecord) GetPaypointId() PaypointId {
	if b == nil {
		return nil
	}
	return b.PaypointId
}

func (b *BatchDetailResponseRecord) GetPendingFeeAmount() PendingFeeAmount {
	if b == nil {
		return nil
	}
	return b.PendingFeeAmount
}

func (b *BatchDetailResponseRecord) GetRefundId() RefundId {
	if b == nil {
		return nil
	}
	return b.RefundId
}

func (b *BatchDetailResponseRecord) GetReturnedId() ReturnedId {
	if b == nil {
		return 0
	}
	return b.ReturnedId
}

func (b *BatchDetailResponseRecord) GetSplitFundingInstructions() SplitFunding {
	if b == nil {
		return nil
	}
	return b.SplitFundingInstructions
}

func (b *BatchDetailResponseRecord) GetTotalAmount() float64 {
	if b == nil {
		return 0
	}
	return b.TotalAmount
}

func (b *BatchDetailResponseRecord) GetCfeeTransactions() []*QueryCFeeTransaction {
	if b == nil {
		return nil
	}
	return b.CfeeTransactions
}

func (b *BatchDetailResponseRecord) GetInvoiceData() *BillData {
	if b == nil {
		return nil
	}
	return b.InvoiceData
}

func (b *BatchDetailResponseRecord) GetTransactionEvents() []*QueryTransactionEvents {
	if b == nil {
		return nil
	}
	return b.TransactionEvents
}

func (b *BatchDetailResponseRecord) GetExternalPaypointId() ExternalPaypointId {
	if b == nil {
		return ""
	}
	return b.ExternalPaypointId
}

func (b *BatchDetailResponseRecord) GetIsHold() int {
	if b == nil {
		return 0
	}
	return b.IsHold
}

func (b *BatchDetailResponseRecord) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchDetailResponseRecord) UnmarshalJSON(data []byte) error {
	type embed BatchDetailResponseRecord
	var unmarshaler = struct {
		embed
		SettlementDate *internal.DateTime `json:"SettlementDate"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BatchDetailResponseRecord(unmarshaler.embed)
	b.SettlementDate = unmarshaler.SettlementDate.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchDetailResponseRecord) MarshalJSON() ([]byte, error) {
	type embed BatchDetailResponseRecord
	var marshaler = struct {
		embed
		SettlementDate *internal.DateTime `json:"SettlementDate"`
	}{
		embed:          embed(*b),
		SettlementDate: internal.NewDateTime(b.SettlementDate),
	}
	return json.Marshal(marshaler)
}

func (b *BatchDetailResponseRecord) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchDetailResponseSummary struct {
	ServiceFees    float64         `json:"serviceFees" url:"serviceFees"`
	TransferAmount float64         `json:"transferAmount" url:"transferAmount"`
	Refunds        float64         `json:"refunds" url:"refunds"`
	HeldAmount     float64         `json:"heldAmount" url:"heldAmount"`
	TotalRecords   Totalrecords    `json:"totalRecords" url:"totalRecords"`
	TotalAmount    float64         `json:"totalAmount" url:"totalAmount"`
	TotalNetAmount float64         `json:"totalNetAmount" url:"totalNetAmount"`
	TotalPages     Totalpages      `json:"totalPages" url:"totalPages"`
	PageSize       Pagesize        `json:"pageSize" url:"pageSize"`
	Pageidentifier *PageIdentifier `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchDetailResponseSummary) GetServiceFees() float64 {
	if b == nil {
		return 0
	}
	return b.ServiceFees
}

func (b *BatchDetailResponseSummary) GetTransferAmount() float64 {
	if b == nil {
		return 0
	}
	return b.TransferAmount
}

func (b *BatchDetailResponseSummary) GetRefunds() float64 {
	if b == nil {
		return 0
	}
	return b.Refunds
}

func (b *BatchDetailResponseSummary) GetHeldAmount() float64 {
	if b == nil {
		return 0
	}
	return b.HeldAmount
}

func (b *BatchDetailResponseSummary) GetTotalRecords() Totalrecords {
	if b == nil {
		return 0
	}
	return b.TotalRecords
}

func (b *BatchDetailResponseSummary) GetTotalAmount() float64 {
	if b == nil {
		return 0
	}
	return b.TotalAmount
}

func (b *BatchDetailResponseSummary) GetTotalNetAmount() float64 {
	if b == nil {
		return 0
	}
	return b.TotalNetAmount
}

func (b *BatchDetailResponseSummary) GetTotalPages() Totalpages {
	if b == nil {
		return 0
	}
	return b.TotalPages
}

func (b *BatchDetailResponseSummary) GetPageSize() Pagesize {
	if b == nil {
		return 0
	}
	return b.PageSize
}

func (b *BatchDetailResponseSummary) GetPageidentifier() *PageIdentifier {
	if b == nil {
		return nil
	}
	return b.Pageidentifier
}

func (b *BatchDetailResponseSummary) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchDetailResponseSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchDetailResponseSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchDetailResponseSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchDetailResponseSummary) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchSummary struct {
	Pageidentifier *PageIdentifier `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`
	// Number of records on each response page.
	PageSize *int `json:"pageSize,omitempty" url:"pageSize,omitempty"`
	// Total amount for the records.
	TotalAmount *float64 `json:"totalAmount,omitempty" url:"totalAmount,omitempty"`
	// Total net amount for the records.
	TotalNetAmount *float64 `json:"totalNetAmount,omitempty" url:"totalNetAmount,omitempty"`
	// Total number of pages in response.
	TotalPages *int `json:"totalPages,omitempty" url:"totalPages,omitempty"`
	// Total number of records in response.
	TotalRecords *int `json:"totalRecords,omitempty" url:"totalRecords,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchSummary) GetPageidentifier() *PageIdentifier {
	if b == nil {
		return nil
	}
	return b.Pageidentifier
}

func (b *BatchSummary) GetPageSize() *int {
	if b == nil {
		return nil
	}
	return b.PageSize
}

func (b *BatchSummary) GetTotalAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.TotalAmount
}

func (b *BatchSummary) GetTotalNetAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.TotalNetAmount
}

func (b *BatchSummary) GetTotalPages() *int {
	if b == nil {
		return nil
	}
	return b.TotalPages
}

func (b *BatchSummary) GetTotalRecords() *int {
	if b == nil {
		return nil
	}
	return b.TotalRecords
}

func (b *BatchSummary) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchSummary) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingFeeDetail struct {
	BillableEvent *string `json:"billableEvent,omitempty" url:"billableEvent,omitempty"`
	Service       *string `json:"service,omitempty" url:"service,omitempty"`
	EventId       *string `json:"eventId,omitempty" url:"eventId,omitempty"`
	// Description of the billing fee
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Category of the billing fee
	Category *string `json:"category,omitempty" url:"category,omitempty"`
	// Fixed price component of the fee
	FixPrice *float64 `json:"fixPrice,omitempty" url:"fixPrice,omitempty"`
	// Percentage component of the fee
	FloatPrice *float64 `json:"floatPrice,omitempty" url:"floatPrice,omitempty"`
	// Amount eligible for the fee
	BillableAmount *float64 `json:"billableAmount,omitempty" url:"billableAmount,omitempty"`
	// Total fee amount charged
	BillAmount   *float64 `json:"billAmount,omitempty" url:"billAmount,omitempty"`
	Frequency    *string  `json:"frequency,omitempty" url:"frequency,omitempty"`
	ServiceGroup *string  `json:"serviceGroup,omitempty" url:"serviceGroup,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingFeeDetail) GetBillableEvent() *string {
	if b == nil {
		return nil
	}
	return b.BillableEvent
}

func (b *BillingFeeDetail) GetService() *string {
	if b == nil {
		return nil
	}
	return b.Service
}

func (b *BillingFeeDetail) GetEventId() *string {
	if b == nil {
		return nil
	}
	return b.EventId
}

func (b *BillingFeeDetail) GetDescription() *string {
	if b == nil {
		return nil
	}
	return b.Description
}

func (b *BillingFeeDetail) GetCategory() *string {
	if b == nil {
		return nil
	}
	return b.Category
}

func (b *BillingFeeDetail) GetFixPrice() *float64 {
	if b == nil {
		return nil
	}
	return b.FixPrice
}

func (b *BillingFeeDetail) GetFloatPrice() *float64 {
	if b == nil {
		return nil
	}
	return b.FloatPrice
}

func (b *BillingFeeDetail) GetBillableAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.BillableAmount
}

func (b *BillingFeeDetail) GetBillAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.BillAmount
}

func (b *BillingFeeDetail) GetFrequency() *string {
	if b == nil {
		return nil
	}
	return b.Frequency
}

func (b *BillingFeeDetail) GetServiceGroup() *string {
	if b == nil {
		return nil
	}
	return b.ServiceGroup
}

func (b *BillingFeeDetail) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingFeeDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler BillingFeeDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillingFeeDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingFeeDetail) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// A field used internally by Payabli to categorize the transaction details. Values are:
//   - `auth`: Any payment
//   - `refund`: ACH return or Refund
//   - `adj`: Adjustments
//   - `cb`: Chargeback
//   - `split`: Split amount
type Category = string

// Identifier of chargeback transaction
type ChargebackId = *int64

// The date the funds were deposited.
type DepositDate = time.Time

// Identifier of registered cloud device used in the transaction
type DeviceId = *Device

// The date the funds are expected to be deposited.
type ExpectedDepositDate = time.Time

type PayoutGatewayConnector struct {
	Configuration       *string `json:"configuration,omitempty" url:"configuration,omitempty"`
	Name                *string `json:"Name,omitempty" url:"Name,omitempty"`
	Mode                *int    `json:"Mode,omitempty" url:"Mode,omitempty"`
	Bank                *string `json:"Bank,omitempty" url:"Bank,omitempty"`
	Descriptor          *string `json:"Descriptor,omitempty" url:"Descriptor,omitempty"`
	GatewayId           *int    `json:"gatewayID,omitempty" url:"gatewayID,omitempty"`
	Enabled             *bool   `json:"Enabled,omitempty" url:"Enabled,omitempty"`
	EnableAchValidation *bool   `json:"EnableACHValidation,omitempty" url:"EnableACHValidation,omitempty"`
	TestMode            *bool   `json:"TestMode,omitempty" url:"TestMode,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayoutGatewayConnector) GetConfiguration() *string {
	if p == nil {
		return nil
	}
	return p.Configuration
}

func (p *PayoutGatewayConnector) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PayoutGatewayConnector) GetMode() *int {
	if p == nil {
		return nil
	}
	return p.Mode
}

func (p *PayoutGatewayConnector) GetBank() *string {
	if p == nil {
		return nil
	}
	return p.Bank
}

func (p *PayoutGatewayConnector) GetDescriptor() *string {
	if p == nil {
		return nil
	}
	return p.Descriptor
}

func (p *PayoutGatewayConnector) GetGatewayId() *int {
	if p == nil {
		return nil
	}
	return p.GatewayId
}

func (p *PayoutGatewayConnector) GetEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.Enabled
}

func (p *PayoutGatewayConnector) GetEnableAchValidation() *bool {
	if p == nil {
		return nil
	}
	return p.EnableAchValidation
}

func (p *PayoutGatewayConnector) GetTestMode() *bool {
	if p == nil {
		return nil
	}
	return p.TestMode
}

func (p *PayoutGatewayConnector) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayoutGatewayConnector) UnmarshalJSON(data []byte) error {
	type unmarshaler PayoutGatewayConnector
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayoutGatewayConnector(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayoutGatewayConnector) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Response body for queries about batch details.
type QueryBatchesDetailResponse struct {
	Records []*BatchDetailResponseRecord `json:"Records" url:"Records"`
	Summary *BatchDetailResponseSummary  `json:"Summary" url:"Summary"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBatchesDetailResponse) GetRecords() []*BatchDetailResponseRecord {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryBatchesDetailResponse) GetSummary() *BatchDetailResponseSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryBatchesDetailResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBatchesDetailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryBatchesDetailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryBatchesDetailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBatchesDetailResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Response body for queries about money out batches.
type QueryBatchesOutResponse struct {
	Records []*QueryBatchesOutResponseRecordsItem `json:"Records" url:"Records"`
	Summary *BatchSummary                         `json:"Summary" url:"Summary"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBatchesOutResponse) GetRecords() []*QueryBatchesOutResponseRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryBatchesOutResponse) GetSummary() *BatchSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryBatchesOutResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBatchesOutResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryBatchesOutResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryBatchesOutResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBatchesOutResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryBatchesOutResponseRecordsItem struct {
	AchAmount     *float64 `json:"AchAmount,omitempty" url:"AchAmount,omitempty"`
	AchRecords    *int     `json:"AchRecords,omitempty" url:"AchRecords,omitempty"`
	AchStatus     *int     `json:"AchStatus,omitempty" url:"AchStatus,omitempty"`
	AchStatusText *string  `json:"AchStatusText,omitempty" url:"AchStatusText,omitempty"`
	// The amount of the batch.
	BatchAmount           *float64 `json:"BatchAmount,omitempty" url:"BatchAmount,omitempty"`
	BatchCancelledAmount  *float64 `json:"BatchCancelledAmount,omitempty" url:"BatchCancelledAmount,omitempty"`
	BatchCancelledRecords *int     `json:"BatchCancelledRecords,omitempty" url:"BatchCancelledRecords,omitempty"`
	// The batch date.
	BatchDate              *time.Time   `json:"BatchDate,omitempty" url:"BatchDate,omitempty"`
	BatchNumber            *BatchNumber `json:"BatchNumber,omitempty" url:"BatchNumber,omitempty"`
	BatchPaidAmount        *float64     `json:"BatchPaidAmount,omitempty" url:"BatchPaidAmount,omitempty"`
	BatchPaidRecords       *int         `json:"BatchPaidRecords,omitempty" url:"BatchPaidRecords,omitempty"`
	BatchProcessedAmount   *float64     `json:"BatchProcessedAmount,omitempty" url:"BatchProcessedAmount,omitempty"`
	BatchProcessedRecords  *int         `json:"BatchProcessedRecords,omitempty" url:"BatchProcessedRecords,omitempty"`
	BatchProcessingAmount  *float64     `json:"BatchProcessingAmount,omitempty" url:"BatchProcessingAmount,omitempty"`
	BatchProcessingRecords *int         `json:"BatchProcessingRecords,omitempty" url:"BatchProcessingRecords,omitempty"`
	// The number of records in the batch.
	BatchRecords *int `json:"BatchRecords,omitempty" url:"BatchRecords,omitempty"`
	// The batch status. See [Batch Status](/developers/references/money-out-statuses#batch-statuses) for more.
	BatchStatus *int `json:"BatchStatus,omitempty" url:"BatchStatus,omitempty"`
	// A text description of the batch status.
	BatchStatusText    *string             `json:"BatchStatusText,omitempty" url:"BatchStatusText,omitempty"`
	CardAmount         *float64            `json:"CardAmount,omitempty" url:"CardAmount,omitempty"`
	CardRecords        *int                `json:"CardRecords,omitempty" url:"CardRecords,omitempty"`
	CardStatus         *int                `json:"CardStatus,omitempty" url:"CardStatus,omitempty"`
	CardStatusText     *string             `json:"CardStatusText,omitempty" url:"CardStatusText,omitempty"`
	CheckAmount        *float64            `json:"CheckAmount,omitempty" url:"CheckAmount,omitempty"`
	CheckRecords       *int                `json:"CheckRecords,omitempty" url:"CheckRecords,omitempty"`
	CheckStatus        *int                `json:"CheckStatus,omitempty" url:"CheckStatus,omitempty"`
	CheckStatusText    *string             `json:"CheckStatusText,omitempty" url:"CheckStatusText,omitempty"`
	EntryName          *Entrypointfield    `json:"EntryName,omitempty" url:"EntryName,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// The batch ID.
	IdBatch *int `json:"IdBatch,omitempty" url:"IdBatch,omitempty"`
	// The entrypoint's parent org.
	ParentOrgName *string `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	// Paypoint DBA name.
	PaypointDba *string `json:"PaypointDba,omitempty" url:"PaypointDba,omitempty"`
	// Paypoint ID.
	PaypointId *int `json:"PaypointId,omitempty" url:"PaypointId,omitempty"`
	// Paypoint legal name.
	PaypointName    *string  `json:"PaypointName,omitempty" url:"PaypointName,omitempty"`
	VcardAmount     *float64 `json:"VcardAmount,omitempty" url:"VcardAmount,omitempty"`
	VcardRecords    *int     `json:"VcardRecords,omitempty" url:"VcardRecords,omitempty"`
	VcardStatus     *int     `json:"VcardStatus,omitempty" url:"VcardStatus,omitempty"`
	VcardStatusText *string  `json:"VcardStatusText,omitempty" url:"VcardStatusText,omitempty"`
	WireAmount      *float64 `json:"WireAmount,omitempty" url:"WireAmount,omitempty"`
	WireRecords     *int     `json:"WireRecords,omitempty" url:"WireRecords,omitempty"`
	WireStatus      *int     `json:"WireStatus,omitempty" url:"WireStatus,omitempty"`
	WireStatusText  *string  `json:"WireStatusText,omitempty" url:"WireStatusText,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBatchesOutResponseRecordsItem) GetAchAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.AchAmount
}

func (q *QueryBatchesOutResponseRecordsItem) GetAchRecords() *int {
	if q == nil {
		return nil
	}
	return q.AchRecords
}

func (q *QueryBatchesOutResponseRecordsItem) GetAchStatus() *int {
	if q == nil {
		return nil
	}
	return q.AchStatus
}

func (q *QueryBatchesOutResponseRecordsItem) GetAchStatusText() *string {
	if q == nil {
		return nil
	}
	return q.AchStatusText
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchAmount
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchCancelledAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchCancelledAmount
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchCancelledRecords() *int {
	if q == nil {
		return nil
	}
	return q.BatchCancelledRecords
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchDate() *time.Time {
	if q == nil {
		return nil
	}
	return q.BatchDate
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchNumber() *BatchNumber {
	if q == nil {
		return nil
	}
	return q.BatchNumber
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchPaidAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchPaidAmount
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchPaidRecords() *int {
	if q == nil {
		return nil
	}
	return q.BatchPaidRecords
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchProcessedAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchProcessedAmount
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchProcessedRecords() *int {
	if q == nil {
		return nil
	}
	return q.BatchProcessedRecords
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchProcessingAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchProcessingAmount
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchProcessingRecords() *int {
	if q == nil {
		return nil
	}
	return q.BatchProcessingRecords
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchRecords() *int {
	if q == nil {
		return nil
	}
	return q.BatchRecords
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchStatus() *int {
	if q == nil {
		return nil
	}
	return q.BatchStatus
}

func (q *QueryBatchesOutResponseRecordsItem) GetBatchStatusText() *string {
	if q == nil {
		return nil
	}
	return q.BatchStatusText
}

func (q *QueryBatchesOutResponseRecordsItem) GetCardAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.CardAmount
}

func (q *QueryBatchesOutResponseRecordsItem) GetCardRecords() *int {
	if q == nil {
		return nil
	}
	return q.CardRecords
}

func (q *QueryBatchesOutResponseRecordsItem) GetCardStatus() *int {
	if q == nil {
		return nil
	}
	return q.CardStatus
}

func (q *QueryBatchesOutResponseRecordsItem) GetCardStatusText() *string {
	if q == nil {
		return nil
	}
	return q.CardStatusText
}

func (q *QueryBatchesOutResponseRecordsItem) GetCheckAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.CheckAmount
}

func (q *QueryBatchesOutResponseRecordsItem) GetCheckRecords() *int {
	if q == nil {
		return nil
	}
	return q.CheckRecords
}

func (q *QueryBatchesOutResponseRecordsItem) GetCheckStatus() *int {
	if q == nil {
		return nil
	}
	return q.CheckStatus
}

func (q *QueryBatchesOutResponseRecordsItem) GetCheckStatusText() *string {
	if q == nil {
		return nil
	}
	return q.CheckStatusText
}

func (q *QueryBatchesOutResponseRecordsItem) GetEntryName() *Entrypointfield {
	if q == nil {
		return nil
	}
	return q.EntryName
}

func (q *QueryBatchesOutResponseRecordsItem) GetExternalPaypointId() *ExternalPaypointId {
	if q == nil {
		return nil
	}
	return q.ExternalPaypointId
}

func (q *QueryBatchesOutResponseRecordsItem) GetIdBatch() *int {
	if q == nil {
		return nil
	}
	return q.IdBatch
}

func (q *QueryBatchesOutResponseRecordsItem) GetParentOrgName() *string {
	if q == nil {
		return nil
	}
	return q.ParentOrgName
}

func (q *QueryBatchesOutResponseRecordsItem) GetPaypointDba() *string {
	if q == nil {
		return nil
	}
	return q.PaypointDba
}

func (q *QueryBatchesOutResponseRecordsItem) GetPaypointId() *int {
	if q == nil {
		return nil
	}
	return q.PaypointId
}

func (q *QueryBatchesOutResponseRecordsItem) GetPaypointName() *string {
	if q == nil {
		return nil
	}
	return q.PaypointName
}

func (q *QueryBatchesOutResponseRecordsItem) GetVcardAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.VcardAmount
}

func (q *QueryBatchesOutResponseRecordsItem) GetVcardRecords() *int {
	if q == nil {
		return nil
	}
	return q.VcardRecords
}

func (q *QueryBatchesOutResponseRecordsItem) GetVcardStatus() *int {
	if q == nil {
		return nil
	}
	return q.VcardStatus
}

func (q *QueryBatchesOutResponseRecordsItem) GetVcardStatusText() *string {
	if q == nil {
		return nil
	}
	return q.VcardStatusText
}

func (q *QueryBatchesOutResponseRecordsItem) GetWireAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.WireAmount
}

func (q *QueryBatchesOutResponseRecordsItem) GetWireRecords() *int {
	if q == nil {
		return nil
	}
	return q.WireRecords
}

func (q *QueryBatchesOutResponseRecordsItem) GetWireStatus() *int {
	if q == nil {
		return nil
	}
	return q.WireStatus
}

func (q *QueryBatchesOutResponseRecordsItem) GetWireStatusText() *string {
	if q == nil {
		return nil
	}
	return q.WireStatusText
}

func (q *QueryBatchesOutResponseRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBatchesOutResponseRecordsItem) UnmarshalJSON(data []byte) error {
	type embed QueryBatchesOutResponseRecordsItem
	var unmarshaler = struct {
		embed
		BatchDate *internal.DateTime `json:"BatchDate,omitempty"`
	}{
		embed: embed(*q),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*q = QueryBatchesOutResponseRecordsItem(unmarshaler.embed)
	q.BatchDate = unmarshaler.BatchDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBatchesOutResponseRecordsItem) MarshalJSON() ([]byte, error) {
	type embed QueryBatchesOutResponseRecordsItem
	var marshaler = struct {
		embed
		BatchDate *internal.DateTime `json:"BatchDate,omitempty"`
	}{
		embed:     embed(*q),
		BatchDate: internal.NewOptionalDateTime(q.BatchDate),
	}
	return json.Marshal(marshaler)
}

func (q *QueryBatchesOutResponseRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Response body for queries about batches.
type QueryBatchesResponse struct {
	Records []*QueryBatchesResponseRecordsItem `json:"Records" url:"Records"`
	Summary *BatchSummary                      `json:"Summary" url:"Summary"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBatchesResponse) GetRecords() []*QueryBatchesResponseRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryBatchesResponse) GetSummary() *BatchSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryBatchesResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBatchesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryBatchesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryBatchesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBatchesResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryBatchesResponseRecordsItem struct {
	AchHolderType *AchHolderType `json:"AchHolderType,omitempty" url:"AchHolderType,omitempty"`
	AchSecCode    *AchSecCode    `json:"AchSecCode,omitempty" url:"AchSecCode,omitempty"`
	// The amount of the batch.
	BatchAmount     *float64 `json:"BatchAmount,omitempty" url:"BatchAmount,omitempty"`
	BatchAuthAmount *float64 `json:"BatchAuthAmount,omitempty" url:"BatchAuthAmount,omitempty"`
	// The batch date.
	BatchDate *time.Time `json:"BatchDate,omitempty" url:"BatchDate,omitempty"`
	// The total of fees in the batch.
	BatchFeesAmount *float64 `json:"BatchFeesAmount,omitempty" url:"BatchFeesAmount,omitempty"`
	// The total amount of the batch that's being held for fraud or risk concerns.
	BatchHoldAmount *float64     `json:"BatchHoldAmount,omitempty" url:"BatchHoldAmount,omitempty"`
	BatchNumber     *BatchNumber `json:"BatchNumber,omitempty" url:"BatchNumber,omitempty"`
	// The number of records in the batch.
	BatchRecords *int `json:"BatchRecords,omitempty" url:"BatchRecords,omitempty"`
	// The total amount of refunds deducted from batch.
	BatchRefundAmount *float64 `json:"BatchRefundAmount,omitempty" url:"BatchRefundAmount,omitempty"`
	// Previously held funds that have been released after a risk review.
	BatchReleasedAmount *float64 `json:"BatchReleasedAmount,omitempty" url:"BatchReleasedAmount,omitempty"`
	// Total amount of ACH returns deducted from batch.
	BatchReturnedAmount *float64 `json:"BatchReturnedAmount,omitempty" url:"BatchReturnedAmount,omitempty"`
	// Total of split transactions that included split funding instructions at the time of authorization.
	BatchSplitAmount *float64 `json:"BatchSplitAmount,omitempty" url:"BatchSplitAmount,omitempty"`
	// The batch status. See [Batch Status](/developers/references/money-in-statuses#batch-status) for more.
	BatchStatus  *int          `json:"BatchStatus,omitempty" url:"BatchStatus,omitempty"`
	ChargebackId *ChargebackId `json:"ChargebackId,omitempty" url:"ChargebackId,omitempty"`
	// Service Fee or sub-charge transaction associated to the main
	// transaction.
	CfeeTransactions    []*QueryCFeeTransaction `json:"CfeeTransactions,omitempty" url:"CfeeTransactions,omitempty"`
	ConnectorName       *string                 `json:"ConnectorName,omitempty" url:"ConnectorName,omitempty"`
	DepositDate         *DepositDate            `json:"DepositDate,omitempty" url:"DepositDate,omitempty"`
	DeviceId            *DeviceId               `json:"DeviceId,omitempty" url:"DeviceId,omitempty"`
	EntryName           *Entrypointfield        `json:"EntryName,omitempty" url:"EntryName,omitempty"`
	EntryPageid         *EntrypageId            `json:"EntryPageid,omitempty" url:"EntryPageid,omitempty"`
	ExpectedDepositDate *ExpectedDepositDate    `json:"ExpectedDepositDate,omitempty" url:"ExpectedDepositDate,omitempty"`
	ExternalPaypointId  *ExternalPaypointId     `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	FeeAmount           *FeeAmount              `json:"FeeAmount,omitempty" url:"FeeAmount,omitempty"`
	// The batch ID.
	IdBatch *int `json:"IdBatch,omitempty" url:"IdBatch,omitempty"`
	// The payment method used.
	Method *string `json:"Method,omitempty" url:"Method,omitempty"`
	OrgId  *Orgid  `json:"OrgId,omitempty" url:"OrgId,omitempty"`
	// The entrypoint's parent org.
	ParentOrgName *OrgParentName `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	// The payment's settlement status.
	PaymentSettlementStatus *int     `json:"PaymentSettlementStatus,omitempty" url:"PaymentSettlementStatus,omitempty"`
	PayorId                 *PayorId `json:"PayorId,omitempty" url:"PayorId,omitempty"`
	// Paypoint DBA name.
	PaypointDba      *Dbaname          `json:"PaypointDba,omitempty" url:"PaypointDba,omitempty"`
	PaypointId       *PaypointId       `json:"PaypointId,omitempty" url:"PaypointId,omitempty"`
	PaypointName     *PaypointName     `json:"PaypointName,omitempty" url:"PaypointName,omitempty"`
	PendingFeeAmount *PendingFeeAmount `json:"PendingFeeAmount,omitempty" url:"PendingFeeAmount,omitempty"`
	RefundId         *RefundId         `json:"RefundId,omitempty" url:"RefundId,omitempty"`
	RetrievalId      *RetrievalId      `json:"RetrievalId,omitempty" url:"RetrievalId,omitempty"`
	ReturnedId       *ReturnedId       `json:"ReturnedId,omitempty" url:"ReturnedId,omitempty"`
	// Split funding instructions for the transaction
	SplitFundingInstructions *SplitFunding `json:"splitFundingInstructions,omitempty" url:"splitFundingInstructions,omitempty"`
	// Total amount of the batch.
	TotalAmount *float64 `json:"TotalAmount,omitempty" url:"TotalAmount,omitempty"`
	Transfer    *string  `json:"Transfer,omitempty" url:"Transfer,omitempty"`
	// The batch transfer date.
	TransferDate *time.Time `json:"TransferDate,omitempty" url:"TransferDate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryBatchesResponseRecordsItem) GetAchHolderType() *AchHolderType {
	if q == nil {
		return nil
	}
	return q.AchHolderType
}

func (q *QueryBatchesResponseRecordsItem) GetAchSecCode() *AchSecCode {
	if q == nil {
		return nil
	}
	return q.AchSecCode
}

func (q *QueryBatchesResponseRecordsItem) GetBatchAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchAuthAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchAuthAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchDate() *time.Time {
	if q == nil {
		return nil
	}
	return q.BatchDate
}

func (q *QueryBatchesResponseRecordsItem) GetBatchFeesAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchFeesAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchHoldAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchHoldAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchNumber() *BatchNumber {
	if q == nil {
		return nil
	}
	return q.BatchNumber
}

func (q *QueryBatchesResponseRecordsItem) GetBatchRecords() *int {
	if q == nil {
		return nil
	}
	return q.BatchRecords
}

func (q *QueryBatchesResponseRecordsItem) GetBatchRefundAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchRefundAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchReleasedAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchReleasedAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchReturnedAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchReturnedAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchSplitAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchSplitAmount
}

func (q *QueryBatchesResponseRecordsItem) GetBatchStatus() *int {
	if q == nil {
		return nil
	}
	return q.BatchStatus
}

func (q *QueryBatchesResponseRecordsItem) GetChargebackId() *ChargebackId {
	if q == nil {
		return nil
	}
	return q.ChargebackId
}

func (q *QueryBatchesResponseRecordsItem) GetCfeeTransactions() []*QueryCFeeTransaction {
	if q == nil {
		return nil
	}
	return q.CfeeTransactions
}

func (q *QueryBatchesResponseRecordsItem) GetConnectorName() *string {
	if q == nil {
		return nil
	}
	return q.ConnectorName
}

func (q *QueryBatchesResponseRecordsItem) GetDepositDate() *DepositDate {
	if q == nil {
		return nil
	}
	return q.DepositDate
}

func (q *QueryBatchesResponseRecordsItem) GetDeviceId() *DeviceId {
	if q == nil {
		return nil
	}
	return q.DeviceId
}

func (q *QueryBatchesResponseRecordsItem) GetEntryName() *Entrypointfield {
	if q == nil {
		return nil
	}
	return q.EntryName
}

func (q *QueryBatchesResponseRecordsItem) GetEntryPageid() *EntrypageId {
	if q == nil {
		return nil
	}
	return q.EntryPageid
}

func (q *QueryBatchesResponseRecordsItem) GetExpectedDepositDate() *ExpectedDepositDate {
	if q == nil {
		return nil
	}
	return q.ExpectedDepositDate
}

func (q *QueryBatchesResponseRecordsItem) GetExternalPaypointId() *ExternalPaypointId {
	if q == nil {
		return nil
	}
	return q.ExternalPaypointId
}

func (q *QueryBatchesResponseRecordsItem) GetFeeAmount() *FeeAmount {
	if q == nil {
		return nil
	}
	return q.FeeAmount
}

func (q *QueryBatchesResponseRecordsItem) GetIdBatch() *int {
	if q == nil {
		return nil
	}
	return q.IdBatch
}

func (q *QueryBatchesResponseRecordsItem) GetMethod() *string {
	if q == nil {
		return nil
	}
	return q.Method
}

func (q *QueryBatchesResponseRecordsItem) GetOrgId() *Orgid {
	if q == nil {
		return nil
	}
	return q.OrgId
}

func (q *QueryBatchesResponseRecordsItem) GetParentOrgName() *OrgParentName {
	if q == nil {
		return nil
	}
	return q.ParentOrgName
}

func (q *QueryBatchesResponseRecordsItem) GetPaymentSettlementStatus() *int {
	if q == nil {
		return nil
	}
	return q.PaymentSettlementStatus
}

func (q *QueryBatchesResponseRecordsItem) GetPayorId() *PayorId {
	if q == nil {
		return nil
	}
	return q.PayorId
}

func (q *QueryBatchesResponseRecordsItem) GetPaypointDba() *Dbaname {
	if q == nil {
		return nil
	}
	return q.PaypointDba
}

func (q *QueryBatchesResponseRecordsItem) GetPaypointId() *PaypointId {
	if q == nil {
		return nil
	}
	return q.PaypointId
}

func (q *QueryBatchesResponseRecordsItem) GetPaypointName() *PaypointName {
	if q == nil {
		return nil
	}
	return q.PaypointName
}

func (q *QueryBatchesResponseRecordsItem) GetPendingFeeAmount() *PendingFeeAmount {
	if q == nil {
		return nil
	}
	return q.PendingFeeAmount
}

func (q *QueryBatchesResponseRecordsItem) GetRefundId() *RefundId {
	if q == nil {
		return nil
	}
	return q.RefundId
}

func (q *QueryBatchesResponseRecordsItem) GetRetrievalId() *RetrievalId {
	if q == nil {
		return nil
	}
	return q.RetrievalId
}

func (q *QueryBatchesResponseRecordsItem) GetReturnedId() *ReturnedId {
	if q == nil {
		return nil
	}
	return q.ReturnedId
}

func (q *QueryBatchesResponseRecordsItem) GetSplitFundingInstructions() *SplitFunding {
	if q == nil {
		return nil
	}
	return q.SplitFundingInstructions
}

func (q *QueryBatchesResponseRecordsItem) GetTotalAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalAmount
}

func (q *QueryBatchesResponseRecordsItem) GetTransfer() *string {
	if q == nil {
		return nil
	}
	return q.Transfer
}

func (q *QueryBatchesResponseRecordsItem) GetTransferDate() *time.Time {
	if q == nil {
		return nil
	}
	return q.TransferDate
}

func (q *QueryBatchesResponseRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryBatchesResponseRecordsItem) UnmarshalJSON(data []byte) error {
	type embed QueryBatchesResponseRecordsItem
	var unmarshaler = struct {
		embed
		BatchDate    *internal.DateTime `json:"BatchDate,omitempty"`
		TransferDate *internal.DateTime `json:"TransferDate,omitempty"`
	}{
		embed: embed(*q),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*q = QueryBatchesResponseRecordsItem(unmarshaler.embed)
	q.BatchDate = unmarshaler.BatchDate.TimePtr()
	q.TransferDate = unmarshaler.TransferDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryBatchesResponseRecordsItem) MarshalJSON() ([]byte, error) {
	type embed QueryBatchesResponseRecordsItem
	var marshaler = struct {
		embed
		BatchDate    *internal.DateTime `json:"BatchDate,omitempty"`
		TransferDate *internal.DateTime `json:"TransferDate,omitempty"`
	}{
		embed:        embed(*q),
		BatchDate:    internal.NewOptionalDateTime(q.BatchDate),
		TransferDate: internal.NewOptionalDateTime(q.TransferDate),
	}
	return json.Marshal(marshaler)
}

func (q *QueryBatchesResponseRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Response body for queries about chargebacks.
type QueryChargebacksResponse struct {
	Records []*QueryChargebacksResponseRecordsItem `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary                          `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryChargebacksResponse) GetRecords() []*QueryChargebacksResponseRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryChargebacksResponse) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryChargebacksResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryChargebacksResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryChargebacksResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryChargebacksResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryChargebacksResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryChargebacksResponseRecordsItem struct {
	// Type of account.
	AccountType *string `json:"AccountType,omitempty" url:"AccountType,omitempty"`
	// Case number of the chargeback.
	CaseNumber *string `json:"CaseNumber,omitempty" url:"CaseNumber,omitempty"`
	// Date of the chargeback.
	ChargebackDate     *time.Time                 `json:"ChargebackDate,omitempty" url:"ChargebackDate,omitempty"`
	CreatedAt          *CreatedAt                 `json:"CreatedAt,omitempty" url:"CreatedAt,omitempty"`
	Customer           *QueryTransactionPayorData `json:"Customer,omitempty" url:"Customer,omitempty"`
	ExternalPaypointId *ExternalPaypointId        `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// Unique identifier of the record.
	Id *int `json:"Id,omitempty" url:"Id,omitempty"`
	// Last four digits of the account number.
	LastFour *string `json:"LastFour,omitempty" url:"LastFour,omitempty"`
	// Method of payment.
	Method *string `json:"Method,omitempty" url:"Method,omitempty"`
	// Net amount after deductions.
	NetAmount      *float64        `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	OrderId        *Orderid        `json:"OrderId,omitempty" url:"OrderId,omitempty"`
	Pageidentifier *PageIdentifier `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`
	ParentOrgName  *OrgParentName  `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	// Payment data associated with the transaction.
	PaymentData *QueryPaymentData `json:"PaymentData,omitempty" url:"PaymentData,omitempty"`
	// Transaction ID for the payment.
	PaymentTransId *string `json:"PaymentTransId,omitempty" url:"PaymentTransId,omitempty"`
	// The 'Doing Business As' (DBA) name of the paypoint.
	PaypointDbaname *Dbaname `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// Entryname for the paypoint.
	PaypointEntryname *Entrypointfield `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	// Legal name of the paypoint.
	PaypointLegalname *Legalname `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// Description of the reason for chargeback.
	Reason *string `json:"Reason,omitempty" url:"Reason,omitempty"`
	// Code representing the reason for chargeback.
	ReasonCode *string `json:"ReasonCode,omitempty" url:"ReasonCode,omitempty"`
	// Reference number for the transaction.
	ReferenceNumber *string  `json:"ReferenceNumber,omitempty" url:"ReferenceNumber,omitempty"`
	ReplyBy         *Replyby `json:"ReplyBy,omitempty" url:"ReplyBy,omitempty"`
	// Responses related to the transaction.
	Responses *string `json:"Responses,omitempty" url:"Responses,omitempty"`
	// Reference for any scheduled transactions.
	ScheduleReference *int `json:"ScheduleReference,omitempty" url:"ScheduleReference,omitempty"`
	// Status of the transaction.
	Status          *int                     `json:"Status,omitempty" url:"Status,omitempty"`
	Transaction     *TransactionQueryRecords `json:"Transaction,omitempty" url:"Transaction,omitempty"`
	TransactionTime *TransactionTime         `json:"TransactionTime,omitempty" url:"TransactionTime,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryChargebacksResponseRecordsItem) GetAccountType() *string {
	if q == nil {
		return nil
	}
	return q.AccountType
}

func (q *QueryChargebacksResponseRecordsItem) GetCaseNumber() *string {
	if q == nil {
		return nil
	}
	return q.CaseNumber
}

func (q *QueryChargebacksResponseRecordsItem) GetChargebackDate() *time.Time {
	if q == nil {
		return nil
	}
	return q.ChargebackDate
}

func (q *QueryChargebacksResponseRecordsItem) GetCreatedAt() *CreatedAt {
	if q == nil {
		return nil
	}
	return q.CreatedAt
}

func (q *QueryChargebacksResponseRecordsItem) GetCustomer() *QueryTransactionPayorData {
	if q == nil {
		return nil
	}
	return q.Customer
}

func (q *QueryChargebacksResponseRecordsItem) GetExternalPaypointId() *ExternalPaypointId {
	if q == nil {
		return nil
	}
	return q.ExternalPaypointId
}

func (q *QueryChargebacksResponseRecordsItem) GetId() *int {
	if q == nil {
		return nil
	}
	return q.Id
}

func (q *QueryChargebacksResponseRecordsItem) GetLastFour() *string {
	if q == nil {
		return nil
	}
	return q.LastFour
}

func (q *QueryChargebacksResponseRecordsItem) GetMethod() *string {
	if q == nil {
		return nil
	}
	return q.Method
}

func (q *QueryChargebacksResponseRecordsItem) GetNetAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.NetAmount
}

func (q *QueryChargebacksResponseRecordsItem) GetOrderId() *Orderid {
	if q == nil {
		return nil
	}
	return q.OrderId
}

func (q *QueryChargebacksResponseRecordsItem) GetPageidentifier() *PageIdentifier {
	if q == nil {
		return nil
	}
	return q.Pageidentifier
}

func (q *QueryChargebacksResponseRecordsItem) GetParentOrgName() *OrgParentName {
	if q == nil {
		return nil
	}
	return q.ParentOrgName
}

func (q *QueryChargebacksResponseRecordsItem) GetPaymentData() *QueryPaymentData {
	if q == nil {
		return nil
	}
	return q.PaymentData
}

func (q *QueryChargebacksResponseRecordsItem) GetPaymentTransId() *string {
	if q == nil {
		return nil
	}
	return q.PaymentTransId
}

func (q *QueryChargebacksResponseRecordsItem) GetPaypointDbaname() *Dbaname {
	if q == nil {
		return nil
	}
	return q.PaypointDbaname
}

func (q *QueryChargebacksResponseRecordsItem) GetPaypointEntryname() *Entrypointfield {
	if q == nil {
		return nil
	}
	return q.PaypointEntryname
}

func (q *QueryChargebacksResponseRecordsItem) GetPaypointLegalname() *Legalname {
	if q == nil {
		return nil
	}
	return q.PaypointLegalname
}

func (q *QueryChargebacksResponseRecordsItem) GetReason() *string {
	if q == nil {
		return nil
	}
	return q.Reason
}

func (q *QueryChargebacksResponseRecordsItem) GetReasonCode() *string {
	if q == nil {
		return nil
	}
	return q.ReasonCode
}

func (q *QueryChargebacksResponseRecordsItem) GetReferenceNumber() *string {
	if q == nil {
		return nil
	}
	return q.ReferenceNumber
}

func (q *QueryChargebacksResponseRecordsItem) GetReplyBy() *Replyby {
	if q == nil {
		return nil
	}
	return q.ReplyBy
}

func (q *QueryChargebacksResponseRecordsItem) GetResponses() *string {
	if q == nil {
		return nil
	}
	return q.Responses
}

func (q *QueryChargebacksResponseRecordsItem) GetScheduleReference() *int {
	if q == nil {
		return nil
	}
	return q.ScheduleReference
}

func (q *QueryChargebacksResponseRecordsItem) GetStatus() *int {
	if q == nil {
		return nil
	}
	return q.Status
}

func (q *QueryChargebacksResponseRecordsItem) GetTransaction() *TransactionQueryRecords {
	if q == nil {
		return nil
	}
	return q.Transaction
}

func (q *QueryChargebacksResponseRecordsItem) GetTransactionTime() *TransactionTime {
	if q == nil {
		return nil
	}
	return q.TransactionTime
}

func (q *QueryChargebacksResponseRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryChargebacksResponseRecordsItem) UnmarshalJSON(data []byte) error {
	type embed QueryChargebacksResponseRecordsItem
	var unmarshaler = struct {
		embed
		ChargebackDate *internal.DateTime `json:"ChargebackDate,omitempty"`
	}{
		embed: embed(*q),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*q = QueryChargebacksResponseRecordsItem(unmarshaler.embed)
	q.ChargebackDate = unmarshaler.ChargebackDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryChargebacksResponseRecordsItem) MarshalJSON() ([]byte, error) {
	type embed QueryChargebacksResponseRecordsItem
	var marshaler = struct {
		embed
		ChargebackDate *internal.DateTime `json:"ChargebackDate,omitempty"`
	}{
		embed:          embed(*q),
		ChargebackDate: internal.NewOptionalDateTime(q.ChargebackDate),
	}
	return json.Marshal(marshaler)
}

func (q *QueryChargebacksResponseRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryCustomerResponse struct {
	Records []*CustomerQueryRecords `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary           `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryCustomerResponse) GetRecords() []*CustomerQueryRecords {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryCustomerResponse) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryCustomerResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryCustomerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryCustomerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryCustomerResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryCustomerResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryEntrypointResponse struct {
	Records []*QueryEntrypointResponseRecordsItem `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary                         `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryEntrypointResponse) GetRecords() []*QueryEntrypointResponseRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryEntrypointResponse) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryEntrypointResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryEntrypointResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryEntrypointResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryEntrypointResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryEntrypointResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryEntrypointResponseRecordsItem struct {
	AverageMonthlyVolume *Avgmonthly   `json:"AverageMonthlyVolume,omitempty" url:"AverageMonthlyVolume,omitempty"`
	AverageTicketAmount  *Avgticketamt `json:"AverageTicketAmount,omitempty" url:"AverageTicketAmount,omitempty"`
	BAddress1            *Baddress1    `json:"BAddress1,omitempty" url:"BAddress1,omitempty"`
	BAddress2            *Baddress2    `json:"BAddress2,omitempty" url:"BAddress2,omitempty"`
	BankData             *BankData     `json:"BankData,omitempty" url:"BankData,omitempty"`
	BCity                *Bcity        `json:"BCity,omitempty" url:"BCity,omitempty"`
	BCountry             *Bcountry     `json:"BCountry,omitempty" url:"BCountry,omitempty"`
	// The business's fax number.
	BFax                         *Bphone                       `json:"BFax,omitempty" url:"BFax,omitempty"`
	BinPerson                    *Binperson                    `json:"BinPerson,omitempty" url:"BinPerson,omitempty"`
	BinPhone                     *Binphone                     `json:"BinPhone,omitempty" url:"BinPhone,omitempty"`
	BinWeb                       *Binweb                       `json:"BinWeb,omitempty" url:"BinWeb,omitempty"`
	BoardingId                   *BoardingId                   `json:"BoardingId,omitempty" url:"BoardingId,omitempty"`
	BPhone                       *Bphone                       `json:"BPhone,omitempty" url:"BPhone,omitempty"`
	BStartdate                   *Busstartdate                 `json:"BStartdate,omitempty" url:"BStartdate,omitempty"`
	BState                       *Bstate                       `json:"BState,omitempty" url:"BState,omitempty"`
	BSummary                     *Bsummary                     `json:"BSummary,omitempty" url:"BSummary,omitempty"`
	BTimeZone                    *Timezone                     `json:"BTimeZone,omitempty" url:"BTimeZone,omitempty"`
	BZip                         *Bzip                         `json:"BZip,omitempty" url:"BZip,omitempty"`
	ContactData                  *ContactsField                `json:"ContactData,omitempty" url:"ContactData,omitempty"`
	CreatedAt                    *CreatedAt                    `json:"CreatedAt,omitempty" url:"CreatedAt,omitempty"`
	DbaName                      *Dbaname                      `json:"DbaName,omitempty" url:"DbaName,omitempty"`
	DocumentsRef                 *string                       `json:"DocumentsRef,omitempty" url:"DocumentsRef,omitempty"`
	Ein                          *Ein                          `json:"Ein,omitempty" url:"Ein,omitempty"`
	EntryPoints                  []*PaypointEntryConfig        `json:"EntryPoints,omitempty" url:"EntryPoints,omitempty"`
	ExternalPaypointId           *ExternalPaypointId           `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	ExternalProcessorInformation *ExternalProcessorInformation `json:"ExternalProcessorInformation,omitempty" url:"ExternalProcessorInformation,omitempty"`
	HighTicketAmount             *Highticketamt                `json:"HighTicketAmount,omitempty" url:"HighTicketAmount,omitempty"`
	IdPaypoint                   *Idpaypoint                   `json:"IdPaypoint,omitempty" url:"IdPaypoint,omitempty"`
	LastModified                 *LastModified                 `json:"LastModified,omitempty" url:"LastModified,omitempty"`
	LegalName                    *Legalname                    `json:"LegalName,omitempty" url:"LegalName,omitempty"`
	License                      *License                      `json:"License,omitempty" url:"License,omitempty"`
	LicenseState                 *Licensestate                 `json:"LicenseState,omitempty" url:"LicenseState,omitempty"`
	MAddress1                    *Maddress                     `json:"MAddress1,omitempty" url:"MAddress1,omitempty"`
	MAddress2                    *Maddress1                    `json:"MAddress2,omitempty" url:"MAddress2,omitempty"`
	Mccid                        *string                       `json:"Mccid,omitempty" url:"Mccid,omitempty"`
	MCity                        *Mcity                        `json:"MCity,omitempty" url:"MCity,omitempty"`
	MCountry                     *Mcountry                     `json:"MCountry,omitempty" url:"MCountry,omitempty"`
	MState                       *Mstate                       `json:"MState,omitempty" url:"MState,omitempty"`
	MZip                         *Mzip                         `json:"MZip,omitempty" url:"MZip,omitempty"`
	OrgId                        *Orgid                        `json:"OrgId,omitempty" url:"OrgId,omitempty"`
	OrgParentName                *OrgParentName                `json:"OrgParentName,omitempty" url:"OrgParentName,omitempty"`
	OwnerData                    *Ownership                    `json:"OwnerData,omitempty" url:"OwnerData,omitempty"`
	OwnType                      *OwnType                      `json:"OwnType,omitempty" url:"OwnType,omitempty"`
	PaypointStatus               *Paypointstatus               `json:"PaypointStatus,omitempty" url:"PaypointStatus,omitempty"`
	SalesCode                    *SalesCode                    `json:"SalesCode,omitempty" url:"SalesCode,omitempty"`
	ServiceData                  *Services                     `json:"ServiceData,omitempty" url:"ServiceData,omitempty"`
	Summary                      *PaypointSummary              `json:"summary,omitempty" url:"summary,omitempty"`
	Taxfillname                  *Taxfillname                  `json:"Taxfillname,omitempty" url:"Taxfillname,omitempty"`
	TemplateId                   *TemplateId                   `json:"TemplateId,omitempty" url:"TemplateId,omitempty"`
	// Business website.
	WebsiteAddress *Website       `json:"WebsiteAddress,omitempty" url:"WebsiteAddress,omitempty"`
	Whencharged    *Whencharged   `json:"Whencharged,omitempty" url:"Whencharged,omitempty"`
	Whendelivered  *Whendelivered `json:"Whendelivered,omitempty" url:"Whendelivered,omitempty"`
	Whenprovided   *Whenprovided  `json:"Whenprovided,omitempty" url:"Whenprovided,omitempty"`
	Whenrefund     *Whenrefunded  `json:"Whenrefund,omitempty" url:"Whenrefund,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryEntrypointResponseRecordsItem) GetAverageMonthlyVolume() *Avgmonthly {
	if q == nil {
		return nil
	}
	return q.AverageMonthlyVolume
}

func (q *QueryEntrypointResponseRecordsItem) GetAverageTicketAmount() *Avgticketamt {
	if q == nil {
		return nil
	}
	return q.AverageTicketAmount
}

func (q *QueryEntrypointResponseRecordsItem) GetBAddress1() *Baddress1 {
	if q == nil {
		return nil
	}
	return q.BAddress1
}

func (q *QueryEntrypointResponseRecordsItem) GetBAddress2() *Baddress2 {
	if q == nil {
		return nil
	}
	return q.BAddress2
}

func (q *QueryEntrypointResponseRecordsItem) GetBankData() *BankData {
	if q == nil {
		return nil
	}
	return q.BankData
}

func (q *QueryEntrypointResponseRecordsItem) GetBCity() *Bcity {
	if q == nil {
		return nil
	}
	return q.BCity
}

func (q *QueryEntrypointResponseRecordsItem) GetBCountry() *Bcountry {
	if q == nil {
		return nil
	}
	return q.BCountry
}

func (q *QueryEntrypointResponseRecordsItem) GetBFax() *Bphone {
	if q == nil {
		return nil
	}
	return q.BFax
}

func (q *QueryEntrypointResponseRecordsItem) GetBinPerson() *Binperson {
	if q == nil {
		return nil
	}
	return q.BinPerson
}

func (q *QueryEntrypointResponseRecordsItem) GetBinPhone() *Binphone {
	if q == nil {
		return nil
	}
	return q.BinPhone
}

func (q *QueryEntrypointResponseRecordsItem) GetBinWeb() *Binweb {
	if q == nil {
		return nil
	}
	return q.BinWeb
}

func (q *QueryEntrypointResponseRecordsItem) GetBoardingId() *BoardingId {
	if q == nil {
		return nil
	}
	return q.BoardingId
}

func (q *QueryEntrypointResponseRecordsItem) GetBPhone() *Bphone {
	if q == nil {
		return nil
	}
	return q.BPhone
}

func (q *QueryEntrypointResponseRecordsItem) GetBStartdate() *Busstartdate {
	if q == nil {
		return nil
	}
	return q.BStartdate
}

func (q *QueryEntrypointResponseRecordsItem) GetBState() *Bstate {
	if q == nil {
		return nil
	}
	return q.BState
}

func (q *QueryEntrypointResponseRecordsItem) GetBSummary() *Bsummary {
	if q == nil {
		return nil
	}
	return q.BSummary
}

func (q *QueryEntrypointResponseRecordsItem) GetBTimeZone() *Timezone {
	if q == nil {
		return nil
	}
	return q.BTimeZone
}

func (q *QueryEntrypointResponseRecordsItem) GetBZip() *Bzip {
	if q == nil {
		return nil
	}
	return q.BZip
}

func (q *QueryEntrypointResponseRecordsItem) GetContactData() *ContactsField {
	if q == nil {
		return nil
	}
	return q.ContactData
}

func (q *QueryEntrypointResponseRecordsItem) GetCreatedAt() *CreatedAt {
	if q == nil {
		return nil
	}
	return q.CreatedAt
}

func (q *QueryEntrypointResponseRecordsItem) GetDbaName() *Dbaname {
	if q == nil {
		return nil
	}
	return q.DbaName
}

func (q *QueryEntrypointResponseRecordsItem) GetDocumentsRef() *string {
	if q == nil {
		return nil
	}
	return q.DocumentsRef
}

func (q *QueryEntrypointResponseRecordsItem) GetEin() *Ein {
	if q == nil {
		return nil
	}
	return q.Ein
}

func (q *QueryEntrypointResponseRecordsItem) GetEntryPoints() []*PaypointEntryConfig {
	if q == nil {
		return nil
	}
	return q.EntryPoints
}

func (q *QueryEntrypointResponseRecordsItem) GetExternalPaypointId() *ExternalPaypointId {
	if q == nil {
		return nil
	}
	return q.ExternalPaypointId
}

func (q *QueryEntrypointResponseRecordsItem) GetExternalProcessorInformation() *ExternalProcessorInformation {
	if q == nil {
		return nil
	}
	return q.ExternalProcessorInformation
}

func (q *QueryEntrypointResponseRecordsItem) GetHighTicketAmount() *Highticketamt {
	if q == nil {
		return nil
	}
	return q.HighTicketAmount
}

func (q *QueryEntrypointResponseRecordsItem) GetIdPaypoint() *Idpaypoint {
	if q == nil {
		return nil
	}
	return q.IdPaypoint
}

func (q *QueryEntrypointResponseRecordsItem) GetLastModified() *LastModified {
	if q == nil {
		return nil
	}
	return q.LastModified
}

func (q *QueryEntrypointResponseRecordsItem) GetLegalName() *Legalname {
	if q == nil {
		return nil
	}
	return q.LegalName
}

func (q *QueryEntrypointResponseRecordsItem) GetLicense() *License {
	if q == nil {
		return nil
	}
	return q.License
}

func (q *QueryEntrypointResponseRecordsItem) GetLicenseState() *Licensestate {
	if q == nil {
		return nil
	}
	return q.LicenseState
}

func (q *QueryEntrypointResponseRecordsItem) GetMAddress1() *Maddress {
	if q == nil {
		return nil
	}
	return q.MAddress1
}

func (q *QueryEntrypointResponseRecordsItem) GetMAddress2() *Maddress1 {
	if q == nil {
		return nil
	}
	return q.MAddress2
}

func (q *QueryEntrypointResponseRecordsItem) GetMccid() *string {
	if q == nil {
		return nil
	}
	return q.Mccid
}

func (q *QueryEntrypointResponseRecordsItem) GetMCity() *Mcity {
	if q == nil {
		return nil
	}
	return q.MCity
}

func (q *QueryEntrypointResponseRecordsItem) GetMCountry() *Mcountry {
	if q == nil {
		return nil
	}
	return q.MCountry
}

func (q *QueryEntrypointResponseRecordsItem) GetMState() *Mstate {
	if q == nil {
		return nil
	}
	return q.MState
}

func (q *QueryEntrypointResponseRecordsItem) GetMZip() *Mzip {
	if q == nil {
		return nil
	}
	return q.MZip
}

func (q *QueryEntrypointResponseRecordsItem) GetOrgId() *Orgid {
	if q == nil {
		return nil
	}
	return q.OrgId
}

func (q *QueryEntrypointResponseRecordsItem) GetOrgParentName() *OrgParentName {
	if q == nil {
		return nil
	}
	return q.OrgParentName
}

func (q *QueryEntrypointResponseRecordsItem) GetOwnerData() *Ownership {
	if q == nil {
		return nil
	}
	return q.OwnerData
}

func (q *QueryEntrypointResponseRecordsItem) GetOwnType() *OwnType {
	if q == nil {
		return nil
	}
	return q.OwnType
}

func (q *QueryEntrypointResponseRecordsItem) GetPaypointStatus() *Paypointstatus {
	if q == nil {
		return nil
	}
	return q.PaypointStatus
}

func (q *QueryEntrypointResponseRecordsItem) GetSalesCode() *SalesCode {
	if q == nil {
		return nil
	}
	return q.SalesCode
}

func (q *QueryEntrypointResponseRecordsItem) GetServiceData() *Services {
	if q == nil {
		return nil
	}
	return q.ServiceData
}

func (q *QueryEntrypointResponseRecordsItem) GetSummary() *PaypointSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryEntrypointResponseRecordsItem) GetTaxfillname() *Taxfillname {
	if q == nil {
		return nil
	}
	return q.Taxfillname
}

func (q *QueryEntrypointResponseRecordsItem) GetTemplateId() *TemplateId {
	if q == nil {
		return nil
	}
	return q.TemplateId
}

func (q *QueryEntrypointResponseRecordsItem) GetWebsiteAddress() *Website {
	if q == nil {
		return nil
	}
	return q.WebsiteAddress
}

func (q *QueryEntrypointResponseRecordsItem) GetWhencharged() *Whencharged {
	if q == nil {
		return nil
	}
	return q.Whencharged
}

func (q *QueryEntrypointResponseRecordsItem) GetWhendelivered() *Whendelivered {
	if q == nil {
		return nil
	}
	return q.Whendelivered
}

func (q *QueryEntrypointResponseRecordsItem) GetWhenprovided() *Whenprovided {
	if q == nil {
		return nil
	}
	return q.Whenprovided
}

func (q *QueryEntrypointResponseRecordsItem) GetWhenrefund() *Whenrefunded {
	if q == nil {
		return nil
	}
	return q.Whenrefund
}

func (q *QueryEntrypointResponseRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryEntrypointResponseRecordsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryEntrypointResponseRecordsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryEntrypointResponseRecordsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryEntrypointResponseRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryPayoutTransaction struct {
	Records []*QueryPayoutTransactionRecordsItem `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QueryPayoutTransactionSummary       `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryPayoutTransaction) GetRecords() []*QueryPayoutTransactionRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryPayoutTransaction) GetSummary() *QueryPayoutTransactionSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryPayoutTransaction) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryPayoutTransaction) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryPayoutTransaction
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryPayoutTransaction(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryPayoutTransaction) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryPayoutTransactionRecordsItem struct {
	BatchNumber *BatchNumber `json:"BatchNumber,omitempty" url:"BatchNumber,omitempty"`
	// Identifier of the batch associated with payout transaction.
	BatchId *int `json:"BatchId,omitempty" url:"BatchId,omitempty"`
	// Events associated with this transaction.
	Bills     []*BillPayOutData `json:"Bills,omitempty" url:"Bills,omitempty"`
	CardToken *string           `json:"CardToken,omitempty" url:"CardToken,omitempty"`
	// Object referencing paper check image.
	CheckData *FileContent `json:"CheckData,omitempty" url:"CheckData,omitempty"`
	// Paper check number related to payout transaction.
	CheckNumber *string `json:"CheckNumber,omitempty" url:"CheckNumber,omitempty"`
	// Any comment or description for payout transaction.
	Comments *Comments `json:"Comments,omitempty" url:"Comments,omitempty"`
	// Timestamp when the payment was created, in UTC.
	CreatedAt *CreatedAt       `json:"CreatedAt,omitempty" url:"CreatedAt,omitempty"`
	EntryName *Entrypointfield `json:"EntryName,omitempty" url:"EntryName,omitempty"`
	// Events associated with this transaction.
	Events               []*QueryTransactionEvents `json:"Events,omitempty" url:"Events,omitempty"`
	ExternalPaypointId   *ExternalPaypointId       `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	FeeAmount            *FeeAmount                `json:"FeeAmount,omitempty" url:"FeeAmount,omitempty"`
	Gateway              *Gatewayfield             `json:"Gateway,omitempty" url:"Gateway,omitempty"`
	HasVcardTransactions *HasVcardTransactions     `json:"HasVcardTransactions,omitempty" url:"HasVcardTransactions,omitempty"`
	// Identifier of payout transaction.
	IdOut        *int64        `json:"IdOut,omitempty" url:"IdOut,omitempty"`
	IsSameDayAch *IsSameDayAch `json:"IsSameDayACH,omitempty" url:"IsSameDayACH,omitempty"`
	// Timestamp when payment record was updated.
	LastUpdated *LastModified `json:"LastUpdated,omitempty" url:"LastUpdated,omitempty"`
	// Net amount paid.
	NetAmount     *Netamountnullable                            `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	ParentOrgName *OrgParentName                                `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	ParentOrgId   *OrgParentId                                  `json:"ParentOrgId,omitempty" url:"ParentOrgId,omitempty"`
	PaymentData   *QueryPayoutTransactionRecordsItemPaymentData `json:"PaymentData,omitempty" url:"PaymentData,omitempty"`
	PaymentId     *Paymentid                                    `json:"PaymentId,omitempty" url:"PaymentId,omitempty"`
	// The payment method for the transaction.
	PaymentMethod *string `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	// Status of payout transaction. See [Payout Transaction Statuses](guides/money-out-statuses#payout-transaction-statuses) for a full reference.
	PaymentStatus   *string        `json:"PaymentStatus,omitempty" url:"PaymentStatus,omitempty"`
	PayoutProgram   *PayoutProgram `json:"PayoutProgram,omitempty" url:"PayoutProgram,omitempty"`
	PaypointDbaname *Dbaname       `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// Paypoint legal name.
	PaypointLegalname *Legalname              `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	RiskAction        *RiskAction             `json:"RiskAction,omitempty" url:"RiskAction,omitempty"`
	RiskActionCode    *RiskActionCode         `json:"RiskActionCode,omitempty" url:"RiskActionCode,omitempty"`
	RiskFlagged       *RiskFlagged            `json:"RiskFlagged,omitempty" url:"RiskFlagged,omitempty"`
	RiskFlaggedOn     *RiskFlaggedOn          `json:"RiskFlaggedOn,omitempty" url:"RiskFlaggedOn,omitempty"`
	RiskReason        *RiskReason             `json:"RiskReason,omitempty" url:"RiskReason,omitempty"`
	RiskStatus        *RiskStatus             `json:"RiskStatus,omitempty" url:"RiskStatus,omitempty"`
	ScheduleId        *ScheduleId             `json:"ScheduleId,omitempty" url:"ScheduleId,omitempty"`
	SettlementStatus  *SettlementStatusPayout `json:"SettlementStatus,omitempty" url:"SettlementStatus,omitempty"`
	Source            *Source                 `json:"Source,omitempty" url:"Source,omitempty"`
	// Internal status of transaction.
	Status *int `json:"Status,omitempty" url:"Status,omitempty"`
	// Transaction total amount (including service fee or sub-charge).
	TotalAmount *float64 `json:"TotalAmount,omitempty" url:"TotalAmount,omitempty"`
	// Vendor related to the payout transaction.
	Vendor *VendorQueryRecord `json:"Vendor,omitempty" url:"Vendor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryPayoutTransactionRecordsItem) GetBatchNumber() *BatchNumber {
	if q == nil {
		return nil
	}
	return q.BatchNumber
}

func (q *QueryPayoutTransactionRecordsItem) GetBatchId() *int {
	if q == nil {
		return nil
	}
	return q.BatchId
}

func (q *QueryPayoutTransactionRecordsItem) GetBills() []*BillPayOutData {
	if q == nil {
		return nil
	}
	return q.Bills
}

func (q *QueryPayoutTransactionRecordsItem) GetCardToken() *string {
	if q == nil {
		return nil
	}
	return q.CardToken
}

func (q *QueryPayoutTransactionRecordsItem) GetCheckData() *FileContent {
	if q == nil {
		return nil
	}
	return q.CheckData
}

func (q *QueryPayoutTransactionRecordsItem) GetCheckNumber() *string {
	if q == nil {
		return nil
	}
	return q.CheckNumber
}

func (q *QueryPayoutTransactionRecordsItem) GetComments() *Comments {
	if q == nil {
		return nil
	}
	return q.Comments
}

func (q *QueryPayoutTransactionRecordsItem) GetCreatedAt() *CreatedAt {
	if q == nil {
		return nil
	}
	return q.CreatedAt
}

func (q *QueryPayoutTransactionRecordsItem) GetEntryName() *Entrypointfield {
	if q == nil {
		return nil
	}
	return q.EntryName
}

func (q *QueryPayoutTransactionRecordsItem) GetEvents() []*QueryTransactionEvents {
	if q == nil {
		return nil
	}
	return q.Events
}

func (q *QueryPayoutTransactionRecordsItem) GetExternalPaypointId() *ExternalPaypointId {
	if q == nil {
		return nil
	}
	return q.ExternalPaypointId
}

func (q *QueryPayoutTransactionRecordsItem) GetFeeAmount() *FeeAmount {
	if q == nil {
		return nil
	}
	return q.FeeAmount
}

func (q *QueryPayoutTransactionRecordsItem) GetGateway() *Gatewayfield {
	if q == nil {
		return nil
	}
	return q.Gateway
}

func (q *QueryPayoutTransactionRecordsItem) GetHasVcardTransactions() *HasVcardTransactions {
	if q == nil {
		return nil
	}
	return q.HasVcardTransactions
}

func (q *QueryPayoutTransactionRecordsItem) GetIdOut() *int64 {
	if q == nil {
		return nil
	}
	return q.IdOut
}

func (q *QueryPayoutTransactionRecordsItem) GetIsSameDayAch() *IsSameDayAch {
	if q == nil {
		return nil
	}
	return q.IsSameDayAch
}

func (q *QueryPayoutTransactionRecordsItem) GetLastUpdated() *LastModified {
	if q == nil {
		return nil
	}
	return q.LastUpdated
}

func (q *QueryPayoutTransactionRecordsItem) GetNetAmount() *Netamountnullable {
	if q == nil {
		return nil
	}
	return q.NetAmount
}

func (q *QueryPayoutTransactionRecordsItem) GetParentOrgName() *OrgParentName {
	if q == nil {
		return nil
	}
	return q.ParentOrgName
}

func (q *QueryPayoutTransactionRecordsItem) GetParentOrgId() *OrgParentId {
	if q == nil {
		return nil
	}
	return q.ParentOrgId
}

func (q *QueryPayoutTransactionRecordsItem) GetPaymentData() *QueryPayoutTransactionRecordsItemPaymentData {
	if q == nil {
		return nil
	}
	return q.PaymentData
}

func (q *QueryPayoutTransactionRecordsItem) GetPaymentId() *Paymentid {
	if q == nil {
		return nil
	}
	return q.PaymentId
}

func (q *QueryPayoutTransactionRecordsItem) GetPaymentMethod() *string {
	if q == nil {
		return nil
	}
	return q.PaymentMethod
}

func (q *QueryPayoutTransactionRecordsItem) GetPaymentStatus() *string {
	if q == nil {
		return nil
	}
	return q.PaymentStatus
}

func (q *QueryPayoutTransactionRecordsItem) GetPayoutProgram() *PayoutProgram {
	if q == nil {
		return nil
	}
	return q.PayoutProgram
}

func (q *QueryPayoutTransactionRecordsItem) GetPaypointDbaname() *Dbaname {
	if q == nil {
		return nil
	}
	return q.PaypointDbaname
}

func (q *QueryPayoutTransactionRecordsItem) GetPaypointLegalname() *Legalname {
	if q == nil {
		return nil
	}
	return q.PaypointLegalname
}

func (q *QueryPayoutTransactionRecordsItem) GetRiskAction() *RiskAction {
	if q == nil {
		return nil
	}
	return q.RiskAction
}

func (q *QueryPayoutTransactionRecordsItem) GetRiskActionCode() *RiskActionCode {
	if q == nil {
		return nil
	}
	return q.RiskActionCode
}

func (q *QueryPayoutTransactionRecordsItem) GetRiskFlagged() *RiskFlagged {
	if q == nil {
		return nil
	}
	return q.RiskFlagged
}

func (q *QueryPayoutTransactionRecordsItem) GetRiskFlaggedOn() *RiskFlaggedOn {
	if q == nil {
		return nil
	}
	return q.RiskFlaggedOn
}

func (q *QueryPayoutTransactionRecordsItem) GetRiskReason() *RiskReason {
	if q == nil {
		return nil
	}
	return q.RiskReason
}

func (q *QueryPayoutTransactionRecordsItem) GetRiskStatus() *RiskStatus {
	if q == nil {
		return nil
	}
	return q.RiskStatus
}

func (q *QueryPayoutTransactionRecordsItem) GetScheduleId() *ScheduleId {
	if q == nil {
		return nil
	}
	return q.ScheduleId
}

func (q *QueryPayoutTransactionRecordsItem) GetSettlementStatus() *SettlementStatusPayout {
	if q == nil {
		return nil
	}
	return q.SettlementStatus
}

func (q *QueryPayoutTransactionRecordsItem) GetSource() *Source {
	if q == nil {
		return nil
	}
	return q.Source
}

func (q *QueryPayoutTransactionRecordsItem) GetStatus() *int {
	if q == nil {
		return nil
	}
	return q.Status
}

func (q *QueryPayoutTransactionRecordsItem) GetTotalAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalAmount
}

func (q *QueryPayoutTransactionRecordsItem) GetVendor() *VendorQueryRecord {
	if q == nil {
		return nil
	}
	return q.Vendor
}

func (q *QueryPayoutTransactionRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryPayoutTransactionRecordsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryPayoutTransactionRecordsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryPayoutTransactionRecordsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryPayoutTransactionRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryPayoutTransactionRecordsItemPaymentData struct {
	AccountExp           *Accountexp             `json:"AccountExp,omitempty" url:"AccountExp,omitempty"`
	AccountId            *Accountid              `json:"accountId,omitempty" url:"accountId,omitempty"`
	AccountType          *Accounttype            `json:"AccountType,omitempty" url:"AccountType,omitempty"`
	AccountZip           *Accountzip             `json:"AccountZip,omitempty" url:"AccountZip,omitempty"`
	BankAccount          *string                 `json:"bankAccount,omitempty" url:"bankAccount,omitempty"`
	BinData              *BinData                `json:"binData,omitempty" url:"binData,omitempty"`
	CloudSignatureData   *string                 `json:"cloudSignatureData,omitempty" url:"cloudSignatureData,omitempty"`
	CloudSignatureFormat *string                 `json:"cloudSignatureFormat,omitempty" url:"cloudSignatureFormat,omitempty"`
	GatewayConnector     *PayoutGatewayConnector `json:"gatewayConnector,omitempty" url:"gatewayConnector,omitempty"`
	// Card or bank account holder name.
	HolderName       *Holdername       `json:"HolderName,omitempty" url:"HolderName,omitempty"`
	Initiator        *Initiator        `json:"Initiator,omitempty" url:"Initiator,omitempty"`
	MaskedAccount    *Maskedaccount    `json:"MaskedAccount,omitempty" url:"MaskedAccount,omitempty"`
	OrderDescription *Orderdescription `json:"orderDescription,omitempty" url:"orderDescription,omitempty"`
	PaymentDetails   *PaymentDetail    `json:"paymentDetails,omitempty" url:"paymentDetails,omitempty"`
	PayorData        *string           `json:"payorData,omitempty" url:"payorData,omitempty"`
	Sequence         *Sequence         `json:"Sequence,omitempty" url:"Sequence,omitempty"`
	// Identifier of stored payment method used in transaction.
	StoredId              *Storedmethodid        `json:"StoredId,omitempty" url:"StoredId,omitempty"`
	StoredMethodUsageType *StoredMethodUsageType `json:"StoredMethodUsageType,omitempty" url:"StoredMethodUsageType,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetAccountExp() *Accountexp {
	if q == nil {
		return nil
	}
	return q.AccountExp
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetAccountId() *Accountid {
	if q == nil {
		return nil
	}
	return q.AccountId
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetAccountType() *Accounttype {
	if q == nil {
		return nil
	}
	return q.AccountType
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetAccountZip() *Accountzip {
	if q == nil {
		return nil
	}
	return q.AccountZip
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetBankAccount() *string {
	if q == nil {
		return nil
	}
	return q.BankAccount
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetBinData() *BinData {
	if q == nil {
		return nil
	}
	return q.BinData
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetCloudSignatureData() *string {
	if q == nil {
		return nil
	}
	return q.CloudSignatureData
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetCloudSignatureFormat() *string {
	if q == nil {
		return nil
	}
	return q.CloudSignatureFormat
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetGatewayConnector() *PayoutGatewayConnector {
	if q == nil {
		return nil
	}
	return q.GatewayConnector
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetHolderName() *Holdername {
	if q == nil {
		return nil
	}
	return q.HolderName
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetInitiator() *Initiator {
	if q == nil {
		return nil
	}
	return q.Initiator
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetMaskedAccount() *Maskedaccount {
	if q == nil {
		return nil
	}
	return q.MaskedAccount
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetOrderDescription() *Orderdescription {
	if q == nil {
		return nil
	}
	return q.OrderDescription
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetPaymentDetails() *PaymentDetail {
	if q == nil {
		return nil
	}
	return q.PaymentDetails
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetPayorData() *string {
	if q == nil {
		return nil
	}
	return q.PayorData
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetSequence() *Sequence {
	if q == nil {
		return nil
	}
	return q.Sequence
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetStoredId() *Storedmethodid {
	if q == nil {
		return nil
	}
	return q.StoredId
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetStoredMethodUsageType() *StoredMethodUsageType {
	if q == nil {
		return nil
	}
	return q.StoredMethodUsageType
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryPayoutTransactionRecordsItemPaymentData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryPayoutTransactionRecordsItemPaymentData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryPayoutTransactionRecordsItemPaymentData) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryPayoutTransactionSummary struct {
	PageIdentifier        *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	PageSize              *Pagesize       `json:"pageSize,omitempty" url:"pageSize,omitempty"`
	TotalAmount           *float64        `json:"totalAmount,omitempty" url:"totalAmount,omitempty"`
	TotalAuthorized       *int            `json:"totalAuthorized,omitempty" url:"totalAuthorized,omitempty"`
	TotalAuthorizedAmount *float64        `json:"totalAuthorizedAmount,omitempty" url:"totalAuthorizedAmount,omitempty"`
	TotalCanceled         *int            `json:"totalCanceled,omitempty" url:"totalCanceled,omitempty"`
	TotalCanceledAmount   *float64        `json:"totalCanceledAmount,omitempty" url:"totalCanceledAmount,omitempty"`
	TotalCaptured         *int            `json:"totalCaptured,omitempty" url:"totalCaptured,omitempty"`
	TotalCapturedAmount   *float64        `json:"totalCapturedAmount,omitempty" url:"totalCapturedAmount,omitempty"`
	TotalNetAmount        *float64        `json:"totalNetAmount,omitempty" url:"totalNetAmount,omitempty"`
	TotalOpen             *int            `json:"totalOpen,omitempty" url:"totalOpen,omitempty"`
	TotalOpenAmount       *float64        `json:"totalOpenAmount,omitempty" url:"totalOpenAmount,omitempty"`
	TotalPages            *int            `json:"totalPages,omitempty" url:"totalPages,omitempty"`
	TotalPaid             *int            `json:"totalPaid,omitempty" url:"totalPaid,omitempty"`
	TotalPaidAmount       *float64        `json:"totalPaidAmount,omitempty" url:"totalPaidAmount,omitempty"`
	// Total number of transactions that are currently on hold.
	TotalOnHold *int `json:"totalOnHold,omitempty" url:"totalOnHold,omitempty"`
	// Total amount of transactions that are currently on hold.
	TotalOnHoldAmount     *float64 `json:"totalOnHoldAmount,omitempty" url:"totalOnHoldAmount,omitempty"`
	TotalProcessing       *int     `json:"totalProcessing,omitempty" url:"totalProcessing,omitempty"`
	TotalProcessingAmount *float64 `json:"totalProcessingAmount,omitempty" url:"totalProcessingAmount,omitempty"`
	TotalRecords          *int     `json:"totalRecords,omitempty" url:"totalRecords,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryPayoutTransactionSummary) GetPageIdentifier() *PageIdentifier {
	if q == nil {
		return nil
	}
	return q.PageIdentifier
}

func (q *QueryPayoutTransactionSummary) GetPageSize() *Pagesize {
	if q == nil {
		return nil
	}
	return q.PageSize
}

func (q *QueryPayoutTransactionSummary) GetTotalAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalAmount
}

func (q *QueryPayoutTransactionSummary) GetTotalAuthorized() *int {
	if q == nil {
		return nil
	}
	return q.TotalAuthorized
}

func (q *QueryPayoutTransactionSummary) GetTotalAuthorizedAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalAuthorizedAmount
}

func (q *QueryPayoutTransactionSummary) GetTotalCanceled() *int {
	if q == nil {
		return nil
	}
	return q.TotalCanceled
}

func (q *QueryPayoutTransactionSummary) GetTotalCanceledAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalCanceledAmount
}

func (q *QueryPayoutTransactionSummary) GetTotalCaptured() *int {
	if q == nil {
		return nil
	}
	return q.TotalCaptured
}

func (q *QueryPayoutTransactionSummary) GetTotalCapturedAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalCapturedAmount
}

func (q *QueryPayoutTransactionSummary) GetTotalNetAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalNetAmount
}

func (q *QueryPayoutTransactionSummary) GetTotalOpen() *int {
	if q == nil {
		return nil
	}
	return q.TotalOpen
}

func (q *QueryPayoutTransactionSummary) GetTotalOpenAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalOpenAmount
}

func (q *QueryPayoutTransactionSummary) GetTotalPages() *int {
	if q == nil {
		return nil
	}
	return q.TotalPages
}

func (q *QueryPayoutTransactionSummary) GetTotalPaid() *int {
	if q == nil {
		return nil
	}
	return q.TotalPaid
}

func (q *QueryPayoutTransactionSummary) GetTotalPaidAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalPaidAmount
}

func (q *QueryPayoutTransactionSummary) GetTotalOnHold() *int {
	if q == nil {
		return nil
	}
	return q.TotalOnHold
}

func (q *QueryPayoutTransactionSummary) GetTotalOnHoldAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalOnHoldAmount
}

func (q *QueryPayoutTransactionSummary) GetTotalProcessing() *int {
	if q == nil {
		return nil
	}
	return q.TotalProcessing
}

func (q *QueryPayoutTransactionSummary) GetTotalProcessingAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalProcessingAmount
}

func (q *QueryPayoutTransactionSummary) GetTotalRecords() *int {
	if q == nil {
		return nil
	}
	return q.TotalRecords
}

func (q *QueryPayoutTransactionSummary) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryPayoutTransactionSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryPayoutTransactionSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryPayoutTransactionSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryPayoutTransactionSummary) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryResponseNotificationReports struct {
	Records []*QueryResponseNotificationReportsRecordsItem `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary                                  `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryResponseNotificationReports) GetRecords() []*QueryResponseNotificationReportsRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryResponseNotificationReports) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryResponseNotificationReports) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryResponseNotificationReports) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryResponseNotificationReports
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryResponseNotificationReports(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryResponseNotificationReports) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryResponseNotificationReportsRecordsItem struct {
	CreatedAt *CreatedAt `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	// Unique identifier for the report.
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Indicator of whether the report can be downloaded.
	IsDownloadable *bool `json:"isDownloadable,omitempty" url:"isDownloadable,omitempty"`
	// Name of the report.
	ReportName *string `json:"reportName,omitempty" url:"reportName,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryResponseNotificationReportsRecordsItem) GetCreatedAt() *CreatedAt {
	if q == nil {
		return nil
	}
	return q.CreatedAt
}

func (q *QueryResponseNotificationReportsRecordsItem) GetId() *int {
	if q == nil {
		return nil
	}
	return q.Id
}

func (q *QueryResponseNotificationReportsRecordsItem) GetIsDownloadable() *bool {
	if q == nil {
		return nil
	}
	return q.IsDownloadable
}

func (q *QueryResponseNotificationReportsRecordsItem) GetReportName() *string {
	if q == nil {
		return nil
	}
	return q.ReportName
}

func (q *QueryResponseNotificationReportsRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryResponseNotificationReportsRecordsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryResponseNotificationReportsRecordsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryResponseNotificationReportsRecordsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryResponseNotificationReportsRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Response payload for queries related to notifications
type QueryResponseNotifications struct {
	Records []*QueryResponseNotificationsRecordsItem `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary                            `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryResponseNotifications) GetRecords() []*QueryResponseNotificationsRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryResponseNotifications) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryResponseNotifications) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryResponseNotifications) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryResponseNotifications
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryResponseNotifications(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryResponseNotifications) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryResponseNotificationsRecordsItem struct {
	// Notification content.
	Content *NotificationContent `json:"content,omitempty" url:"content,omitempty"`
	// Timestamp of when notification was created, in UTC.
	CreatedAt *CreatedAt             `json:"createdAt,omitempty" url:"createdAt,omitempty"`
	Frequency *Frequencynotification `json:"frequency,omitempty" url:"frequency,omitempty"`
	// Timestamp of when notification was last updated, in UTC.
	LastUpdated    *LastModified       `json:"lastUpdated,omitempty" url:"lastUpdated,omitempty"`
	Method         *Methodnotification `json:"method,omitempty" url:"method,omitempty"`
	NotificationId *NotificationId     `json:"notificationId,omitempty" url:"notificationId,omitempty"`
	OwnerId        *Ownerid            `json:"ownerId,omitempty" url:"ownerId,omitempty"`
	// Name of entity owner of notification.
	OwnerName *string    `json:"ownerName,omitempty" url:"ownerName,omitempty"`
	OwnerType *Ownertype `json:"ownerType,omitempty" url:"ownerType,omitempty"`
	// Custom descriptor of source of notification.
	Source *Source             `json:"source,omitempty" url:"source,omitempty"`
	Status *Statusnotification `json:"status,omitempty" url:"status,omitempty"`
	Target *Target             `json:"target,omitempty" url:"target,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryResponseNotificationsRecordsItem) GetContent() *NotificationContent {
	if q == nil {
		return nil
	}
	return q.Content
}

func (q *QueryResponseNotificationsRecordsItem) GetCreatedAt() *CreatedAt {
	if q == nil {
		return nil
	}
	return q.CreatedAt
}

func (q *QueryResponseNotificationsRecordsItem) GetFrequency() *Frequencynotification {
	if q == nil {
		return nil
	}
	return q.Frequency
}

func (q *QueryResponseNotificationsRecordsItem) GetLastUpdated() *LastModified {
	if q == nil {
		return nil
	}
	return q.LastUpdated
}

func (q *QueryResponseNotificationsRecordsItem) GetMethod() *Methodnotification {
	if q == nil {
		return nil
	}
	return q.Method
}

func (q *QueryResponseNotificationsRecordsItem) GetNotificationId() *NotificationId {
	if q == nil {
		return nil
	}
	return q.NotificationId
}

func (q *QueryResponseNotificationsRecordsItem) GetOwnerId() *Ownerid {
	if q == nil {
		return nil
	}
	return q.OwnerId
}

func (q *QueryResponseNotificationsRecordsItem) GetOwnerName() *string {
	if q == nil {
		return nil
	}
	return q.OwnerName
}

func (q *QueryResponseNotificationsRecordsItem) GetOwnerType() *Ownertype {
	if q == nil {
		return nil
	}
	return q.OwnerType
}

func (q *QueryResponseNotificationsRecordsItem) GetSource() *Source {
	if q == nil {
		return nil
	}
	return q.Source
}

func (q *QueryResponseNotificationsRecordsItem) GetStatus() *Statusnotification {
	if q == nil {
		return nil
	}
	return q.Status
}

func (q *QueryResponseNotificationsRecordsItem) GetTarget() *Target {
	if q == nil {
		return nil
	}
	return q.Target
}

func (q *QueryResponseNotificationsRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryResponseNotificationsRecordsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryResponseNotificationsRecordsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryResponseNotificationsRecordsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryResponseNotificationsRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Describes the response for settlement queries.
type QueryResponseSettlements struct {
	Records []*QueryResponseSettlementsRecordsItem `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QueryResponseSettlementsSummary       `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryResponseSettlements) GetRecords() []*QueryResponseSettlementsRecordsItem {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryResponseSettlements) GetSummary() *QueryResponseSettlementsSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryResponseSettlements) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryResponseSettlements) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryResponseSettlements
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryResponseSettlements(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryResponseSettlements) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryResponseSettlementsRecordsItem struct {
	// The batch amount.
	BatchAmount         *float64                   `json:"BatchAmount,omitempty" url:"BatchAmount,omitempty"`
	BatchNumber         *BatchNumber               `json:"BatchNumber,omitempty" url:"BatchNumber,omitempty"`
	Category            *Category                  `json:"Category,omitempty" url:"Category,omitempty"`
	CreatedAt           *CreatedAt                 `json:"CreatedAt,omitempty" url:"CreatedAt,omitempty"`
	Customer            *QueryTransactionPayorData `json:"Customer,omitempty" url:"Customer,omitempty"`
	DepositDate         *DepositDate               `json:"DepositDate,omitempty" url:"DepositDate,omitempty"`
	ExpectedDepositDate *ExpectedDepositDate       `json:"ExpectedDepositDate,omitempty" url:"ExpectedDepositDate,omitempty"`
	ExternalPaypointId  *ExternalPaypointId        `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// Internal identifier used for processing.
	GatewayTransId *string   `json:"GatewayTransId,omitempty" url:"GatewayTransId,omitempty"`
	Id             *int      `json:"Id,omitempty" url:"Id,omitempty"`
	InvoiceData    *BillData `json:"invoiceData,omitempty" url:"invoiceData,omitempty"`
	// Describes whether the transaction is being held or not.
	//
	// 1 - Transaction is held
	//
	// 0 - Transaction isn't being held
	IsHold        *int           `json:"isHold,omitempty" url:"isHold,omitempty"`
	MaskedAccount *Maskedaccount `json:"MaskedAccount,omitempty" url:"MaskedAccount,omitempty"`
	// The payment method.
	Method *string `json:"Method,omitempty" url:"Method,omitempty"`
	// Net amount paid.
	NetAmount *Netamountnullable `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	// The operation performed.
	Operation     *string           `json:"Operation,omitempty" url:"Operation,omitempty"`
	OrderId       *Orderid          `json:"OrderId,omitempty" url:"OrderId,omitempty"`
	ParentOrgName *OrgParentName    `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	PaymentData   *QueryPaymentData `json:"PaymentData,omitempty" url:"PaymentData,omitempty"`
	// The transaction ID for the payment.
	PaymentTransId     *string      `json:"PaymentTransId,omitempty" url:"PaymentTransId,omitempty"`
	PaymentTransStatus *TransStatus `json:"PaymentTransStatus,omitempty" url:"PaymentTransStatus,omitempty"`
	// Paypoint DBA name.
	PaypointDbaname *string `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// Paypoint entryname.
	PaypointEntryname *string `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	// Paypoint legal name.
	PaypointLegalname *string            `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	ResponseData      *QueryResponseData `json:"ResponseData,omitempty" url:"ResponseData,omitempty"`
	// Reference to the subscription originating the transaction.
	ScheduleReference *int `json:"ScheduleReference,omitempty" url:"ScheduleReference,omitempty"`
	// The transaction amount.
	SettledAmount  *float64          `json:"SettledAmount,omitempty" url:"SettledAmount,omitempty"`
	SettlementDate *time.Time        `json:"SettlementDate,omitempty" url:"SettlementDate,omitempty"`
	Source         *Source           `json:"Source,omitempty" url:"Source,omitempty"`
	Status         *SettlementStatus `json:"Status,omitempty" url:"Status,omitempty"`
	// Events associated with this transaction.
	TransactionEvents []*QueryTransactionEvents `json:"TransactionEvents,omitempty" url:"TransactionEvents,omitempty"`
	TransactionTime   *TransactionTime          `json:"TransactionTime,omitempty" url:"TransactionTime,omitempty"`
	// Payment method used: card or ach.
	TransMethod *string `json:"TransMethod,omitempty" url:"TransMethod,omitempty"`
	// The transaction type: credit or debit.
	Type *string `json:"Type,omitempty" url:"Type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryResponseSettlementsRecordsItem) GetBatchAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.BatchAmount
}

func (q *QueryResponseSettlementsRecordsItem) GetBatchNumber() *BatchNumber {
	if q == nil {
		return nil
	}
	return q.BatchNumber
}

func (q *QueryResponseSettlementsRecordsItem) GetCategory() *Category {
	if q == nil {
		return nil
	}
	return q.Category
}

func (q *QueryResponseSettlementsRecordsItem) GetCreatedAt() *CreatedAt {
	if q == nil {
		return nil
	}
	return q.CreatedAt
}

func (q *QueryResponseSettlementsRecordsItem) GetCustomer() *QueryTransactionPayorData {
	if q == nil {
		return nil
	}
	return q.Customer
}

func (q *QueryResponseSettlementsRecordsItem) GetDepositDate() *DepositDate {
	if q == nil {
		return nil
	}
	return q.DepositDate
}

func (q *QueryResponseSettlementsRecordsItem) GetExpectedDepositDate() *ExpectedDepositDate {
	if q == nil {
		return nil
	}
	return q.ExpectedDepositDate
}

func (q *QueryResponseSettlementsRecordsItem) GetExternalPaypointId() *ExternalPaypointId {
	if q == nil {
		return nil
	}
	return q.ExternalPaypointId
}

func (q *QueryResponseSettlementsRecordsItem) GetGatewayTransId() *string {
	if q == nil {
		return nil
	}
	return q.GatewayTransId
}

func (q *QueryResponseSettlementsRecordsItem) GetId() *int {
	if q == nil {
		return nil
	}
	return q.Id
}

func (q *QueryResponseSettlementsRecordsItem) GetInvoiceData() *BillData {
	if q == nil {
		return nil
	}
	return q.InvoiceData
}

func (q *QueryResponseSettlementsRecordsItem) GetIsHold() *int {
	if q == nil {
		return nil
	}
	return q.IsHold
}

func (q *QueryResponseSettlementsRecordsItem) GetMaskedAccount() *Maskedaccount {
	if q == nil {
		return nil
	}
	return q.MaskedAccount
}

func (q *QueryResponseSettlementsRecordsItem) GetMethod() *string {
	if q == nil {
		return nil
	}
	return q.Method
}

func (q *QueryResponseSettlementsRecordsItem) GetNetAmount() *Netamountnullable {
	if q == nil {
		return nil
	}
	return q.NetAmount
}

func (q *QueryResponseSettlementsRecordsItem) GetOperation() *string {
	if q == nil {
		return nil
	}
	return q.Operation
}

func (q *QueryResponseSettlementsRecordsItem) GetOrderId() *Orderid {
	if q == nil {
		return nil
	}
	return q.OrderId
}

func (q *QueryResponseSettlementsRecordsItem) GetParentOrgName() *OrgParentName {
	if q == nil {
		return nil
	}
	return q.ParentOrgName
}

func (q *QueryResponseSettlementsRecordsItem) GetPaymentData() *QueryPaymentData {
	if q == nil {
		return nil
	}
	return q.PaymentData
}

func (q *QueryResponseSettlementsRecordsItem) GetPaymentTransId() *string {
	if q == nil {
		return nil
	}
	return q.PaymentTransId
}

func (q *QueryResponseSettlementsRecordsItem) GetPaymentTransStatus() *TransStatus {
	if q == nil {
		return nil
	}
	return q.PaymentTransStatus
}

func (q *QueryResponseSettlementsRecordsItem) GetPaypointDbaname() *string {
	if q == nil {
		return nil
	}
	return q.PaypointDbaname
}

func (q *QueryResponseSettlementsRecordsItem) GetPaypointEntryname() *string {
	if q == nil {
		return nil
	}
	return q.PaypointEntryname
}

func (q *QueryResponseSettlementsRecordsItem) GetPaypointLegalname() *string {
	if q == nil {
		return nil
	}
	return q.PaypointLegalname
}

func (q *QueryResponseSettlementsRecordsItem) GetResponseData() *QueryResponseData {
	if q == nil {
		return nil
	}
	return q.ResponseData
}

func (q *QueryResponseSettlementsRecordsItem) GetScheduleReference() *int {
	if q == nil {
		return nil
	}
	return q.ScheduleReference
}

func (q *QueryResponseSettlementsRecordsItem) GetSettledAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.SettledAmount
}

func (q *QueryResponseSettlementsRecordsItem) GetSettlementDate() *time.Time {
	if q == nil {
		return nil
	}
	return q.SettlementDate
}

func (q *QueryResponseSettlementsRecordsItem) GetSource() *Source {
	if q == nil {
		return nil
	}
	return q.Source
}

func (q *QueryResponseSettlementsRecordsItem) GetStatus() *SettlementStatus {
	if q == nil {
		return nil
	}
	return q.Status
}

func (q *QueryResponseSettlementsRecordsItem) GetTransactionEvents() []*QueryTransactionEvents {
	if q == nil {
		return nil
	}
	return q.TransactionEvents
}

func (q *QueryResponseSettlementsRecordsItem) GetTransactionTime() *TransactionTime {
	if q == nil {
		return nil
	}
	return q.TransactionTime
}

func (q *QueryResponseSettlementsRecordsItem) GetTransMethod() *string {
	if q == nil {
		return nil
	}
	return q.TransMethod
}

func (q *QueryResponseSettlementsRecordsItem) GetType() *string {
	if q == nil {
		return nil
	}
	return q.Type
}

func (q *QueryResponseSettlementsRecordsItem) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryResponseSettlementsRecordsItem) UnmarshalJSON(data []byte) error {
	type embed QueryResponseSettlementsRecordsItem
	var unmarshaler = struct {
		embed
		SettlementDate *internal.DateTime `json:"SettlementDate,omitempty"`
	}{
		embed: embed(*q),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*q = QueryResponseSettlementsRecordsItem(unmarshaler.embed)
	q.SettlementDate = unmarshaler.SettlementDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryResponseSettlementsRecordsItem) MarshalJSON() ([]byte, error) {
	type embed QueryResponseSettlementsRecordsItem
	var marshaler = struct {
		embed
		SettlementDate *internal.DateTime `json:"SettlementDate,omitempty"`
	}{
		embed:          embed(*q),
		SettlementDate: internal.NewOptionalDateTime(q.SettlementDate),
	}
	return json.Marshal(marshaler)
}

func (q *QueryResponseSettlementsRecordsItem) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryResponseSettlementsSummary struct {
	// Funds being held for fraud or risk concerns.
	HeldAmount     *float64        `json:"heldAmount,omitempty" url:"heldAmount,omitempty"`
	Pageidentifier *PageIdentifier `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`
	// Number of records per page.
	PageSize *int `json:"pageSize,omitempty" url:"pageSize,omitempty"`
	// Total refunds deducted from the transfer.
	Refunds *float64 `json:"refunds,omitempty" url:"refunds,omitempty"`
	// Service fees are any pass-through fees charged to the customer at the time of payment. These aren't transferred to the merchant when the batch is transferred and funded.
	ServiceFees *float64 `json:"serviceFees,omitempty" url:"serviceFees,omitempty"`
	// The total sum of the settlements in the response.
	TotalAmount *float64 `json:"totalAmount,omitempty" url:"totalAmount,omitempty"`
	// The total sum of the settlements in the response.
	TotalNetAmount *float64 `json:"totalNetAmount,omitempty" url:"totalNetAmount,omitempty"`
	// Number of pages in the response.
	TotalPages *int `json:"totalPages,omitempty" url:"totalPages,omitempty"`
	// Number of records in the response.
	TotalRecords *int `json:"totalRecords,omitempty" url:"totalRecords,omitempty"`
	// The transfer amount is the net batch amount plus or minus any returns, refunds, billing and fees items, chargebacks, adjustments, and third party payments. This is the amount from the batch that's transferred to the merchant bank account.
	TransferAmount *float64 `json:"transferAmount,omitempty" url:"transferAmount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryResponseSettlementsSummary) GetHeldAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.HeldAmount
}

func (q *QueryResponseSettlementsSummary) GetPageidentifier() *PageIdentifier {
	if q == nil {
		return nil
	}
	return q.Pageidentifier
}

func (q *QueryResponseSettlementsSummary) GetPageSize() *int {
	if q == nil {
		return nil
	}
	return q.PageSize
}

func (q *QueryResponseSettlementsSummary) GetRefunds() *float64 {
	if q == nil {
		return nil
	}
	return q.Refunds
}

func (q *QueryResponseSettlementsSummary) GetServiceFees() *float64 {
	if q == nil {
		return nil
	}
	return q.ServiceFees
}

func (q *QueryResponseSettlementsSummary) GetTotalAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalAmount
}

func (q *QueryResponseSettlementsSummary) GetTotalNetAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalNetAmount
}

func (q *QueryResponseSettlementsSummary) GetTotalPages() *int {
	if q == nil {
		return nil
	}
	return q.TotalPages
}

func (q *QueryResponseSettlementsSummary) GetTotalRecords() *int {
	if q == nil {
		return nil
	}
	return q.TotalRecords
}

func (q *QueryResponseSettlementsSummary) GetTransferAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TransferAmount
}

func (q *QueryResponseSettlementsSummary) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryResponseSettlementsSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryResponseSettlementsSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryResponseSettlementsSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryResponseSettlementsSummary) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Response payload for queries related to transactions
type QueryResponseTransactions struct {
	Records []*TransactionQueryRecords `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary              `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryResponseTransactions) GetRecords() []*TransactionQueryRecords {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryResponseTransactions) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryResponseTransactions) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryResponseTransactions) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryResponseTransactions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryResponseTransactions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryResponseTransactions) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Response payload for queries related to vendors.
type QueryResponseVendors struct {
	Records []*VendorQueryRecord `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary        `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryResponseVendors) GetRecords() []*VendorQueryRecord {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryResponseVendors) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryResponseVendors) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryResponseVendors) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryResponseVendors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryResponseVendors(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryResponseVendors) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Subscription query response body.
type QuerySubscriptionResponse struct {
	Records *SubscriptionQueryRecords `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary             `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QuerySubscriptionResponse) GetRecords() *SubscriptionQueryRecords {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QuerySubscriptionResponse) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QuerySubscriptionResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QuerySubscriptionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QuerySubscriptionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QuerySubscriptionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QuerySubscriptionResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryUserResponse struct {
	Records []*UserQueryRecord `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary      `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryUserResponse) GetRecords() []*UserQueryRecord {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryUserResponse) GetSummary() *QuerySummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryUserResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryUserResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// Time that a response to a chargeback is due, in UTC.
type Replyby = time.Time

// Identifier of retrieval request
type RetrievalId = int64

// Status of transaction. See [the docs](/developers/references/money-in-statuses#money-in-transaction-status) for a full reference.
type TransStatus = int

type Transfer struct {
	// The transfer ID.
	TransferId  int         `json:"transferId" url:"transferId"`
	PaypointId  PaypointId  `json:"paypointId,omitempty" url:"paypointId,omitempty"`
	BatchNumber BatchNumber `json:"batchNumber" url:"batchNumber"`
	// The currency of the batch, either USD or CAD.
	BatchCurrency *string `json:"batchCurrency,omitempty" url:"batchCurrency,omitempty"`
	// Number of records in the batch.
	BatchRecords *int `json:"batchRecords,omitempty" url:"batchRecords,omitempty"`
	// Unique identifier for the transfer.
	TransferIdentifier string `json:"transferIdentifier" url:"transferIdentifier"`
	// The ID of the batch the transfer belongs to.
	BatchId int `json:"batchId" url:"batchId"`
	// The paypoint entry name.
	PaypointEntryName *string `json:"paypointEntryName,omitempty" url:"paypointEntryName,omitempty"`
	// The paypoint legal name.
	PaypointLegalName *Legalname `json:"paypointLegalName,omitempty" url:"paypointLegalName,omitempty"`
	// The paypoint DBA name.
	PaypointDbaName *Dbaname `json:"paypointDbaName,omitempty" url:"paypointDbaName,omitempty"`
	// The paypoint logo URL.
	PaypointLogo *string `json:"paypointLogo,omitempty" url:"paypointLogo,omitempty"`
	// Bank account information for the transfer.
	BankAccount *TransferBankAccount `json:"bankAccount,omitempty" url:"bankAccount,omitempty"`
	// Date when the transfer occurred.
	TransferDate string `json:"transferDate" url:"transferDate"`
	// The payment processor used for the transfer.
	Processor string `json:"processor" url:"processor"`
	// The current status of the transfer.
	TransferStatus int `json:"transferStatus" url:"transferStatus"`
	// Gross batch is the total amount of the payments grouped in the batch. This amount includes service fees.
	GrossAmount float64 `json:"grossAmount" url:"grossAmount"`
	// Amount of chargebacks to be deducted from batch.
	ChargeBackAmount float64 `json:"chargeBackAmount" url:"chargeBackAmount"`
	// Amount of ACH returns to be deducted from batch.
	ReturnedAmount float64 `json:"returnedAmount" url:"returnedAmount"`
	// Amount being held for fraud or risk concerns.
	HoldAmount float64 `json:"holdAmount" url:"holdAmount"`
	// Amount of previously held funds that have been released after a risk review.
	ReleasedAmount float64 `json:"releasedAmount" url:"releasedAmount"`
	// Amount of charges and fees applied for services and transactions.
	BillingFeesAmount float64 `json:"billingFeesAmount" url:"billingFeesAmount"`
	// Amount of payments captured in the batch cycle that are deposited separately. For example, checks or cash payments recorded in the batch but not deposited via Payabli, or card brands making a direct transfer in certain situations.
	ThirdPartyPaidAmount float64 `json:"thirdPartyPaidAmount" url:"thirdPartyPaidAmount"`
	// Amount of corrections applied to Billing & Fees charges.
	AdjustmentsAmount float64 `json:"adjustmentsAmount" url:"adjustmentsAmount"`
	// The net transfer amount after all deductions and additions.
	NetTransferAmount float64 `json:"netTransferAmount" url:"netTransferAmount"`
	// List of events associated with the transfer.
	EventsData []*GeneralEvents `json:"eventsData,omitempty" url:"eventsData,omitempty"`
	// List of messages related to the transfer.
	Messages []*TransferMessage `json:"messages,omitempty" url:"messages,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Transfer) GetTransferId() int {
	if t == nil {
		return 0
	}
	return t.TransferId
}

func (t *Transfer) GetPaypointId() PaypointId {
	if t == nil {
		return nil
	}
	return t.PaypointId
}

func (t *Transfer) GetBatchNumber() BatchNumber {
	if t == nil {
		return ""
	}
	return t.BatchNumber
}

func (t *Transfer) GetBatchCurrency() *string {
	if t == nil {
		return nil
	}
	return t.BatchCurrency
}

func (t *Transfer) GetBatchRecords() *int {
	if t == nil {
		return nil
	}
	return t.BatchRecords
}

func (t *Transfer) GetTransferIdentifier() string {
	if t == nil {
		return ""
	}
	return t.TransferIdentifier
}

func (t *Transfer) GetBatchId() int {
	if t == nil {
		return 0
	}
	return t.BatchId
}

func (t *Transfer) GetPaypointEntryName() *string {
	if t == nil {
		return nil
	}
	return t.PaypointEntryName
}

func (t *Transfer) GetPaypointLegalName() *Legalname {
	if t == nil {
		return nil
	}
	return t.PaypointLegalName
}

func (t *Transfer) GetPaypointDbaName() *Dbaname {
	if t == nil {
		return nil
	}
	return t.PaypointDbaName
}

func (t *Transfer) GetPaypointLogo() *string {
	if t == nil {
		return nil
	}
	return t.PaypointLogo
}

func (t *Transfer) GetBankAccount() *TransferBankAccount {
	if t == nil {
		return nil
	}
	return t.BankAccount
}

func (t *Transfer) GetTransferDate() string {
	if t == nil {
		return ""
	}
	return t.TransferDate
}

func (t *Transfer) GetProcessor() string {
	if t == nil {
		return ""
	}
	return t.Processor
}

func (t *Transfer) GetTransferStatus() int {
	if t == nil {
		return 0
	}
	return t.TransferStatus
}

func (t *Transfer) GetGrossAmount() float64 {
	if t == nil {
		return 0
	}
	return t.GrossAmount
}

func (t *Transfer) GetChargeBackAmount() float64 {
	if t == nil {
		return 0
	}
	return t.ChargeBackAmount
}

func (t *Transfer) GetReturnedAmount() float64 {
	if t == nil {
		return 0
	}
	return t.ReturnedAmount
}

func (t *Transfer) GetHoldAmount() float64 {
	if t == nil {
		return 0
	}
	return t.HoldAmount
}

func (t *Transfer) GetReleasedAmount() float64 {
	if t == nil {
		return 0
	}
	return t.ReleasedAmount
}

func (t *Transfer) GetBillingFeesAmount() float64 {
	if t == nil {
		return 0
	}
	return t.BillingFeesAmount
}

func (t *Transfer) GetThirdPartyPaidAmount() float64 {
	if t == nil {
		return 0
	}
	return t.ThirdPartyPaidAmount
}

func (t *Transfer) GetAdjustmentsAmount() float64 {
	if t == nil {
		return 0
	}
	return t.AdjustmentsAmount
}

func (t *Transfer) GetNetTransferAmount() float64 {
	if t == nil {
		return 0
	}
	return t.NetTransferAmount
}

func (t *Transfer) GetEventsData() []*GeneralEvents {
	if t == nil {
		return nil
	}
	return t.EventsData
}

func (t *Transfer) GetMessages() []*TransferMessage {
	if t == nil {
		return nil
	}
	return t.Messages
}

func (t *Transfer) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Transfer) UnmarshalJSON(data []byte) error {
	type unmarshaler Transfer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Transfer(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Transfer) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TransferBankAccount struct {
	AccountNumber AccountNumber  `json:"accountNumber" url:"accountNumber"`
	RoutingNumber RoutingAccount `json:"routingNumber" url:"routingNumber"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferBankAccount) GetAccountNumber() AccountNumber {
	if t == nil {
		return ""
	}
	return t.AccountNumber
}

func (t *TransferBankAccount) GetRoutingNumber() RoutingAccount {
	if t == nil {
		return ""
	}
	return t.RoutingNumber
}

func (t *TransferBankAccount) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferBankAccount) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferBankAccount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferBankAccount(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferBankAccount) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TransferMessage struct {
	Id                *int                       `json:"Id,omitempty" url:"Id,omitempty"`
	RoomId            *int                       `json:"RoomId,omitempty" url:"RoomId,omitempty"`
	UserId            *int                       `json:"UserId,omitempty" url:"UserId,omitempty"`
	UserName          *string                    `json:"UserName,omitempty" url:"UserName,omitempty"`
	Content           *string                    `json:"Content,omitempty" url:"Content,omitempty"`
	CreatedAt         *string                    `json:"CreatedAt,omitempty" url:"CreatedAt,omitempty"`
	MessageType       *int                       `json:"MessageType,omitempty" url:"MessageType,omitempty"`
	MessageProperties *TransferMessageProperties `json:"MessageProperties,omitempty" url:"MessageProperties,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferMessage) GetId() *int {
	if t == nil {
		return nil
	}
	return t.Id
}

func (t *TransferMessage) GetRoomId() *int {
	if t == nil {
		return nil
	}
	return t.RoomId
}

func (t *TransferMessage) GetUserId() *int {
	if t == nil {
		return nil
	}
	return t.UserId
}

func (t *TransferMessage) GetUserName() *string {
	if t == nil {
		return nil
	}
	return t.UserName
}

func (t *TransferMessage) GetContent() *string {
	if t == nil {
		return nil
	}
	return t.Content
}

func (t *TransferMessage) GetCreatedAt() *string {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TransferMessage) GetMessageType() *int {
	if t == nil {
		return nil
	}
	return t.MessageType
}

func (t *TransferMessage) GetMessageProperties() *TransferMessageProperties {
	if t == nil {
		return nil
	}
	return t.MessageProperties
}

func (t *TransferMessage) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferMessage) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TransferMessageProperties struct {
	OriginalTransferStatus *string `json:"originalTransferStatus,omitempty" url:"originalTransferStatus,omitempty"`
	CurrentTransferStatus  *string `json:"currentTransferStatus,omitempty" url:"currentTransferStatus,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferMessageProperties) GetOriginalTransferStatus() *string {
	if t == nil {
		return nil
	}
	return t.OriginalTransferStatus
}

func (t *TransferMessageProperties) GetCurrentTransferStatus() *string {
	if t == nil {
		return nil
	}
	return t.CurrentTransferStatus
}

func (t *TransferMessageProperties) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferMessageProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferMessageProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferMessageProperties(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferMessageProperties) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TransferQueryResponse struct {
	Records []*Transfer      `json:"Records" url:"Records"`
	Summary *TransferSummary `json:"Summary" url:"Summary"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferQueryResponse) GetRecords() []*Transfer {
	if t == nil {
		return nil
	}
	return t.Records
}

func (t *TransferQueryResponse) GetSummary() *TransferSummary {
	if t == nil {
		return nil
	}
	return t.Summary
}

func (t *TransferQueryResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferQueryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferQueryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferQueryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferQueryResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TransferSummary struct {
	TotalPages   Totalpages   `json:"totalPages" url:"totalPages"`
	TotalRecords Totalrecords `json:"totalRecords" url:"totalRecords"`
	PageSize     Pagesize     `json:"pageSize" url:"pageSize"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferSummary) GetTotalPages() Totalpages {
	if t == nil {
		return 0
	}
	return t.TotalPages
}

func (t *TransferSummary) GetTotalRecords() Totalrecords {
	if t == nil {
		return 0
	}
	return t.TotalRecords
}

func (t *TransferSummary) GetPageSize() Pagesize {
	if t == nil {
		return 0
	}
	return t.PageSize
}

func (t *TransferSummary) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferSummary) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type VCardQueryResponse struct {
	Summary *VCardSummary  `json:"Summary,omitempty" url:"Summary,omitempty"`
	Records []*VCardRecord `json:"Records,omitempty" url:"Records,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardQueryResponse) GetSummary() *VCardSummary {
	if v == nil {
		return nil
	}
	return v.Summary
}

func (v *VCardQueryResponse) GetRecords() []*VCardRecord {
	if v == nil {
		return nil
	}
	return v.Records
}

func (v *VCardQueryResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardQueryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardQueryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardQueryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardQueryResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VCardRecord struct {
	// When `true`, the vCard has been sent.
	VcardSent *bool   `json:"vcardSent,omitempty" url:"vcardSent,omitempty"`
	CardToken *string `json:"cardToken,omitempty" url:"cardToken,omitempty"`
	// The vCard number.
	CardNumber *string `json:"cardNumber,omitempty" url:"cardNumber,omitempty"`
	// The vCard CVC number.
	Cvc *string `json:"cvc,omitempty" url:"cvc,omitempty"`
	// Expiration date in format YYYY-MM-DD. The minimum time to expire is 3 months, maximum is 3 years. If not provided, the default is 6 months.
	ExpirationDate *string `json:"expirationDate,omitempty" url:"expirationDate,omitempty"`
	Status         *string `json:"status,omitempty" url:"status,omitempty"`
	// The vCard amount.
	Amount *float64 `json:"amount,omitempty" url:"amount,omitempty"`
	// The vCard's current balance.
	CurrentBalance      *float64 `json:"currentBalance,omitempty" url:"currentBalance,omitempty"`
	ExpenseLimit        *float64 `json:"expenseLimit,omitempty" url:"expenseLimit,omitempty"`
	ExpenseLimitPeriod  *string  `json:"expenseLimitPeriod,omitempty" url:"expenseLimitPeriod,omitempty"`
	MaxNumberOfUses     *int     `json:"maxNumberOfUses,omitempty" url:"maxNumberOfUses,omitempty"`
	CurrentNumberOfUses *int     `json:"currentNumberOfUses,omitempty" url:"currentNumberOfUses,omitempty"`
	ExactAmount         *bool    `json:"exactAmount,omitempty" url:"exactAmount,omitempty"`
	// MCC assigned to vCard.
	Mcc *string `json:"mcc,omitempty" url:"mcc,omitempty"`
	// TCC assigned to vCard.
	Tcc *string `json:"tcc,omitempty" url:"tcc,omitempty"`
	// Custom field 1.
	Misc1 *string `json:"misc1,omitempty" url:"misc1,omitempty"`
	// Custom field 2.
	Misc2              *string           `json:"misc2,omitempty" url:"misc2,omitempty"`
	DateCreated        *CreatedAt        `json:"dateCreated,omitempty" url:"dateCreated,omitempty"`
	DateModified       *LastModified     `json:"dateModified,omitempty" url:"dateModified,omitempty"`
	AssociatedVendor   *AssociatedVendor `json:"associatedVendor,omitempty" url:"associatedVendor,omitempty"`
	AssociatedCustomer *CustomerData     `json:"associatedCustomer,omitempty" url:"associatedCustomer,omitempty"`
	ParentOrgName      *OrgParentName    `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	// The paypoint's DBA name.
	PaypointDbaname *Dbaname `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	// The paypoint's legal name.
	PaypointLegalname *Legalname `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// The paypoint's entry name (entrypoint).
	PaypointEntryname  *Entrypointfield    `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardRecord) GetVcardSent() *bool {
	if v == nil {
		return nil
	}
	return v.VcardSent
}

func (v *VCardRecord) GetCardToken() *string {
	if v == nil {
		return nil
	}
	return v.CardToken
}

func (v *VCardRecord) GetCardNumber() *string {
	if v == nil {
		return nil
	}
	return v.CardNumber
}

func (v *VCardRecord) GetCvc() *string {
	if v == nil {
		return nil
	}
	return v.Cvc
}

func (v *VCardRecord) GetExpirationDate() *string {
	if v == nil {
		return nil
	}
	return v.ExpirationDate
}

func (v *VCardRecord) GetStatus() *string {
	if v == nil {
		return nil
	}
	return v.Status
}

func (v *VCardRecord) GetAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.Amount
}

func (v *VCardRecord) GetCurrentBalance() *float64 {
	if v == nil {
		return nil
	}
	return v.CurrentBalance
}

func (v *VCardRecord) GetExpenseLimit() *float64 {
	if v == nil {
		return nil
	}
	return v.ExpenseLimit
}

func (v *VCardRecord) GetExpenseLimitPeriod() *string {
	if v == nil {
		return nil
	}
	return v.ExpenseLimitPeriod
}

func (v *VCardRecord) GetMaxNumberOfUses() *int {
	if v == nil {
		return nil
	}
	return v.MaxNumberOfUses
}

func (v *VCardRecord) GetCurrentNumberOfUses() *int {
	if v == nil {
		return nil
	}
	return v.CurrentNumberOfUses
}

func (v *VCardRecord) GetExactAmount() *bool {
	if v == nil {
		return nil
	}
	return v.ExactAmount
}

func (v *VCardRecord) GetMcc() *string {
	if v == nil {
		return nil
	}
	return v.Mcc
}

func (v *VCardRecord) GetTcc() *string {
	if v == nil {
		return nil
	}
	return v.Tcc
}

func (v *VCardRecord) GetMisc1() *string {
	if v == nil {
		return nil
	}
	return v.Misc1
}

func (v *VCardRecord) GetMisc2() *string {
	if v == nil {
		return nil
	}
	return v.Misc2
}

func (v *VCardRecord) GetDateCreated() *CreatedAt {
	if v == nil {
		return nil
	}
	return v.DateCreated
}

func (v *VCardRecord) GetDateModified() *LastModified {
	if v == nil {
		return nil
	}
	return v.DateModified
}

func (v *VCardRecord) GetAssociatedVendor() *AssociatedVendor {
	if v == nil {
		return nil
	}
	return v.AssociatedVendor
}

func (v *VCardRecord) GetAssociatedCustomer() *CustomerData {
	if v == nil {
		return nil
	}
	return v.AssociatedCustomer
}

func (v *VCardRecord) GetParentOrgName() *OrgParentName {
	if v == nil {
		return nil
	}
	return v.ParentOrgName
}

func (v *VCardRecord) GetPaypointDbaname() *Dbaname {
	if v == nil {
		return nil
	}
	return v.PaypointDbaname
}

func (v *VCardRecord) GetPaypointLegalname() *Legalname {
	if v == nil {
		return nil
	}
	return v.PaypointLegalname
}

func (v *VCardRecord) GetPaypointEntryname() *Entrypointfield {
	if v == nil {
		return nil
	}
	return v.PaypointEntryname
}

func (v *VCardRecord) GetExternalPaypointId() *ExternalPaypointId {
	if v == nil {
		return nil
	}
	return v.ExternalPaypointId
}

func (v *VCardRecord) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardRecord) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VCardSummary struct {
	TotalPages   Totalpages   `json:"totalPages" url:"totalPages"`
	TotalRecords Totalrecords `json:"totalRecords" url:"totalRecords"`
	// Total amount for the records.
	TotalAmount float64 `json:"totalAmount" url:"totalAmount"`
	// Total number of active vCards.
	Totalactive int `json:"totalactive" url:"totalactive"`
	// Total amount of active vCards.
	Totalamounteactive float64 `json:"totalamounteactive" url:"totalamounteactive"`
	// Total balance of active vCards.
	Totalbalanceactive float64         `json:"totalbalanceactive" url:"totalbalanceactive"`
	PageIdentifier     *PageIdentifier `json:"pageIdentifier,omitempty" url:"pageIdentifier,omitempty"`
	PageSize           *Pagesize       `json:"pageSize,omitempty" url:"pageSize,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VCardSummary) GetTotalPages() Totalpages {
	if v == nil {
		return 0
	}
	return v.TotalPages
}

func (v *VCardSummary) GetTotalRecords() Totalrecords {
	if v == nil {
		return 0
	}
	return v.TotalRecords
}

func (v *VCardSummary) GetTotalAmount() float64 {
	if v == nil {
		return 0
	}
	return v.TotalAmount
}

func (v *VCardSummary) GetTotalactive() int {
	if v == nil {
		return 0
	}
	return v.Totalactive
}

func (v *VCardSummary) GetTotalamounteactive() float64 {
	if v == nil {
		return 0
	}
	return v.Totalamounteactive
}

func (v *VCardSummary) GetTotalbalanceactive() float64 {
	if v == nil {
		return 0
	}
	return v.Totalbalanceactive
}

func (v *VCardSummary) GetPageIdentifier() *PageIdentifier {
	if v == nil {
		return nil
	}
	return v.PageIdentifier
}

func (v *VCardSummary) GetPageSize() *Pagesize {
	if v == nil {
		return nil
	}
	return v.PageSize
}

func (v *VCardSummary) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VCardSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler VCardSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VCardSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VCardSummary) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ListOrganizationsResponse struct {
	Records []*OrganizationQueryRecord `json:"Records,omitempty" url:"Records,omitempty"`
	Summary *QuerySummary              `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListOrganizationsResponse) GetRecords() []*OrganizationQueryRecord {
	if l == nil {
		return nil
	}
	return l.Records
}

func (l *ListOrganizationsResponse) GetSummary() *QuerySummary {
	if l == nil {
		return nil
	}
	return l.Summary
}

func (l *ListOrganizationsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListOrganizationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListOrganizationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListOrganizationsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOrganizationsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type QueryTransferDetailResponse struct {
	// List of transfer detail records
	Records []*TransferDetailRecord `json:"Records,omitempty" url:"Records,omitempty"`
	// Summary of the transfer details query
	Summary *QueryTransferSummary `json:"Summary,omitempty" url:"Summary,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryTransferDetailResponse) GetRecords() []*TransferDetailRecord {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryTransferDetailResponse) GetSummary() *QueryTransferSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryTransferDetailResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryTransferDetailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryTransferDetailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryTransferDetailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryTransferDetailResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryTransferResponse struct {
	// Summary information about the transfers.
	Summary *QueryTransferSummary `json:"Summary,omitempty" url:"Summary,omitempty"`
	// List of transfer transaction records.
	Records []*TransactionQueryRecords `json:"Records,omitempty" url:"Records,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryTransferResponse) GetSummary() *QueryTransferSummary {
	if q == nil {
		return nil
	}
	return q.Summary
}

func (q *QueryTransferResponse) GetRecords() []*TransactionQueryRecords {
	if q == nil {
		return nil
	}
	return q.Records
}

func (q *QueryTransferResponse) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryTransferResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryTransferResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryTransferResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryTransferResponse) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryTransferSummary struct {
	// ACH returns deducted from the batch.
	AchReturns *float64 `json:"achReturns,omitempty" url:"achReturns,omitempty"`
	// Corrections applied to Billing & Fees charges.
	Adjustments *float64 `json:"adjustments,omitempty" url:"adjustments,omitempty"`
	// Charges applied for transactions and services.
	BillingFees *float64 `json:"billingFees,omitempty" url:"billingFees,omitempty"`
	// Chargebacks deducted from batch.
	Chargebacks *float64 `json:"chargebacks,omitempty" url:"chargebacks,omitempty"`
	// The gross batch amount before deductions.
	GrossTransferAmount *float64 `json:"grossTransferAmount,omitempty" url:"grossTransferAmount,omitempty"`
	// Previously held funds that have been released after a risk review.
	ReleaseAmount *float64 `json:"releaseAmount,omitempty" url:"releaseAmount,omitempty"`
	// Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.
	ThirdPartyPaid *float64 `json:"thirdPartyPaid,omitempty" url:"thirdPartyPaid,omitempty"`
	// The gross batch amount minus service fees.
	TotalNetAmountTransfer *float64 `json:"totalNetAmountTransfer,omitempty" url:"totalNetAmountTransfer,omitempty"`
	// Service fees are any pass-through fees charged to the customer at the time of payment.  These aren't transferred to the merchant when the batch is transferred and funded.
	ServiceFees *float64 `json:"serviceFees,omitempty" url:"serviceFees,omitempty"`
	// The transfer amount is the net batch amount plus or minus any returns, refunds,  billing and fees items, chargebacks, adjustments, and third party payments.  This is the amount from the batch that is transferred to the merchant bank account.
	TransferAmount *float64 `json:"transferAmount,omitempty" url:"transferAmount,omitempty"`
	// Refunds deducted from batch.
	Refunds *float64 `json:"refunds,omitempty" url:"refunds,omitempty"`
	// Funds being held for fraud or risk concerns.
	HeldAmount *float64 `json:"heldAmount,omitempty" url:"heldAmount,omitempty"`
	// Number of records in the response.
	TotalRecords *Totalrecords `json:"totalRecords,omitempty" url:"totalRecords,omitempty"`
	// The total sum of the transfers in the response.
	TotalAmount *float64 `json:"totalAmount,omitempty" url:"totalAmount,omitempty"`
	// The total sum of the transfers in the response.
	TotalNetAmount *float64 `json:"totalNetAmount,omitempty" url:"totalNetAmount,omitempty"`
	// Number of pages in the response.
	TotalPages *Totalpages `json:"totalPages,omitempty" url:"totalPages,omitempty"`
	// Number of records per page.
	PageSize *Pagesize `json:"pageSize,omitempty" url:"pageSize,omitempty"`
	// Auxiliary validation used internally by payment pages and components.
	Pageidentifier *PageIdentifier `json:"pageidentifier,omitempty" url:"pageidentifier,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QueryTransferSummary) GetAchReturns() *float64 {
	if q == nil {
		return nil
	}
	return q.AchReturns
}

func (q *QueryTransferSummary) GetAdjustments() *float64 {
	if q == nil {
		return nil
	}
	return q.Adjustments
}

func (q *QueryTransferSummary) GetBillingFees() *float64 {
	if q == nil {
		return nil
	}
	return q.BillingFees
}

func (q *QueryTransferSummary) GetChargebacks() *float64 {
	if q == nil {
		return nil
	}
	return q.Chargebacks
}

func (q *QueryTransferSummary) GetGrossTransferAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.GrossTransferAmount
}

func (q *QueryTransferSummary) GetReleaseAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.ReleaseAmount
}

func (q *QueryTransferSummary) GetThirdPartyPaid() *float64 {
	if q == nil {
		return nil
	}
	return q.ThirdPartyPaid
}

func (q *QueryTransferSummary) GetTotalNetAmountTransfer() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalNetAmountTransfer
}

func (q *QueryTransferSummary) GetServiceFees() *float64 {
	if q == nil {
		return nil
	}
	return q.ServiceFees
}

func (q *QueryTransferSummary) GetTransferAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TransferAmount
}

func (q *QueryTransferSummary) GetRefunds() *float64 {
	if q == nil {
		return nil
	}
	return q.Refunds
}

func (q *QueryTransferSummary) GetHeldAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.HeldAmount
}

func (q *QueryTransferSummary) GetTotalRecords() *Totalrecords {
	if q == nil {
		return nil
	}
	return q.TotalRecords
}

func (q *QueryTransferSummary) GetTotalAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalAmount
}

func (q *QueryTransferSummary) GetTotalNetAmount() *float64 {
	if q == nil {
		return nil
	}
	return q.TotalNetAmount
}

func (q *QueryTransferSummary) GetTotalPages() *Totalpages {
	if q == nil {
		return nil
	}
	return q.TotalPages
}

func (q *QueryTransferSummary) GetPageSize() *Pagesize {
	if q == nil {
		return nil
	}
	return q.PageSize
}

func (q *QueryTransferSummary) GetPageidentifier() *PageIdentifier {
	if q == nil {
		return nil
	}
	return q.Pageidentifier
}

func (q *QueryTransferSummary) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryTransferSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryTransferSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryTransferSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryTransferSummary) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type TransferDetailRecord struct {
	// Unique identifier for the transfer detail record
	TransferDetailId *int `json:"transferDetailId,omitempty" url:"transferDetailId,omitempty"`
	// The ID of the transfer this detail belongs to
	TransferId *int `json:"transferId,omitempty" url:"transferId,omitempty"`
	// The transaction ID in Payabli's system
	TransactionId *string `json:"transactionId,omitempty" url:"transactionId,omitempty"`
	// External transaction reference number
	TransactionNumber *string `json:"transactionNumber,omitempty" url:"transactionNumber,omitempty"`
	// The transaction type (credit or debit)
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split
	Category *string `json:"category,omitempty" url:"category,omitempty"`
	// The gross amount of the transaction
	GrossAmount *float64 `json:"grossAmount,omitempty" url:"grossAmount,omitempty"`
	// Chargeback amount deducted from transaction
	ChargeBackAmount *float64 `json:"chargeBackAmount,omitempty" url:"chargeBackAmount,omitempty"`
	// ACH return amount deducted from transaction
	ReturnedAmount *float64 `json:"returnedAmount,omitempty" url:"returnedAmount,omitempty"`
	// Refund amount deducted from transaction
	RefundAmount *float64 `json:"refundAmount,omitempty" url:"refundAmount,omitempty"`
	// Amount being held for fraud or risk concerns
	HoldAmount *float64 `json:"holdAmount,omitempty" url:"holdAmount,omitempty"`
	// Previously held funds that have been released after a risk review
	ReleasedAmount *float64 `json:"releasedAmount,omitempty" url:"releasedAmount,omitempty"`
	// Charges applied for transactions and services
	BillingFeesAmount *float64 `json:"billingFeesAmount,omitempty" url:"billingFeesAmount,omitempty"`
	// Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.
	ThirdPartyPaidAmount *float64 `json:"thirdPartyPaidAmount,omitempty" url:"thirdPartyPaidAmount,omitempty"`
	// Corrections applied to Billing & Fees charges
	AdjustmentsAmount *float64 `json:"adjustmentsAmount,omitempty" url:"adjustmentsAmount,omitempty"`
	// The net amount after all deductions
	NetTransferAmount *float64 `json:"netTransferAmount,omitempty" url:"netTransferAmount,omitempty"`
	// Total amount directed to split funding destinations
	SplitFundingAmount *float64            `json:"splitFundingAmount,omitempty" url:"splitFundingAmount,omitempty"`
	BillingFeesDetails []*BillingFeeDetail `json:"billingFeesDetails,omitempty" url:"billingFeesDetails,omitempty"`
	ParentOrgName      *OrgParentName      `json:"ParentOrgName,omitempty" url:"ParentOrgName,omitempty"`
	PaypointDbaname    *Dbaname            `json:"PaypointDbaname,omitempty" url:"PaypointDbaname,omitempty"`
	PaypointLegalname  *Legalname          `json:"PaypointLegalname,omitempty" url:"PaypointLegalname,omitempty"`
	// The paypoint's entryname
	PaypointEntryname *string `json:"PaypointEntryname,omitempty" url:"PaypointEntryname,omitempty"`
	// The transaction ID for the payment
	PaymentTransId *string `json:"PaymentTransId,omitempty" url:"PaymentTransId,omitempty"`
	// The payment connector used to process the transaction
	ConnectorName                *string                       `json:"ConnectorName,omitempty" url:"ConnectorName,omitempty"`
	ExternalProcessorInformation *ExternalProcessorInformation `json:"ExternalProcessorInformation,omitempty" url:"ExternalProcessorInformation,omitempty"`
	// Internal identifier used for processing
	GatewayTransId *string  `json:"GatewayTransId,omitempty" url:"GatewayTransId,omitempty"`
	OrderId        *Orderid `json:"OrderId,omitempty" url:"OrderId,omitempty"`
	// Payment method used: card, ach, or wallet
	Method      *string      `json:"Method,omitempty" url:"Method,omitempty"`
	BatchNumber *BatchNumber `json:"BatchNumber,omitempty" url:"BatchNumber,omitempty"`
	// The amount of the batch
	BatchAmount *float64 `json:"BatchAmount,omitempty" url:"BatchAmount,omitempty"`
	// Unique ID for customer linked to the transaction
	PayorId     *PayorId          `json:"PayorId,omitempty" url:"PayorId,omitempty"`
	PaymentData *QueryPaymentData `json:"PaymentData,omitempty" url:"PaymentData,omitempty"`
	// Status of transaction. See [the
	// docs](/developers/references/money-in-statuses#money-in-transaction-status) for a
	// full reference.
	TransStatus *int        `json:"TransStatus,omitempty" url:"TransStatus,omitempty"`
	PaypointId  *PaypointId `json:"PaypointId,omitempty" url:"PaypointId,omitempty"`
	// Transaction total amount (including service fee or sub-charge)
	TotalAmount *float64 `json:"TotalAmount,omitempty" url:"TotalAmount,omitempty"`
	// Net amount paid
	NetAmount *Netamountnullable `json:"NetAmount,omitempty" url:"NetAmount,omitempty"`
	FeeAmount *FeeAmount         `json:"FeeAmount,omitempty" url:"FeeAmount,omitempty"`
	// Settlement status for transaction. See [the docs](/developers/references/money-in-statuses#payment-funding-status) for a full reference.
	SettlementStatus *int               `json:"SettlementStatus,omitempty" url:"SettlementStatus,omitempty"`
	Operation        *Operation         `json:"Operation,omitempty" url:"Operation,omitempty"`
	ResponseData     *QueryResponseData `json:"ResponseData,omitempty" url:"ResponseData,omitempty"`
	Source           *Source            `json:"Source,omitempty" url:"Source,omitempty"`
	// Reference to the subscription or schedule that originated the transaction
	ScheduleReference *int          `json:"ScheduleReference,omitempty" url:"ScheduleReference,omitempty"`
	OrgId             *Orgid        `json:"OrgId,omitempty" url:"OrgId,omitempty"`
	RefundId          *RefundId     `json:"RefundId,omitempty" url:"RefundId,omitempty"`
	ReturnedId        *ReturnedId   `json:"ReturnedId,omitempty" url:"ReturnedId,omitempty"`
	ChargebackId      *ChargebackId `json:"ChargebackId,omitempty" url:"ChargebackId,omitempty"`
	RetrievalId       *RetrievalId  `json:"RetrievalId,omitempty" url:"RetrievalId,omitempty"`
	// Additional transaction data
	TransAdditionalData interface{} `json:"TransAdditionalData,omitempty" url:"TransAdditionalData,omitempty"`
	// Associated invoice data
	InvoiceData        *BillData           `json:"invoiceData,omitempty" url:"invoiceData,omitempty"`
	EntrypageId        *EntrypageId        `json:"EntrypageId,omitempty" url:"EntrypageId,omitempty"`
	ExternalPaypointId *ExternalPaypointId `json:"externalPaypointID,omitempty" url:"externalPaypointID,omitempty"`
	// Indicates whether the ACH account has been validated
	IsValidatedAch *bool `json:"IsValidatedACH,omitempty" url:"IsValidatedACH,omitempty"`
	// Transaction date and time, in UTC
	TransactionTime          *DatetimeNullable          `json:"TransactionTime,omitempty" url:"TransactionTime,omitempty"`
	Customer                 *QueryTransactionPayorData `json:"Customer,omitempty" url:"Customer,omitempty"`
	SplitFundingInstructions *SplitFunding              `json:"splitFundingInstructions,omitempty" url:"splitFundingInstructions,omitempty"`
	CfeeTransactions         []*QueryCFeeTransaction    `json:"CfeeTransactions,omitempty" url:"CfeeTransactions,omitempty"`
	TransactionEvents        []*QueryTransactionEvents  `json:"TransactionEvents,omitempty" url:"TransactionEvents,omitempty"`
	PendingFeeAmount         *PendingFeeAmount          `json:"PendingFeeAmount,omitempty" url:"PendingFeeAmount,omitempty"`
	RiskFlagged              *RiskFlagged               `json:"RiskFlagged,omitempty" url:"RiskFlagged,omitempty"`
	RiskFlaggedOn            *RiskFlaggedOn             `json:"RiskFlaggedOn,omitempty" url:"RiskFlaggedOn,omitempty"`
	RiskStatus               *RiskStatus                `json:"RiskStatus,omitempty" url:"RiskStatus,omitempty"`
	RiskReason               *RiskReason                `json:"RiskReason,omitempty" url:"RiskReason,omitempty"`
	RiskAction               *RiskAction                `json:"RiskAction,omitempty" url:"RiskAction,omitempty"`
	RiskActionCode           *RiskActionCode            `json:"RiskActionCode,omitempty" url:"RiskActionCode,omitempty"`
	DeviceId                 *DeviceId                  `json:"DeviceId,omitempty" url:"DeviceId,omitempty"`
	AchSecCode               *AchSecCode                `json:"AchSecCode,omitempty" url:"AchSecCode,omitempty"`
	AchHolderType            *AchHolderType             `json:"AchHolderType,omitempty" url:"AchHolderType,omitempty"`
	IpAddress                *IpAddress                 `json:"IpAddress,omitempty" url:"IpAddress,omitempty"`
	// Indicates if this was a same-day ACH transaction.
	IsSameDayAch *bool `json:"IsSameDayACH,omitempty" url:"IsSameDayACH,omitempty"`
	// Type of wallet used for the transaction (if applicable)
	WalletType *string `json:"WalletType,omitempty" url:"WalletType,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferDetailRecord) GetTransferDetailId() *int {
	if t == nil {
		return nil
	}
	return t.TransferDetailId
}

func (t *TransferDetailRecord) GetTransferId() *int {
	if t == nil {
		return nil
	}
	return t.TransferId
}

func (t *TransferDetailRecord) GetTransactionId() *string {
	if t == nil {
		return nil
	}
	return t.TransactionId
}

func (t *TransferDetailRecord) GetTransactionNumber() *string {
	if t == nil {
		return nil
	}
	return t.TransactionNumber
}

func (t *TransferDetailRecord) GetType() *string {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *TransferDetailRecord) GetCategory() *string {
	if t == nil {
		return nil
	}
	return t.Category
}

func (t *TransferDetailRecord) GetGrossAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.GrossAmount
}

func (t *TransferDetailRecord) GetChargeBackAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.ChargeBackAmount
}

func (t *TransferDetailRecord) GetReturnedAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.ReturnedAmount
}

func (t *TransferDetailRecord) GetRefundAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.RefundAmount
}

func (t *TransferDetailRecord) GetHoldAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.HoldAmount
}

func (t *TransferDetailRecord) GetReleasedAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.ReleasedAmount
}

func (t *TransferDetailRecord) GetBillingFeesAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.BillingFeesAmount
}

func (t *TransferDetailRecord) GetThirdPartyPaidAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.ThirdPartyPaidAmount
}

func (t *TransferDetailRecord) GetAdjustmentsAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.AdjustmentsAmount
}

func (t *TransferDetailRecord) GetNetTransferAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.NetTransferAmount
}

func (t *TransferDetailRecord) GetSplitFundingAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.SplitFundingAmount
}

func (t *TransferDetailRecord) GetBillingFeesDetails() []*BillingFeeDetail {
	if t == nil {
		return nil
	}
	return t.BillingFeesDetails
}

func (t *TransferDetailRecord) GetParentOrgName() *OrgParentName {
	if t == nil {
		return nil
	}
	return t.ParentOrgName
}

func (t *TransferDetailRecord) GetPaypointDbaname() *Dbaname {
	if t == nil {
		return nil
	}
	return t.PaypointDbaname
}

func (t *TransferDetailRecord) GetPaypointLegalname() *Legalname {
	if t == nil {
		return nil
	}
	return t.PaypointLegalname
}

func (t *TransferDetailRecord) GetPaypointEntryname() *string {
	if t == nil {
		return nil
	}
	return t.PaypointEntryname
}

func (t *TransferDetailRecord) GetPaymentTransId() *string {
	if t == nil {
		return nil
	}
	return t.PaymentTransId
}

func (t *TransferDetailRecord) GetConnectorName() *string {
	if t == nil {
		return nil
	}
	return t.ConnectorName
}

func (t *TransferDetailRecord) GetExternalProcessorInformation() *ExternalProcessorInformation {
	if t == nil {
		return nil
	}
	return t.ExternalProcessorInformation
}

func (t *TransferDetailRecord) GetGatewayTransId() *string {
	if t == nil {
		return nil
	}
	return t.GatewayTransId
}

func (t *TransferDetailRecord) GetOrderId() *Orderid {
	if t == nil {
		return nil
	}
	return t.OrderId
}

func (t *TransferDetailRecord) GetMethod() *string {
	if t == nil {
		return nil
	}
	return t.Method
}

func (t *TransferDetailRecord) GetBatchNumber() *BatchNumber {
	if t == nil {
		return nil
	}
	return t.BatchNumber
}

func (t *TransferDetailRecord) GetBatchAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.BatchAmount
}

func (t *TransferDetailRecord) GetPayorId() *PayorId {
	if t == nil {
		return nil
	}
	return t.PayorId
}

func (t *TransferDetailRecord) GetPaymentData() *QueryPaymentData {
	if t == nil {
		return nil
	}
	return t.PaymentData
}

func (t *TransferDetailRecord) GetTransStatus() *int {
	if t == nil {
		return nil
	}
	return t.TransStatus
}

func (t *TransferDetailRecord) GetPaypointId() *PaypointId {
	if t == nil {
		return nil
	}
	return t.PaypointId
}

func (t *TransferDetailRecord) GetTotalAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.TotalAmount
}

func (t *TransferDetailRecord) GetNetAmount() *Netamountnullable {
	if t == nil {
		return nil
	}
	return t.NetAmount
}

func (t *TransferDetailRecord) GetFeeAmount() *FeeAmount {
	if t == nil {
		return nil
	}
	return t.FeeAmount
}

func (t *TransferDetailRecord) GetSettlementStatus() *int {
	if t == nil {
		return nil
	}
	return t.SettlementStatus
}

func (t *TransferDetailRecord) GetOperation() *Operation {
	if t == nil {
		return nil
	}
	return t.Operation
}

func (t *TransferDetailRecord) GetResponseData() *QueryResponseData {
	if t == nil {
		return nil
	}
	return t.ResponseData
}

func (t *TransferDetailRecord) GetSource() *Source {
	if t == nil {
		return nil
	}
	return t.Source
}

func (t *TransferDetailRecord) GetScheduleReference() *int {
	if t == nil {
		return nil
	}
	return t.ScheduleReference
}

func (t *TransferDetailRecord) GetOrgId() *Orgid {
	if t == nil {
		return nil
	}
	return t.OrgId
}

func (t *TransferDetailRecord) GetRefundId() *RefundId {
	if t == nil {
		return nil
	}
	return t.RefundId
}

func (t *TransferDetailRecord) GetReturnedId() *ReturnedId {
	if t == nil {
		return nil
	}
	return t.ReturnedId
}

func (t *TransferDetailRecord) GetChargebackId() *ChargebackId {
	if t == nil {
		return nil
	}
	return t.ChargebackId
}

func (t *TransferDetailRecord) GetRetrievalId() *RetrievalId {
	if t == nil {
		return nil
	}
	return t.RetrievalId
}

func (t *TransferDetailRecord) GetTransAdditionalData() interface{} {
	if t == nil {
		return nil
	}
	return t.TransAdditionalData
}

func (t *TransferDetailRecord) GetInvoiceData() *BillData {
	if t == nil {
		return nil
	}
	return t.InvoiceData
}

func (t *TransferDetailRecord) GetEntrypageId() *EntrypageId {
	if t == nil {
		return nil
	}
	return t.EntrypageId
}

func (t *TransferDetailRecord) GetExternalPaypointId() *ExternalPaypointId {
	if t == nil {
		return nil
	}
	return t.ExternalPaypointId
}

func (t *TransferDetailRecord) GetIsValidatedAch() *bool {
	if t == nil {
		return nil
	}
	return t.IsValidatedAch
}

func (t *TransferDetailRecord) GetTransactionTime() *DatetimeNullable {
	if t == nil {
		return nil
	}
	return t.TransactionTime
}

func (t *TransferDetailRecord) GetCustomer() *QueryTransactionPayorData {
	if t == nil {
		return nil
	}
	return t.Customer
}

func (t *TransferDetailRecord) GetSplitFundingInstructions() *SplitFunding {
	if t == nil {
		return nil
	}
	return t.SplitFundingInstructions
}

func (t *TransferDetailRecord) GetCfeeTransactions() []*QueryCFeeTransaction {
	if t == nil {
		return nil
	}
	return t.CfeeTransactions
}

func (t *TransferDetailRecord) GetTransactionEvents() []*QueryTransactionEvents {
	if t == nil {
		return nil
	}
	return t.TransactionEvents
}

func (t *TransferDetailRecord) GetPendingFeeAmount() *PendingFeeAmount {
	if t == nil {
		return nil
	}
	return t.PendingFeeAmount
}

func (t *TransferDetailRecord) GetRiskFlagged() *RiskFlagged {
	if t == nil {
		return nil
	}
	return t.RiskFlagged
}

func (t *TransferDetailRecord) GetRiskFlaggedOn() *RiskFlaggedOn {
	if t == nil {
		return nil
	}
	return t.RiskFlaggedOn
}

func (t *TransferDetailRecord) GetRiskStatus() *RiskStatus {
	if t == nil {
		return nil
	}
	return t.RiskStatus
}

func (t *TransferDetailRecord) GetRiskReason() *RiskReason {
	if t == nil {
		return nil
	}
	return t.RiskReason
}

func (t *TransferDetailRecord) GetRiskAction() *RiskAction {
	if t == nil {
		return nil
	}
	return t.RiskAction
}

func (t *TransferDetailRecord) GetRiskActionCode() *RiskActionCode {
	if t == nil {
		return nil
	}
	return t.RiskActionCode
}

func (t *TransferDetailRecord) GetDeviceId() *DeviceId {
	if t == nil {
		return nil
	}
	return t.DeviceId
}

func (t *TransferDetailRecord) GetAchSecCode() *AchSecCode {
	if t == nil {
		return nil
	}
	return t.AchSecCode
}

func (t *TransferDetailRecord) GetAchHolderType() *AchHolderType {
	if t == nil {
		return nil
	}
	return t.AchHolderType
}

func (t *TransferDetailRecord) GetIpAddress() *IpAddress {
	if t == nil {
		return nil
	}
	return t.IpAddress
}

func (t *TransferDetailRecord) GetIsSameDayAch() *bool {
	if t == nil {
		return nil
	}
	return t.IsSameDayAch
}

func (t *TransferDetailRecord) GetWalletType() *string {
	if t == nil {
		return nil
	}
	return t.WalletType
}

func (t *TransferDetailRecord) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferDetailRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferDetailRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferDetailRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferDetailRecord) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Max number of records to return for the query. Use `0` or negative value to return all records. Defaults to 20.
type LimitRecord = *int

// The payout program to filter results by. If not specified, all payout programs are included.
//   - `Managed` returns only transactions from the Managed payout program.
//   - `ODP` returns transactions from the ODP (on-demand payouts) payout program.
type PayoutProgram = *string
